_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1014|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1014|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1014|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|  1.63M|{
 4124|  1.63M|    if constexpr (sizeof(U) == 1) {
 4125|  1.63M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|  1.63M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|  1.63M|{
 4088|  1.63M|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|  1.63M|    SCN_GCC_COMPAT_PUSH
 4091|  1.63M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|  1.63M|    constexpr char lengths[] =
 4093|  1.63M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|  1.63M|        "\1\1\1\1\1\1\1\1"
 4095|  1.63M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|  1.63M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|  1.63M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|  1.63M|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|  1.63M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|  1.63M|    SCN_GCC_COMPAT_POP
 4102|  1.63M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  1.46M|{
 4330|  1.46M|    if constexpr (sizeof(CharT) == 1) {
 4331|  1.46M|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  1.46M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  1.46M|{
 4143|  1.46M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  1.46M|    const auto is_trailing_code_unit = [](char ch) {
 4146|  1.46M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  1.46M|    };
 4148|       |
 4149|  1.46M|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 1.41M, False: 47.6k]
  ------------------
 4150|  1.41M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 474, False: 1.41M]
  ------------------
 4151|    474|            SCN_UNLIKELY_ATTR
 4152|    474|            return invalid_code_point;
 4153|    474|        }
 4154|  1.41M|        return static_cast<char32_t>(input[0]);
 4155|  1.41M|    }
 4156|       |
 4157|  47.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 40.6k, False: 6.93k]
  ------------------
 4158|  40.6k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 144, False: 40.5k]
  ------------------
 4159|    144|            SCN_UNLIKELY_ATTR
 4160|    144|            return invalid_code_point;
 4161|    144|        }
 4162|  40.5k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 8.65k, False: 31.8k]
  ------------------
 4163|  8.65k|            SCN_UNLIKELY_ATTR
 4164|  8.65k|            return invalid_code_point;
 4165|  8.65k|        }
 4166|       |
 4167|  31.8k|        char32_t cp{};
 4168|  31.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|  31.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|  31.8k|        return cp;
 4171|  40.5k|    }
 4172|       |
 4173|  6.93k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 4.47k, False: 2.45k]
  ------------------
 4174|  4.47k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 113, False: 4.36k]
  ------------------
 4175|    113|            SCN_UNLIKELY_ATTR
 4176|    113|            return invalid_code_point;
 4177|    113|        }
 4178|  4.36k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 1.40k, False: 2.95k]
  ------------------
 4179|  4.36k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 1.96k, False: 993]
  ------------------
 4180|  3.37k|            SCN_UNLIKELY_ATTR
 4181|  3.37k|            return invalid_code_point;
 4182|  3.37k|        }
 4183|       |
 4184|    993|        char32_t cp{};
 4185|    993|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|    993|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|    993|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|    993|        return cp;
 4189|  4.36k|    }
 4190|       |
 4191|  2.45k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 2.45k, False: 0]
  ------------------
 4192|  2.45k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 2.45k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  2.45k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 346, False: 2.11k]
  ------------------
 4197|    346|            SCN_UNLIKELY_ATTR
 4198|    346|            return invalid_code_point;
 4199|    346|        }
 4200|  2.11k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 558, False: 1.55k]
  ------------------
 4201|  2.11k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 561, False: 993]
  ------------------
 4202|  2.11k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 691, False: 302]
  ------------------
 4203|  1.81k|            SCN_UNLIKELY_ATTR
 4204|  1.81k|            return invalid_code_point;
 4205|  1.81k|        }
 4206|       |
 4207|    302|        char32_t cp{};
 4208|    302|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|    302|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|    302|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|    302|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|    302|        return cp;
 4213|  2.11k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|  52.5k|    const auto is_trailing_code_unit = [](char ch) {
 4146|  52.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  52.5k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  3.16M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  3.16M|    else {
 4022|  3.16M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  3.16M|                                       to_address(first), to_address(last)))};
 4024|  3.16M|    }
 4025|  3.16M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  9.68M|{
  341|  9.68M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  9.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  9.68M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  14.2M|{
  319|  14.2M|    return p;
  320|  14.2M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  4.82M|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  4.82M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  4.82M|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  4.82M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  4.82M|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  4.82M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  70.3k|    {
 2901|  70.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  70.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  70.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  70.3k|    {
 2882|  70.3k|        return decay_copy(t.begin());
 2883|  70.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  6.24M|{
 2126|  6.24M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  6.24M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.05M|    {
 2958|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.05M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.05M|    {
 2940|  1.05M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.05M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  76.8k|{
10005|  76.8k|    auto result = make_scan_result<Source, Args...>();
10006|  76.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  76.8k|                                   make_scan_args(result->values())));
10008|  76.8k|    return result;
10009|  76.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9960|   169k|{
 9961|   169k|    return scan_result_type<Source, Args...>();
 9962|   169k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   169k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   169k|        : m_value(T{}), m_has_value(true)
  460|   169k|    {
  461|   169k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6775|   169k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|   525k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|   525k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6549|   670k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   169k|{
 9946|   169k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 146k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   146k|    else {
 9950|   146k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   146k|    static_cast<    \
  |  | 1084|   146k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   146k|    }
 9952|   169k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|   525k|    {
 1772|   525k|        return has_value();
 1773|   525k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.05M|    {
  523|  1.05M|        return m_has_value;
  524|  1.05M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  68.6k|    {
 1778|  68.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  68.6k|        return this->get_unexpected().error();
 1780|  68.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  68.6k|    {
  506|  68.6k|        return m_unexpected;
  507|  68.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  10.2M|    {
  398|  10.2M|        return m_unexpected;
  399|  10.2M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|  2.68M|        : m_unexpected(std::forward<Err>(e))
  381|  2.68M|    {
  382|  2.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.68M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|  7.37M|        : m_unexpected(std::forward<Args>(args)...)
  392|  7.37M|    {
  393|  7.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  7.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  7.37M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   679k|    {
  523|   679k|        return m_has_value;
  524|   679k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   463k|    {
  489|   463k|        return m_value;
  490|   463k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   411k|{
  429|   411k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   411k|        T(std::forward<Args>(args)...);
  431|   411k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|   456k|    {
 6650|   456k|        m_range = std::forward<Other>(r);
 6651|   456k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   456k|    {
 1827|   456k|        return value();
 1828|   456k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   456k|    {
 1801|   456k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   456k|        return this->get_value();
 1803|   456k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   456k|    {
  489|   456k|        return m_value;
  490|   456k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|   237k|{
 9767|   237k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   237k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   237k|{
 9704|   237k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   237k|    auto result = vscan_impl(buffer, format, args);
 9707|   237k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 205k]
  |  |  ------------------
  ------------------
 9708|  31.6k|        return unexpected(result.error());
 9709|  31.6k|    }
 9710|   205k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   237k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|   525k|{
 5466|   525k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   525k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   525k|                  "\n"
 5470|   525k|                  "Unsupported range type given as input to a scanning "
 5471|   525k|                  "function.\n"
 5472|   525k|                  "A range needs to have a character type (value type) "
 5473|   525k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   525k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   525k|                  "to be included.\n"
 5476|   525k|                  "See the scnlib documentation for more details.");
 5477|   525k|    static_assert(
 5478|   525k|        !std::is_same_v<T, custom_char_traits>,
 5479|   525k|        "\n"
 5480|   525k|        "Unsupported range type given as input to a scanning "
 5481|   525k|        "function.\n"
 5482|   525k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   525k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   525k|        "not supported.");
 5485|   525k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   525k|                  "\n"
 5487|   525k|                  "Unsupported range type given as input to a scanning "
 5488|   525k|                  "function.\n"
 5489|   525k|                  "file_marker_found cannot be used as an "
 5490|   525k|                  "source range type to scn::scan.\n"
 5491|   525k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   525k|                  "and do not provide an explicit source range, "
 5493|   525k|                  "or use scn::scan with a FILE* directly.");
 5494|   525k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   525k|                  "\n"
 5496|   525k|                  "Unsupported range type given as input to a scanning "
 5497|   525k|                  "function.\n"
 5498|   525k|                  "In order to be scannable, a range needs to satisfy "
 5499|   525k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   525k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   525k|                  "\n"
 5502|   525k|                  "Unsupported range type given as input to a scanning "
 5503|   525k|                  "function.\n"
 5504|   525k|                  "A range needs to model forward_range and have a valid "
 5505|   525k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   525k|                  "Examples of scannable ranges are std::string, "
 5507|   525k|                  "std::string_view, "
 5508|   525k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   525k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   525k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   525k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   525k|{
 5404|   525k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   525k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   525k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   525k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   525k|    {
 3032|   525k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   525k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   525k|    {
 3013|   525k|        return t.data();
 3014|   525k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|   525k|    {
 3415|   525k|        return detail::to_address(ranges::begin(derived()));
 3416|   525k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  4.53M|{
  341|  4.53M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  4.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  4.53M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   981k|    {
 2901|   981k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   981k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   981k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   981k|    {
 2882|   981k|        return decay_copy(t.begin());
 2883|   981k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  13.3M|    {
 3513|  13.3M|        return m_iterator;
 3514|  13.3M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|   525k|    {
 3371|   525k|        return static_cast<const D&>(*this);
 3372|   525k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   525k|    {
 3107|   525k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   525k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   525k|    {
 3073|   525k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   525k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|  3.49M|{
 2126|  3.49M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  3.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  3.49M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  3.25M|    {
 3530|  3.25M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  3.25M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|  8.63M|    {
 1772|  8.63M|        return has_value();
 1773|  8.63M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  15.4M|    {
  523|  15.4M|        return m_has_value;
  524|  15.4M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   846k|    {
 1778|   846k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   846k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   846k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   846k|        return this->get_unexpected().error();
 1780|   846k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   846k|    {
  506|   846k|        return m_unexpected;
  507|   846k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  68.6k|        : base(unexpect, std::move(e.error())),
 1648|  68.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  68.6k|    {
 1650|  68.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  68.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  68.6k|          m_has_value(false)
  484|  68.6k|    {
  485|  68.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   525k|    {
 1348|   525k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   456k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   456k|                      ranges::iterator_t<SourceRange>>) {
 6882|   456k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   456k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  3.68M|    {
 2901|  3.68M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  3.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  3.68M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  3.68M|    {
 2882|  3.68M|        return decay_copy(t.begin());
 2883|  3.68M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|   456k|{
 6867|   456k|    return ranges::end(source);
 6868|   456k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   456k|    {
 2958|   456k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   456k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   456k|    {
 2940|   456k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   456k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  6.14M|    {
 3518|  6.14M|        return m_sentinel;
 3519|  6.14M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  2.57M|    {
 1827|  2.57M|        return value();
 1828|  2.57M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  5.98M|    {
 1801|  5.98M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  5.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  5.98M|        return this->get_value();
 1803|  5.98M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  5.98M|    {
  489|  5.98M|        return m_value;
  490|  5.98M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   456k|        : base(std::in_place, std::forward<U>(val)),
 1602|   456k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   456k|    {
 1604|   456k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   456k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   456k|    {
  475|   456k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   153k|    {
 8963|   153k|        return m_str;
 8964|   153k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   318k|{
 6275|   318k|    detail::check_scan_arg_types<Args...>();
 6276|   318k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   318k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5985|   670k|{
 5986|   670k|    constexpr bool default_constructible_constraint =
 5987|   670k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   670k|    static_assert(default_constructible_constraint,
 5989|   670k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   670k|    constexpr bool destructible_constraint =
 5992|   670k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   670k|    static_assert(destructible_constraint,
 5994|   670k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   670k|    constexpr bool non_reference_constraint =
 5997|   670k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   670k|    static_assert(non_reference_constraint,
 5999|   670k|                  "Scan argument types must not be references");
 6000|       |
 6001|   670k|    constexpr bool movable_constraint =
 6002|   670k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   670k|    static_assert(movable_constraint,
 6004|   670k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   670k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   670k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   670k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6250|   318k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   318k|    {
 6252|   318k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   318k|    {
 6260|   318k|        return {detail::make_arg<
 6261|   318k|            kind, Context,
 6262|   318k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   318k|                                 typename Context::char_type>::value>(args)...};
 6264|   318k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 6035|   318k|{
 6036|   318k|    return make_value<Context>(value).ref_value;
 6037|   318k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5970|   351k|{
 5971|   351k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   351k|                                  needs_context_tag>) {
 5975|   351k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   351k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5772|   351k|    {                                                                        \
 5773|   351k|        return val;                                                          \
 5774|   351k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5939|   670k|{
 5940|   670k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   670k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   670k|    constexpr bool scannable_char =
 5944|   670k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   670k|    static_assert(scannable_char,
 5946|   670k|                  "Cannot scan an argument of an unsupported character "
 5947|   670k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   670k|    constexpr bool scannable_const =
 5950|   670k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   670k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   670k|    constexpr bool scannable_disabled =
 5954|   670k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   670k|    static_assert(scannable_disabled,
 5956|   670k|                  "Cannot scan an argument that has been disabled by "
 5957|   670k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   670k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   670k|    static_assert(
 5961|   670k|        scannable,
 5962|   670k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   670k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   670k|    return arg_value{arg};
 5966|   670k|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5715|   670k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   670k|    {
 5717|   670k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6558|   610k|    {
 6559|   610k|        return m_values;
 6560|   610k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   318k|        : basic_scan_args(store.desc, store.args.data())
 6301|   318k|    {
 6302|   318k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|   984k|        : m_desc(desc), m_builtin_values(data)
 6353|   984k|    {
 6354|   984k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  5.30M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.30M|    static_cast<    \
  |  | 1084|  5.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.30M|    static_cast<    \
  |  | 1084|  5.30M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.30M|    {
 3498|  5.30M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   984k|{
 8640|   984k|    return s;
 8641|   984k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   984k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   153k|        : m_str(r.str)
 8958|   153k|    {
 8959|   153k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   169k|    {
 1772|   169k|        return has_value();
 1773|   169k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1846|   463k|    {
 1847|   463k|        return &value();
 1848|   463k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   463k|    {
 1801|   463k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   463k|        return this->get_value();
 1803|   463k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|   456k|    {
 6639|   456k|        return ranges::begin(m_range);
 6640|   456k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  76.8k|{
10074|  76.8k|    auto result = make_scan_result<Source, Args...>();
10075|  76.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  76.8k|                                   make_scan_args(result->values())));
10077|  76.8k|    return result;
10078|  76.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|   237k|{
 9785|   237k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   237k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   237k|{
 9720|   237k|#if !SCN_DISABLE_LOCALE
 9721|   237k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   237k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   237k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   237k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   237k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 205k]
  |  |  ------------------
  ------------------
 9728|  31.6k|        return unexpected(result.error());
 9729|  31.6k|    }
 9730|   205k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   237k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  16.0k|{
10115|  16.0k|    auto result = make_scan_result<Source, T>();
10116|  16.0k|    fill_scan_result(
10117|  16.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  16.0k|                            detail::make_arg<scan_context>(result->value())));
10119|  16.0k|    return result;
10120|  16.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  50.3k|{
 9798|  50.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  50.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  50.3k|{
 9744|  50.3k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  50.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  50.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.27k, False: 45.0k]
  |  |  ------------------
  ------------------
 9748|  5.27k|        return unexpected(result.error());
 9749|  5.27k|    }
 9750|  45.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  50.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 6020|  32.7k|{
 6021|  32.7k|    check_scan_arg_types<T>();
 6022|       |
 6023|  32.7k|    basic_scan_arg<Context> arg;
 6024|  32.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  32.7k|    arg.m_value = make_value<Context>(value);
 6026|  32.7k|    return arg;
 6027|  32.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|  1.08M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  2.11M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  60.2k|    {
 6581|  60.2k|        return std::get<0>(m_values);
 6582|  60.2k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  79.6k|{
10005|  79.6k|    auto result = make_scan_result<Source, Args...>();
10006|  79.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  79.6k|                                   make_scan_args(result->values())));
10008|  79.6k|    return result;
10009|  79.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9960|   176k|{
 9961|   176k|    return scan_result_type<Source, Args...>();
 9962|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   176k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   176k|        : m_value(T{}), m_has_value(true)
  460|   176k|    {
  461|   176k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6775|   176k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6549|   715k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   176k|{
 9946|   176k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 153k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   153k|    else {
 9950|   153k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   153k|    static_cast<    \
  |  | 1084|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   153k|    }
 9952|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   704k|    {
  523|   704k|        return m_has_value;
  524|   704k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   482k|    {
  489|   482k|        return m_value;
  490|   482k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   159k|    {
 8963|   159k|        return m_str;
 8964|   159k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   330k|{
 6275|   330k|    detail::check_scan_arg_types<Args...>();
 6276|   330k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   330k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5985|   715k|{
 5986|   715k|    constexpr bool default_constructible_constraint =
 5987|   715k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   715k|    static_assert(default_constructible_constraint,
 5989|   715k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   715k|    constexpr bool destructible_constraint =
 5992|   715k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   715k|    static_assert(destructible_constraint,
 5994|   715k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   715k|    constexpr bool non_reference_constraint =
 5997|   715k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   715k|    static_assert(non_reference_constraint,
 5999|   715k|                  "Scan argument types must not be references");
 6000|       |
 6001|   715k|    constexpr bool movable_constraint =
 6002|   715k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   715k|    static_assert(movable_constraint,
 6004|   715k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   715k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   715k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   715k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|   330k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   330k|    {
 6252|   330k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   330k|    {
 6260|   330k|        return {detail::make_arg<
 6261|   330k|            kind, Context,
 6262|   330k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   330k|                                 typename Context::char_type>::value>(args)...};
 6264|   330k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|   330k|{
 6036|   330k|    return make_value<Context>(value).ref_value;
 6037|   330k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5970|   364k|{
 5971|   364k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   364k|                                  needs_context_tag>) {
 5975|   364k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   364k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5772|   364k|    {                                                                        \
 5773|   364k|        return val;                                                          \
 5774|   364k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5939|   715k|{
 5940|   715k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   715k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   715k|    constexpr bool scannable_char =
 5944|   715k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   715k|    static_assert(scannable_char,
 5946|   715k|                  "Cannot scan an argument of an unsupported character "
 5947|   715k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   715k|    constexpr bool scannable_const =
 5950|   715k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   715k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   715k|    constexpr bool scannable_disabled =
 5954|   715k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   715k|    static_assert(scannable_disabled,
 5956|   715k|                  "Cannot scan an argument that has been disabled by "
 5957|   715k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   715k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   715k|    static_assert(
 5961|   715k|        scannable,
 5962|   715k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   715k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   715k|    return arg_value{arg};
 5966|   715k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5715|   715k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   715k|    {
 5717|   715k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6558|   648k|    {
 6559|   648k|        return m_values;
 6560|   648k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   330k|        : basic_scan_args(store.desc, store.args.data())
 6301|   330k|    {
 6302|   330k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   159k|        : m_str(r.str)
 8958|   159k|    {
 8959|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   176k|    {
 1772|   176k|        return has_value();
 1773|   176k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|   482k|    {
 1847|   482k|        return &value();
 1848|   482k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   482k|    {
 1801|   482k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   482k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   482k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   482k|        return this->get_value();
 1803|   482k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  79.6k|{
10074|  79.6k|    auto result = make_scan_result<Source, Args...>();
10075|  79.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  79.6k|                                   make_scan_args(result->values())));
10077|  79.6k|    return result;
10078|  79.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  16.9k|{
10115|  16.9k|    auto result = make_scan_result<Source, T>();
10116|  16.9k|    fill_scan_result(
10117|  16.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  16.9k|                            detail::make_arg<scan_context>(result->value())));
10119|  16.9k|    return result;
10120|  16.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 6020|  34.2k|{
 6021|  34.2k|    check_scan_arg_types<T>();
 6022|       |
 6023|  34.2k|    basic_scan_arg<Context> arg;
 6024|  34.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  34.2k|    arg.m_value = make_value<Context>(value);
 6026|  34.2k|    return arg;
 6027|  34.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  66.2k|    {
 6581|  66.2k|        return std::get<0>(m_values);
 6582|  66.2k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
10004|  80.9k|{
10005|  80.9k|    auto result = make_scan_result<Source, Args...>();
10006|  80.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  80.9k|                                   make_scan_args(result->values())));
10008|  80.9k|    return result;
10009|  80.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9960|   179k|{
 9961|   179k|    return scan_result_type<Source, Args...>();
 9962|   179k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   179k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   179k|        : m_value(T{}), m_has_value(true)
  460|   179k|    {
  461|   179k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6775|   179k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6549|   731k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   179k|{
 9946|   179k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 156k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   156k|    else {
 9950|   156k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   156k|    static_cast<    \
  |  | 1084|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   156k|    }
 9952|   179k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   716k|    {
  523|   716k|        return m_has_value;
  524|   716k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   491k|    {
  489|   491k|        return m_value;
  490|   491k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8962|   161k|    {
 8963|   161k|        return m_str;
 8964|   161k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   335k|{
 6275|   335k|    detail::check_scan_arg_types<Args...>();
 6276|   335k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   335k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5985|   731k|{
 5986|   731k|    constexpr bool default_constructible_constraint =
 5987|   731k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   731k|    static_assert(default_constructible_constraint,
 5989|   731k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   731k|    constexpr bool destructible_constraint =
 5992|   731k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   731k|    static_assert(destructible_constraint,
 5994|   731k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   731k|    constexpr bool non_reference_constraint =
 5997|   731k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   731k|    static_assert(non_reference_constraint,
 5999|   731k|                  "Scan argument types must not be references");
 6000|       |
 6001|   731k|    constexpr bool movable_constraint =
 6002|   731k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   731k|    static_assert(movable_constraint,
 6004|   731k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   731k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   731k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   731k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6250|   335k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   335k|    {
 6252|   335k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   335k|    {
 6260|   335k|        return {detail::make_arg<
 6261|   335k|            kind, Context,
 6262|   335k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   335k|                                 typename Context::char_type>::value>(args)...};
 6264|   335k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 6035|   335k|{
 6036|   335k|    return make_value<Context>(value).ref_value;
 6037|   335k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5970|   370k|{
 5971|   370k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   370k|                                  needs_context_tag>) {
 5975|   370k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   370k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5772|   370k|    {                                                                        \
 5773|   370k|        return val;                                                          \
 5774|   370k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5939|   731k|{
 5940|   731k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   731k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   731k|    constexpr bool scannable_char =
 5944|   731k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   731k|    static_assert(scannable_char,
 5946|   731k|                  "Cannot scan an argument of an unsupported character "
 5947|   731k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   731k|    constexpr bool scannable_const =
 5950|   731k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   731k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   731k|    constexpr bool scannable_disabled =
 5954|   731k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   731k|    static_assert(scannable_disabled,
 5956|   731k|                  "Cannot scan an argument that has been disabled by "
 5957|   731k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   731k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   731k|    static_assert(
 5961|   731k|        scannable,
 5962|   731k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   731k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   731k|    return arg_value{arg};
 5966|   731k|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5715|   731k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   731k|    {
 5717|   731k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6558|   663k|    {
 6559|   663k|        return m_values;
 6560|   663k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   335k|        : basic_scan_args(store.desc, store.args.data())
 6301|   335k|    {
 6302|   335k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   161k|        : m_str(r.str)
 8958|   161k|    {
 8959|   161k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   179k|    {
 1772|   179k|        return has_value();
 1773|   179k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1846|   491k|    {
 1847|   491k|        return &value();
 1848|   491k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   491k|    {
 1801|   491k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   491k|        return this->get_value();
 1803|   491k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
10073|  80.9k|{
10074|  80.9k|    auto result = make_scan_result<Source, Args...>();
10075|  80.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  80.9k|                                   make_scan_args(result->values())));
10077|  80.9k|    return result;
10078|  80.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10114|  17.3k|{
10115|  17.3k|    auto result = make_scan_result<Source, T>();
10116|  17.3k|    fill_scan_result(
10117|  17.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.3k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.3k|    return result;
10120|  17.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 6020|  35.0k|{
 6021|  35.0k|    check_scan_arg_types<T>();
 6022|       |
 6023|  35.0k|    basic_scan_arg<Context> arg;
 6024|  35.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  35.0k|    arg.m_value = make_value<Context>(value);
 6026|  35.0k|    return arg;
 6027|  35.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  68.4k|    {
 6581|  68.4k|        return std::get<0>(m_values);
 6582|  68.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  68.6k|    {
 2901|  68.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  68.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  68.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  68.6k|    {
 2882|  68.6k|        return decay_copy(t.begin());
 2883|  68.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  18.4M|{
 2126|  18.4M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  18.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  18.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.12M|    {
 2958|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.12M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.12M|    {
 2940|  1.12M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.12M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  82.3k|{
10005|  82.3k|    auto result = make_scan_result<Source, Args...>();
10006|  82.3k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  82.3k|                                   make_scan_args(result->values())));
10008|  82.3k|    return result;
10009|  82.3k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9960|   181k|{
 9961|   181k|    return scan_result_type<Source, Args...>();
 9962|   181k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   181k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   181k|        : m_value(T{}), m_has_value(true)
  460|   181k|    {
  461|   181k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6775|   181k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   561k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   561k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   181k|{
 9946|   181k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 158k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   158k|    else {
 9950|   158k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   158k|    static_cast<    \
  |  | 1084|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   158k|    }
 9952|   181k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   561k|    {
 1772|   561k|        return has_value();
 1773|   561k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.12M|    {
  523|  1.12M|        return m_has_value;
  524|  1.12M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  68.6k|    {
 1778|  68.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  68.6k|        return this->get_unexpected().error();
 1780|  68.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  68.6k|    {
  506|  68.6k|        return m_unexpected;
  507|  68.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   725k|    {
  523|   725k|        return m_has_value;
  524|   725k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   498k|    {
  489|   498k|        return m_value;
  490|   498k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   492k|    {
 6650|   492k|        m_range = std::forward<Other>(r);
 6651|   492k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   492k|    {
 1827|   492k|        return value();
 1828|   492k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   492k|    {
 1801|   492k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   492k|        return this->get_value();
 1803|   492k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   492k|    {
  489|   492k|        return m_value;
  490|   492k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|   254k|{
 9767|   254k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|   254k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   254k|{
 9704|   254k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   254k|    auto result = vscan_impl(buffer, format, args);
 9707|   254k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 223k]
  |  |  ------------------
  ------------------
 9708|  31.6k|        return unexpected(result.error());
 9709|  31.6k|    }
 9710|   223k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   254k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   561k|{
 5466|   561k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   561k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   561k|                  "\n"
 5470|   561k|                  "Unsupported range type given as input to a scanning "
 5471|   561k|                  "function.\n"
 5472|   561k|                  "A range needs to have a character type (value type) "
 5473|   561k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   561k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   561k|                  "to be included.\n"
 5476|   561k|                  "See the scnlib documentation for more details.");
 5477|   561k|    static_assert(
 5478|   561k|        !std::is_same_v<T, custom_char_traits>,
 5479|   561k|        "\n"
 5480|   561k|        "Unsupported range type given as input to a scanning "
 5481|   561k|        "function.\n"
 5482|   561k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   561k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   561k|        "not supported.");
 5485|   561k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   561k|                  "\n"
 5487|   561k|                  "Unsupported range type given as input to a scanning "
 5488|   561k|                  "function.\n"
 5489|   561k|                  "file_marker_found cannot be used as an "
 5490|   561k|                  "source range type to scn::scan.\n"
 5491|   561k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   561k|                  "and do not provide an explicit source range, "
 5493|   561k|                  "or use scn::scan with a FILE* directly.");
 5494|   561k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   561k|                  "\n"
 5496|   561k|                  "Unsupported range type given as input to a scanning "
 5497|   561k|                  "function.\n"
 5498|   561k|                  "In order to be scannable, a range needs to satisfy "
 5499|   561k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   561k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   561k|                  "\n"
 5502|   561k|                  "Unsupported range type given as input to a scanning "
 5503|   561k|                  "function.\n"
 5504|   561k|                  "A range needs to model forward_range and have a valid "
 5505|   561k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   561k|                  "Examples of scannable ranges are std::string, "
 5507|   561k|                  "std::string_view, "
 5508|   561k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   561k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   561k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   561k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   561k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   561k|    else {
 5451|   561k|        return make_forward_scan_buffer(r);
 5452|   561k|    }
 5453|   561k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   561k|{
 5269|   561k|    return basic_scan_forward_buffer_impl(range);
 5270|   561k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   561k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   561k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   561k|          m_cursor(ranges::begin(*m_range))
 4830|   561k|    {
 4831|   561k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   561k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   561k|    {
 4802|   561k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   561k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   561k|    {
 4493|   561k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   561k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.05M|    {
 2901|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.05M|    {
 2882|  1.05M|        return decay_copy(t.begin());
 2883|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|  1.54M|    {
 3513|  1.54M|        return m_iterator;
 3514|  1.54M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|  5.20M|    {
 4835|  5.20M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 181k, False: 5.01M]
  ------------------
 4836|   181k|            return false;
 4837|   181k|        }
 4838|  5.01M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  5.01M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  5.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  5.01M|        }
 4841|  5.01M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 4.46M, False: 553k]
  ------------------
 4842|  4.46M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  4.46M|                                          this->m_current_view.begin(),
 4844|  4.46M|                                          this->m_current_view.end());
 4845|  4.46M|        }
 4846|  5.01M|        m_latest = *m_cursor;
 4847|  5.01M|        ++m_cursor;
 4848|  5.01M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  5.01M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  5.01M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  5.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  5.01M|        }
 4852|  5.01M|        return true;
 4853|  5.20M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  15.2M|    {
 2958|  15.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  15.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  15.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  15.2M|    {
 2940|  15.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  15.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  15.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  15.7M|    {
 3518|  15.7M|        return m_sentinel;
 3519|  15.7M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   561k|    {
 4402|   561k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   561k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   561k|        return true;
 4404|   561k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  68.6k|        : base(unexpect, std::move(e.error())),
 1648|  68.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  68.6k|    {
 1650|  68.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  68.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  68.6k|          m_has_value(false)
  484|  68.6k|    {
  485|  68.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   561k|    {
 1348|   561k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   492k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   492k|                      ranges::iterator_t<SourceRange>>) {
 6882|   492k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   492k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   492k|    {
 2901|   492k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   492k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   492k|    {
 2882|   492k|        return decay_copy(t.begin());
 2883|   492k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|   492k|{
 6867|   492k|    return ranges::end(source);
 6868|   492k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   492k|    {
 2958|   492k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   492k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   492k|    {
 2940|   492k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   492k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   492k|        : base(std::in_place, std::forward<U>(val)),
 1602|   492k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   492k|    {
 1604|   492k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   492k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   492k|    {
  475|   492k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   164k|    {
 8963|   164k|        return m_str;
 8964|   164k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|  1.05M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.05M|    static_cast<    \
  |  | 1084|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.05M|    static_cast<    \
  |  | 1084|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.05M|    {
 3498|  1.05M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   164k|        : m_str(r.str)
 8958|   164k|    {
 8959|   164k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   181k|    {
 1772|   181k|        return has_value();
 1773|   181k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1846|   498k|    {
 1847|   498k|        return &value();
 1848|   498k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   498k|    {
 1801|   498k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   498k|        return this->get_value();
 1803|   498k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|   492k|    {
 6639|   492k|        return ranges::begin(m_range);
 6640|   492k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  82.3k|{
10074|  82.3k|    auto result = make_scan_result<Source, Args...>();
10075|  82.3k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  82.3k|                                   make_scan_args(result->values())));
10077|  82.3k|    return result;
10078|  82.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|   254k|{
 9785|   254k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|   254k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   254k|{
 9720|   254k|#if !SCN_DISABLE_LOCALE
 9721|   254k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   254k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   254k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   254k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   254k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 31.6k, False: 223k]
  |  |  ------------------
  ------------------
 9728|  31.6k|        return unexpected(result.error());
 9729|  31.6k|    }
 9730|   223k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   254k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  16.6k|{
10115|  16.6k|    auto result = make_scan_result<Source, T>();
10116|  16.6k|    fill_scan_result(
10117|  16.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  16.6k|                            detail::make_arg<scan_context>(result->value())));
10119|  16.6k|    return result;
10120|  16.6k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  51.6k|{
 9798|  51.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  51.6k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  51.6k|{
 9744|  51.6k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  51.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  51.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.27k, False: 46.3k]
  |  |  ------------------
  ------------------
 9748|  5.27k|        return unexpected(result.error());
 9749|  5.27k|    }
 9750|  46.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  51.6k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  85.5k|{
10005|  85.5k|    auto result = make_scan_result<Source, Args...>();
10006|  85.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  85.5k|                                   make_scan_args(result->values())));
10008|  85.5k|    return result;
10009|  85.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9960|   188k|{
 9961|   188k|    return scan_result_type<Source, Args...>();
 9962|   188k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   188k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   188k|        : m_value(T{}), m_has_value(true)
  460|   188k|    {
  461|   188k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6775|   188k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   188k|{
 9946|   188k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 165k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   165k|    else {
 9950|   165k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   165k|    static_cast<    \
  |  | 1084|   165k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   165k|    }
 9952|   188k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   753k|    {
  523|   753k|        return m_has_value;
  524|   753k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   519k|    {
  489|   519k|        return m_value;
  490|   519k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   171k|    {
 8963|   171k|        return m_str;
 8964|   171k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   171k|        : m_str(r.str)
 8958|   171k|    {
 8959|   171k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   188k|    {
 1772|   188k|        return has_value();
 1773|   188k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1846|   519k|    {
 1847|   519k|        return &value();
 1848|   519k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   519k|    {
 1801|   519k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   519k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   519k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   519k|        return this->get_value();
 1803|   519k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  85.5k|{
10074|  85.5k|    auto result = make_scan_result<Source, Args...>();
10075|  85.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  85.5k|                                   make_scan_args(result->values())));
10077|  85.5k|    return result;
10078|  85.5k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  17.3k|{
10115|  17.3k|    auto result = make_scan_result<Source, T>();
10116|  17.3k|    fill_scan_result(
10117|  17.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.3k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.3k|    return result;
10120|  17.3k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
10004|  86.9k|{
10005|  86.9k|    auto result = make_scan_result<Source, Args...>();
10006|  86.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  86.9k|                                   make_scan_args(result->values())));
10008|  86.9k|    return result;
10009|  86.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9960|   191k|{
 9961|   191k|    return scan_result_type<Source, Args...>();
 9962|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   191k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   191k|        : m_value(T{}), m_has_value(true)
  460|   191k|    {
  461|   191k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6775|   191k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   191k|{
 9946|   191k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 22.8k, False: 168k]
  |  |  ------------------
  ------------------
 9947|  22.8k|        out = unexpected(in.error());
 9948|  22.8k|    }
 9949|   168k|    else {
 9950|   168k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   168k|    static_cast<    \
  |  | 1084|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   168k|    }
 9952|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  22.8k|        : base(unexpect, std::move(e.error())),
 1648|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  22.8k|    {
 1650|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  22.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  22.8k|          m_has_value(false)
  484|  22.8k|    {
  485|  22.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  22.8k|    {
 1348|  22.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1588|  22.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  934|  22.8k|    {
  935|  22.8k|        assign_common(std::move(other));
  936|  22.8k|        return *this;
  937|  22.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  22.8k|    {
  982|  22.8k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 22.8k, False: 0]
  ------------------
  983|  22.8k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 22.8k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  22.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  22.8k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   765k|    {
  523|   765k|        return m_has_value;
  524|   765k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   528k|    {
  489|   528k|        return m_value;
  490|   528k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  22.8k|    {
 1078|  22.8k|        this->destroy_value();
 1079|  22.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  22.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  22.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  22.8k|    {
  537|  22.8k|        scn::detail::construct_at(&get_unexpected(),
  538|  22.8k|                                  std::forward<Args>(args)...);
  539|  22.8k|        m_has_value = false;
  540|  22.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  22.8k|    {
  506|  22.8k|        return m_unexpected;
  507|  22.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  22.8k|    {
  514|  22.8k|        return std::move(m_unexpected);
  515|  22.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8962|   173k|    {
 8963|   173k|        return m_str;
 8964|   173k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   173k|        : m_str(r.str)
 8958|   173k|    {
 8959|   173k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   191k|    {
 1772|   191k|        return has_value();
 1773|   191k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1846|   528k|    {
 1847|   528k|        return &value();
 1848|   528k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   528k|    {
 1801|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   528k|        return this->get_value();
 1803|   528k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
10073|  86.9k|{
10074|  86.9k|    auto result = make_scan_result<Source, Args...>();
10075|  86.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  86.9k|                                   make_scan_args(result->values())));
10077|  86.9k|    return result;
10078|  86.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10114|  17.6k|{
10115|  17.6k|    auto result = make_scan_result<Source, T>();
10116|  17.6k|    fill_scan_result(
10117|  17.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  17.6k|                            detail::make_arg<scan_context>(result->value())));
10119|  17.6k|    return result;
10120|  17.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   140k|    {
 2901|   140k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   140k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   140k|    {
 2882|   140k|        return decay_copy(t.begin());
 2883|   140k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  4.20M|{
 2126|  4.20M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  4.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  4.20M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.03M|    {
 2958|  1.03M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.03M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.03M|    {
 2940|  1.03M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.03M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9960|   159k|{
 9961|   159k|    return scan_result_type<Source, Args...>();
 9962|   159k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   159k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   159k|        : m_value(T{}), m_has_value(true)
  460|   159k|    {
  461|   159k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6775|   159k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|   515k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|   515k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   159k|{
 9946|   159k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 114k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   114k|    else {
 9950|   114k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   114k|    static_cast<    \
  |  | 1084|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   114k|    }
 9952|   159k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|   515k|    {
 1772|   515k|        return has_value();
 1773|   515k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.03M|    {
  523|  1.03M|        return m_has_value;
  524|  1.03M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|   137k|    {
 1778|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   137k|        return this->get_unexpected().error();
 1780|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   137k|    {
  506|   137k|        return m_unexpected;
  507|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   639k|    {
  523|   639k|        return m_has_value;
  524|   639k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   387k|    {
  489|   387k|        return m_value;
  490|   387k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|   378k|    {
 6650|   378k|        m_range = std::forward<Other>(r);
 6651|   378k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   378k|    {
 1827|   378k|        return value();
 1828|   378k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   378k|    {
 1801|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   378k|        return this->get_value();
 1803|   378k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   378k|    {
  489|   378k|        return m_value;
  490|   378k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   234k|{
 9704|   234k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   234k|    auto result = vscan_impl(buffer, format, args);
 9707|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 171k]
  |  |  ------------------
  ------------------
 9708|  63.3k|        return unexpected(result.error());
 9709|  63.3k|    }
 9710|   171k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   234k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|   515k|{
 5466|   515k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   515k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   515k|                  "\n"
 5470|   515k|                  "Unsupported range type given as input to a scanning "
 5471|   515k|                  "function.\n"
 5472|   515k|                  "A range needs to have a character type (value type) "
 5473|   515k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   515k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   515k|                  "to be included.\n"
 5476|   515k|                  "See the scnlib documentation for more details.");
 5477|   515k|    static_assert(
 5478|   515k|        !std::is_same_v<T, custom_char_traits>,
 5479|   515k|        "\n"
 5480|   515k|        "Unsupported range type given as input to a scanning "
 5481|   515k|        "function.\n"
 5482|   515k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   515k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   515k|        "not supported.");
 5485|   515k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   515k|                  "\n"
 5487|   515k|                  "Unsupported range type given as input to a scanning "
 5488|   515k|                  "function.\n"
 5489|   515k|                  "file_marker_found cannot be used as an "
 5490|   515k|                  "source range type to scn::scan.\n"
 5491|   515k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   515k|                  "and do not provide an explicit source range, "
 5493|   515k|                  "or use scn::scan with a FILE* directly.");
 5494|   515k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   515k|                  "\n"
 5496|   515k|                  "Unsupported range type given as input to a scanning "
 5497|   515k|                  "function.\n"
 5498|   515k|                  "In order to be scannable, a range needs to satisfy "
 5499|   515k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   515k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   515k|                  "\n"
 5502|   515k|                  "Unsupported range type given as input to a scanning "
 5503|   515k|                  "function.\n"
 5504|   515k|                  "A range needs to model forward_range and have a valid "
 5505|   515k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   515k|                  "Examples of scannable ranges are std::string, "
 5507|   515k|                  "std::string_view, "
 5508|   515k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   515k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   515k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   515k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   515k|{
 5404|   515k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   515k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   515k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   515k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   515k|    {
 3032|   515k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   515k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   515k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   515k|    {
 3013|   515k|        return t.data();
 3014|   515k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|   515k|    {
 3415|   515k|        return detail::to_address(ranges::begin(derived()));
 3416|   515k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  2.47M|{
  341|  2.47M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  2.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  2.47M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  2.47M|{
  319|  2.47M|    return p;
  320|  2.47M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   893k|    {
 2901|   893k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   893k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   893k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   893k|    {
 2882|   893k|        return decay_copy(t.begin());
 2883|   893k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|  21.4M|    {
 3513|  21.4M|        return m_iterator;
 3514|  21.4M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|   515k|    {
 3371|   515k|        return static_cast<const D&>(*this);
 3372|   515k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   515k|    {
 3107|   515k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   515k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   515k|    {
 3073|   515k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   515k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   515k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  2.69M|    {
 3530|  2.69M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  2.69M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|   137k|        : base(unexpect, std::move(e.error())),
 1648|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   137k|    {
 1650|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   137k|          m_has_value(false)
  484|   137k|    {
  485|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   515k|    {
 1348|   515k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   378k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   378k|                      ranges::iterator_t<SourceRange>>) {
 6882|   378k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   378k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.76M|    {
 2901|  1.76M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.76M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.76M|    {
 2882|  1.76M|        return decay_copy(t.begin());
 2883|  1.76M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|   378k|{
 6867|   378k|    return ranges::end(source);
 6868|   378k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   378k|    {
 2958|   378k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   378k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   378k|    {
 2940|   378k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   378k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|  12.8M|    {
 3518|  12.8M|        return m_sentinel;
 3519|  12.8M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   378k|        : base(std::in_place, std::forward<U>(val)),
 1602|   378k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   378k|    {
 1604|   378k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   378k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   378k|    {
  475|   378k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   145k|    {
 8963|   145k|        return m_str;
 8964|   145k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   291k|{
 6275|   291k|    detail::check_scan_arg_types<Args...>();
 6276|   291k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   291k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6250|   291k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   291k|    {
 6252|   291k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   291k|    {
 6260|   291k|        return {detail::make_arg<
 6261|   291k|            kind, Context,
 6262|   291k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   291k|                                 typename Context::char_type>::value>(args)...};
 6264|   291k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 6035|   291k|{
 6036|   291k|    return make_value<Context>(value).ref_value;
 6037|   291k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5970|   319k|{
 5971|   319k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   319k|                                  needs_context_tag>) {
 5975|   319k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   319k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5772|   319k|    {                                                                        \
 5773|   319k|        return val;                                                          \
 5774|   319k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   291k|        : basic_scan_args(store.desc, store.args.data())
 6301|   291k|    {
 6302|   291k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|   937k|        : m_desc(desc), m_builtin_values(data)
 6353|   937k|    {
 6354|   937k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  7.98M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.98M|    static_cast<    \
  |  | 1084|  7.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  7.98M|    static_cast<    \
  |  | 1084|  7.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  7.98M|    {
 3498|  7.98M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|   937k|{
 8645|   937k|    return s;
 8646|   937k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|   937k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   145k|        : m_str(r.str)
 8958|   145k|    {
 8959|   145k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   159k|    {
 1772|   159k|        return has_value();
 1773|   159k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1846|   387k|    {
 1847|   387k|        return &value();
 1848|   387k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   387k|    {
 1801|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   387k|        return this->get_value();
 1803|   387k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|   378k|    {
 6639|   378k|        return ranges::begin(m_range);
 6640|   378k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   234k|{
 9720|   234k|#if !SCN_DISABLE_LOCALE
 9721|   234k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   234k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   234k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   234k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 171k]
  |  |  ------------------
  ------------------
 9728|  63.3k|        return unexpected(result.error());
 9729|  63.3k|    }
 9730|   171k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   234k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  46.4k|{
 9744|  46.4k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  46.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  46.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.5k, False: 35.9k]
  |  |  ------------------
  ------------------
 9748|  10.5k|        return unexpected(result.error());
 9749|  10.5k|    }
 9750|  35.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  46.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 6020|  27.5k|{
 6021|  27.5k|    check_scan_arg_types<T>();
 6022|       |
 6023|  27.5k|    basic_scan_arg<Context> arg;
 6024|  27.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  27.5k|    arg.m_value = make_value<Context>(value);
 6026|  27.5k|    return arg;
 6027|  27.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|  1.03M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9960|   175k|{
 9961|   175k|    return scan_result_type<Source, Args...>();
 9962|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   175k|        : m_value(T{}), m_has_value(true)
  460|   175k|    {
  461|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6775|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   175k|{
 9946|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 129k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   129k|    else {
 9950|   129k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   129k|    static_cast<    \
  |  | 1084|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   129k|    }
 9952|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   700k|    {
  523|   700k|        return m_has_value;
  524|   700k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   434k|    {
  489|   434k|        return m_value;
  490|   434k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   159k|    {
 8963|   159k|        return m_str;
 8964|   159k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   318k|{
 6275|   318k|    detail::check_scan_arg_types<Args...>();
 6276|   318k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   318k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6250|   318k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   318k|    {
 6252|   318k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   318k|    {
 6260|   318k|        return {detail::make_arg<
 6261|   318k|            kind, Context,
 6262|   318k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   318k|                                 typename Context::char_type>::value>(args)...};
 6264|   318k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 6035|   318k|{
 6036|   318k|    return make_value<Context>(value).ref_value;
 6037|   318k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5970|   350k|{
 5971|   350k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   350k|                                  needs_context_tag>) {
 5975|   350k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   350k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5772|   350k|    {                                                                        \
 5773|   350k|        return val;                                                          \
 5774|   350k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   318k|        : basic_scan_args(store.desc, store.args.data())
 6301|   318k|    {
 6302|   318k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   159k|        : m_str(r.str)
 8958|   159k|    {
 8959|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   175k|    {
 1772|   175k|        return has_value();
 1773|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1846|   434k|    {
 1847|   434k|        return &value();
 1848|   434k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   434k|    {
 1801|   434k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   434k|        return this->get_value();
 1803|   434k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 6020|  31.9k|{
 6021|  31.9k|    check_scan_arg_types<T>();
 6022|       |
 6023|  31.9k|    basic_scan_arg<Context> arg;
 6024|  31.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  31.9k|    arg.m_value = make_value<Context>(value);
 6026|  31.9k|    return arg;
 6027|  31.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9960|   180k|{
 9961|   180k|    return scan_result_type<Source, Args...>();
 9962|   180k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   180k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   180k|        : m_value(T{}), m_has_value(true)
  460|   180k|    {
  461|   180k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6775|   180k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9945|   180k|{
 9946|   180k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 134k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   134k|    else {
 9950|   134k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   134k|    static_cast<    \
  |  | 1084|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   134k|    }
 9952|   180k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   722k|    {
  523|   722k|        return m_has_value;
  524|   722k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   450k|    {
  489|   450k|        return m_value;
  490|   450k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8962|   163k|    {
 8963|   163k|        return m_str;
 8964|   163k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6274|   327k|{
 6275|   327k|    detail::check_scan_arg_types<Args...>();
 6276|   327k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   327k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6250|   327k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   327k|    {
 6252|   327k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6259|   327k|    {
 6260|   327k|        return {detail::make_arg<
 6261|   327k|            kind, Context,
 6262|   327k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   327k|                                 typename Context::char_type>::value>(args)...};
 6264|   327k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 6035|   327k|{
 6036|   327k|    return make_value<Context>(value).ref_value;
 6037|   327k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5970|   360k|{
 5971|   360k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   360k|                                  needs_context_tag>) {
 5975|   360k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   360k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5772|   360k|    {                                                                        \
 5773|   360k|        return val;                                                          \
 5774|   360k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   327k|        : basic_scan_args(store.desc, store.args.data())
 6301|   327k|    {
 6302|   327k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   163k|        : m_str(r.str)
 8958|   163k|    {
 8959|   163k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   180k|    {
 1772|   180k|        return has_value();
 1773|   180k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1846|   450k|    {
 1847|   450k|        return &value();
 1848|   450k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1800|   450k|    {
 1801|   450k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   450k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   450k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   450k|        return this->get_value();
 1803|   450k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 6020|  33.4k|{
 6021|  33.4k|    check_scan_arg_types<T>();
 6022|       |
 6023|  33.4k|    basic_scan_arg<Context> arg;
 6024|  33.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  33.4k|    arg.m_value = make_value<Context>(value);
 6026|  33.4k|    return arg;
 6027|  33.4k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   137k|    {
 2901|   137k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   137k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   137k|    {
 2882|   137k|        return decay_copy(t.begin());
 2883|   137k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|  10.3M|{
 2126|  10.3M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  10.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  10.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.03M|    {
 2958|  1.03M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.03M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.03M|    {
 2940|  1.03M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.03M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9960|   159k|{
 9961|   159k|    return scan_result_type<Source, Args...>();
 9962|   159k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1583|   159k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  459|   159k|        : m_value(T{}), m_has_value(true)
  460|   159k|    {
  461|   159k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6775|   159k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   515k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   515k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   159k|{
 9946|   159k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 113k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   113k|    else {
 9950|   113k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   113k|    static_cast<    \
  |  | 1084|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   113k|    }
 9952|   159k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   515k|    {
 1772|   515k|        return has_value();
 1773|   515k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.03M|    {
  523|  1.03M|        return m_has_value;
  524|  1.03M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|   137k|    {
 1778|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   137k|        return this->get_unexpected().error();
 1780|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   137k|    {
  506|   137k|        return m_unexpected;
  507|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   638k|    {
  523|   638k|        return m_has_value;
  524|   638k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   387k|    {
  489|   387k|        return m_value;
  490|   387k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   378k|    {
 6650|   378k|        m_range = std::forward<Other>(r);
 6651|   378k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   378k|    {
 1827|   378k|        return value();
 1828|   378k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   378k|    {
 1801|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   378k|        return this->get_value();
 1803|   378k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   378k|    {
  489|   378k|        return m_value;
  490|   378k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   234k|{
 9704|   234k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   234k|    auto result = vscan_impl(buffer, format, args);
 9707|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 171k]
  |  |  ------------------
  ------------------
 9708|  63.3k|        return unexpected(result.error());
 9709|  63.3k|    }
 9710|   171k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   234k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   515k|{
 5466|   515k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   515k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   515k|                  "\n"
 5470|   515k|                  "Unsupported range type given as input to a scanning "
 5471|   515k|                  "function.\n"
 5472|   515k|                  "A range needs to have a character type (value type) "
 5473|   515k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   515k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   515k|                  "to be included.\n"
 5476|   515k|                  "See the scnlib documentation for more details.");
 5477|   515k|    static_assert(
 5478|   515k|        !std::is_same_v<T, custom_char_traits>,
 5479|   515k|        "\n"
 5480|   515k|        "Unsupported range type given as input to a scanning "
 5481|   515k|        "function.\n"
 5482|   515k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   515k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   515k|        "not supported.");
 5485|   515k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   515k|                  "\n"
 5487|   515k|                  "Unsupported range type given as input to a scanning "
 5488|   515k|                  "function.\n"
 5489|   515k|                  "file_marker_found cannot be used as an "
 5490|   515k|                  "source range type to scn::scan.\n"
 5491|   515k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   515k|                  "and do not provide an explicit source range, "
 5493|   515k|                  "or use scn::scan with a FILE* directly.");
 5494|   515k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   515k|                  "\n"
 5496|   515k|                  "Unsupported range type given as input to a scanning "
 5497|   515k|                  "function.\n"
 5498|   515k|                  "In order to be scannable, a range needs to satisfy "
 5499|   515k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   515k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   515k|                  "\n"
 5502|   515k|                  "Unsupported range type given as input to a scanning "
 5503|   515k|                  "function.\n"
 5504|   515k|                  "A range needs to model forward_range and have a valid "
 5505|   515k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   515k|                  "Examples of scannable ranges are std::string, "
 5507|   515k|                  "std::string_view, "
 5508|   515k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   515k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   515k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   515k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   515k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   515k|    else {
 5451|   515k|        return make_forward_scan_buffer(r);
 5452|   515k|    }
 5453|   515k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   515k|{
 5269|   515k|    return basic_scan_forward_buffer_impl(range);
 5270|   515k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   515k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   515k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   515k|          m_cursor(ranges::begin(*m_range))
 4830|   515k|    {
 4831|   515k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   515k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   515k|    {
 4802|   515k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   515k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   515k|    {
 4493|   515k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   515k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   893k|    {
 2901|   893k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   893k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   893k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   893k|    {
 2882|   893k|        return decay_copy(t.begin());
 2883|   893k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|  1.27M|    {
 3513|  1.27M|        return m_iterator;
 3514|  1.27M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|  2.64M|    {
 4835|  2.64M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 202k, False: 2.44M]
  ------------------
 4836|   202k|            return false;
 4837|   202k|        }
 4838|  2.44M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  2.44M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  2.44M|        }
 4841|  2.44M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 1.92M, False: 513k]
  ------------------
 4842|  1.92M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  1.92M|                                          this->m_current_view.begin(),
 4844|  1.92M|                                          this->m_current_view.end());
 4845|  1.92M|        }
 4846|  2.44M|        m_latest = *m_cursor;
 4847|  2.44M|        ++m_cursor;
 4848|  2.44M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  2.44M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  2.44M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  2.44M|        }
 4852|  2.44M|        return true;
 4853|  2.64M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  7.52M|    {
 2958|  7.52M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  7.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  7.52M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  7.52M|    {
 2940|  7.52M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  7.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  7.52M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|  7.90M|    {
 3518|  7.90M|        return m_sentinel;
 3519|  7.90M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   515k|    {
 4402|   515k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   515k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   515k|        return true;
 4404|   515k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|   137k|        : base(unexpect, std::move(e.error())),
 1648|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   137k|    {
 1650|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   137k|          m_has_value(false)
  484|   137k|    {
  485|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   515k|    {
 1348|   515k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   378k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   378k|                      ranges::iterator_t<SourceRange>>) {
 6882|   378k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   378k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   378k|    {
 2901|   378k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   378k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   378k|    {
 2882|   378k|        return decay_copy(t.begin());
 2883|   378k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|   378k|{
 6867|   378k|    return ranges::end(source);
 6868|   378k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   378k|    {
 2958|   378k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   378k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   378k|    {
 2940|   378k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   378k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   378k|        : base(std::in_place, std::forward<U>(val)),
 1602|   378k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   378k|    {
 1604|   378k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   378k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   378k|    {
  475|   378k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   145k|    {
 8963|   145k|        return m_str;
 8964|   145k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   893k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   893k|    static_cast<    \
  |  | 1084|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   893k|    static_cast<    \
  |  | 1084|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   893k|    {
 3498|   893k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   145k|        : m_str(r.str)
 8958|   145k|    {
 8959|   145k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1771|   159k|    {
 1772|   159k|        return has_value();
 1773|   159k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1846|   387k|    {
 1847|   387k|        return &value();
 1848|   387k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   387k|    {
 1801|   387k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   387k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   387k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   387k|        return this->get_value();
 1803|   387k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|   378k|    {
 6639|   378k|        return ranges::begin(m_range);
 6640|   378k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   234k|{
 9720|   234k|#if !SCN_DISABLE_LOCALE
 9721|   234k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   234k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   234k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   234k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   234k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 63.3k, False: 171k]
  |  |  ------------------
  ------------------
 9728|  63.3k|        return unexpected(result.error());
 9729|  63.3k|    }
 9730|   171k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   234k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  46.4k|{
 9744|  46.4k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  46.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  46.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.5k, False: 35.8k]
  |  |  ------------------
  ------------------
 9748|  10.5k|        return unexpected(result.error());
 9749|  10.5k|    }
 9750|  35.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  46.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9960|   175k|{
 9961|   175k|    return scan_result_type<Source, Args...>();
 9962|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1583|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  459|   175k|        : m_value(T{}), m_has_value(true)
  460|   175k|    {
  461|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6775|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   175k|{
 9946|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 129k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   129k|    else {
 9950|   129k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   129k|    static_cast<    \
  |  | 1084|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   129k|    }
 9952|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   700k|    {
  523|   700k|        return m_has_value;
  524|   700k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   434k|    {
  489|   434k|        return m_value;
  490|   434k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   159k|    {
 8963|   159k|        return m_str;
 8964|   159k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   159k|        : m_str(r.str)
 8958|   159k|    {
 8959|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1771|   175k|    {
 1772|   175k|        return has_value();
 1773|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1846|   434k|    {
 1847|   434k|        return &value();
 1848|   434k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   434k|    {
 1801|   434k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   434k|        return this->get_value();
 1803|   434k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9960|   180k|{
 9961|   180k|    return scan_result_type<Source, Args...>();
 9962|   180k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1583|   180k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  459|   180k|        : m_value(T{}), m_has_value(true)
  460|   180k|    {
  461|   180k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6775|   180k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9945|   180k|{
 9946|   180k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 45.7k, False: 134k]
  |  |  ------------------
  ------------------
 9947|  45.7k|        out = unexpected(in.error());
 9948|  45.7k|    }
 9949|   134k|    else {
 9950|   134k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   134k|    static_cast<    \
  |  | 1084|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   134k|    }
 9952|   180k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1647|  45.7k|        : base(unexpect, std::move(e.error())),
 1648|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  45.7k|    {
 1650|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  482|  45.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  45.7k|          m_has_value(false)
  484|  45.7k|    {
  485|  45.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  45.7k|    {
 1348|  45.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1588|  45.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  934|  45.7k|    {
  935|  45.7k|        assign_common(std::move(other));
  936|  45.7k|        return *this;
  937|  45.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  981|  45.7k|    {
  982|  45.7k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 45.7k, False: 0]
  ------------------
  983|  45.7k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 45.7k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  45.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  45.7k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   721k|    {
  523|   721k|        return m_has_value;
  524|   721k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   449k|    {
  489|   449k|        return m_value;
  490|   449k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1077|  45.7k|    {
 1078|  45.7k|        this->destroy_value();
 1079|  45.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  45.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  536|  45.7k|    {
  537|  45.7k|        scn::detail::construct_at(&get_unexpected(),
  538|  45.7k|                                  std::forward<Args>(args)...);
  539|  45.7k|        m_has_value = false;
  540|  45.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  45.7k|    {
  506|  45.7k|        return m_unexpected;
  507|  45.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  45.7k|    {
  514|  45.7k|        return std::move(m_unexpected);
  515|  45.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8962|   163k|    {
 8963|   163k|        return m_str;
 8964|   163k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   163k|        : m_str(r.str)
 8958|   163k|    {
 8959|   163k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1771|   180k|    {
 1772|   180k|        return has_value();
 1773|   180k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1846|   449k|    {
 1847|   449k|        return &value();
 1848|   449k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1800|   449k|    {
 1801|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   449k|        return this->get_value();
 1803|   449k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|  2.42M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|  2.42M|    {
 3787|  2.42M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  2.42M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|  2.42M|    }
_ZNK3scn2v410scan_error4codeEv:
 3797|   218k|    {
 3798|   218k|        return m_code;
 3799|   218k|    }
_ZNK3scn2v410scan_error3msgEv:
 3802|  2.20k|    {
 3803|  2.20k|        return m_msg;
 3804|  2.20k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   417k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   417k|    else {
 4037|   417k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   417k|    }
 4039|   417k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  24.4M|    {
 3513|  24.4M|        return m_iterator;
 3514|  24.4M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  21.9M|    {
 3513|  21.9M|        return m_iterator;
 3514|  21.9M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  13.1M|    {
  605|  13.1M|        return m_has_value;
  606|  13.1M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|  2.58M|    {
  588|  2.58M|        return m_unexpected;
  589|  2.58M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|   328k|    {
 1778|   328k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   328k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   328k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   328k|        return this->get_unexpected().error();
 1780|   328k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  1.53M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|  1.13M|    {
 7230|  1.13M|        m_specs.type = type;
 7231|  1.13M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|  1.53M|    {
 7305|  1.53M|        return m_error;
 7306|  1.53M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|  2.40M|{
 3972|  2.40M|    return unexpected(scan_error{c, m});
 3973|  2.40M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  4.20M|{
 4364|       |    // Pattern_White_Space property
 4365|  4.20M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 4.03M, False: 168k]
  |  Branch (4365:27): [True: 351k, False: 3.68M]
  ------------------
 4366|  4.20M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 22.3k, False: 3.82M]
  ------------------
 4367|  4.20M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 34.3k, False: 3.79M]
  ------------------
 4368|  4.20M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 5.06k, False: 3.78M]
  ------------------
 4369|  4.20M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 25.0k, False: 3.76M]
  ------------------
 4370|  4.20M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 992k, False: 2.77M]
  ------------------
 4371|  4.20M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 261, False: 2.77M]
  ------------------
 4372|  4.20M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|   398k|{
 7990|   398k|    switch (type) {
 7991|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 0, False: 398k]
  ------------------
 7992|      0|            return arg_type_category::none;
 7993|       |
 7994|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 0, False: 398k]
  ------------------
 7995|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 398k]
  ------------------
 7996|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 0, False: 398k]
  ------------------
 7997|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 398k]
  ------------------
 7998|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 0, False: 398k]
  ------------------
 7999|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 398k]
  ------------------
 8000|      0|            return arg_type_category::integer;
 8001|       |
 8002|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 0, False: 398k]
  ------------------
 8003|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 398k]
  ------------------
 8004|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 0, False: 398k]
  ------------------
 8005|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 398k]
  ------------------
 8006|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 0, False: 398k]
  ------------------
 8007|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 398k]
  ------------------
 8008|      0|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 0, False: 398k]
  ------------------
 8011|      0|            return arg_type_category::pointer;
 8012|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 0, False: 398k]
  ------------------
 8013|      0|            return arg_type_category::boolean;
 8014|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 0, False: 398k]
  ------------------
 8015|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 0, False: 398k]
  ------------------
 8016|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 398k]
  ------------------
 8017|      0|            return arg_type_category::character;
 8018|       |
 8019|   122k|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 122k, False: 275k]
  ------------------
 8020|   258k|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 135k, False: 262k]
  ------------------
 8021|   398k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 139k, False: 258k]
  ------------------
 8022|   398k|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 398k]
  ------------------
 8023|   398k|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 398k]
  ------------------
 8024|   398k|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 398k]
  ------------------
 8025|   398k|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 398k]
  ------------------
 8026|   398k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 398k]
  ------------------
 8027|   398k|            return arg_type_category::floating;
 8028|       |
 8029|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 0, False: 398k]
  ------------------
 8030|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 0, False: 398k]
  ------------------
 8031|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 0, False: 398k]
  ------------------
 8032|      0|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 398k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 398k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|   398k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|   398k|            SCN_CLANG_POP
 8043|   398k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|   398k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1787|  2.25M|    {
 1788|  2.25M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.25M|        return std::move(this->get_unexpected().error());
 1790|  2.25M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|  1.70M|    {
 3073|  1.70M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  1.70M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3106|  1.70M|    {
 3107|  1.70M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  1.70M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3129|  1.70M|    {
 3130|  1.70M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3131|  1.70M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3138|  1.70M|    {
 3139|  1.70M|        return fn::impl(std::forward<T>(t));
 3140|  1.70M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8125|  1.53M|{
 8126|  1.53M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8126:9): [True: 1.13M, False: 398k]
  ------------------
 8127|  1.53M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8127:10): [True: 0, False: 1.13M]
  ------------------
 8128|  1.13M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8128:10): [True: 0, False: 1.13M]
  ------------------
 8129|      0|        SCN_UNLIKELY_ATTR
 8130|      0|        return handler.on_error("Invalid type specifier for float type");
 8131|      0|    }
 8132|  1.53M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  10.5M|    {
 1772|  10.5M|        return has_value();
 1773|  10.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|   121M|    {
 4537|   121M|        assert(m_begin);
 4538|   121M|        return m_end == nullptr;
 4539|   121M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|  2.05M|    {
 4554|  2.05M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 2.05M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  2.05M|        return parent()->get_segment_starting_at(position());
 4560|  2.05M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  67.0M|    {
 4548|  67.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  67.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  67.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  67.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  67.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|  2.05M|    {
 4437|  2.05M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  2.05M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  2.05M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 865k, False: 1.18M]
  |  |  ------------------
  ------------------
 4440|   865k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   865k|        }
 4442|  1.18M|        const auto start = upos - m_putback_buffer.size();
 4443|  1.18M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|  1.18M|        return m_current_view.substr(start);
 4445|  1.18M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4542|  1.45M|    {
 4543|  1.45M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|  1.45M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|  1.45M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|  3.76M|    {
 4532|  3.76M|        return m_position;
 4533|  3.76M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|  1.68M|    {
 4463|  1.68M|        return m_is_contiguous;
 4464|  1.68M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|  71.2M|    {
 4537|  71.2M|        assert(m_begin);
 4538|  71.2M|        return m_end == nullptr;
 4539|  71.2M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   359k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   359k|    else {
 4037|   359k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   359k|    }
 4039|   359k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|  1.27M|    {
 4554|  1.27M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 1.27M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  1.27M|        return parent()->get_segment_starting_at(position());
 4560|  1.27M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|  38.1M|    {
 4548|  38.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  38.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  38.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  38.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  38.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4436|  1.27M|    {
 4437|  1.27M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  1.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  1.27M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  1.27M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 738k, False: 538k]
  |  |  ------------------
  ------------------
 4440|   738k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   738k|        }
 4442|   538k|        const auto start = upos - m_putback_buffer.size();
 4443|   538k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   538k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   538k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   538k|        return m_current_view.substr(start);
 4445|   538k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4542|  1.35M|    {
 4543|  1.35M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4544|  1.35M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4545|  1.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|  2.78M|    {
 4532|  2.78M|        return m_position;
 4533|  2.78M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|  1.54M|    {
 4463|  1.54M|        return m_is_contiguous;
 4464|  1.54M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|  3.07M|    {
 3366|  3.07M|        return static_cast<D&>(*this);
 3367|  3.07M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|  3.07M|    {
 3407|  3.07M|        return detail::to_address(ranges::begin(derived()));
 3408|  3.07M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|  1.20M|    {
 3366|  1.20M|        return static_cast<D&>(*this);
 3367|  1.20M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|  1.20M|    {
 3407|  1.20M|        return detail::to_address(ranges::begin(derived()));
 3408|  1.20M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|   406k|    {
 9160|   406k|        return ranges::subrange{begin(), end()};
 9161|   406k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|   406k|    {
 9152|   406k|        return ranges::default_sentinel;
 9153|   406k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  5.93M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.93M|    static_cast<    \
  |  | 1084|  5.93M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.93M|    static_cast<    \
  |  | 1084|  5.93M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.93M|    {
 3498|  5.93M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|  3.25M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   561k|    {
 2011|   561k|        return detail::transform_error_impl(std::move(*this),
 2012|   561k|                                            std::forward<F>(f));
 2013|   561k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   561k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   561k|    else {
 1504|   561k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   561k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   561k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 551k, False: 9.72k]
  |  |  ------------------
  ------------------
 1506|   561k|                   ? result(*std::forward<Exp>(exp))
 1507|   561k|                   : result(unexpect,
 1508|  9.72k|                            trivial_invoke(std::forward<F>(f),
 1509|  9.72k|                                           std::forward<Exp>(exp).error()));
 1510|   561k|    }
 1511|   561k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  5.81M|    {
  523|  5.81M|        return m_has_value;
  524|  5.81M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.97M|    {
 1837|  1.97M|        return std::move(value());
 1838|  1.97M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.22M|    {
 1801|  2.22M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.22M|        return this->get_value();
 1803|  2.22M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  2.22M|    {
  489|  2.22M|        return m_value;
  490|  2.22M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  2.37M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.37M|    {
 1604|  2.37M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.37M|    {
  475|  2.37M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.16M|    {
 1348|  3.16M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  28.3k|{
 1382|  28.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  28.3k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  39.0k|    {
 1788|  39.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  39.0k|        return std::move(this->get_unexpected().error());
 1790|  39.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  49.6k|    {
  506|  49.6k|        return m_unexpected;
  507|  49.6k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|   395k|    {
  398|   395k|        return m_unexpected;
  399|   395k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|   565k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   565k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   565k|    {
 1660|   565k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   746k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   746k|          m_has_value(false)
  484|   746k|    {
  485|   746k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   375k|    {
 9160|   375k|        return ranges::subrange{begin(), end()};
 9161|   375k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   375k|    {
 9152|   375k|        return ranges::default_sentinel;
 9153|   375k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  5.34M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.34M|    static_cast<    \
  |  | 1084|  5.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  5.34M|    static_cast<    \
  |  | 1084|  5.34M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  5.34M|    {
 3498|  5.34M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   515k|    {
 2011|   515k|        return detail::transform_error_impl(std::move(*this),
 2012|   515k|                                            std::forward<F>(f));
 2013|   515k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   515k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   515k|    else {
 1504|   515k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   515k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   515k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 510k, False: 4.28k]
  |  |  ------------------
  ------------------
 1506|   515k|                   ? result(*std::forward<Exp>(exp))
 1507|   515k|                   : result(unexpect,
 1508|  4.28k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.28k|                                           std::forward<Exp>(exp).error()));
 1510|   515k|    }
 1511|   515k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  5.01M|    {
  523|  5.01M|        return m_has_value;
  524|  5.01M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.80M|    {
 1837|  1.80M|        return std::move(value());
 1838|  1.80M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  1.83M|    {
 1801|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.83M|        return this->get_value();
 1803|  1.83M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.83M|    {
  489|  1.83M|        return m_value;
  490|  1.83M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  1.92M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.92M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.92M|    {
 1604|  1.92M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.92M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.92M|    {
  475|  1.92M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.93M|    {
 1348|  2.93M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  63.5k|    {
 1788|  63.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  63.5k|        return std::move(this->get_unexpected().error());
 1790|  63.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  66.2k|    {
  506|  66.2k|        return m_unexpected;
  507|  66.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|   641k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   641k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   641k|    {
 1660|   641k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  1.01M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.01M|          m_has_value(false)
  484|  1.01M|    {
  485|  1.01M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|  2.40M|        : m_unexpected(std::forward<Err>(e))
  381|  2.40M|    {
  382|  2.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.40M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   631k|        : base(unexpect, std::move(e.error())),
 1648|   631k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   631k|    {
 1650|   631k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   631k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   631k|          m_has_value(false)
  484|   631k|    {
  485|   631k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.74M|    {
 1348|  5.74M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   163k|        : base(unexpect, std::move(e.error())),
 1648|   163k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   163k|    {
 1650|   163k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   669k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   669k|          m_has_value(false)
  484|   669k|    {
  485|   669k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.01M|    {
 1348|  3.01M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  2.29M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.29M|    {
 1604|  2.29M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.29M|    {
  475|  2.29M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|  3.52M|    {
 1772|  3.52M|        return has_value();
 1773|  3.52M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|  5.55M|    {
  523|  5.55M|        return m_has_value;
  524|  5.55M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|   190k|    {
 1778|   190k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   190k|        return this->get_unexpected().error();
 1780|   190k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   190k|    {
  506|   190k|        return m_unexpected;
  507|   190k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  1.49M|    {
 1837|  1.49M|        return std::move(value());
 1838|  1.49M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  1.84M|    {
 1801|  1.84M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.84M|        return this->get_value();
 1803|  1.84M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|  1.84M|    {
  489|  1.84M|        return m_value;
  490|  1.84M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|   304k|        : base(unexpect, std::move(e.error())),
 1648|   304k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   304k|    {
 1650|   304k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|   877k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   877k|          m_has_value(false)
  484|   877k|    {
  485|   877k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.93M|    {
 1348|  2.93M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  2.06M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.06M|    {
 1604|  2.06M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.06M|    {
  475|  2.06M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|  3.44M|    {
 1772|  3.44M|        return has_value();
 1773|  3.44M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  5.42M|    {
  523|  5.42M|        return m_has_value;
  524|  5.42M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|   366k|    {
 1778|   366k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   366k|        return this->get_unexpected().error();
 1780|   366k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   366k|    {
  506|   366k|        return m_unexpected;
  507|   366k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  1.33M|    {
 1837|  1.33M|        return std::move(value());
 1838|  1.33M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  1.61M|    {
 1801|  1.61M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.61M|        return this->get_value();
 1803|  1.61M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|  1.61M|    {
  489|  1.61M|        return m_value;
  490|  1.61M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   525k|    {
 2011|   525k|        return detail::transform_error_impl(std::move(*this),
 2012|   525k|                                            std::forward<F>(f));
 2013|   525k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   525k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   525k|    else {
 1504|   525k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   525k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   525k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 517k, False: 7.86k]
  |  |  ------------------
  ------------------
 1506|   525k|                   ? result(*std::forward<Exp>(exp))
 1507|   525k|                   : result(unexpect,
 1508|  7.86k|                            trivial_invoke(std::forward<F>(f),
 1509|  7.86k|                                           std::forward<Exp>(exp).error()));
 1510|   525k|    }
 1511|   525k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  2.01M|    {
  523|  2.01M|        return m_has_value;
  524|  2.01M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   517k|    {
 1837|   517k|        return std::move(value());
 1838|   517k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   680k|    {
 1801|   680k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   680k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   680k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   680k|        return this->get_value();
 1803|   680k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   680k|    {
  489|   680k|        return m_value;
  490|   680k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|  7.86k|    {
 1788|  7.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  7.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  7.86k|        return std::move(this->get_unexpected().error());
 1790|  7.86k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  12.9k|    {
  506|  12.9k|        return m_unexpected;
  507|  12.9k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|   505k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   505k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   505k|    {
 1660|   505k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|  1.16M|    {
 9144|  1.16M|        return m_current;
 9145|  1.16M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   780k|    {
 9037|   780k|        return m_locale;
 9038|   780k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   780k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   780k|    static_cast<    \
  |  | 1084|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   780k|    static_cast<    \
  |  | 1084|   780k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   780k|    {
 9044|   780k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   828k|    {
 3032|   828k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   828k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   828k|    {
 3013|   828k|        return t.data();
 3014|   828k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   181k|        : base(unexpect, std::move(e.error())),
 1648|   181k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   181k|    {
 1650|   181k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1601|  45.9k|        : base(std::in_place, std::forward<U>(val)),
 1602|  45.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  45.9k|    {
 1604|  45.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  45.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  45.9k|    {
  475|  45.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|  1.02M|    {
 9144|  1.02M|        return m_current;
 9145|  1.02M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   752k|    {
 9037|   752k|        return m_locale;
 9038|   752k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   752k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   752k|    static_cast<    \
  |  | 1084|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   752k|    static_cast<    \
  |  | 1084|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   752k|    {
 9044|   752k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|   373k|        : base(unexpect, std::move(e.error())),
 1648|   373k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   373k|    {
 1650|   373k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|  2.58M|        : base(unexpect, std::move(e.error())),
 1648|  2.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.58M|    {
 1650|  2.58M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|  2.58M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|  2.58M|          m_has_value(false)
  583|  2.58M|    {
  584|  2.58M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.58M|    {
 1348|  2.58M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  8.97M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  8.97M|        : m_deferred_init(), m_has_value(true)
  562|  8.97M|    {
  563|  8.97M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  4.76M|    {
 4623|  4.76M|        return x.is_at_end();
 4624|  4.76M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  9.89M|    {
 4667|  9.89M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 9.89M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  9.89M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 9.89M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  9.89M|        return !read_at_position();
 4674|  9.89M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  39.0M|    {
 4647|  39.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  39.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  39.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  39.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 39.0M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  39.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  39.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 33.8M, False: 5.20M]
  |  |  ------------------
  ------------------
 4654|  33.8M|            return true;
 4655|  33.8M|        }
 4656|       |
 4657|  10.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 5.20M, False: 5.01M]
  ------------------
 4658|  5.20M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 181k, False: 5.01M]
  ------------------
 4659|   181k|                return false;
 4660|   181k|            }
 4661|  5.20M|        }
 4662|  5.01M|        return true;
 4663|  5.20M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  10.5M|    {
 4582|  10.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  10.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 10.5M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  10.5M|        auto res = read_at_position();
 4591|  10.5M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  10.5M|        return parent()->get_character_at(m_position);
 4593|  10.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  10.5M|    {
 4449|  10.5M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  10.5M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  10.5M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  10.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.39M, False: 3.14M]
  |  |  ------------------
  ------------------
 4452|  7.39M|            return m_putback_buffer[upos];
 4453|  7.39M|        }
 4454|  3.14M|        const auto start = upos - m_putback_buffer.size();
 4455|  3.14M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  3.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  3.14M|        return m_current_view[start];
 4457|  3.14M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  3.48M|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.48M|    {
 1604|  3.48M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  3.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.48M|    {
  475|  3.48M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.53M|    {
 1348|  3.53M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  380|   150k|        : m_unexpected(std::forward<Err>(e))
  381|   150k|    {
  382|   150k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   150k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   150k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  49.6k|        : base(unexpect, std::move(e.error())),
 1648|  49.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  49.6k|    {
 1650|  49.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  49.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  49.6k|          m_has_value(false)
  484|  49.6k|    {
  485|  49.6k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|   198k|        : m_unexpected(std::forward<Args>(args)...)
  392|   198k|    {
  393|   198k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   198k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  18.6M|    {
 4568|  18.6M|        ++m_position;
 4569|  18.6M|        (void)read_at_position();
 4570|  18.6M|        return *this;
 4571|  18.6M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|  1.51M|    {
 1772|  1.51M|        return has_value();
 1773|  1.51M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|   250k|    {
 1827|   250k|        return value();
 1828|   250k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|  8.60M|    {
 4617|  8.60M|        return !(lhs == rhs);
 4618|  8.60M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|  9.97M|    {
 4612|  9.97M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 9.97M, False: 0]
  |  Branch (4612:46): [True: 1.78M, False: 8.18M]
  ------------------
 4613|  9.97M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  47.3k|        : m_unexpected(std::forward<Err>(e))
  381|  47.3k|    {
  382|  47.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  47.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  47.3k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  7.58k|        : base(unexpect, std::move(e.error())),
 1648|  7.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  7.58k|    {
 1650|  7.58k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  7.58k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  7.58k|          m_has_value(false)
  484|  7.58k|    {
  485|  7.58k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   754k|    {
 1348|   754k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   746k|        : base(std::in_place, std::forward<U>(val)),
 1602|   746k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   746k|    {
 1604|   746k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   746k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   746k|    {
  475|   746k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   754k|    {
 1772|   754k|        return has_value();
 1773|   754k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.50M|    {
  523|  1.50M|        return m_has_value;
  524|  1.50M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  7.58k|    {
 1778|  7.58k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  7.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  7.58k|        return this->get_unexpected().error();
 1780|  7.58k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  7.58k|    {
  506|  7.58k|        return m_unexpected;
  507|  7.58k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   746k|    {
 1837|   746k|        return std::move(value());
 1838|   746k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   746k|    {
 1801|   746k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   746k|        return this->get_value();
 1803|   746k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   746k|    {
  489|   746k|        return m_value;
  490|   746k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  14.8M|    {
 3518|  14.8M|        return m_sentinel;
 3519|  14.8M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  380|  48.9k|        : m_unexpected(std::forward<Err>(e))
  381|  48.9k|    {
  382|  48.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  48.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  48.9k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  397|  8.67M|    {
  398|  8.67M|        return m_unexpected;
  399|  8.67M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  2.42M|        : m_unexpected(std::forward<Args>(args)...)
  392|  2.42M|    {
  393|  2.42M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.42M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  2.42M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  380|  10.2M|        : m_unexpected(std::forward<Err>(e))
  381|  10.2M|    {
  382|  10.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  10.2M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  397|  10.2M|    {
  398|  10.2M|        return m_unexpected;
  399|  10.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  391|  10.2M|        : m_unexpected(std::forward<Args>(args)...)
  392|  10.2M|    {
  393|  10.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  10.2M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|   148k|{
 1382|   148k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|   148k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  380|  2.22M|        : m_unexpected(std::forward<Err>(e))
  381|  2.22M|    {
  382|  2.22M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  2.22M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  2.22M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|  10.5k|    {
 1778|  10.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  10.5k|        return this->get_unexpected().error();
 1780|  10.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|   585k|        : base(unexpect, std::move(e.error())),
 1648|   585k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   585k|    {
 1650|   585k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|   614k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   614k|          m_has_value(false)
  484|   614k|    {
  485|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.99M|    {
 1348|  5.99M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|   253k|        : base(std::in_place, std::forward<U>(val)),
 1602|   253k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   253k|    {
 1604|   253k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|   253k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   253k|    {
  475|   253k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  3.07M|        : base(unexpect, std::move(e.error())),
 1648|  3.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.07M|    {
 1650|  3.07M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  3.07M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.07M|          m_has_value(false)
  484|  3.07M|    {
  485|  3.07M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|  6.54M|    {
 1772|  6.54M|        return has_value();
 1773|  6.54M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  11.5M|    {
  523|  11.5M|        return m_has_value;
  524|  11.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|  1.58M|    {
 1778|  1.58M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.58M|        return this->get_unexpected().error();
 1780|  1.58M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.58M|    {
  506|  1.58M|        return m_unexpected;
  507|  1.58M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   590k|        : base(std::in_place, std::forward<U>(val)),
 1602|   590k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   590k|    {
 1604|   590k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   590k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   590k|    {
  475|   590k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   590k|    {
 1348|   590k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|    204|        : base(unexpect, std::move(e.error())),
 1648|    204|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    204|    {
 1650|    204|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  482|    204|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    204|          m_has_value(false)
  484|    204|    {
  485|    204|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  1.40M|    {
 1827|  1.40M|        return value();
 1828|  1.40M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.83M|    {
 1801|  2.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.83M|        return this->get_value();
 1803|  2.83M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  2.83M|    {
  489|  2.83M|        return m_value;
  490|  2.83M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|  38.8k|    {
 1772|  38.8k|        return has_value();
 1773|  38.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|  1.18M|    {
  523|  1.18M|        return m_has_value;
  524|  1.18M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   551k|    {
 1837|   551k|        return std::move(value());
 1838|   551k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   590k|    {
 1801|   590k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   590k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   590k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   590k|        return this->get_value();
 1803|   590k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   590k|    {
  489|   590k|        return m_value;
  490|   590k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  1.45M|    {
 2011|  1.45M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.45M|                                            std::forward<F>(f));
 2013|  1.45M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  1.45M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.45M|    else {
 1504|  1.45M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.45M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.42M, False: 29.3k]
  |  |  ------------------
  ------------------
 1506|  1.45M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.45M|                   : result(unexpect,
 1508|  29.3k|                            trivial_invoke(std::forward<F>(f),
 1509|  29.3k|                                           std::forward<Exp>(exp).error()));
 1510|  1.45M|    }
 1511|  1.45M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|  2.05M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.05M|    {
 1604|  2.05M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  2.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.05M|    {
  475|  2.05M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  29.3k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  29.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  29.3k|    {
 1660|  29.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.42M|    {
 1837|  1.42M|        return std::move(value());
 1838|  1.42M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  3.71M|    {
 1772|  3.71M|        return has_value();
 1773|  3.71M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.87M|    {
  523|  5.87M|        return m_has_value;
  524|  5.87M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   235k|    {
 1778|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   235k|        return this->get_unexpected().error();
 1780|   235k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   235k|    {
  506|   235k|        return m_unexpected;
  507|   235k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.54M|    {
 1837|  1.54M|        return std::move(value());
 1838|  1.54M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.92M|    {
 1801|  1.92M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.92M|        return this->get_value();
 1803|  1.92M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.92M|    {
  489|  1.92M|        return m_value;
  490|  1.92M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3512|   582k|    {
 3513|   582k|        return m_iterator;
 3514|   582k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3517|   582k|    {
 3518|   582k|        return m_sentinel;
 3519|   582k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   465k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   465k|    static_cast<    \
  |  | 1084|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   465k|    static_cast<    \
  |  | 1084|   465k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   465k|    {
 3498|   465k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  5.12M|    {
 4634|  5.12M|        return !x.is_at_end();
 4635|  5.12M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  12.9k|        : base(unexpect, std::move(e.error())),
 1648|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  12.9k|    {
 1650|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  12.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  12.9k|          m_has_value(false)
  484|  12.9k|    {
  485|  12.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.32M|    {
 1348|  1.32M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  1.30M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.30M|    {
 1604|  1.30M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.30M|    {
  475|  1.30M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1771|   796k|    {
 1772|   796k|        return has_value();
 1773|   796k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   162k|    {
 1827|   162k|        return value();
 1828|   162k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  5.74k|        : base(unexpect, std::move(e.error())),
 1648|  5.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  5.74k|    {
 1650|  5.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  5.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  5.74k|          m_has_value(false)
  484|  5.74k|    {
  485|  5.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   690k|    {
 1348|   690k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   684k|        : base(std::in_place, std::forward<U>(val)),
 1602|   684k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   684k|    {
 1604|   684k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   684k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   684k|    {
  475|   684k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|   690k|    {
 1772|   690k|        return has_value();
 1773|   690k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.38M|    {
  523|  1.38M|        return m_has_value;
  524|  1.38M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1777|  5.74k|    {
 1778|  5.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.74k|        return this->get_unexpected().error();
 1780|  5.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  5.74k|    {
  506|  5.74k|        return m_unexpected;
  507|  5.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   684k|    {
 1837|   684k|        return std::move(value());
 1838|   684k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   684k|    {
 1801|   684k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   684k|        return this->get_value();
 1803|   684k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|   684k|    {
  489|   684k|        return m_value;
  490|   684k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1777|  5.10k|    {
 1778|  5.10k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  5.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  5.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  5.10k|        return this->get_unexpected().error();
 1780|  5.10k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|   546k|        : base(unexpect, std::move(e.error())),
 1648|   546k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   546k|    {
 1650|   546k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   546k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   546k|          m_has_value(false)
  484|   546k|    {
  485|   546k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.96M|    {
 1348|  2.96M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|   164k|        : base(std::in_place, std::forward<U>(val)),
 1602|   164k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   164k|    {
 1604|   164k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|   164k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   164k|    {
  475|   164k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  2.04M|        : base(unexpect, std::move(e.error())),
 1648|  2.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.04M|    {
 1650|  2.04M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.04M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.04M|          m_has_value(false)
  484|  2.04M|    {
  485|  2.04M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1771|  3.48M|    {
 1772|  3.48M|        return has_value();
 1773|  3.48M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  5.94M|    {
  523|  5.94M|        return m_has_value;
  524|  5.94M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1777|  1.43M|    {
 1778|  1.43M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.43M|        return this->get_unexpected().error();
 1780|  1.43M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.43M|    {
  506|  1.43M|        return m_unexpected;
  507|  1.43M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   540k|        : base(std::in_place, std::forward<U>(val)),
 1602|   540k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   540k|    {
 1604|   540k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   540k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   540k|    {
  475|   540k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   542k|    {
 1348|   542k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  2.24k|        : base(unexpect, std::move(e.error())),
 1648|  2.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.24k|    {
 1650|  2.24k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  2.24k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.24k|          m_has_value(false)
  484|  2.24k|    {
  485|  2.24k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   528k|    {
 1827|   528k|        return value();
 1828|   528k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   528k|    {
 1801|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   528k|        return this->get_value();
 1803|   528k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|   528k|    {
  489|   528k|        return m_value;
  490|   528k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  25.3k|    {
 1772|  25.3k|        return has_value();
 1773|  25.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  1.08M|    {
  523|  1.08M|        return m_has_value;
  524|  1.08M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1777|  2.18k|    {
 1778|  2.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.18k|        return this->get_unexpected().error();
 1780|  2.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  505|  2.18k|    {
  506|  2.18k|        return m_unexpected;
  507|  2.18k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.18k|        : base(unexpect, std::move(e.error())),
 1648|  2.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.18k|    {
 1650|  2.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  2.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.18k|          m_has_value(false)
  484|  2.18k|    {
  485|  2.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   528k|    {
 1837|   528k|        return std::move(value());
 1838|   528k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   540k|    {
 1801|   540k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   540k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   540k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   540k|        return this->get_value();
 1803|   540k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   540k|    {
  489|   540k|        return m_value;
  490|   540k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|   218k|        : base(std::in_place, std::forward<U>(val)),
 1602|   218k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   218k|    {
 1604|   218k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   218k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   218k|    {
  475|   218k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1601|  11.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  11.1k|    {
 1604|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  11.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  11.1k|    {
  475|  11.1k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  13.3k|    {
 2011|  13.3k|        return detail::transform_error_impl(std::move(*this),
 2012|  13.3k|                                            std::forward<F>(f));
 2013|  13.3k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1493|  13.3k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  13.3k|    else {
 1504|  13.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  13.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  13.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 11.1k, False: 2.18k]
  |  |  ------------------
  ------------------
 1506|  13.3k|                   ? result(*std::forward<Exp>(exp))
 1507|  13.3k|                   : result(unexpect,
 1508|  2.18k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.18k|                                           std::forward<Exp>(exp).error()));
 1510|  13.3k|    }
 1511|  13.3k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  522|  26.6k|    {
  523|  26.6k|        return m_has_value;
  524|  26.6k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  11.1k|    {
 1837|  11.1k|        return std::move(value());
 1838|  11.1k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  11.1k|    {
 1801|  11.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.1k|        return this->get_value();
 1803|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  488|  11.1k|    {
  489|  11.1k|        return m_value;
  490|  11.1k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  11.1k|        : base(std::in_place, std::forward<U>(val)),
 1602|  11.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  11.1k|    {
 1604|  11.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  473|  11.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  11.1k|    {
  475|  11.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  13.3k|    {
 1348|  13.3k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1787|  2.18k|    {
 1788|  2.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.18k|        return std::move(this->get_unexpected().error());
 1790|  2.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  505|  2.18k|    {
  506|  2.18k|        return m_unexpected;
  507|  2.18k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.18k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.18k|    {
 1660|  2.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  2.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.18k|          m_has_value(false)
  484|  2.18k|    {
  485|  2.18k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1771|  13.3k|    {
 1772|  13.3k|        return has_value();
 1773|  13.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  522|  26.6k|    {
  523|  26.6k|        return m_has_value;
  524|  26.6k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1777|  2.18k|    {
 1778|  2.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.18k|        return this->get_unexpected().error();
 1780|  2.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  2.18k|    {
  506|  2.18k|        return m_unexpected;
  507|  2.18k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  11.1k|    {
 1837|  11.1k|        return std::move(value());
 1838|  11.1k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  11.1k|    {
 1801|  11.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  11.1k|        return this->get_value();
 1803|  11.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  488|  11.1k|    {
  489|  11.1k|        return m_value;
  490|  11.1k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.74M|    {
 3032|  1.74M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.74M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.74M|    {
 3013|  1.74M|        return t.data();
 3014|  1.74M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|  5.11M|        : base(std::in_place, std::forward<U>(val)),
 1602|  5.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  5.11M|    {
 1604|  5.11M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|  5.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  5.11M|    {
  475|  5.11M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1836|  3.41M|    {
 1837|  3.41M|        return std::move(value());
 1838|  3.41M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1381|  2.25M|{
 1382|  2.25M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  2.25M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 2010|   551k|    {
 2011|   551k|        return detail::transform_error_impl(std::move(*this),
 2012|   551k|                                            std::forward<F>(f));
 2013|   551k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1493|   551k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   551k|    else {
 1504|   551k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   551k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   551k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 551k, False: 0]
  |  |  ------------------
  ------------------
 1506|   551k|                   ? result(*std::forward<Exp>(exp))
 1507|   551k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   551k|    }
 1511|   551k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|   551k|        : base(std::in_place, std::forward<U>(val)),
 1602|   551k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   551k|    {
 1604|   551k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   551k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   551k|    {
  475|   551k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   551k|    {
 1348|   551k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   551k|    {
 1772|   551k|        return has_value();
 1773|   551k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.10M|    {
  523|  1.10M|        return m_has_value;
  524|  1.10M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   551k|    {
 1837|   551k|        return std::move(value());
 1838|   551k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   551k|    {
 1801|   551k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   551k|        return this->get_value();
 1803|   551k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   551k|    {
  489|   551k|        return m_value;
  490|   551k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1996|   555k|    {
 1997|   555k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   555k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1493|   555k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   555k|    else {
 1504|   555k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   555k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
 1506|   555k|                   ? result(*std::forward<Exp>(exp))
 1507|   555k|                   : result(unexpect,
 1508|   555k|                            trivial_invoke(std::forward<F>(f),
 1509|   555k|                                           std::forward<Exp>(exp).error()));
 1510|   555k|    }
 1511|   555k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   386k|    {
 1827|   386k|        return value();
 1828|   386k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1846|  38.6k|    {
 1847|  38.6k|        return &value();
 1848|  38.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|   385k|    {
 2901|   385k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   385k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|   385k|    {
 2882|   385k|        return decay_copy(t.begin());
 2883|   385k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|   385k|{
 2126|   385k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   385k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   385k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3991|   227k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   517k|    {
 2011|   517k|        return detail::transform_error_impl(std::move(*this),
 2012|   517k|                                            std::forward<F>(f));
 2013|   517k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|   517k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   517k|    else {
 1504|   517k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   517k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   517k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 517k, False: 0]
  |  |  ------------------
  ------------------
 1506|   517k|                   ? result(*std::forward<Exp>(exp))
 1507|   517k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   517k|    }
 1511|   517k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   517k|        : base(std::in_place, std::forward<U>(val)),
 1602|   517k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   517k|    {
 1604|   517k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   517k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   517k|    {
  475|   517k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   517k|    {
 1348|   517k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   517k|    {
 1772|   517k|        return has_value();
 1773|   517k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.03M|    {
  523|  1.03M|        return m_has_value;
  524|  1.03M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   517k|    {
 1837|   517k|        return std::move(value());
 1838|   517k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   517k|    {
 1801|   517k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   517k|        return this->get_value();
 1803|   517k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   517k|    {
  489|   517k|        return m_value;
  490|   517k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1996|   497k|    {
 1997|   497k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   497k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   497k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   497k|    else {
 1504|   497k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   497k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   497k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 497k]
  |  |  ------------------
  ------------------
 1506|   497k|                   ? result(*std::forward<Exp>(exp))
 1507|   497k|                   : result(unexpect,
 1508|   497k|                            trivial_invoke(std::forward<F>(f),
 1509|   497k|                                           std::forward<Exp>(exp).error()));
 1510|   497k|    }
 1511|   497k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1601|  43.5k|        : base(std::in_place, std::forward<U>(val)),
 1602|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  43.5k|    {
 1604|  43.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|  43.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  43.5k|    {
  475|  43.5k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|   497k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   497k|    static_cast<    \
  |  | 1084|   497k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   497k|    {
 3966|   497k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   352k|    {
 1827|   352k|        return value();
 1828|   352k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1846|  11.9k|    {
 1847|  11.9k|        return &value();
 1848|  11.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   555k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   555k|    static_cast<    \
  |  | 1084|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   555k|    {
 3966|   555k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  4.39M|    {
 4623|  4.39M|        return x.is_at_end();
 4624|  4.39M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|  6.99M|    {
 4667|  6.99M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 6.99M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  6.99M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 6.99M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  6.99M|        return !read_at_position();
 4674|  6.99M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|  22.1M|    {
 4647|  22.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  22.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  22.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 22.1M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  22.1M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  22.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 19.5M, False: 2.64M]
  |  |  ------------------
  ------------------
 4654|  19.5M|            return true;
 4655|  19.5M|        }
 4656|       |
 4657|  5.08M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 2.64M, False: 2.44M]
  ------------------
 4658|  2.64M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 202k, False: 2.44M]
  ------------------
 4659|   202k|                return false;
 4660|   202k|            }
 4661|  2.64M|        }
 4662|  2.44M|        return true;
 4663|  2.64M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|  28.6M|    {
 4413|  28.6M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  28.6M|                                           m_current_view.size());
 4415|  28.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|  6.94M|    {
 4582|  6.94M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  6.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  6.94M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 6.94M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  6.94M|        auto res = read_at_position();
 4591|  6.94M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  6.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  6.94M|        return parent()->get_character_at(m_position);
 4593|  6.94M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|  6.94M|    {
 4449|  6.94M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  6.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  6.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  6.94M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  6.94M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  6.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.87M, False: 1.07M]
  |  |  ------------------
  ------------------
 4452|  5.87M|            return m_putback_buffer[upos];
 4453|  5.87M|        }
 4454|  1.07M|        const auto start = upos - m_putback_buffer.size();
 4455|  1.07M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.07M|        return m_current_view[start];
 4457|  1.07M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|  3.04M|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.04M|    {
 1604|  3.04M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  3.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.04M|    {
  475|  3.04M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.11M|    {
 1348|  3.11M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  66.2k|        : base(unexpect, std::move(e.error())),
 1648|  66.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  66.2k|    {
 1650|  66.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  66.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  66.2k|          m_has_value(false)
  484|  66.2k|    {
  485|  66.2k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|  8.25M|    {
 4568|  8.25M|        ++m_position;
 4569|  8.25M|        (void)read_at_position();
 4570|  8.25M|        return *this;
 4571|  8.25M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1771|  1.24M|    {
 1772|  1.24M|        return has_value();
 1773|  1.24M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|  30.7k|    {
 1827|  30.7k|        return value();
 1828|  30.7k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|  3.41M|    {
 4617|  3.41M|        return !(lhs == rhs);
 4618|  3.41M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|  4.63M|    {
 4612|  4.63M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 4.63M, False: 0]
  |  Branch (4612:46): [True: 1.47M, False: 3.15M]
  ------------------
 4613|  4.63M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|  3.11M|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|  3.11M|    else {
 4131|       |        // utf-32
 4132|  3.11M|        static_assert(sizeof(U) == 4);
 4133|  3.11M|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|  3.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|  3.11M|        return 1;
 4135|  3.11M|    }
 4136|  3.11M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  3.11M|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|  3.11M|    else {
 4337|  3.11M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|  3.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|  3.11M|        auto cp = static_cast<char32_t>(input.front());
 4339|  3.11M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  3.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 153k, False: 2.95M]
  |  |  ------------------
  ------------------
 4340|   153k|            return invalid_code_point;
 4341|   153k|        }
 4342|  2.95M|        return cp;
 4343|  3.11M|    }
 4344|  3.11M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  3.18k|        : base(unexpect, std::move(e.error())),
 1648|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.18k|    {
 1650|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.18k|          m_has_value(false)
  484|  3.18k|    {
  485|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   644k|    {
 1348|   644k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   641k|        : base(std::in_place, std::forward<U>(val)),
 1602|   641k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   641k|    {
 1604|   641k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   641k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   641k|    {
  475|   641k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   644k|    {
 1772|   644k|        return has_value();
 1773|   644k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.28M|    {
  523|  1.28M|        return m_has_value;
  524|  1.28M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|  3.18k|    {
 1778|  3.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.18k|        return this->get_unexpected().error();
 1780|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  3.18k|    {
  506|  3.18k|        return m_unexpected;
  507|  3.18k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   641k|    {
 1837|   641k|        return std::move(value());
 1838|   641k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   641k|    {
 1801|   641k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   641k|        return this->get_value();
 1803|   641k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   641k|    {
  489|   641k|        return m_value;
  490|   641k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  11.4M|    {
 3518|  11.4M|        return m_sentinel;
 3519|  11.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1777|  2.67k|    {
 1778|  2.67k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  2.67k|        return this->get_unexpected().error();
 1780|  2.67k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|   572k|        : base(unexpect, std::move(e.error())),
 1648|   572k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   572k|    {
 1650|   572k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|   632k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   632k|          m_has_value(false)
  484|   632k|    {
  485|   632k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  5.37M|    {
 1348|  5.37M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1601|  30.7k|        : base(std::in_place, std::forward<U>(val)),
 1602|  30.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  30.7k|    {
 1604|  30.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  473|  30.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  30.7k|    {
  475|  30.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|  3.01M|        : base(unexpect, std::move(e.error())),
 1648|  3.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.01M|    {
 1650|  3.01M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  3.01M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.01M|          m_has_value(false)
  484|  3.01M|    {
  485|  3.01M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1771|  5.88M|    {
 1772|  5.88M|        return has_value();
 1773|  5.88M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  10.3M|    {
  523|  10.3M|        return m_has_value;
  524|  10.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1777|  1.72M|    {
 1778|  1.72M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.72M|        return this->get_unexpected().error();
 1780|  1.72M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.72M|    {
  506|  1.72M|        return m_unexpected;
  507|  1.72M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1601|   528k|        : base(std::in_place, std::forward<U>(val)),
 1602|   528k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   528k|    {
 1604|   528k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   528k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   528k|    {
  475|   528k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   528k|    {
 1348|   528k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1647|     78|        : base(unexpect, std::move(e.error())),
 1648|     78|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     78|    {
 1650|     78|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  482|     78|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|     78|          m_has_value(false)
  484|     78|    {
  485|     78|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1826|   826k|    {
 1827|   826k|        return value();
 1828|   826k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|  2.11M|    {
 1801|  2.11M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.11M|        return this->get_value();
 1803|  2.11M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  2.11M|    {
  489|  2.11M|        return m_value;
  490|  2.11M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1771|  17.9k|    {
 1772|  17.9k|        return has_value();
 1773|  17.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  522|  1.05M|    {
  523|  1.05M|        return m_has_value;
  524|  1.05M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   510k|    {
 1837|   510k|        return std::move(value());
 1838|   510k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   528k|    {
 1801|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   528k|        return this->get_value();
 1803|   528k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  488|   528k|    {
  489|   528k|        return m_value;
  490|   528k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|  1.35M|    {
 2011|  1.35M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.35M|                                            std::forward<F>(f));
 2013|  1.35M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|  1.35M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.35M|    else {
 1504|  1.35M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.35M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.29M, False: 59.2k]
  |  |  ------------------
  ------------------
 1506|  1.35M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.35M|                   : result(unexpect,
 1508|  59.2k|                            trivial_invoke(std::forward<F>(f),
 1509|  59.2k|                                           std::forward<Exp>(exp).error()));
 1510|  1.35M|    }
 1511|  1.35M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1601|  1.70M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.70M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.70M|    {
 1604|  1.70M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.70M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.70M|    {
  475|  1.70M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1657|  59.2k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  59.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  59.2k|    {
 1660|  59.2k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|  1.29M|    {
 1837|  1.29M|        return std::move(value());
 1838|  1.29M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  3.44M|    {
 1772|  3.44M|        return has_value();
 1773|  3.44M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  5.49M|    {
  523|  5.49M|        return m_has_value;
  524|  5.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|   504k|    {
 1778|   504k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   504k|        return this->get_unexpected().error();
 1780|   504k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   504k|    {
  506|   504k|        return m_unexpected;
  507|   504k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.26M|    {
 1837|  1.26M|        return std::move(value());
 1838|  1.26M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.54M|    {
 1801|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.54M|        return this->get_value();
 1803|  1.54M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.54M|    {
  489|  1.54M|        return m_value;
  490|  1.54M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3512|   423k|    {
 3513|   423k|        return m_iterator;
 3514|   423k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3517|   423k|    {
 3518|   423k|        return m_sentinel;
 3519|   423k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   380k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   380k|    static_cast<    \
  |  | 1084|   380k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   380k|    static_cast<    \
  |  | 1084|   380k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   380k|    {
 3498|   380k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  2.59M|    {
 4634|  2.59M|        return !x.is_at_end();
 4635|  2.59M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  64.4k|        : base(unexpect, std::move(e.error())),
 1648|  64.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  64.4k|    {
 1650|  64.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  64.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  64.4k|          m_has_value(false)
  484|  64.4k|    {
  485|  64.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.58M|    {
 1348|  2.58M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  2.51M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.51M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.51M|    {
 1604|  2.51M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  2.51M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.51M|    {
  475|  2.51M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1771|   711k|    {
 1772|   711k|        return has_value();
 1773|   711k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  4.46M|    {
  523|  4.46M|        return m_has_value;
  524|  4.46M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|  13.5k|    {
 1827|  13.5k|        return value();
 1828|  13.5k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.81M|    {
 1801|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.81M|        return this->get_value();
 1803|  1.81M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.81M|    {
  489|  1.81M|        return m_value;
  490|  1.81M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  3.18k|        : base(unexpect, std::move(e.error())),
 1648|  3.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.18k|    {
 1650|  3.18k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.18k|          m_has_value(false)
  484|  3.18k|    {
  485|  3.18k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   645k|    {
 1348|   645k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   641k|        : base(std::in_place, std::forward<U>(val)),
 1602|   641k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   641k|    {
 1604|   641k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   641k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   641k|    {
  475|   641k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   515k|    {
 2011|   515k|        return detail::transform_error_impl(std::move(*this),
 2012|   515k|                                            std::forward<F>(f));
 2013|   515k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   515k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   515k|    else {
 1504|   515k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   515k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   515k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 511k, False: 4.28k]
  |  |  ------------------
  ------------------
 1506|   515k|                   ? result(*std::forward<Exp>(exp))
 1507|   515k|                   : result(unexpect,
 1508|  4.28k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.28k|                                           std::forward<Exp>(exp).error()));
 1510|   515k|    }
 1511|   515k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.80M|    {
 1837|  1.80M|        return std::move(value());
 1838|  1.80M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  63.7k|    {
 1788|  63.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  63.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  63.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  63.7k|        return std::move(this->get_unexpected().error());
 1790|  63.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  64.4k|    {
  506|  64.4k|        return m_unexpected;
  507|  64.4k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|   573k|        : base(unexpect, std::forward<Args>(args)...),
 1658|   573k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|   573k|    {
 1660|   573k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|   645k|    {
 1772|   645k|        return has_value();
 1773|   645k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.29M|    {
  523|  1.29M|        return m_has_value;
  524|  1.29M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1777|  3.18k|    {
 1778|  3.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  3.18k|        return this->get_unexpected().error();
 1780|  3.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  3.18k|    {
  506|  3.18k|        return m_unexpected;
  507|  3.18k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   641k|    {
 1837|   641k|        return std::move(value());
 1838|   641k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   641k|    {
 1801|   641k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   641k|        return this->get_value();
 1803|   641k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|   641k|    {
  489|   641k|        return m_value;
  490|   641k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1777|    624|    {
 1778|    624|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    624|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    624|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    624|        return this->get_unexpected().error();
 1780|    624|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|   571k|        : base(unexpect, std::move(e.error())),
 1648|   571k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   571k|    {
 1650|   571k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|   630k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   630k|          m_has_value(false)
  484|   630k|    {
  485|   630k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  4.23M|    {
 1348|  4.23M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1601|  13.5k|        : base(std::in_place, std::forward<U>(val)),
 1602|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  13.5k|    {
 1604|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  473|  13.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  13.5k|    {
  475|  13.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  2.16M|        : base(unexpect, std::move(e.error())),
 1648|  2.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.16M|    {
 1650|  2.16M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  482|  2.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.16M|          m_has_value(false)
  484|  2.16M|    {
  485|  2.16M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1771|  4.74M|    {
 1772|  4.74M|        return has_value();
 1773|  4.74M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  522|  8.53M|    {
  523|  8.53M|        return m_has_value;
  524|  8.53M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1777|  1.65M|    {
 1778|  1.65M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.65M|        return this->get_unexpected().error();
 1780|  1.65M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  505|  1.65M|    {
  506|  1.65M|        return m_unexpected;
  507|  1.65M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1601|   517k|        : base(std::in_place, std::forward<U>(val)),
 1602|   517k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   517k|    {
 1604|   517k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   517k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   517k|    {
  475|   517k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   517k|    {
 1348|   517k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|     24|        : base(unexpect, std::move(e.error())),
 1648|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|     24|    {
 1650|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|     24|          m_has_value(false)
  484|     24|    {
  485|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1826|   268k|    {
 1827|   268k|        return value();
 1828|   268k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.56M|    {
 1801|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.56M|        return this->get_value();
 1803|  1.56M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  488|  1.56M|    {
  489|  1.56M|        return m_value;
  490|  1.56M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1771|  6.72k|    {
 1772|  6.72k|        return has_value();
 1773|  6.72k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  522|  1.03M|    {
  523|  1.03M|        return m_has_value;
  524|  1.03M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   511k|    {
 1837|   511k|        return std::move(value());
 1838|   511k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   517k|    {
 1801|   517k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   517k|        return this->get_value();
 1803|   517k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  488|   517k|    {
  489|   517k|        return m_value;
  490|   517k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  1.35M|    {
 2011|  1.35M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.35M|                                            std::forward<F>(f));
 2013|  1.35M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  1.35M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.35M|    else {
 1504|  1.35M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.35M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.29M, False: 59.5k]
  |  |  ------------------
  ------------------
 1506|  1.35M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.35M|                   : result(unexpect,
 1508|  59.5k|                            trivial_invoke(std::forward<F>(f),
 1509|  59.5k|                                           std::forward<Exp>(exp).error()));
 1510|  1.35M|    }
 1511|  1.35M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1601|  1.42M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.42M|    {
 1604|  1.42M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.42M|    {
  475|  1.42M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1657|  59.5k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  59.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  59.5k|    {
 1660|  59.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.29M|    {
 1837|  1.29M|        return std::move(value());
 1838|  1.29M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.20M|    {
 3032|  1.20M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.20M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.20M|    {
 3013|  1.20M|        return t.data();
 3014|  1.20M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 2010|   510k|    {
 2011|   510k|        return detail::transform_error_impl(std::move(*this),
 2012|   510k|                                            std::forward<F>(f));
 2013|   510k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1493|   510k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   510k|    else {
 1504|   510k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   510k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 510k, False: 0]
  |  |  ------------------
  ------------------
 1506|   510k|                   ? result(*std::forward<Exp>(exp))
 1507|   510k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   510k|    }
 1511|   510k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1601|   510k|        : base(std::in_place, std::forward<U>(val)),
 1602|   510k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   510k|    {
 1604|   510k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  473|   510k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   510k|    {
  475|   510k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   510k|    {
 1348|   510k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   510k|    {
 1772|   510k|        return has_value();
 1773|   510k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.02M|    {
  523|  1.02M|        return m_has_value;
  524|  1.02M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1836|   510k|    {
 1837|   510k|        return std::move(value());
 1838|   510k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1800|   510k|    {
 1801|   510k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   510k|        return this->get_value();
 1803|   510k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   510k|    {
  489|   510k|        return m_value;
  490|   510k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1996|   637k|    {
 1997|   637k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   637k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1493|   637k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   637k|    else {
 1504|   637k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   637k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   637k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 637k]
  |  |  ------------------
  ------------------
 1506|   637k|                   ? result(*std::forward<Exp>(exp))
 1507|   637k|                   : result(unexpect,
 1508|   637k|                            trivial_invoke(std::forward<F>(f),
 1509|   637k|                                           std::forward<Exp>(exp).error()));
 1510|   637k|    }
 1511|   637k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   270k|    {
 1827|   270k|        return value();
 1828|   270k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3991|   101k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1846|  17.8k|    {
 1847|  17.8k|        return &value();
 1848|  17.8k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2900|   409k|    {
 2901|   409k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   409k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2881|   409k|    {
 2882|   409k|        return decay_copy(t.begin());
 2883|   409k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2125|   409k|{
 2126|   409k|    return SCN_FWD(t);
  ------------------
  |  | 1085|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|   409k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3991|   229k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 2010|   511k|    {
 2011|   511k|        return detail::transform_error_impl(std::move(*this),
 2012|   511k|                                            std::forward<F>(f));
 2013|   511k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1493|   511k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   511k|    else {
 1504|   511k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   511k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   511k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 511k, False: 0]
  |  |  ------------------
  ------------------
 1506|   511k|                   ? result(*std::forward<Exp>(exp))
 1507|   511k|                   : result(unexpect,
 1508|      0|                            trivial_invoke(std::forward<F>(f),
 1509|      0|                                           std::forward<Exp>(exp).error()));
 1510|   511k|    }
 1511|   511k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   511k|        : base(std::in_place, std::forward<U>(val)),
 1602|   511k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   511k|    {
 1604|   511k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  473|   511k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   511k|    {
  475|   511k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   511k|    {
 1348|   511k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1771|   511k|    {
 1772|   511k|        return has_value();
 1773|   511k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.02M|    {
  523|  1.02M|        return m_has_value;
  524|  1.02M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   511k|    {
 1837|   511k|        return std::move(value());
 1838|   511k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   511k|    {
 1801|   511k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   511k|        return this->get_value();
 1803|   511k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   511k|    {
  489|   511k|        return m_value;
  490|   511k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1996|   568k|    {
 1997|   568k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1998|   568k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1493|   568k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   568k|    else {
 1504|   568k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   568k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   568k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 568k]
  |  |  ------------------
  ------------------
 1506|   568k|                   ? result(*std::forward<Exp>(exp))
 1507|   568k|                   : result(unexpect,
 1508|   568k|                            trivial_invoke(std::forward<F>(f),
 1509|   568k|                                           std::forward<Exp>(exp).error()));
 1510|   568k|    }
 1511|   568k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3964|   568k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   568k|    static_cast<    \
  |  | 1084|   568k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   568k|    {
 3966|   568k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   270k|    {
 1827|   270k|        return value();
 1828|   270k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1846|  6.69k|    {
 1847|  6.69k|        return &value();
 1848|  6.69k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3964|   637k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1083|   637k|    static_cast<    \
  |  | 1084|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3965|   637k|    {
 3966|   637k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  50.7M|    {
 4413|  50.7M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  50.7M|                                           m_current_view.size());
 4415|  50.7M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   984k|    {
 6342|   984k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 984k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   984k|        return static_cast<std::size_t>(m_desc &
 6347|   984k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   984k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|  1.96M|    {
 6368|  1.96M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  1.96M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   984k|    {
 6310|   984k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 984k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   984k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 984k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   984k|        const auto t = type(id);
 6322|   984k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   984k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 984k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   984k|        basic_scan_arg<Context> arg;
 6327|   984k|        arg.m_type = t;
 6328|   984k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 984k, False: 0]
  ------------------
 6329|   984k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   984k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   984k|        return arg;
 6335|   984k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   984k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   984k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   984k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   984k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   984k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   984k|    {
 6372|   984k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   984k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|  1.86M|    {
 6125|  1.86M|        return m_type != detail::arg_type::none_type;
 6126|  1.86M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   151k|{
 9606|   151k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   151k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   151k|{
 9463|   151k|#define SCN_VISIT(Type)                                                    \
 9464|   151k|    do {                                                                   \
 9465|   151k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   151k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   151k|        }                                                                  \
 9468|   151k|        else {                                                             \
 9469|   151k|            return vis(monostate_val);                                     \
 9470|   151k|        }                                                                  \
 9471|   151k|    } while (false)
 9472|       |
 9473|   151k|    monostate monostate_val{};
 9474|       |
 9475|   151k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 151k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 151k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 151k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 151k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 151k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 151k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 151k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 151k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 151k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 151k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 151k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 151k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 151k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 151k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 151k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 151k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 151k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  48.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 48.2k, False: 102k]
  ------------------
 9519|  48.2k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  48.2k|    do {                                                                   \
  |  | 9465|  48.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  48.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  48.2k|        }                                                                  \
  |  | 9468|  48.2k|        else {                                                             \
  |  | 9469|  48.2k|            return vis(monostate_val);                                     \
  |  | 9470|  48.2k|        }                                                                  \
  |  | 9471|  48.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  99.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 50.7k, False: 100k]
  ------------------
 9521|  99.0k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  99.0k|    do {                                                                   \
  |  | 9465|  99.0k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  99.0k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  99.0k|        }                                                                  \
  |  | 9468|  99.0k|        else {                                                             \
  |  | 9469|  99.0k|            return vis(monostate_val);                                     \
  |  | 9470|  99.0k|        }                                                                  \
  |  | 9471|  99.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   151k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 52.0k, False: 99.0k]
  ------------------
 9523|   151k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   151k|    do {                                                                   \
  |  | 9465|   151k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   151k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   151k|        }                                                                  \
  |  | 9468|   151k|        else {                                                             \
  |  | 9469|   151k|            return vis(monostate_val);                                     \
  |  | 9470|   151k|        }                                                                  \
  |  | 9471|   151k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   151k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 151k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   151k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 151k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 151k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 151k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 151k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 151k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 151k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 151k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 151k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 151k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 151k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   151k|            SCN_CLANG_POP
 9585|   151k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  2.64M|{
 6171|  2.64M|    return arg.m_type;
 6172|  2.64M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  1.08M|{
 6183|  1.08M|    return arg.m_value;
 6184|  1.08M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   406k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   406k|    {
 9129|   406k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   561k|{
 4755|   561k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 561k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   561k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   561k|                            ranges::default_sentinel};
 4761|   561k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   561k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   561k|    {
 4519|   561k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   561k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   561k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   154k|{
 9606|   154k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   154k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   154k|{
 9463|   154k|#define SCN_VISIT(Type)                                                    \
 9464|   154k|    do {                                                                   \
 9465|   154k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   154k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   154k|        }                                                                  \
 9468|   154k|        else {                                                             \
 9469|   154k|            return vis(monostate_val);                                     \
 9470|   154k|        }                                                                  \
 9471|   154k|    } while (false)
 9472|       |
 9473|   154k|    monostate monostate_val{};
 9474|       |
 9475|   154k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 154k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 154k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 154k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 154k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 154k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 154k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 154k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 154k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 154k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 154k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 154k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 154k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 154k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 154k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 154k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 154k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 154k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  49.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 49.8k, False: 105k]
  ------------------
 9519|  49.8k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  49.8k|    do {                                                                   \
  |  | 9465|  49.8k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  49.8k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  49.8k|        }                                                                  \
  |  | 9468|  49.8k|        else {                                                             \
  |  | 9469|  49.8k|            return vis(monostate_val);                                     \
  |  | 9470|  49.8k|        }                                                                  \
  |  | 9471|  49.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   101k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 52.0k, False: 102k]
  ------------------
 9521|   101k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   101k|    do {                                                                   \
  |  | 9465|   101k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   101k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   101k|        }                                                                  \
  |  | 9468|   101k|        else {                                                             \
  |  | 9469|   101k|            return vis(monostate_val);                                     \
  |  | 9470|   101k|        }                                                                  \
  |  | 9471|   101k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   154k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 52.9k, False: 101k]
  ------------------
 9523|   154k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   154k|    do {                                                                   \
  |  | 9465|   154k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   154k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   154k|        }                                                                  \
  |  | 9468|   154k|        else {                                                             \
  |  | 9469|   154k|            return vis(monostate_val);                                     \
  |  | 9470|   154k|        }                                                                  \
  |  | 9471|   154k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   154k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 154k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   154k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 154k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 154k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 154k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 154k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 154k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 154k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 154k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 154k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 154k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 154k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   154k|            SCN_CLANG_POP
 9585|   154k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|   374k|        : m_format{format},
 6445|   374k|          m_next_arg_id{next_arg_id},
 6446|   374k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   374k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   374k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   374k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   374k|    {
 6452|   374k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   374k|    {
 3107|   374k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   374k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   374k|    {
 3073|   374k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   374k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   374k|{
 7971|   374k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   374k|    handler.check_args_exhausted();
 7973|   374k|    return handler.get_error();
 7974|   374k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   374k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   374k|    auto begin = format.data();
 7939|   374k|    auto it = begin;
 7940|   374k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   695k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 374k, False: 321k]
  ------------------
 7943|   374k|        const auto ch = *it++;
 7944|   374k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 374k, False: 0]
  ------------------
 7945|   374k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   374k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   374k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 52.7k, False: 321k]
  ------------------
 7949|  52.7k|                return;
 7950|  52.7k|            }
 7951|   374k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   374k|    }
 7962|       |
 7963|   321k|    handler.on_literal_text(begin, end);
 7964|   321k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|   374k|{
 7868|   374k|    struct id_adapter {
 7869|   374k|        constexpr void operator()()
 7870|   374k|        {
 7871|   374k|            arg_id = handler.on_arg_id();
 7872|   374k|        }
 7873|   374k|        constexpr void operator()(std::size_t id)
 7874|   374k|        {
 7875|   374k|            arg_id = handler.on_arg_id(id);
 7876|   374k|        }
 7877|       |
 7878|   374k|        constexpr void on_error(const char* msg)
 7879|   374k|        {
 7880|   374k|            SCN_UNLIKELY_ATTR
 7881|   374k|            handler.on_error(msg);
 7882|   374k|        }
 7883|       |
 7884|   374k|        Handler& handler;
 7885|   374k|        std::size_t arg_id;
 7886|   374k|    };
 7887|       |
 7888|   374k|    ++begin;
 7889|   374k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   374k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 374k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   374k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 374k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   374k|    else {
 7901|   374k|        auto adapter = id_adapter{handler, 0};
 7902|   374k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   374k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   374k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 374k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   374k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 374k, False: 0]
  ------------------
 7913|   374k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   374k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   374k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  |  Branch (1014:45): [True: 0, False: 374k]
  |  |  |  Branch (1014:45): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   374k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   374k|    }
 7929|   374k|    return begin + 1;
 7930|   374k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   780k|    {
 9027|   780k|        return m_args.get(id);
 9028|   780k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   780k|    {
 6480|   780k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 780k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   780k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   780k|        do_check_arg_id(id);
 6488|   780k|        return id;
 6489|   780k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   780k|{
 6974|   780k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   780k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   780k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   374k|{
 7367|   374k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   374k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 374k, False: 0]
  |  Branch (7368:26): [True: 0, False: 374k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   374k|    handler();
 7373|   374k|    return begin;
 7374|   374k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   374k|        {
 7871|   374k|            arg_id = handler.on_arg_id();
 7872|   374k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   780k|    {
 6475|   780k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   780k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|  1.56M|    {
 6464|  1.56M|        return m_format.data();
 6465|  1.56M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   374k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   374k|    {
 8055|   374k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   374k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|   374k|{
 7784|   374k|    auto do_presentation = [&]() -> const CharT* {
 7785|   374k|        if (*begin == CharT{'['}) {
 7786|   374k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   374k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   374k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   374k|                return begin;
 7792|   374k|            }
 7793|   374k|            handler.on_character_set_string(set);
 7794|   374k|            return begin;
 7795|   374k|        }
 7796|   374k|        if (*begin == CharT{'/'}) {
 7797|   374k|            return parse_presentation_regex(begin, end, handler);
 7798|   374k|        }
 7799|   374k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   374k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   374k|            handler.on_error("Invalid type specifier in format string");
 7802|   374k|            return begin;
 7803|   374k|        }
 7804|   374k|        handler.on_type(type);
 7805|   374k|        return begin;
 7806|   374k|    };
 7807|       |
 7808|   374k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 374k, False: 0]
  |  Branch (7808:28): [True: 374k, False: 0]
  ------------------
 7809|   374k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 374k, False: 0]
  |  Branch (7809:36): [True: 273k, False: 100k]
  ------------------
 7810|   273k|        return do_presentation();
 7811|   273k|    }
 7812|       |
 7813|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|   100k|    begin = parse_align(begin, end, handler);
 7819|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|   100k|    begin = parse_width(begin, end, handler);
 7825|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|   100k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 100k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|   100k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 100k, False: 0]
  ------------------
 7844|   100k|        handler.on_localized();
 7845|   100k|        ++begin;
 7846|   100k|    }
 7847|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|   100k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 100k, False: 0]
  |  Branch (7852:25): [True: 0, False: 100k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|   100k|    return begin;
 7861|   100k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|   780k|{
 7431|   780k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 568k, False: 212k]
  |  Branch (7431:33): [True: 568k, False: 0]
  ------------------
 7432|   780k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 212k, False: 0]
  |  Branch (7432:33): [True: 212k, False: 0]
  ------------------
 7433|   780k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   273k|    auto do_presentation = [&]() -> const CharT* {
 7785|   273k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 273k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   273k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 273k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   273k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   273k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 273k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   273k|        handler.on_type(type);
 7805|   273k|        return begin;
 7806|   273k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|   568k|{
 7379|   568k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 568k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 568k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 568k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 568k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 568k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 568k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 568k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 568k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 568k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 568k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|   231k|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 231k, False: 336k]
  ------------------
 7398|   231k|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 568k]
  ------------------
 7399|   231k|            return presentation_type::float_hex;
 7400|  28.7k|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 28.7k, False: 539k]
  ------------------
 7401|  28.7k|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 568k]
  ------------------
 7402|  28.7k|            return presentation_type::float_scientific;
 7403|   126k|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 126k, False: 441k]
  ------------------
 7404|   126k|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 568k]
  ------------------
 7405|   126k|            return presentation_type::float_fixed;
 7406|   181k|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 181k, False: 386k]
  ------------------
 7407|   181k|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 568k]
  ------------------
 7408|   181k|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 568k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 568k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 568k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 568k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 568k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 568k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|      0|        default:
  ------------------
  |  Branch (7423:9): [True: 0, False: 568k]
  ------------------
 7424|      0|            return presentation_type::none;
 7425|   568k|    }
 7426|   568k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|   100k|{
 7456|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|   100k|    auto check_align = [](wchar_t ch) {
 7459|   100k|        switch (ch) {
 7460|   100k|            case L'<':
 7461|   100k|                return align_type::left;
 7462|   100k|            case L'>':
 7463|   100k|                return align_type::right;
 7464|   100k|            case L'^':
 7465|   100k|                return align_type::center;
 7466|   100k|            default:
 7467|   100k|                return align_type::none;
 7468|   100k|        }
 7469|   100k|    };
 7470|       |
 7471|   100k|    auto potential_fill_len = code_point_length(begin, end);
 7472|   100k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  |  Branch (1014:45): [True: 0, False: 100k]
  |  |  |  Branch (1014:45): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7473|   100k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|   100k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|   100k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|   100k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|   100k|    const auto begin_before_fill = begin;
 7483|   100k|    begin += potential_fill_len;
 7484|       |
 7485|   100k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 100k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|   100k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|   100k|    const auto begin_after_fill = begin;
 7491|   100k|    ++begin;
 7492|       |
 7493|   100k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 100k, False: 0]
  ------------------
 7494|   100k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|   100k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 100k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|   100k|    }
 7502|       |
 7503|   100k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 100k, False: 0]
  ------------------
 7504|   100k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 100k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|   100k|        return begin_before_fill;
 7509|   100k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|   100k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|   212k|{
 7438|   212k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|   212k|    else {
 7443|   212k|        const auto lengths =
 7444|   212k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|   212k|            "\3\4";
 7446|   212k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|   212k|        return len;
 7448|   212k|    }
 7449|   212k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   201k|    auto check_align = [](wchar_t ch) {
 7459|   201k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 201k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 201k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 201k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   201k|            default:
  ------------------
  |  Branch (7466:13): [True: 201k, False: 0]
  ------------------
 7467|   201k|                return align_type::none;
 7468|   201k|        }
 7469|   201k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|   100k|{
 7521|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|   100k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 100k, False: 0]
  |  Branch (7523:33): [True: 0, False: 100k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|   100k|    return begin;
 7534|   100k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|   100k|    {
 8060|   100k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|   100k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 100k, False: 0]
  ------------------
 8062|   100k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 100k, False: 0]
  ------------------
 8063|   100k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 100k]
  ------------------
 8064|   100k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|   100k|        Handler::on_localized();
 8072|   100k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7198|   398k|    {
 7199|   398k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7200|   398k|            m_specs.localized = true;
 7201|       |        }
 7202|       |        else {
 7203|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7204|       |        }
 7205|   398k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   374k|{
 9606|   374k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   374k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   374k|{
 9463|   374k|#define SCN_VISIT(Type)                                                    \
 9464|   374k|    do {                                                                   \
 9465|   374k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   374k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   374k|        }                                                                  \
 9468|   374k|        else {                                                             \
 9469|   374k|            return vis(monostate_val);                                     \
 9470|   374k|        }                                                                  \
 9471|   374k|    } while (false)
 9472|       |
 9473|   374k|    monostate monostate_val{};
 9474|       |
 9475|   374k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 374k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 374k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 374k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 374k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 374k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 374k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 374k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 374k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 374k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 374k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 374k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 374k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 374k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 374k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 374k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 374k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 374k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   121k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 121k, False: 252k]
  ------------------
 9519|   121k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   121k|    do {                                                                   \
  |  | 9465|   121k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   121k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   121k|        }                                                                  \
  |  | 9468|   121k|        else {                                                             \
  |  | 9469|   121k|            return vis(monostate_val);                                     \
  |  | 9470|   121k|        }                                                                  \
  |  | 9471|   121k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   246k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 125k, False: 248k]
  ------------------
 9521|   246k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   246k|    do {                                                                   \
  |  | 9465|   246k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   246k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   246k|        }                                                                  \
  |  | 9468|   246k|        else {                                                             \
  |  | 9469|   246k|            return vis(monostate_val);                                     \
  |  | 9470|   246k|        }                                                                  \
  |  | 9471|   246k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   374k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 127k, False: 246k]
  ------------------
 9523|   374k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   374k|    do {                                                                   \
  |  | 9465|   374k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   374k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   374k|        }                                                                  \
  |  | 9468|   374k|        else {                                                             \
  |  | 9469|   374k|            return vis(monostate_val);                                     \
  |  | 9470|   374k|        }                                                                  \
  |  | 9471|   374k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   374k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 374k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   374k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 374k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 374k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 374k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 374k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 374k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 374k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 374k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 374k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 374k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 374k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   374k|            SCN_CLANG_POP
 9585|   374k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|   406k|        : m_format{format},
 6445|   406k|          m_next_arg_id{next_arg_id},
 6446|   406k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   406k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   406k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   406k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   406k|    {
 6452|   406k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   406k|{
 7971|   406k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   406k|    handler.check_args_exhausted();
 7973|   406k|    return handler.get_error();
 7974|   406k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   406k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   406k|    auto begin = format.data();
 7939|   406k|    auto it = begin;
 7940|   406k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   760k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 406k, False: 353k]
  ------------------
 7943|   406k|        const auto ch = *it++;
 7944|   406k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 406k, False: 0]
  ------------------
 7945|   406k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   406k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   406k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 52.7k, False: 353k]
  ------------------
 7949|  52.7k|                return;
 7950|  52.7k|            }
 7951|   406k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   406k|    }
 7962|       |
 7963|   353k|    handler.on_literal_text(begin, end);
 7964|   353k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|   353k|    {
 9166|   353k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   353k|    static_cast<    \
  |  | 1084|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   353k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|   406k|{
 7868|   406k|    struct id_adapter {
 7869|   406k|        constexpr void operator()()
 7870|   406k|        {
 7871|   406k|            arg_id = handler.on_arg_id();
 7872|   406k|        }
 7873|   406k|        constexpr void operator()(std::size_t id)
 7874|   406k|        {
 7875|   406k|            arg_id = handler.on_arg_id(id);
 7876|   406k|        }
 7877|       |
 7878|   406k|        constexpr void on_error(const char* msg)
 7879|   406k|        {
 7880|   406k|            SCN_UNLIKELY_ATTR
 7881|   406k|            handler.on_error(msg);
 7882|   406k|        }
 7883|       |
 7884|   406k|        Handler& handler;
 7885|   406k|        std::size_t arg_id;
 7886|   406k|    };
 7887|       |
 7888|   406k|    ++begin;
 7889|   406k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   406k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 406k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   406k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 406k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   406k|    else {
 7901|   406k|        auto adapter = id_adapter{handler, 0};
 7902|   406k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   406k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   406k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 406k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   406k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 406k, False: 0]
  ------------------
 7913|   406k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   406k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   406k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  |  Branch (1014:45): [True: 0, False: 406k]
  |  |  |  Branch (1014:45): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   406k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   406k|    }
 7929|   406k|    return begin + 1;
 7930|   406k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   406k|{
 7367|   406k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   406k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 406k, False: 0]
  |  Branch (7368:26): [True: 0, False: 406k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   406k|    handler();
 7373|   406k|    return begin;
 7374|   406k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   406k|        {
 7871|   406k|            arg_id = handler.on_arg_id();
 7872|   406k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   406k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   406k|    {
 8055|   406k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   406k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   406k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   406k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7783|   406k|{
 7784|   406k|    auto do_presentation = [&]() -> const CharT* {
 7785|   406k|        if (*begin == CharT{'['}) {
 7786|   406k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   406k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   406k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   406k|                return begin;
 7792|   406k|            }
 7793|   406k|            handler.on_character_set_string(set);
 7794|   406k|            return begin;
 7795|   406k|        }
 7796|   406k|        if (*begin == CharT{'/'}) {
 7797|   406k|            return parse_presentation_regex(begin, end, handler);
 7798|   406k|        }
 7799|   406k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   406k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   406k|            handler.on_error("Invalid type specifier in format string");
 7802|   406k|            return begin;
 7803|   406k|        }
 7804|   406k|        handler.on_type(type);
 7805|   406k|        return begin;
 7806|   406k|    };
 7807|       |
 7808|   406k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 406k, False: 0]
  |  Branch (7808:28): [True: 406k, False: 0]
  ------------------
 7809|   406k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 406k, False: 0]
  |  Branch (7809:36): [True: 294k, False: 111k]
  ------------------
 7810|   294k|        return do_presentation();
 7811|   294k|    }
 7812|       |
 7813|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|   111k|    begin = parse_align(begin, end, handler);
 7819|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|   111k|    begin = parse_width(begin, end, handler);
 7825|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|   111k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 111k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|   111k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 111k, False: 0]
  ------------------
 7844|   111k|        handler.on_localized();
 7845|   111k|        ++begin;
 7846|   111k|    }
 7847|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|   111k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 111k, False: 0]
  |  Branch (7852:25): [True: 0, False: 111k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|   111k|    return begin;
 7861|   111k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   294k|    auto do_presentation = [&]() -> const CharT* {
 7785|   294k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 294k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   294k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 294k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   294k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   294k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   294k|        handler.on_type(type);
 7805|   294k|        return begin;
 7806|   294k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7455|   111k|{
 7456|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|   111k|    auto check_align = [](wchar_t ch) {
 7459|   111k|        switch (ch) {
 7460|   111k|            case L'<':
 7461|   111k|                return align_type::left;
 7462|   111k|            case L'>':
 7463|   111k|                return align_type::right;
 7464|   111k|            case L'^':
 7465|   111k|                return align_type::center;
 7466|   111k|            default:
 7467|   111k|                return align_type::none;
 7468|   111k|        }
 7469|   111k|    };
 7470|       |
 7471|   111k|    auto potential_fill_len = code_point_length(begin, end);
 7472|   111k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  |  Branch (1014:45): [True: 0, False: 111k]
  |  |  |  Branch (1014:45): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7473|   111k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|   111k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|   111k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|   111k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|   111k|    const auto begin_before_fill = begin;
 7483|   111k|    begin += potential_fill_len;
 7484|       |
 7485|   111k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 111k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|   111k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|   111k|    const auto begin_after_fill = begin;
 7491|   111k|    ++begin;
 7492|       |
 7493|   111k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 111k, False: 0]
  ------------------
 7494|   111k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|   111k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 111k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|   111k|    }
 7502|       |
 7503|   111k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 111k, False: 0]
  ------------------
 7504|   111k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 111k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|   111k|        return begin_before_fill;
 7509|   111k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|   111k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   223k|    auto check_align = [](wchar_t ch) {
 7459|   223k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 223k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 223k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 223k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   223k|            default:
  ------------------
  |  Branch (7466:13): [True: 223k, False: 0]
  ------------------
 7467|   223k|                return align_type::none;
 7468|   223k|        }
 7469|   223k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7520|   111k|{
 7521|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|   111k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 111k, False: 0]
  |  Branch (7523:33): [True: 0, False: 111k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|   111k|    return begin;
 7534|   111k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 8059|   111k|    {
 8060|   111k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|   111k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 111k, False: 0]
  ------------------
 8062|   111k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 111k, False: 0]
  ------------------
 8063|   111k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 111k]
  ------------------
 8064|   111k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|   111k|        Handler::on_localized();
 8072|   111k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   406k|{
 9606|   406k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   406k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   406k|{
 9463|   406k|#define SCN_VISIT(Type)                                                    \
 9464|   406k|    do {                                                                   \
 9465|   406k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   406k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   406k|        }                                                                  \
 9468|   406k|        else {                                                             \
 9469|   406k|            return vis(monostate_val);                                     \
 9470|   406k|        }                                                                  \
 9471|   406k|    } while (false)
 9472|       |
 9473|   406k|    monostate monostate_val{};
 9474|       |
 9475|   406k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 406k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 406k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 406k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 406k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 406k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 406k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 406k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 406k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 406k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 406k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 406k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 406k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 406k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 406k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 406k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 406k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 406k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   131k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 131k, False: 274k]
  ------------------
 9519|   131k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   131k|    do {                                                                   \
  |  | 9465|   131k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   131k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   131k|        }                                                                  \
  |  | 9468|   131k|        else {                                                             \
  |  | 9469|   131k|            return vis(monostate_val);                                     \
  |  | 9470|   131k|        }                                                                  \
  |  | 9471|   131k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   267k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 136k, False: 269k]
  ------------------
 9521|   267k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   267k|    do {                                                                   \
  |  | 9465|   267k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   267k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   267k|        }                                                                  \
  |  | 9468|   267k|        else {                                                             \
  |  | 9469|   267k|            return vis(monostate_val);                                     \
  |  | 9470|   267k|        }                                                                  \
  |  | 9471|   267k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   406k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 138k, False: 267k]
  ------------------
 9523|   406k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   406k|    do {                                                                   \
  |  | 9465|   406k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   406k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   406k|        }                                                                  \
  |  | 9468|   406k|        else {                                                             \
  |  | 9469|   406k|            return vis(monostate_val);                                     \
  |  | 9470|   406k|        }                                                                  \
  |  | 9471|   406k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   406k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 406k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   406k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 406k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 406k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 406k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 406k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 406k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 406k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 406k]
  ------------------
 9559|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 406k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 406k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 406k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   406k|            SCN_CLANG_POP
 9585|   406k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  68.6k|    {
 4408|  68.6k|        return sync(0);
 4409|  68.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|   937k|    {
 6342|   937k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   937k|        return static_cast<std::size_t>(m_desc &
 6347|   937k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   937k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|  1.87M|    {
 6368|  1.87M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  1.87M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|   937k|    {
 6310|   937k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   937k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   937k|        const auto t = type(id);
 6322|   937k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   937k|        basic_scan_arg<Context> arg;
 6327|   937k|        arg.m_type = t;
 6328|   937k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 937k, False: 0]
  ------------------
 6329|   937k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   937k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   937k|        return arg;
 6335|   937k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|   937k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   937k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   937k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   937k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   937k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|   937k|    {
 6372|   937k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   937k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|  1.78M|    {
 6125|  1.78M|        return m_type != detail::arg_type::none_type;
 6126|  1.78M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   139k|{
 9606|   139k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   139k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   139k|{
 9463|   139k|#define SCN_VISIT(Type)                                                    \
 9464|   139k|    do {                                                                   \
 9465|   139k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   139k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   139k|        }                                                                  \
 9468|   139k|        else {                                                             \
 9469|   139k|            return vis(monostate_val);                                     \
 9470|   139k|        }                                                                  \
 9471|   139k|    } while (false)
 9472|       |
 9473|   139k|    monostate monostate_val{};
 9474|       |
 9475|   139k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 139k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 139k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 139k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 139k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 139k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 139k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 139k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 139k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 139k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 139k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 139k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 139k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 139k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 139k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 139k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 139k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 139k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  41.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 41.3k, False: 98.0k]
  ------------------
 9519|  41.3k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  41.3k|    do {                                                                   \
  |  | 9465|  41.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  41.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  41.3k|        }                                                                  \
  |  | 9468|  41.3k|        else {                                                             \
  |  | 9469|  41.3k|            return vis(monostate_val);                                     \
  |  | 9470|  41.3k|        }                                                                  \
  |  | 9471|  41.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  89.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 47.9k, False: 91.4k]
  ------------------
 9521|  89.2k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  89.2k|    do {                                                                   \
  |  | 9465|  89.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  89.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  89.2k|        }                                                                  \
  |  | 9468|  89.2k|        else {                                                             \
  |  | 9469|  89.2k|            return vis(monostate_val);                                     \
  |  | 9470|  89.2k|        }                                                                  \
  |  | 9471|  89.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   139k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 50.1k, False: 89.2k]
  ------------------
 9523|   139k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   139k|    do {                                                                   \
  |  | 9465|   139k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   139k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   139k|        }                                                                  \
  |  | 9468|   139k|        else {                                                             \
  |  | 9469|   139k|            return vis(monostate_val);                                     \
  |  | 9470|   139k|        }                                                                  \
  |  | 9471|   139k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   139k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 139k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   139k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 139k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 139k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 139k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 139k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 139k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 139k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 139k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 139k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 139k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 139k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   139k|            SCN_CLANG_POP
 9585|   139k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  2.53M|{
 6171|  2.53M|    return arg.m_type;
 6172|  2.53M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  1.03M|{
 6183|  1.03M|    return arg.m_value;
 6184|  1.03M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   375k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   375k|    {
 9129|   375k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   376k|        : m_format{format},
 6445|   376k|          m_next_arg_id{next_arg_id},
 6446|   376k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   376k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   376k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   376k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   376k|    {
 6452|   376k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   376k|    {
 3107|   376k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   376k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   376k|    {
 3073|   376k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   376k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   376k|{
 7971|   376k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   376k|    handler.check_args_exhausted();
 7973|   376k|    return handler.get_error();
 7974|   376k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   376k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   376k|    auto begin = format.data();
 7939|   376k|    auto it = begin;
 7940|   376k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   646k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 376k, False: 270k]
  ------------------
 7943|   376k|        const auto ch = *it++;
 7944|   376k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 376k, False: 0]
  ------------------
 7945|   376k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   376k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   376k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 105k, False: 270k]
  ------------------
 7949|   105k|                return;
 7950|   105k|            }
 7951|   376k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   376k|    }
 7962|       |
 7963|   270k|    handler.on_literal_text(begin, end);
 7964|   270k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|   376k|{
 7868|   376k|    struct id_adapter {
 7869|   376k|        constexpr void operator()()
 7870|   376k|        {
 7871|   376k|            arg_id = handler.on_arg_id();
 7872|   376k|        }
 7873|   376k|        constexpr void operator()(std::size_t id)
 7874|   376k|        {
 7875|   376k|            arg_id = handler.on_arg_id(id);
 7876|   376k|        }
 7877|       |
 7878|   376k|        constexpr void on_error(const char* msg)
 7879|   376k|        {
 7880|   376k|            SCN_UNLIKELY_ATTR
 7881|   376k|            handler.on_error(msg);
 7882|   376k|        }
 7883|       |
 7884|   376k|        Handler& handler;
 7885|   376k|        std::size_t arg_id;
 7886|   376k|    };
 7887|       |
 7888|   376k|    ++begin;
 7889|   376k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   376k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 376k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   376k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 376k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   376k|    else {
 7901|   376k|        auto adapter = id_adapter{handler, 0};
 7902|   376k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   376k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   376k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 376k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   376k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 376k, False: 0]
  ------------------
 7913|   376k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   376k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   376k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  |  Branch (1014:45): [True: 0, False: 376k]
  |  |  |  Branch (1014:45): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   376k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   376k|    }
 7929|   376k|    return begin + 1;
 7930|   376k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   752k|    {
 9027|   752k|        return m_args.get(id);
 9028|   752k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   752k|    {
 6480|   752k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 752k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   752k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   752k|        do_check_arg_id(id);
 6488|   752k|        return id;
 6489|   752k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   752k|{
 6974|   752k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   752k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   752k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   376k|{
 7367|   376k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   376k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 376k, False: 0]
  |  Branch (7368:26): [True: 0, False: 376k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   376k|    handler();
 7373|   376k|    return begin;
 7374|   376k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   376k|        {
 7871|   376k|            arg_id = handler.on_arg_id();
 7872|   376k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   752k|    {
 6475|   752k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   752k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   515k|{
 4755|   515k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 515k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   515k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   515k|                            ranges::default_sentinel};
 4761|   515k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   515k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   515k|    {
 4519|   515k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   515k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   515k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   515k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   515k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|  1.50M|    {
 6464|  1.50M|        return m_format.data();
 6465|  1.50M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   376k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   376k|    {
 8055|   376k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   376k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|   376k|{
 7784|   376k|    auto do_presentation = [&]() -> const CharT* {
 7785|   376k|        if (*begin == CharT{'['}) {
 7786|   376k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   376k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   376k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   376k|                return begin;
 7792|   376k|            }
 7793|   376k|            handler.on_character_set_string(set);
 7794|   376k|            return begin;
 7795|   376k|        }
 7796|   376k|        if (*begin == CharT{'/'}) {
 7797|   376k|            return parse_presentation_regex(begin, end, handler);
 7798|   376k|        }
 7799|   376k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   376k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   376k|            handler.on_error("Invalid type specifier in format string");
 7802|   376k|            return begin;
 7803|   376k|        }
 7804|   376k|        handler.on_type(type);
 7805|   376k|        return begin;
 7806|   376k|    };
 7807|       |
 7808|   376k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 376k, False: 0]
  |  Branch (7808:28): [True: 376k, False: 0]
  ------------------
 7809|   376k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 376k, False: 0]
  |  Branch (7809:36): [True: 283k, False: 92.9k]
  ------------------
 7810|   283k|        return do_presentation();
 7811|   283k|    }
 7812|       |
 7813|  92.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  92.9k|    begin = parse_align(begin, end, handler);
 7819|  92.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  92.9k|    begin = parse_width(begin, end, handler);
 7825|  92.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  92.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 92.9k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  92.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 92.9k, False: 0]
  ------------------
 7844|  92.9k|        handler.on_localized();
 7845|  92.9k|        ++begin;
 7846|  92.9k|    }
 7847|  92.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  92.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 92.9k, False: 0]
  |  Branch (7852:25): [True: 0, False: 92.9k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|  92.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  92.9k|    return begin;
 7861|  92.9k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|   752k|{
 7431|   752k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 566k, False: 185k]
  |  Branch (7431:33): [True: 566k, False: 0]
  ------------------
 7432|   752k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 185k, False: 0]
  |  Branch (7432:33): [True: 185k, False: 0]
  ------------------
 7433|   752k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   283k|    auto do_presentation = [&]() -> const CharT* {
 7785|   283k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 283k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   283k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 283k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   283k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   283k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 283k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   283k|        handler.on_type(type);
 7805|   283k|        return begin;
 7806|   283k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|   566k|{
 7379|   566k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 566k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 566k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 566k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 566k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 566k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 566k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 566k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 566k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 566k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 566k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|   203k|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 203k, False: 362k]
  ------------------
 7398|   203k|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 566k]
  ------------------
 7399|   203k|            return presentation_type::float_hex;
 7400|  46.1k|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 46.1k, False: 520k]
  ------------------
 7401|  46.1k|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 566k]
  ------------------
 7402|  46.1k|            return presentation_type::float_scientific;
 7403|   145k|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 145k, False: 420k]
  ------------------
 7404|   145k|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 566k]
  ------------------
 7405|   145k|            return presentation_type::float_fixed;
 7406|   170k|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 170k, False: 395k]
  ------------------
 7407|   170k|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 566k]
  ------------------
 7408|   170k|            return presentation_type::float_general;
 7409|      0|        case 's':
  ------------------
  |  Branch (7409:9): [True: 0, False: 566k]
  ------------------
 7410|      0|            return presentation_type::string;
 7411|      0|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 0, False: 566k]
  ------------------
 7412|      0|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 566k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 566k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 566k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 566k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|      0|        default:
  ------------------
  |  Branch (7423:9): [True: 0, False: 566k]
  ------------------
 7424|      0|            return presentation_type::none;
 7425|   566k|    }
 7426|   566k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  92.9k|{
 7456|  92.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  92.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  92.9k|    auto check_align = [](wchar_t ch) {
 7459|  92.9k|        switch (ch) {
 7460|  92.9k|            case L'<':
 7461|  92.9k|                return align_type::left;
 7462|  92.9k|            case L'>':
 7463|  92.9k|                return align_type::right;
 7464|  92.9k|            case L'^':
 7465|  92.9k|                return align_type::center;
 7466|  92.9k|            default:
 7467|  92.9k|                return align_type::none;
 7468|  92.9k|        }
 7469|  92.9k|    };
 7470|       |
 7471|  92.9k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  92.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 92.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7473|  92.9k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  92.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  92.9k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  92.9k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  92.9k|    const auto begin_before_fill = begin;
 7483|  92.9k|    begin += potential_fill_len;
 7484|       |
 7485|  92.9k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 92.9k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  92.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  92.9k|    const auto begin_after_fill = begin;
 7491|  92.9k|    ++begin;
 7492|       |
 7493|  92.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 92.9k, False: 0]
  ------------------
 7494|  92.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.9k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  92.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 92.9k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  92.9k|    }
 7502|       |
 7503|  92.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 92.9k, False: 0]
  ------------------
 7504|  92.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 92.9k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  92.9k|        return begin_before_fill;
 7509|  92.9k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  92.9k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|   185k|{
 7438|   185k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|   185k|    if constexpr (sizeof(CharT) != 1) {
 7440|   185k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|   185k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|   185k|    auto check_align = [](wchar_t ch) {
 7459|   185k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 185k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 185k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 185k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   185k|            default:
  ------------------
  |  Branch (7466:13): [True: 185k, False: 0]
  ------------------
 7467|   185k|                return align_type::none;
 7468|   185k|        }
 7469|   185k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  92.9k|{
 7521|  92.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  92.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  92.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 92.9k, False: 0]
  |  Branch (7523:33): [True: 0, False: 92.9k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  92.9k|    return begin;
 7534|  92.9k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|  92.9k|    {
 8060|  92.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  92.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 92.9k, False: 0]
  ------------------
 8062|  92.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 92.9k, False: 0]
  ------------------
 8063|  92.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 92.9k]
  ------------------
 8064|  92.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  92.9k|        Handler::on_localized();
 8072|  92.9k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   376k|{
 9606|   376k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   376k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   376k|{
 9463|   376k|#define SCN_VISIT(Type)                                                    \
 9464|   376k|    do {                                                                   \
 9465|   376k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   376k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   376k|        }                                                                  \
 9468|   376k|        else {                                                             \
 9469|   376k|            return vis(monostate_val);                                     \
 9470|   376k|        }                                                                  \
 9471|   376k|    } while (false)
 9472|       |
 9473|   376k|    monostate monostate_val{};
 9474|       |
 9475|   376k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 376k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 376k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 376k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 376k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 376k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 376k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 376k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 376k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 376k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 376k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 376k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 376k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 376k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 376k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 376k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 376k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 376k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   118k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 118k, False: 257k]
  ------------------
 9519|   118k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   118k|    do {                                                                   \
  |  | 9465|   118k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   118k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   118k|        }                                                                  \
  |  | 9468|   118k|        else {                                                             \
  |  | 9469|   118k|            return vis(monostate_val);                                     \
  |  | 9470|   118k|        }                                                                  \
  |  | 9471|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   245k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 127k, False: 248k]
  ------------------
 9521|   245k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   245k|    do {                                                                   \
  |  | 9465|   245k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   245k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   245k|        }                                                                  \
  |  | 9468|   245k|        else {                                                             \
  |  | 9469|   245k|            return vis(monostate_val);                                     \
  |  | 9470|   245k|        }                                                                  \
  |  | 9471|   245k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   376k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 130k, False: 245k]
  ------------------
 9523|   376k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   376k|    do {                                                                   \
  |  | 9465|   376k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   376k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   376k|        }                                                                  \
  |  | 9468|   376k|        else {                                                             \
  |  | 9469|   376k|            return vis(monostate_val);                                     \
  |  | 9470|   376k|        }                                                                  \
  |  | 9471|   376k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   376k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 376k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   376k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 376k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 376k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 376k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 376k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 376k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 376k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 376k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 376k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 376k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 376k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   376k|            SCN_CLANG_POP
 9585|   376k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   139k|{
 9606|   139k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   139k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   139k|{
 9463|   139k|#define SCN_VISIT(Type)                                                    \
 9464|   139k|    do {                                                                   \
 9465|   139k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   139k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   139k|        }                                                                  \
 9468|   139k|        else {                                                             \
 9469|   139k|            return vis(monostate_val);                                     \
 9470|   139k|        }                                                                  \
 9471|   139k|    } while (false)
 9472|       |
 9473|   139k|    monostate monostate_val{};
 9474|       |
 9475|   139k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 139k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 139k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 139k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 139k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 139k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 139k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 139k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 139k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 139k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 139k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 139k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 139k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 139k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 139k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 139k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 139k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 139k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|  41.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 41.2k, False: 98.0k]
  ------------------
 9519|  41.2k|            SCN_VISIT(float);
  ------------------
  |  | 9464|  41.2k|    do {                                                                   \
  |  | 9465|  41.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  41.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  41.2k|        }                                                                  \
  |  | 9468|  41.2k|        else {                                                             \
  |  | 9469|  41.2k|            return vis(monostate_val);                                     \
  |  | 9470|  41.2k|        }                                                                  \
  |  | 9471|  41.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|  89.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 47.9k, False: 91.3k]
  ------------------
 9521|  89.1k|            SCN_VISIT(double);
  ------------------
  |  | 9464|  89.1k|    do {                                                                   \
  |  | 9465|  89.1k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  89.1k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  89.1k|        }                                                                  \
  |  | 9468|  89.1k|        else {                                                             \
  |  | 9469|  89.1k|            return vis(monostate_val);                                     \
  |  | 9470|  89.1k|        }                                                                  \
  |  | 9471|  89.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   139k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 50.1k, False: 89.1k]
  ------------------
 9523|   139k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   139k|    do {                                                                   \
  |  | 9465|   139k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   139k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   139k|        }                                                                  \
  |  | 9468|   139k|        else {                                                             \
  |  | 9469|   139k|            return vis(monostate_val);                                     \
  |  | 9470|   139k|        }                                                                  \
  |  | 9471|   139k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   139k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 139k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   139k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 139k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 139k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 139k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 139k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 139k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 139k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 139k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 139k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 139k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 139k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   139k|            SCN_CLANG_POP
 9585|   139k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|   375k|        : m_format{format},
 6445|   375k|          m_next_arg_id{next_arg_id},
 6446|   375k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   375k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   375k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   375k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   375k|    {
 6452|   375k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   375k|{
 7971|   375k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   375k|    handler.check_args_exhausted();
 7973|   375k|    return handler.get_error();
 7974|   375k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   375k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   375k|    auto begin = format.data();
 7939|   375k|    auto it = begin;
 7940|   375k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   646k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 375k, False: 270k]
  ------------------
 7943|   375k|        const auto ch = *it++;
 7944|   375k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 375k, False: 0]
  ------------------
 7945|   375k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   375k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   375k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 105k, False: 270k]
  ------------------
 7949|   105k|                return;
 7950|   105k|            }
 7951|   375k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   375k|    }
 7962|       |
 7963|   270k|    handler.on_literal_text(begin, end);
 7964|   270k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|   270k|    {
 9166|   270k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   270k|    static_cast<    \
  |  | 1084|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   270k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|   375k|{
 7868|   375k|    struct id_adapter {
 7869|   375k|        constexpr void operator()()
 7870|   375k|        {
 7871|   375k|            arg_id = handler.on_arg_id();
 7872|   375k|        }
 7873|   375k|        constexpr void operator()(std::size_t id)
 7874|   375k|        {
 7875|   375k|            arg_id = handler.on_arg_id(id);
 7876|   375k|        }
 7877|       |
 7878|   375k|        constexpr void on_error(const char* msg)
 7879|   375k|        {
 7880|   375k|            SCN_UNLIKELY_ATTR
 7881|   375k|            handler.on_error(msg);
 7882|   375k|        }
 7883|       |
 7884|   375k|        Handler& handler;
 7885|   375k|        std::size_t arg_id;
 7886|   375k|    };
 7887|       |
 7888|   375k|    ++begin;
 7889|   375k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   375k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 375k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   375k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 375k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   375k|    else {
 7901|   375k|        auto adapter = id_adapter{handler, 0};
 7902|   375k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   375k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   375k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 375k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   375k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 375k, False: 0]
  ------------------
 7913|   375k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   375k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   375k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  |  Branch (1014:45): [True: 0, False: 375k]
  |  |  |  Branch (1014:45): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 7919|      0|                handler.on_error("Unknown format specifier");
 7920|      0|                return begin;
 7921|      0|            }
 7922|   375k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   375k|    }
 7929|   375k|    return begin + 1;
 7930|   375k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   375k|{
 7367|   375k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   375k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 375k, False: 0]
  |  Branch (7368:26): [True: 0, False: 375k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   375k|    handler();
 7373|   375k|    return begin;
 7374|   375k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   375k|        {
 7871|   375k|            arg_id = handler.on_arg_id();
 7872|   375k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   375k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   375k|    {
 8055|   375k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   375k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7783|   375k|{
 7784|   375k|    auto do_presentation = [&]() -> const CharT* {
 7785|   375k|        if (*begin == CharT{'['}) {
 7786|   375k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   375k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   375k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   375k|                return begin;
 7792|   375k|            }
 7793|   375k|            handler.on_character_set_string(set);
 7794|   375k|            return begin;
 7795|   375k|        }
 7796|   375k|        if (*begin == CharT{'/'}) {
 7797|   375k|            return parse_presentation_regex(begin, end, handler);
 7798|   375k|        }
 7799|   375k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   375k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   375k|            handler.on_error("Invalid type specifier in format string");
 7802|   375k|            return begin;
 7803|   375k|        }
 7804|   375k|        handler.on_type(type);
 7805|   375k|        return begin;
 7806|   375k|    };
 7807|       |
 7808|   375k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 375k, False: 0]
  |  Branch (7808:28): [True: 375k, False: 0]
  ------------------
 7809|   375k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 375k, False: 0]
  |  Branch (7809:36): [True: 283k, False: 92.8k]
  ------------------
 7810|   283k|        return do_presentation();
 7811|   283k|    }
 7812|       |
 7813|  92.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  92.8k|    begin = parse_align(begin, end, handler);
 7819|  92.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  92.8k|    begin = parse_width(begin, end, handler);
 7825|  92.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  92.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 92.8k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  92.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 92.8k, False: 0]
  ------------------
 7844|  92.8k|        handler.on_localized();
 7845|  92.8k|        ++begin;
 7846|  92.8k|    }
 7847|  92.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  92.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 92.8k, False: 0]
  |  Branch (7852:25): [True: 0, False: 92.8k]
  ------------------
 7853|      0|        do_presentation();
 7854|      0|    }
 7855|  92.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  92.8k|    return begin;
 7861|  92.8k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   283k|    auto do_presentation = [&]() -> const CharT* {
 7785|   283k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 0, False: 283k]
  ------------------
 7786|      0|            auto set = parse_presentation_set(begin, end, handler);
 7787|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|      0|            handler.on_character_set_string(set);
 7794|      0|            return begin;
 7795|      0|        }
 7796|   283k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 283k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   283k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   283k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 283k]
  |  |  ------------------
  ------------------
 7801|      0|            handler.on_error("Invalid type specifier in format string");
 7802|      0|            return begin;
 7803|      0|        }
 7804|   283k|        handler.on_type(type);
 7805|   283k|        return begin;
 7806|   283k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7455|  92.8k|{
 7456|  92.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  92.8k|    auto check_align = [](wchar_t ch) {
 7459|  92.8k|        switch (ch) {
 7460|  92.8k|            case L'<':
 7461|  92.8k|                return align_type::left;
 7462|  92.8k|            case L'>':
 7463|  92.8k|                return align_type::right;
 7464|  92.8k|            case L'^':
 7465|  92.8k|                return align_type::center;
 7466|  92.8k|            default:
 7467|  92.8k|                return align_type::none;
 7468|  92.8k|        }
 7469|  92.8k|    };
 7470|       |
 7471|  92.8k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  92.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 92.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7473|  92.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  92.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  92.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  92.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  92.8k|    const auto begin_before_fill = begin;
 7483|  92.8k|    begin += potential_fill_len;
 7484|       |
 7485|  92.8k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 92.8k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  92.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  92.8k|    const auto begin_after_fill = begin;
 7491|  92.8k|    ++begin;
 7492|       |
 7493|  92.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 92.8k, False: 0]
  ------------------
 7494|  92.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  92.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 0, False: 92.8k]
  ------------------
 7499|      0|            return begin_before_fill;
 7500|      0|        }
 7501|  92.8k|    }
 7502|       |
 7503|  92.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 92.8k, False: 0]
  ------------------
 7504|  92.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 92.8k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  92.8k|        return begin_before_fill;
 7509|  92.8k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  92.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|   185k|    auto check_align = [](wchar_t ch) {
 7459|   185k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 185k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 185k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 185k]
  ------------------
 7465|      0|                return align_type::center;
 7466|   185k|            default:
  ------------------
  |  Branch (7466:13): [True: 185k, False: 0]
  ------------------
 7467|   185k|                return align_type::none;
 7468|   185k|        }
 7469|   185k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7520|  92.8k|{
 7521|  92.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  92.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 92.8k, False: 0]
  |  Branch (7523:33): [True: 0, False: 92.8k]
  ------------------
 7524|      0|        int width = parse_simple_int(begin, end);
 7525|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7526|      0|            handler.on_width(width);
 7527|      0|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|      0|    }
 7533|  92.8k|    return begin;
 7534|  92.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 8059|  92.8k|    {
 8060|  92.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  92.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 92.8k, False: 0]
  ------------------
 8062|  92.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 92.8k, False: 0]
  ------------------
 8063|  92.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 0, False: 92.8k]
  ------------------
 8064|  92.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 0, False: 0]
  ------------------
 8065|      0|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|      0|        }
 8070|       |
 8071|  92.8k|        Handler::on_localized();
 8072|  92.8k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   375k|{
 9606|   375k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   375k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   375k|{
 9463|   375k|#define SCN_VISIT(Type)                                                    \
 9464|   375k|    do {                                                                   \
 9465|   375k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   375k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   375k|        }                                                                  \
 9468|   375k|        else {                                                             \
 9469|   375k|            return vis(monostate_val);                                     \
 9470|   375k|        }                                                                  \
 9471|   375k|    } while (false)
 9472|       |
 9473|   375k|    monostate monostate_val{};
 9474|       |
 9475|   375k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 375k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 375k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 375k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 375k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 375k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 375k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 375k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 375k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 375k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 375k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 375k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 375k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 375k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 375k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 375k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 375k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 375k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|   118k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 118k, False: 257k]
  ------------------
 9519|   118k|            SCN_VISIT(float);
  ------------------
  |  | 9464|   118k|    do {                                                                   \
  |  | 9465|   118k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   118k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   118k|        }                                                                  \
  |  | 9468|   118k|        else {                                                             \
  |  | 9469|   118k|            return vis(monostate_val);                                     \
  |  | 9470|   118k|        }                                                                  \
  |  | 9471|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|   245k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 127k, False: 248k]
  ------------------
 9521|   245k|            SCN_VISIT(double);
  ------------------
  |  | 9464|   245k|    do {                                                                   \
  |  | 9465|   245k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   245k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   245k|        }                                                                  \
  |  | 9468|   245k|        else {                                                             \
  |  | 9469|   245k|            return vis(monostate_val);                                     \
  |  | 9470|   245k|        }                                                                  \
  |  | 9471|   245k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|   375k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 130k, False: 245k]
  ------------------
 9523|   375k|            SCN_VISIT(long double);
  ------------------
  |  | 9464|   375k|    do {                                                                   \
  |  | 9465|   375k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   375k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   375k|        }                                                                  \
  |  | 9468|   375k|        else {                                                             \
  |  | 9469|   375k|            return vis(monostate_val);                                     \
  |  | 9470|   375k|        }                                                                  \
  |  | 9471|   375k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|   375k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 375k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|   375k|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 375k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 375k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 375k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 375k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 375k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 375k]
  ------------------
 9557|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 375k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|      0|            else {
 9563|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|      0|            }
 9565|      0|        }
 9566|       |
 9567|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 375k]
  ------------------
 9568|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|      0|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 375k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 375k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   375k|            SCN_CLANG_POP
 9585|   375k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|   137k|    {
 4408|   137k|        return sync(0);
 4409|   137k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|   101k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|  92.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  72.9k|{
   89|  72.9k|    auto result = make_scan_result<Source, Args...>();
   90|  72.9k|    fill_scan_result(result,
   91|  72.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.9k|    return result;
   94|  72.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   234k|{
   44|   234k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   234k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  72.9k|{
  131|  72.9k|    auto result = make_scan_result<Source, Args...>();
  132|  72.9k|    fill_scan_result(result,
  133|  72.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.9k|    return result;
  136|  72.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   234k|{
   60|   234k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   234k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  13.7k|{
  171|  13.7k|    auto result = make_scan_result<Source, T>();
  172|  13.7k|    fill_scan_result(
  173|  13.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.7k|    return result;
  176|  13.7k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  46.4k|{
   72|  46.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  46.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  79.6k|{
   89|  79.6k|    auto result = make_scan_result<Source, Args...>();
   90|  79.6k|    fill_scan_result(result,
   91|  79.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.6k|    return result;
   94|  79.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  79.6k|{
  131|  79.6k|    auto result = make_scan_result<Source, Args...>();
  132|  79.6k|    fill_scan_result(result,
  133|  79.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.6k|    return result;
  136|  79.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.9k|{
  171|  15.9k|    auto result = make_scan_result<Source, T>();
  172|  15.9k|    fill_scan_result(
  173|  15.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.9k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.9k|    return result;
  176|  15.9k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  81.8k|{
   89|  81.8k|    auto result = make_scan_result<Source, Args...>();
   90|  81.8k|    fill_scan_result(result,
   91|  81.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  81.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  81.8k|    return result;
   94|  81.8k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  81.8k|{
  131|  81.8k|    auto result = make_scan_result<Source, Args...>();
  132|  81.8k|    fill_scan_result(result,
  133|  81.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  81.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  81.8k|    return result;
  136|  81.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.7k|{
  171|  16.7k|    auto result = make_scan_result<Source, T>();
  172|  16.7k|    fill_scan_result(
  173|  16.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.7k|    return result;
  176|  16.7k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  72.9k|{
   89|  72.9k|    auto result = make_scan_result<Source, Args...>();
   90|  72.9k|    fill_scan_result(result,
   91|  72.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.9k|    return result;
   94|  72.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   234k|{
   44|   234k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   234k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  72.9k|{
  131|  72.9k|    auto result = make_scan_result<Source, Args...>();
  132|  72.9k|    fill_scan_result(result,
  133|  72.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  72.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.9k|    return result;
  136|  72.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   234k|{
   60|   234k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   234k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  13.7k|{
  171|  13.7k|    auto result = make_scan_result<Source, T>();
  172|  13.7k|    fill_scan_result(
  173|  13.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.7k|    return result;
  176|  13.7k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  46.4k|{
   72|  46.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  46.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  79.5k|{
   89|  79.5k|    auto result = make_scan_result<Source, Args...>();
   90|  79.5k|    fill_scan_result(result,
   91|  79.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.5k|    return result;
   94|  79.5k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  79.5k|{
  131|  79.5k|    auto result = make_scan_result<Source, Args...>();
  132|  79.5k|    fill_scan_result(result,
  133|  79.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.5k|    return result;
  136|  79.5k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.9k|{
  171|  15.9k|    auto result = make_scan_result<Source, T>();
  172|  15.9k|    fill_scan_result(
  173|  15.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.9k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.9k|    return result;
  176|  15.9k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  81.8k|{
   89|  81.8k|    auto result = make_scan_result<Source, Args...>();
   90|  81.8k|    fill_scan_result(result,
   91|  81.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  81.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  81.8k|    return result;
   94|  81.8k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  81.8k|{
  131|  81.8k|    auto result = make_scan_result<Source, Args...>();
  132|  81.8k|    fill_scan_result(result,
  133|  81.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  81.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  81.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  81.8k|    return result;
  136|  81.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.7k|{
  171|  16.7k|    auto result = make_scan_result<Source, T>();
  172|  16.7k|    fill_scan_result(
  173|  16.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.7k|    return result;
  176|  16.7k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   961k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   961k|{
  309|   961k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   961k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   393k|{
  315|   393k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   393k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 196k, False: 196k]
  ------------------
  317|   393k|                    : std::locale{};
  318|   393k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1855|   318k|{
 1856|   318k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   318k|                                      m_nan_payload_buffer, value);
 1858|   318k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 305k, False: 12.7k]
  |  |  ------------------
  ------------------
 1859|   305k|        value = this->setsign(value);
 1860|   305k|        return n;
 1861|   305k|    }
 1862|       |
 1863|  12.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 3.28k, False: 9.45k]
  ------------------
 1864|  12.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 802, False: 2.48k]
  ------------------
 1865|    802|        return detail::unexpected_scan_error(
 1866|    802|            scan_error::value_negative_overflow, n.error().msg());
 1867|    802|    }
 1868|  11.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 544, False: 11.3k]
  ------------------
 1869|  11.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 84, False: 460]
  ------------------
 1870|     84|        return detail::unexpected_scan_error(
 1871|     84|            scan_error::value_negative_underflow, n.error().msg());
 1872|     84|    }
 1873|  11.8k|    return n;
 1874|  11.9k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1855|   253k|{
 1856|   253k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   253k|                                      m_nan_payload_buffer, value);
 1858|   253k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 227k, False: 25.9k]
  |  |  ------------------
  ------------------
 1859|   227k|        value = this->setsign(value);
 1860|   227k|        return n;
 1861|   227k|    }
 1862|       |
 1863|  25.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 2.58k, False: 23.3k]
  ------------------
 1864|  25.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 136, False: 2.45k]
  ------------------
 1865|    136|        return detail::unexpected_scan_error(
 1866|    136|            scan_error::value_negative_overflow, n.error().msg());
 1867|    136|    }
 1868|  25.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 806, False: 25.0k]
  ------------------
 1869|  25.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 100, False: 706]
  ------------------
 1870|    100|        return detail::unexpected_scan_error(
 1871|    100|            scan_error::value_negative_underflow, n.error().msg());
 1872|    100|    }
 1873|  25.7k|    return n;
 1874|  25.8k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|   330k|{
 1856|   330k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   330k|                                      m_nan_payload_buffer, value);
 1858|   330k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   330k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 318k, False: 11.3k]
  |  |  ------------------
  ------------------
 1859|   318k|        value = this->setsign(value);
 1860|   318k|        return n;
 1861|   318k|    }
 1862|       |
 1863|  11.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 1.93k, False: 9.45k]
  ------------------
 1864|  11.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 496, False: 1.43k]
  ------------------
 1865|    496|        return detail::unexpected_scan_error(
 1866|    496|            scan_error::value_negative_overflow, n.error().msg());
 1867|    496|    }
 1868|  10.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 238, False: 10.6k]
  ------------------
 1869|  10.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 70, False: 168]
  ------------------
 1870|     70|        return detail::unexpected_scan_error(
 1871|     70|            scan_error::value_negative_underflow, n.error().msg());
 1872|     70|    }
 1873|  10.8k|    return n;
 1874|  10.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1855|   283k|{
 1856|   283k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   283k|                                      m_nan_payload_buffer, value);
 1858|   283k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   283k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 258k, False: 24.8k]
  |  |  ------------------
  ------------------
 1859|   258k|        value = this->setsign(value);
 1860|   258k|        return n;
 1861|   258k|    }
 1862|       |
 1863|  24.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 1.64k, False: 23.1k]
  ------------------
 1864|  24.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 136, False: 1.50k]
  ------------------
 1865|    136|        return detail::unexpected_scan_error(
 1866|    136|            scan_error::value_negative_overflow, n.error().msg());
 1867|    136|    }
 1868|  24.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 196, False: 24.5k]
  ------------------
 1869|  24.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 68, False: 128]
  ------------------
 1870|     68|        return detail::unexpected_scan_error(
 1871|     68|            scan_error::value_negative_underflow, n.error().msg());
 1872|     68|    }
 1873|  24.6k|    return n;
 1874|  24.7k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1855|   334k|{
 1856|   334k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   334k|                                      m_nan_payload_buffer, value);
 1858|   334k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   334k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 324k, False: 10.0k]
  |  |  ------------------
  ------------------
 1859|   324k|        value = this->setsign(value);
 1860|   324k|        return n;
 1861|   324k|    }
 1862|       |
 1863|  10.0k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 389, False: 9.63k]
  ------------------
 1864|  10.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 173, False: 216]
  ------------------
 1865|    173|        return detail::unexpected_scan_error(
 1866|    173|            scan_error::value_negative_overflow, n.error().msg());
 1867|    173|    }
 1868|  9.85k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 98, False: 9.75k]
  ------------------
 1869|  9.85k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 42, False: 56]
  ------------------
 1870|     42|        return detail::unexpected_scan_error(
 1871|     42|            scan_error::value_negative_underflow, n.error().msg());
 1872|     42|    }
 1873|  9.81k|    return n;
 1874|  9.85k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1855|   293k|{
 1856|   293k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1857|   293k|                                      m_nan_payload_buffer, value);
 1858|   293k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1013|   293k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 269k, False: 23.6k]
  |  |  ------------------
  ------------------
 1859|   269k|        value = this->setsign(value);
 1860|   269k|        return n;
 1861|   269k|    }
 1862|       |
 1863|  23.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1863:9): [True: 150, False: 23.5k]
  ------------------
 1864|  23.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1864:9): [True: 50, False: 100]
  ------------------
 1865|     50|        return detail::unexpected_scan_error(
 1866|     50|            scan_error::value_negative_overflow, n.error().msg());
 1867|     50|    }
 1868|  23.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1868:9): [True: 86, False: 23.5k]
  ------------------
 1869|  23.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1869:9): [True: 50, False: 36]
  ------------------
 1870|     50|        return detail::unexpected_scan_error(
 1871|     50|            scan_error::value_negative_underflow, n.error().msg());
 1872|     50|    }
 1873|  23.5k|    return n;
 1874|  23.6k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2216|  11.1k|{
 2217|  11.1k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2218|  11.1k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2219|  11.1k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2220|  11.1k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1079|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2221|       |
 2222|  11.1k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2222:9): [True: 290, False: 10.8k]
  ------------------
 2223|    290|        SCN_UNLIKELY_ATTR
 2224|    290|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2225|    290|                                             "Invalid integer value");
 2226|    290|    }
 2227|       |
 2228|       |    // Skip leading zeroes
 2229|  10.8k|    auto start = source.data();
 2230|  10.8k|    const auto end = source.data() + source.size();
 2231|  10.8k|    {
 2232|   149k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2232:16): [True: 148k, False: 650]
  ------------------
 2233|   148k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2233:17): [True: 10.1k, False: 138k]
  ------------------
 2234|  10.1k|                break;
 2235|  10.1k|            }
 2236|   148k|        }
 2237|  10.8k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1014|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 992, False: 9.85k]
  |  |  |  Branch (1014:45): [True: 650, False: 10.1k]
  |  |  |  Branch (1014:45): [True: 342, False: 9.85k]
  |  |  ------------------
  ------------------
 2238|    992|            value = 0;
 2239|    992|            return ranges::next(source.begin(),
 2240|    992|                                ranges::distance(source.data(), start));
 2241|    992|        }
 2242|  10.8k|    }
 2243|       |
 2244|       |    if constexpr (std::is_same_v<CharT, char> &&
 2245|  9.85k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2246|  9.85k|        if (base == 10) {
  ------------------
  |  Branch (2246:13): [True: 9.85k, False: 0]
  ------------------
 2247|  9.85k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3996|  9.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  9.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  9.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 926, False: 8.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    926|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    926|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    926|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    926|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    926|    }                                                  \
  |  |  |  | 3995|  9.85k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  9.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|  8.92k|                             detail::make_string_view_from_pointers(start, end),
 2249|  8.92k|                             value, sign == sign_type::minus_sign));
 2250|  8.92k|            return ranges::next(source.begin(),
 2251|  8.92k|                                ranges::distance(source.data(), ptr));
 2252|  9.85k|        }
 2253|  9.85k|    }
 2254|       |
 2255|  9.85k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3996|  9.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  9.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  9.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 9.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  9.85k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  9.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2256|  9.85k|                     detail::make_string_view_from_pointers(start, end), value,
 2257|  9.85k|                     base, sign == sign_type::minus_sign));
 2258|  9.85k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2259|  9.85k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|   237k|{
 2984|   237k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|   237k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|   254k|{
 2992|   254k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|   254k|    return sync_after_vscan(source, n);
 2994|   254k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|   234k|{
 3002|   234k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|   234k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|   234k|{
 3010|   234k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|   234k|    return sync_after_vscan(source, n);
 3012|   234k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   828k|{
  207|   828k|    return find_classic_impl(
  208|   828k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   828k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   828k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  1.08M|{
  215|  1.08M|    return find_classic_impl(
  216|  1.08M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  1.08M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  1.08M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|   237k|{
 2953|   237k|    return vscan_internal(source, format, args);
 2954|   237k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|   254k|{
 2959|   254k|    auto n = vscan_internal(source, format, args);
 2960|   254k|    return sync_after_vscan(source, n);
 2961|   254k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|   234k|{
 2967|   234k|    return vscan_internal(source, format, args);
 2968|   234k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|   234k|{
 2973|   234k|    auto n = vscan_internal(source, format, args);
 2974|   234k|    return sync_after_vscan(source, n);
 2975|   234k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  50.3k|{
 3039|  50.3k|    return vscan_value_internal(source, arg);
 3040|  50.3k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  51.6k|{
 3044|  51.6k|    auto n = vscan_value_internal(source, arg);
 3045|  51.6k|    return sync_after_vscan(source, n);
 3046|  51.6k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|  46.4k|{
 3052|  46.4k|    return vscan_value_internal(source, arg);
 3053|  46.4k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|  46.4k|{
 3058|  46.4k|    auto n = vscan_value_internal(source, arg);
 3059|  46.4k|    return sync_after_vscan(source, n);
 3060|  46.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1986|  9.85k|{
 1987|  9.85k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|  9.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1988|  9.85k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1989|  9.85k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2030|    496|{
 2031|    496|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1079|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2032|    496|    return min_safe_u64_table[static_cast<size_t>(base)];
 2033|    496|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2040|  9.85k|{
 2041|  9.85k|    SCN_UNUSED(is_negative);  // not really
  ------------------
  |  | 1064|  9.85k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2042|       |
 2043|  9.85k|    auto max_digits = maxdigits_u64(base);
 2044|  9.85k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2044:9): [True: 806, False: 9.04k]
  ------------------
 2045|    806|        return true;
 2046|    806|    }
 2047|  9.04k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2047:9): [True: 496, False: 8.55k]
  |  Branch (2047:39): [True: 120, False: 376]
  ------------------
 2048|    120|        return true;
 2049|    120|    }
 2050|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2051|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2052|       |                      static_cast<uint64_t>(is_negative)) {
 2053|       |            SCN_UNLIKELY_ATTR
 2054|       |            return true;
 2055|       |        }
 2056|       |    }
 2057|       |
 2058|  8.92k|    return false;
 2059|  9.04k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2063|  8.92k|{
 2064|  8.92k|    if (is_negative) {
  ------------------
  |  Branch (2064:9): [True: 0, False: 8.92k]
  ------------------
 2065|      0|        SCN_MSVC_PUSH
 2066|      0|        SCN_MSVC_IGNORE(4146)
 2067|      0|        return static_cast<T>(
 2068|      0|            -std::numeric_limits<T>::max() -
 2069|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2070|      0|        SCN_MSVC_POP
 2071|      0|    }
 2072|       |
 2073|  8.92k|    return static_cast<T>(acc);
 2074|  8.92k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1924|  14.6k|{
 1925|  14.6k|    uint64_t val{};
 1926|  14.6k|    std::memcpy(&val, input, sizeof(uint64_t));
 1927|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1928|       |        val = byteswap(val);
 1929|       |    }
 1930|  14.6k|    return val;
 1931|  14.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1934|  7.20k|{
 1935|  7.20k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1936|  7.20k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1937|  7.20k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1938|  7.20k|    word -= 0x3030303030303030;
 1939|  7.20k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1940|  7.20k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1941|  7.20k|    return static_cast<uint32_t>(word);
 1942|  7.20k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1945|  7.48k|{
 1946|  7.48k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1947|  7.48k|              0x8080808080808080));
 1948|  7.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   828k|{
  130|   828k|    auto it = source.begin();
  131|       |
  132|  2.39M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 1.81M, False: 570k]
  ------------------
  133|  1.81M|        auto sv =
  134|  1.81M|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|  1.81M|                .substr(0, 8);
  136|       |
  137|  1.81M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 1.75M, False: 68.8k]
  ------------------
  138|  1.75M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|  1.75M|            it = detail::make_string_view_iterator(source, tmp_it);
  140|  1.75M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 235k, False: 1.51M]
  ------------------
  141|   235k|                break;
  142|   235k|            }
  143|  1.51M|            continue;
  144|  1.75M|        }
  145|       |
  146|   238k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 190k, False: 47.4k]
  ------------------
  147|   190k|            auto tmp =
  148|   190k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   190k|            auto res = get_next_code_point(tmp);
  150|   190k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 21.4k, False: 169k]
  ------------------
  151|  21.4k|                return it;
  152|  21.4k|            }
  153|   169k|            i += static_cast<std::size_t>(
  154|   169k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|   169k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   169k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|   169k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   169k|        }
  158|  68.8k|    }
  159|       |
  160|   806k|    return detail::make_string_view_iterator(source, it);
  161|   828k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|  2.49M|{
  117|  2.49M|    static_assert(sizeof(*source.data()) == 1);
  118|  2.49M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|  2.49M|    uint64_t word{};
  120|  2.49M|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|  2.49M|    return has_byte_greater(word, 127) != 0;
  123|  2.49M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  9.68M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   190k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|  1.08M|{
  130|  1.08M|    auto it = source.begin();
  131|       |
  132|  1.16M|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 676k, False: 491k]
  ------------------
  133|   676k|        auto sv =
  134|   676k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   676k|                .substr(0, 8);
  136|       |
  137|   676k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 628k, False: 48.2k]
  ------------------
  138|   628k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   628k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   628k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 546k, False: 81.6k]
  ------------------
  141|   546k|                break;
  142|   546k|            }
  143|  81.6k|            continue;
  144|   628k|        }
  145|       |
  146|  76.5k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 72.6k, False: 3.83k]
  ------------------
  147|  72.6k|            auto tmp =
  148|  72.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|  72.6k|            auto res = get_next_code_point(tmp);
  150|  72.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 44.3k, False: 28.2k]
  ------------------
  151|  44.3k|                return it;
  152|  44.3k|            }
  153|  28.2k|            i += static_cast<std::size_t>(
  154|  28.2k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  28.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  28.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  28.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  28.2k|        }
  158|  48.2k|    }
  159|       |
  160|  1.03M|    return detail::make_string_view_iterator(source, it);
  161|  1.08M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   911k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  72.6k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   318k|{
 1764|   318k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.33k, False: 315k]
  ------------------
 1765|  2.33k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.33k|            value = std::numeric_limits<T>::infinity();
 1767|  2.33k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.33k|    }
 1775|   318k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.44k, False: 316k]
  ------------------
 1776|  1.44k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.44k|            value = std::numeric_limits<T>::infinity();
 1778|  1.44k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.44k|    }
 1786|   318k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 16.5k, False: 301k]
  ------------------
 1787|  16.5k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  16.5k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  16.5k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  16.5k|    }
 1797|   318k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 4.17k, False: 313k]
  ------------------
 1798|  4.17k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  4.17k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  4.17k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  4.17k|#if SCN_HAS_INT128
 1804|  4.17k|                using payload_type =
 1805|  4.17k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  4.17k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  4.17k|                payload_type payload{};
 1811|  4.17k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.12k, False: 1.05k]
  ------------------
 1812|  4.17k|                        nan_payload.view(), payload, {})) {
 1813|  3.12k|                    apply_nan_payload(value, payload);
 1814|  3.12k|                }
 1815|  1.05k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 308, False: 745]
  ------------------
 1816|  1.05k|                         scan_error::value_positive_overflow) {
 1817|    308|                    apply_nan_payload(value,
 1818|    308|                                      std::numeric_limits<payload_type>::max());
 1819|    308|                }
 1820|  4.17k|            }
 1821|       |
 1822|  4.17k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  4.17k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  4.17k|    }
 1831|       |
 1832|   318k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   293k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 62.8k, False: 230k]
  ------------------
 1834|  62.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.43k, False: 60.4k]
  |  |  ------------------
  ------------------
 1835|  2.43k|            return detail::unexpected_scan_error(
 1836|  2.43k|                scan_error::invalid_scanned_value,
 1837|  2.43k|                "Invalid floating-point digit");
 1838|  2.43k|        }
 1839|  62.8k|    }
 1840|   291k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.47k, False: 284k]
  |  |  ------------------
  ------------------
 1841|  6.47k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  6.47k|                                             "Invalid floating-point digit");
 1843|  6.47k|    }
 1844|       |
 1845|   284k|    return dispatch_parse_float_value<
 1846|   284k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   284k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   284k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1633|  3.43k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  3.43k|                                  nil_float_traits>) {
 1637|  3.43k|        using traits = float_traits<F>;
 1638|  3.43k|        typename traits::nan_repr bits{};
 1639|  3.43k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  3.43k|        traits::apply_nan_payload(bits, payload);
 1641|  3.43k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  3.43k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  380|  3.43k|    {
  381|  3.43k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  382|  3.43k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1079|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  383|  3.43k|        r.mantissa = static_cast<unsigned>(payload);
  384|  3.43k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   284k|{
 1738|   284k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   284k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   284k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   284k|{
 1738|   284k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   284k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   284k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   284k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   284k|    else {
 1742|   284k|        auto next =
 1743|   284k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   284k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   284k|                if (!err.has_value()) {
 1748|   284k|                    return unexpected(err.error());
 1749|   284k|                }
 1750|   284k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   284k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   284k|        };
 1754|   284k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   284k|    }
 1756|   284k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   284k|{
 1713|   284k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   284k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   284k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   284k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1093|   284k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   284k|    {
 1095|   284k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1099|   284k|    {
 1100|   284k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   284k|                           generic_strtod);
 1102|   284k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  894|   284k|    {
  895|   284k|        CharT* end{};
  896|   284k|        errno = 0;
  897|   284k|        value = strtod_cb(src, &end);
  898|   284k|        const auto saved_errno = errno;
  899|   284k|        auto chars_read = end - src;
  900|       |
  901|   284k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   284k|    do {                                                            \
  |  | 3985|   284k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.82k, False: 280k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.82k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.82k|        }                                                           \
  |  | 3988|   284k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   280k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 59.9k, False: 220k]
  ------------------
  904|   280k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 59.9k, False: 0]
  ------------------
  905|  59.9k|            chars_read -= 2;
  906|  59.9k|        }
  907|       |
  908|   280k|        return chars_read;
  909|   284k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  937|   516k|    {
  938|   516k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 280k, False: 235k]
  |  Branch (938:41): [True: 0, False: 280k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   516k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 11.9k, False: 504k]
  ------------------
  946|   516k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 11.9k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   516k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 7.35k, False: 508k]
  |  Branch (954:34): [True: 1.35k, False: 6.00k]
  ------------------
  955|  1.35k|            SCN_UNLIKELY_ATTR
  956|  1.35k|            return detail::unexpected_scan_error(
  957|  1.35k|                scan_error::value_positive_underflow,
  958|  1.35k|                "strtod failed: Value too small");
  959|  1.35k|        }
  960|   514k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 6.00k, False: 508k]
  |  Branch (960:34): [True: 0, False: 6.00k]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   514k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 514k, False: 0]
  ------------------
  970|   514k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 514k, False: 0]
  ------------------
  971|   514k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 5.87k, False: 508k]
  ------------------
  972|  5.87k|            SCN_UNLIKELY_ATTR
  973|  5.87k|            return detail::unexpected_scan_error(
  974|  5.87k|                scan_error::value_positive_overflow,
  975|  5.87k|                "strtod failed: Value too large");
  976|  5.87k|        }
  977|   508k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 508k, False: 0]
  ------------------
  978|   508k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 508k, False: 0]
  ------------------
  979|   508k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 508k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   508k|        return {};
  987|   508k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  772|   516k|{
  773|   516k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 280k, False: 235k]
  |  Branch (773:44): [True: 0, False: 235k]
  ------------------
  774|   516k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  779|  7.35k|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  7.35k|    return value == static_cast<T>(0.0);
  791|  7.35k|#endif
  792|  7.35k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  796|  6.00k|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|  6.00k|    return value == static_cast<T>(-0.0);
  809|  6.00k|#endif
  810|  6.00k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  815|   514k|{
  816|   514k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   514k|        return value == std::numeric_limits<T>::infinity();
  833|   514k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   514k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  842|   508k|{
  843|   508k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   508k|        return value == -std::numeric_limits<T>::infinity();
  861|   508k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   508k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   284k|    {
  915|   284k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 268k, False: 16.4k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   268k|            auto first_space = read_until_classic_space(input.view());
  918|   268k|            input.assign(
  919|   268k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   268k|        }
  921|       |
  922|   284k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 60.3k, False: 224k]
  ------------------
  923|  60.3k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  60.3k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  60.3k|        }
  930|       |
  931|   284k|        return input.get_allocated_string().c_str();
  932|   284k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1106|   284k|    {
 1107|   284k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   284k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   284k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  990|   284k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   284k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|   284k|        if constexpr (std::is_same_v<T, float>) {
 1023|   284k|            return std::strtof(str, str_end);
 1024|       |        }
 1025|       |        else if constexpr (std::is_same_v<T, double>) {
 1026|       |            return std::strtod(str, str_end);
 1027|       |        }
 1028|       |        else if constexpr (std::is_same_v<T, long double>) {
 1029|       |            return std::strtold(str, str_end);
 1030|       |        }
 1031|      0|#endif
 1032|       |
 1033|   284k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   284k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   253k|{
 1764|   253k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 253k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   253k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 253k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   253k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 253k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   253k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 253k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   253k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   253k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 60.3k, False: 193k]
  ------------------
 1834|  60.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.59k, False: 53.7k]
  |  |  ------------------
  ------------------
 1835|  6.59k|            return detail::unexpected_scan_error(
 1836|  6.59k|                scan_error::invalid_scanned_value,
 1837|  6.59k|                "Invalid floating-point digit");
 1838|  6.59k|        }
 1839|  60.3k|    }
 1840|   247k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 15.9k, False: 231k]
  |  |  ------------------
  ------------------
 1841|  15.9k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  15.9k|                                             "Invalid floating-point digit");
 1843|  15.9k|    }
 1844|       |
 1845|   231k|    return dispatch_parse_float_value<
 1846|   231k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   231k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   231k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   247k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   231k|{
 1738|   231k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   231k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   231k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   231k|{
 1738|   231k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   231k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   231k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   231k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   231k|    else {
 1742|   231k|        auto next =
 1743|   231k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   231k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   231k|                if (!err.has_value()) {
 1748|   231k|                    return unexpected(err.error());
 1749|   231k|                }
 1750|   231k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   231k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   231k|        };
 1754|   231k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   231k|    }
 1756|   231k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   231k|{
 1713|   231k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   231k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   231k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   231k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1093|   231k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   231k|    {
 1095|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1099|   231k|    {
 1100|   231k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   231k|                           generic_strtod);
 1102|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  894|   231k|    {
  895|   231k|        CharT* end{};
  896|   231k|        errno = 0;
  897|   231k|        value = strtod_cb(src, &end);
  898|   231k|        const auto saved_errno = errno;
  899|   231k|        auto chars_read = end - src;
  900|       |
  901|   231k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   231k|    do {                                                            \
  |  | 3985|   231k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.39k, False: 227k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.39k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.39k|        }                                                           \
  |  | 3988|   231k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   227k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 53.6k, False: 174k]
  ------------------
  904|   227k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 53.6k, False: 0]
  ------------------
  905|  53.6k|            chars_read -= 2;
  906|  53.6k|        }
  907|       |
  908|   227k|        return chars_read;
  909|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   231k|    {
  915|   231k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 224k, False: 6.47k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   224k|            auto first_space = read_until_classic_space(input.view());
  918|   224k|            input.assign(
  919|   224k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   224k|        }
  921|       |
  922|   231k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 53.7k, False: 177k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  53.7k|            else {
  927|  53.7k|                input.get_allocated_string().insert(0, L"0x");
  928|  53.7k|            }
  929|  53.7k|        }
  930|       |
  931|   231k|        return input.get_allocated_string().c_str();
  932|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1106|   231k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   231k|        else {
 1111|   231k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   231k|        }
 1113|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1038|   231k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   231k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|   231k|        if constexpr (std::is_same_v<T, float>) {
 1071|   231k|            return std::wcstof(str, str_end);
 1072|       |        }
 1073|       |        else if constexpr (std::is_same_v<T, double>) {
 1074|       |            return std::wcstod(str, str_end);
 1075|       |        }
 1076|       |        else if constexpr (std::is_same_v<T, long double>) {
 1077|       |            return std::wcstold(str, str_end);
 1078|       |        }
 1079|      0|#endif
 1080|       |
 1081|   231k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   231k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   330k|{
 1764|   330k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.67k, False: 327k]
  ------------------
 1765|  2.67k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.67k|            value = std::numeric_limits<T>::infinity();
 1767|  2.67k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.67k|    }
 1775|   330k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.51k, False: 328k]
  ------------------
 1776|  1.51k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.51k|            value = std::numeric_limits<T>::infinity();
 1778|  1.51k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.51k|    }
 1786|   330k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 17.0k, False: 313k]
  ------------------
 1787|  17.0k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  17.0k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  17.0k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  17.0k|    }
 1797|   330k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 4.53k, False: 325k]
  ------------------
 1798|  4.53k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  4.53k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  4.53k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  4.53k|#if SCN_HAS_INT128
 1804|  4.53k|                using payload_type =
 1805|  4.53k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  4.53k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  4.53k|                payload_type payload{};
 1811|  4.53k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.37k, False: 1.15k]
  ------------------
 1812|  4.53k|                        nan_payload.view(), payload, {})) {
 1813|  3.37k|                    apply_nan_payload(value, payload);
 1814|  3.37k|                }
 1815|  1.15k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 308, False: 850]
  ------------------
 1816|  1.15k|                         scan_error::value_positive_overflow) {
 1817|    308|                    apply_nan_payload(value,
 1818|    308|                                      std::numeric_limits<payload_type>::max());
 1819|    308|                }
 1820|  4.53k|            }
 1821|       |
 1822|  4.53k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  4.53k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  4.53k|    }
 1831|       |
 1832|   330k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   304k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 64.1k, False: 240k]
  ------------------
 1834|  64.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  64.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.46k, False: 61.7k]
  |  |  ------------------
  ------------------
 1835|  2.46k|            return detail::unexpected_scan_error(
 1836|  2.46k|                scan_error::invalid_scanned_value,
 1837|  2.46k|                "Invalid floating-point digit");
 1838|  2.46k|        }
 1839|  64.1k|    }
 1840|   302k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.75k, False: 295k]
  |  |  ------------------
  ------------------
 1841|  6.75k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  6.75k|                                             "Invalid floating-point digit");
 1843|  6.75k|    }
 1844|       |
 1845|   295k|    return dispatch_parse_float_value<
 1846|   295k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   295k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   295k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   302k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1633|  3.68k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  3.68k|                                  nil_float_traits>) {
 1637|  3.68k|        using traits = float_traits<F>;
 1638|  3.68k|        typename traits::nan_repr bits{};
 1639|  3.68k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  3.68k|        traits::apply_nan_payload(bits, payload);
 1641|  3.68k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  3.68k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  434|  3.68k|    {
  435|  3.68k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  3.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  436|  3.68k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1079|  3.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  437|  3.68k|        r.mantissa0 = static_cast<unsigned>(payload >> 32);
  438|  3.68k|        r.mantissa1 = static_cast<unsigned>(payload);
  439|  3.68k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|   295k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   295k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|   295k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   295k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   295k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   295k|    else {
 1742|   295k|        auto next =
 1743|   295k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   295k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   295k|                if (!err.has_value()) {
 1748|   295k|                    return unexpected(err.error());
 1749|   295k|                }
 1750|   295k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   295k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   295k|        };
 1754|   295k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   295k|    }
 1756|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   295k|{
 1713|   295k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   295k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   295k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   295k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1093|   295k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   295k|    {
 1095|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1099|   295k|    {
 1100|   295k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   295k|                           generic_strtod);
 1102|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  894|   295k|    {
  895|   295k|        CharT* end{};
  896|   295k|        errno = 0;
  897|   295k|        value = strtod_cb(src, &end);
  898|   295k|        const auto saved_errno = errno;
  899|   295k|        auto chars_read = end - src;
  900|       |
  901|   295k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   295k|    do {                                                            \
  |  | 3985|   295k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.17k, False: 293k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  2.17k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  2.17k|        }                                                           \
  |  | 3988|   295k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   293k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 61.3k, False: 231k]
  ------------------
  904|   293k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 61.3k, False: 0]
  ------------------
  905|  61.3k|            chars_read -= 2;
  906|  61.3k|        }
  907|       |
  908|   293k|        return chars_read;
  909|   295k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  937|   556k|    {
  938|   556k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 303k, False: 252k]
  |  Branch (938:41): [True: 0, False: 303k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   556k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 13.3k, False: 542k]
  ------------------
  946|   556k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 13.3k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   556k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 4.54k, False: 551k]
  |  Branch (954:34): [True: 434, False: 4.11k]
  ------------------
  955|    434|            SCN_UNLIKELY_ATTR
  956|    434|            return detail::unexpected_scan_error(
  957|    434|                scan_error::value_positive_underflow,
  958|    434|                "strtod failed: Value too small");
  959|    434|        }
  960|   555k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 4.11k, False: 551k]
  |  Branch (960:34): [True: 0, False: 4.11k]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   555k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 555k, False: 0]
  ------------------
  970|   555k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 555k, False: 0]
  ------------------
  971|   555k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 3.57k, False: 552k]
  ------------------
  972|  3.57k|            SCN_UNLIKELY_ATTR
  973|  3.57k|            return detail::unexpected_scan_error(
  974|  3.57k|                scan_error::value_positive_overflow,
  975|  3.57k|                "strtod failed: Value too large");
  976|  3.57k|        }
  977|   552k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 552k, False: 0]
  ------------------
  978|   552k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 552k, False: 0]
  ------------------
  979|   552k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 552k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   552k|        return {};
  987|   552k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  772|   556k|{
  773|   556k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 303k, False: 252k]
  |  Branch (773:44): [True: 0, False: 252k]
  ------------------
  774|   556k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  779|  4.54k|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  4.54k|    return value == static_cast<T>(0.0);
  791|  4.54k|#endif
  792|  4.54k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  796|  4.11k|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|  4.11k|    return value == static_cast<T>(-0.0);
  809|  4.11k|#endif
  810|  4.11k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  815|   555k|{
  816|   555k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   555k|        return value == std::numeric_limits<T>::infinity();
  833|   555k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   555k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  842|   552k|{
  843|   552k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   552k|        return value == -std::numeric_limits<T>::infinity();
  861|   552k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   552k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   295k|    {
  915|   295k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 278k, False: 17.2k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   278k|            auto first_space = read_until_classic_space(input.view());
  918|   278k|            input.assign(
  919|   278k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   278k|        }
  921|       |
  922|   295k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 61.6k, False: 233k]
  ------------------
  923|  61.6k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  61.6k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  61.6k|        }
  930|       |
  931|   295k|        return input.get_allocated_string().c_str();
  932|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1106|   295k|    {
 1107|   295k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   295k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  990|   295k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   295k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|       |        if constexpr (std::is_same_v<T, float>) {
 1023|       |            return std::strtof(str, str_end);
 1024|       |        }
 1025|   295k|        else if constexpr (std::is_same_v<T, double>) {
 1026|   295k|            return std::strtod(str, str_end);
 1027|       |        }
 1028|       |        else if constexpr (std::is_same_v<T, long double>) {
 1029|       |            return std::strtold(str, str_end);
 1030|       |        }
 1031|      0|#endif
 1032|       |
 1033|   295k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   295k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   283k|{
 1764|   283k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 283k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   283k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 283k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   283k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 283k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   283k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 283k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   283k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   283k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 60.3k, False: 223k]
  ------------------
 1834|  60.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  60.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.59k, False: 53.7k]
  |  |  ------------------
  ------------------
 1835|  6.59k|            return detail::unexpected_scan_error(
 1836|  6.59k|                scan_error::invalid_scanned_value,
 1837|  6.59k|                "Invalid floating-point digit");
 1838|  6.59k|        }
 1839|  60.3k|    }
 1840|   277k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.4k, False: 260k]
  |  |  ------------------
  ------------------
 1841|  16.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  16.4k|                                             "Invalid floating-point digit");
 1843|  16.4k|    }
 1844|       |
 1845|   260k|    return dispatch_parse_float_value<
 1846|   260k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   260k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   260k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   277k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|   260k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   260k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|   260k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   260k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   260k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   260k|    else {
 1742|   260k|        auto next =
 1743|   260k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   260k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   260k|                if (!err.has_value()) {
 1748|   260k|                    return unexpected(err.error());
 1749|   260k|                }
 1750|   260k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   260k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   260k|        };
 1754|   260k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   260k|    }
 1756|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   260k|{
 1713|   260k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   260k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   260k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   260k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1093|   260k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   260k|    {
 1095|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1099|   260k|    {
 1100|   260k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   260k|                           generic_strtod);
 1102|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  894|   260k|    {
  895|   260k|        CharT* end{};
  896|   260k|        errno = 0;
  897|   260k|        value = strtod_cb(src, &end);
  898|   260k|        const auto saved_errno = errno;
  899|   260k|        auto chars_read = end - src;
  900|       |
  901|   260k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   260k|    do {                                                            \
  |  | 3985|   260k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.83k, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.83k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.83k|        }                                                           \
  |  | 3988|   260k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   258k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 53.6k, False: 205k]
  ------------------
  904|   258k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 53.6k, False: 0]
  ------------------
  905|  53.6k|            chars_read -= 2;
  906|  53.6k|        }
  907|       |
  908|   258k|        return chars_read;
  909|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   260k|    {
  915|   260k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 253k, False: 7.34k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   253k|            auto first_space = read_until_classic_space(input.view());
  918|   253k|            input.assign(
  919|   253k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   253k|        }
  921|       |
  922|   260k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 53.7k, False: 207k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  53.7k|            else {
  927|  53.7k|                input.get_allocated_string().insert(0, L"0x");
  928|  53.7k|            }
  929|  53.7k|        }
  930|       |
  931|   260k|        return input.get_allocated_string().c_str();
  932|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1106|   260k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   260k|        else {
 1111|   260k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   260k|        }
 1113|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1038|   260k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   260k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|       |        if constexpr (std::is_same_v<T, float>) {
 1071|       |            return std::wcstof(str, str_end);
 1072|       |        }
 1073|   260k|        else if constexpr (std::is_same_v<T, double>) {
 1074|   260k|            return std::wcstod(str, str_end);
 1075|       |        }
 1076|       |        else if constexpr (std::is_same_v<T, long double>) {
 1077|       |            return std::wcstold(str, str_end);
 1078|       |        }
 1079|      0|#endif
 1080|       |
 1081|   260k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   260k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   260k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   260k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   334k|{
 1764|   334k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 2.74k, False: 332k]
  ------------------
 1765|  2.74k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|  2.74k|            value = std::numeric_limits<T>::infinity();
 1767|  2.74k|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|  2.74k|    }
 1775|   334k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 1.54k, False: 333k]
  ------------------
 1776|  1.54k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|  1.54k|            value = std::numeric_limits<T>::infinity();
 1778|  1.54k|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|  1.54k|    }
 1786|   334k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 17.1k, False: 317k]
  ------------------
 1787|  17.1k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|  17.1k|            value = std::numeric_limits<T>::quiet_NaN();
 1789|  17.1k|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|  17.1k|    }
 1797|   334k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 4.61k, False: 330k]
  ------------------
 1798|  4.61k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|  4.61k|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|  4.61k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|  4.61k|#if SCN_HAS_INT128
 1804|  4.61k|                using payload_type =
 1805|  4.61k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|  4.61k|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|  4.61k|                payload_type payload{};
 1811|  4.61k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 3.41k, False: 1.19k]
  ------------------
 1812|  4.61k|                        nan_payload.view(), payload, {})) {
 1813|  3.41k|                    apply_nan_payload(value, payload);
 1814|  3.41k|                }
 1815|  1.19k|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 310, False: 884]
  ------------------
 1816|  1.19k|                         scan_error::value_positive_overflow) {
 1817|    310|                    apply_nan_payload(value,
 1818|    310|                                      std::numeric_limits<payload_type>::max());
 1819|    310|                }
 1820|  4.61k|            }
 1821|       |
 1822|  4.61k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|  4.61k|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|  4.61k|    }
 1831|       |
 1832|   334k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   308k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 64.5k, False: 244k]
  ------------------
 1834|  64.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.52k, False: 62.0k]
  |  |  ------------------
  ------------------
 1835|  2.52k|            return detail::unexpected_scan_error(
 1836|  2.52k|                scan_error::invalid_scanned_value,
 1837|  2.52k|                "Invalid floating-point digit");
 1838|  2.52k|        }
 1839|  64.5k|    }
 1840|   306k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.01k, False: 299k]
  |  |  ------------------
  ------------------
 1841|  7.01k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  7.01k|                                             "Invalid floating-point digit");
 1843|  7.01k|    }
 1844|       |
 1845|   299k|    return dispatch_parse_float_value<
 1846|   299k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   299k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   299k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1633|  3.72k|{
 1634|       |    if constexpr (!std::is_same_v<F, long double> ||
 1635|       |                  !std::is_same_v<float_traits_for_long_double,
 1636|  3.72k|                                  nil_float_traits>) {
 1637|  3.72k|        using traits = float_traits<F>;
 1638|  3.72k|        typename traits::nan_repr bits{};
 1639|  3.72k|        std::memcpy(&bits, &value, sizeof(bits));
 1640|  3.72k|        traits::apply_nan_payload(bits, payload);
 1641|  3.72k|        std::memcpy(&value, &bits, sizeof(bits));
 1642|       |    }
 1643|       |    else {
 1644|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1645|       |                                              Payload>::value,
 1646|       |                      "");
 1647|       |    }
 1648|  3.72k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  500|  3.72k|    {
  501|  3.72k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  502|  3.72k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  503|  3.72k|        r.mantissa0 = static_cast<unsigned>(payload >> 32);
  504|  3.72k|        r.mantissa1 = static_cast<unsigned>(payload);
  505|  3.72k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   299k|{
 1738|   299k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   299k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   299k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   299k|{
 1738|   299k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   299k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   299k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   299k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   299k|    else {
 1742|   299k|        auto next =
 1743|   299k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   299k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   299k|                if (!err.has_value()) {
 1748|   299k|                    return unexpected(err.error());
 1749|   299k|                }
 1750|   299k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   299k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   299k|        };
 1754|   299k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   299k|    }
 1756|   299k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   299k|{
 1713|   299k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   299k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   299k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   299k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1093|   299k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   299k|    {
 1095|   299k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1099|   299k|    {
 1100|   299k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   299k|                           generic_strtod);
 1102|   299k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  894|   299k|    {
  895|   299k|        CharT* end{};
  896|   299k|        errno = 0;
  897|   299k|        value = strtod_cb(src, &end);
  898|   299k|        const auto saved_errno = errno;
  899|   299k|        auto chars_read = end - src;
  900|       |
  901|   299k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   299k|    do {                                                            \
  |  | 3985|   299k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 487, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    487|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    487|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    487|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    487|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    487|        }                                                           \
  |  | 3988|   299k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   298k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 61.8k, False: 237k]
  ------------------
  904|   298k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 61.8k, False: 0]
  ------------------
  905|  61.8k|            chars_read -= 2;
  906|  61.8k|        }
  907|       |
  908|   298k|        return chars_read;
  909|   299k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  937|   569k|    {
  938|   569k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (938:13): [True: 310k, False: 258k]
  |  Branch (938:41): [True: 0, False: 310k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::invalid_scanned_value,
  942|      0|                "strtod failed: No conversion");
  943|      0|        }
  944|       |
  945|   569k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (945:13): [True: 13.3k, False: 555k]
  ------------------
  946|   569k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (946:13): [True: 0, False: 13.3k]
  ------------------
  947|      0|            SCN_UNLIKELY_ATTR
  948|      0|            return detail::unexpected_scan_error(
  949|      0|                scan_error::invalid_scanned_value,
  950|      0|                "strtod failed: Hexfloats parsed, "
  951|      0|                "but they're disallowed by the format string");
  952|      0|        }
  953|       |
  954|   569k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (954:13): [True: 723, False: 568k]
  |  Branch (954:34): [True: 184, False: 539]
  ------------------
  955|    184|            SCN_UNLIKELY_ATTR
  956|    184|            return detail::unexpected_scan_error(
  957|    184|                scan_error::value_positive_underflow,
  958|    184|                "strtod failed: Value too small");
  959|    184|        }
  960|   568k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (960:13): [True: 539, False: 568k]
  |  Branch (960:34): [True: 0, False: 539]
  ------------------
  961|      0|            SCN_UNLIKELY_ATTR
  962|      0|            return detail::unexpected_scan_error(
  963|      0|                scan_error::value_negative_underflow,
  964|      0|                "strtod failed: Value too small");
  965|      0|        }
  966|       |
  967|       |        // This doesn't set ERANGE on all C standard library implementations,
  968|       |        // so we need to check whether we were actually expecting infinity
  969|   568k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (969:13): [True: 568k, False: 0]
  ------------------
  970|   568k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (970:13): [True: 568k, False: 0]
  ------------------
  971|   568k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (971:13): [True: 539, False: 568k]
  ------------------
  972|    539|            SCN_UNLIKELY_ATTR
  973|    539|            return detail::unexpected_scan_error(
  974|    539|                scan_error::value_positive_overflow,
  975|    539|                "strtod failed: Value too large");
  976|    539|        }
  977|   568k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (977:13): [True: 568k, False: 0]
  ------------------
  978|   568k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (978:13): [True: 568k, False: 0]
  ------------------
  979|   568k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (979:13): [True: 0, False: 568k]
  ------------------
  980|      0|            SCN_UNLIKELY_ATTR
  981|      0|            return detail::unexpected_scan_error(
  982|      0|                scan_error::value_negative_overflow,
  983|      0|                "strtod failed: Value too large");
  984|      0|        }
  985|       |
  986|   568k|        return {};
  987|   568k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  772|   569k|{
  773|   569k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (773:12): [True: 310k, False: 258k]
  |  Branch (773:44): [True: 0, False: 258k]
  ------------------
  774|   569k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  779|    723|{
  780|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  781|       |    using repr = typename float_traits<T>::value_repr;
  782|       |    repr expected{};
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    723|    return value == static_cast<T>(0.0);
  791|    723|#endif
  792|    723|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  796|    539|{
  797|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  798|       |    using repr = typename float_traits<T>::value_repr;
  799|       |    repr expected{};
  800|       |    expected.negative = 1;
  801|       |    repr received{};
  802|       |    std::memcpy(&received, &value, sizeof(repr));
  803|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  804|       |        received.padding = 0;
  805|       |    }
  806|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  807|       |#else
  808|    539|    return value == static_cast<T>(-0.0);
  809|    539|#endif
  810|    539|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  815|   568k|{
  816|   568k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  817|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  818|       |        using repr = typename float_traits<T>::value_repr;
  819|       |        repr expected{};
  820|       |        SCN_GCC_PUSH
  821|       |        SCN_GCC_IGNORE("-Woverflow")
  822|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  823|       |        SCN_GCC_POP
  824|       |        repr received{};
  825|       |        std::memcpy(&received, &value, sizeof(repr));
  826|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  827|       |            expected.one = 1;
  828|       |            received.padding = 0;
  829|       |        }
  830|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  831|       |#else
  832|   568k|        return value == std::numeric_limits<T>::infinity();
  833|   568k|#endif
  834|       |    }
  835|       |    else {
  836|       |        return false;
  837|       |    }
  838|   568k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  842|   568k|{
  843|   568k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  844|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  845|       |        using repr = typename float_traits<T>::value_repr;
  846|       |        repr expected{};
  847|       |        SCN_GCC_PUSH
  848|       |        SCN_GCC_IGNORE("-Woverflow")
  849|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  850|       |        SCN_GCC_POP
  851|       |        expected.negative = 1;
  852|       |        repr received{};
  853|       |        std::memcpy(&received, &value, sizeof(repr));
  854|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  855|       |            expected.one = 1;
  856|       |            received.padding = 0;
  857|       |        }
  858|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  859|       |#else
  860|   568k|        return value == -std::numeric_limits<T>::infinity();
  861|   568k|#endif
  862|       |    }
  863|       |    else {
  864|       |        return false;
  865|       |    }
  866|   568k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   299k|    {
  915|   299k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 281k, False: 17.4k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   281k|            auto first_space = read_until_classic_space(input.view());
  918|   281k|            input.assign(
  919|   281k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   281k|        }
  921|       |
  922|   299k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 61.8k, False: 237k]
  ------------------
  923|  61.8k|            if constexpr (std::is_same_v<CharT, char>) {
  924|  61.8k|                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|       |            else {
  927|       |                input.get_allocated_string().insert(0, L"0x");
  928|       |            }
  929|  61.8k|        }
  930|       |
  931|   299k|        return input.get_allocated_string().c_str();
  932|   299k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1106|   299k|    {
 1107|   299k|        if constexpr (std::is_same_v<CharT, char>) {
 1108|   299k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|       |        else {
 1111|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|       |        }
 1113|   299k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  990|   299k|    {
  991|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  992|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  993|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  994|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  995|       |        }
  996|       |#endif
  997|       |
  998|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  999|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return ::strtof_l(str, str_end, cloc);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return ::strtod_l(str, str_end, cloc);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return ::strtold_l(str, str_end, cloc);
 1008|       |        }
 1009|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1010|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1011|       |        if constexpr (std::is_same_v<T, float>) {
 1012|       |            return ::_strtof_l(str, str_end, cloc);
 1013|       |        }
 1014|       |        else if constexpr (std::is_same_v<T, double>) {
 1015|       |            return ::_strtod_l(str, str_end, cloc);
 1016|       |        }
 1017|       |        else if constexpr (std::is_same_v<T, long double>) {
 1018|       |            return ::_strtold_l(str, str_end, cloc);
 1019|       |        }
 1020|       |#else
 1021|   299k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1022|       |        if constexpr (std::is_same_v<T, float>) {
 1023|       |            return std::strtof(str, str_end);
 1024|       |        }
 1025|       |        else if constexpr (std::is_same_v<T, double>) {
 1026|       |            return std::strtod(str, str_end);
 1027|       |        }
 1028|   299k|        else if constexpr (std::is_same_v<T, long double>) {
 1029|   299k|            return std::strtold(str, str_end);
 1030|   299k|        }
 1031|      0|#endif
 1032|       |
 1033|   299k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   299k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   299k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1034|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1035|   299k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1763|   293k|{
 1764|   293k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1764:9): [True: 0, False: 293k]
  ------------------
 1765|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1766|      0|            value = std::numeric_limits<T>::infinity();
 1767|      0|            return static_cast<std::ptrdiff_t>(std::strlen("inf"));
 1768|       |        }
 1769|       |        else {
 1770|       |            return detail::unexpected_scan_error(
 1771|       |                scan_error::invalid_scanned_value,
 1772|       |                "Type doesn't support infinities");
 1773|       |        }
 1774|      0|    }
 1775|   293k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 293k]
  ------------------
 1776|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1777|      0|            value = std::numeric_limits<T>::infinity();
 1778|      0|            return static_cast<std::ptrdiff_t>(std::strlen("infinity"));
 1779|       |        }
 1780|       |        else {
 1781|       |            return detail::unexpected_scan_error(
 1782|       |                scan_error::invalid_scanned_value,
 1783|       |                "Type doesn't support infinities");
 1784|       |        }
 1785|      0|    }
 1786|   293k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1786:9): [True: 0, False: 293k]
  ------------------
 1787|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1788|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1789|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan"));
 1790|       |        }
 1791|       |        else {
 1792|       |            return detail::unexpected_scan_error(
 1793|       |                scan_error::invalid_scanned_value,
 1794|       |                "Type doesn't support quiet NaNs");
 1795|       |        }
 1796|      0|    }
 1797|   293k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1797:9): [True: 0, False: 293k]
  ------------------
 1798|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1799|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1800|       |
 1801|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1802|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1803|      0|#if SCN_HAS_INT128
 1804|      0|                using payload_type =
 1805|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1806|      0|                                       std::uint64_t, uint128>;
 1807|       |#else
 1808|       |                using payload_type = std::uint64_t;
 1809|       |#endif
 1810|      0|                payload_type payload{};
 1811|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1811:26): [True: 0, False: 0]
  ------------------
 1812|      0|                        nan_payload.view(), payload, {})) {
 1813|      0|                    apply_nan_payload(value, payload);
 1814|      0|                }
 1815|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1815:26): [True: 0, False: 0]
  ------------------
 1816|      0|                         scan_error::value_positive_overflow) {
 1817|      0|                    apply_nan_payload(value,
 1818|      0|                                      std::numeric_limits<payload_type>::max());
 1819|      0|                }
 1820|      0|            }
 1821|       |
 1822|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1823|      0|                                               nan_payload.view().size());
 1824|       |        }
 1825|       |        else {
 1826|       |            return detail::unexpected_scan_error(
 1827|       |                scan_error::invalid_scanned_value,
 1828|       |                "Type doesn't support quiet NaNs");
 1829|       |        }
 1830|      0|    }
 1831|       |
 1832|   293k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1079|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1833|   293k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1833:9): [True: 60.4k, False: 232k]
  ------------------
 1834|  60.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1014|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.61k, False: 53.8k]
  |  |  ------------------
  ------------------
 1835|  6.61k|            return detail::unexpected_scan_error(
 1836|  6.61k|                scan_error::invalid_scanned_value,
 1837|  6.61k|                "Invalid floating-point digit");
 1838|  6.61k|        }
 1839|  60.4k|    }
 1840|   286k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1014|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.8k, False: 269k]
  |  |  ------------------
  ------------------
 1841|  16.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1842|  16.8k|                                             "Invalid floating-point digit");
 1843|  16.8k|    }
 1844|       |
 1845|   269k|    return dispatch_parse_float_value<
 1846|   269k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1847|   269k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1848|   269k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1849|   286k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   269k|{
 1738|   269k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   269k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   269k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   269k|{
 1738|   269k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|   269k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|       |    else {
 1742|       |        auto next =
 1743|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|       |                if (!err.has_value()) {
 1748|       |                    return unexpected(err.error());
 1749|       |                }
 1750|       |            }
 1751|       |            // We still have valid impls to go, try those out
 1752|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|       |        };
 1754|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|       |    }
 1756|   269k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1737|   269k|{
 1738|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1739|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1740|       |    }
 1741|   269k|    else {
 1742|   269k|        auto next =
 1743|   269k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1744|   269k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1745|       |                // If this is the last valid impl we have,
 1746|       |                // propagate the error we got
 1747|   269k|                if (!err.has_value()) {
 1748|   269k|                    return unexpected(err.error());
 1749|   269k|                }
 1750|   269k|            }
 1751|       |            // We still have valid impls to go, try those out
 1752|   269k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1753|   269k|        };
 1754|   269k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1755|   269k|    }
 1756|   269k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1712|   269k|{
 1713|   269k|    auto impl = typename Impl::impl_type{data};
 1714|       |
 1715|   269k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1716|   269k|        return impl(value, fallback);
 1717|       |    }
 1718|       |    else {
 1719|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1720|       |                    fallback);
 1721|       |    }
 1722|   269k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1093|   269k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1094|   269k|    {
 1095|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1099|   269k|    {
 1100|   269k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1101|   269k|                           generic_strtod);
 1102|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  894|   269k|    {
  895|   269k|        CharT* end{};
  896|   269k|        errno = 0;
  897|   269k|        value = strtod_cb(src, &end);
  898|   269k|        const auto saved_errno = errno;
  899|   269k|        auto chars_read = end - src;
  900|       |
  901|   269k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3984|   269k|    do {                                                            \
  |  | 3985|   269k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 236, False: 269k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|    236|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|    236|        }                                                           \
  |  | 3988|   269k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
  902|       |
  903|   269k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (903:13): [True: 53.7k, False: 215k]
  ------------------
  904|   269k|            chars_read >= 2) {
  ------------------
  |  Branch (904:13): [True: 53.7k, False: 0]
  ------------------
  905|  53.7k|            chars_read -= 2;
  906|  53.7k|        }
  907|       |
  908|   269k|        return chars_read;
  909|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  914|   269k|    {
  915|   269k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (915:13): [True: 261k, False: 7.71k]
  ------------------
  916|       |            // TODO: call float_reader::read_source?
  917|   261k|            auto first_space = read_until_classic_space(input.view());
  918|   261k|            input.assign(
  919|   261k|                std::basic_string<CharT>{input.view().begin(), first_space});
  920|   261k|        }
  921|       |
  922|   269k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (922:13): [True: 53.7k, False: 215k]
  ------------------
  923|       |            if constexpr (std::is_same_v<CharT, char>) {
  924|       |                input.get_allocated_string().insert(0, "0x");
  925|       |            }
  926|  53.7k|            else {
  927|  53.7k|                input.get_allocated_string().insert(0, L"0x");
  928|  53.7k|            }
  929|  53.7k|        }
  930|       |
  931|   269k|        return input.get_allocated_string().c_str();
  932|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1106|   269k|    {
 1107|       |        if constexpr (std::is_same_v<CharT, char>) {
 1108|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1109|       |        }
 1110|   269k|        else {
 1111|   269k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1112|   269k|        }
 1113|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1038|   269k|    {
 1039|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1040|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1041|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1042|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1043|       |        }
 1044|       |#endif
 1045|       |
 1046|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1047|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return ::wcstof_l(str, str_end, cloc);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return ::wcstod_l(str, str_end, cloc);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return ::wcstold_l(str, str_end, cloc);
 1056|       |        }
 1057|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1058|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1059|       |        if constexpr (std::is_same_v<T, float>) {
 1060|       |            return ::_wcstof_l(str, str_end, cloc);
 1061|       |        }
 1062|       |        else if constexpr (std::is_same_v<T, double>) {
 1063|       |            return ::_wcstod_l(str, str_end, cloc);
 1064|       |        }
 1065|       |        else if constexpr (std::is_same_v<T, long double>) {
 1066|       |            return ::_wcstold_l(str, str_end, cloc);
 1067|       |        }
 1068|       |#else
 1069|   269k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1070|       |        if constexpr (std::is_same_v<T, float>) {
 1071|       |            return std::wcstof(str, str_end);
 1072|       |        }
 1073|       |        else if constexpr (std::is_same_v<T, double>) {
 1074|       |            return std::wcstod(str, str_end);
 1075|       |        }
 1076|   269k|        else if constexpr (std::is_same_v<T, long double>) {
 1077|   269k|            return std::wcstold(str, str_end);
 1078|   269k|        }
 1079|      0|#endif
 1080|       |
 1081|   269k|        SCN_EXPECT(false);
  ------------------
  |  | 1079|   269k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   269k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1082|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1083|   269k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1966|  9.85k|{
 1967|  9.85k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1968|       |
 1969|  37.0k|    while (begin != end) {
  ------------------
  |  Branch (1969:12): [True: 27.7k, False: 9.30k]
  ------------------
 1970|  27.7k|        const auto digit = char_to_int(*begin);
 1971|  27.7k|        if (digit >= 10) {
  ------------------
  |  Branch (1971:13): [True: 550, False: 27.1k]
  ------------------
 1972|    550|            break;
 1973|    550|        }
 1974|  27.1k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1975|  27.1k|        ++begin;
 1976|  27.1k|    }
 1977|       |
 1978|  9.85k|    return begin;
 1979|  9.85k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1953|  9.85k|{
 1954|  9.85k|    while (
 1955|  17.0k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1955:9): [True: 7.48k, False: 9.57k]
  ------------------
 1956|  17.0k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1956:9): [True: 7.20k, False: 274]
  ------------------
 1957|  7.20k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1958|  7.20k|                                      get_eight_digits_word(p));
 1959|  7.20k|        p += 8;
 1960|  7.20k|    }
 1961|  9.85k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2080|  9.85k|{
 2081|  9.85k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2082|       |
 2083|  9.85k|    uint64_t u64val{};
 2084|  9.85k|    auto ptr = parse_decimal_integer_fast_impl(
 2085|  9.85k|        input.data(), input.data() + input.size(), u64val);
 2086|       |
 2087|  9.85k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2088|  9.85k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1014|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 926, False: 8.92k]
  |  |  ------------------
  ------------------
 2089|  9.85k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2090|    926|        return detail::unexpected_scan_error(
 2091|    926|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2091:13): [True: 0, False: 926]
  ------------------
 2092|    926|                        : scan_error::value_positive_overflow,
 2093|    926|            "Integer overflow");
 2094|    926|    }
 2095|       |
 2096|  8.92k|    val = store_result<T>(u64val, is_negative);
 2097|  8.92k|    return ptr;
 2098|  9.85k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   509k|{
 2850|   509k|    const auto argcount = args.size();
 2851|   509k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 103k, False: 406k]
  |  Branch (2851:60): [True: 103k, False: 0]
  ------------------
 2852|   103k|        auto arg = args.get(0);
 2853|   103k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   103k|    static_cast<    \
  |  | 1084|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|   103k|    }
 2855|       |
 2856|   406k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 406k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   406k|    SCN_UNLIKELY_ATTR
 2864|   406k|    {
 2865|   406k|        auto handler = format_handler<false, CharT>{
 2866|   406k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   406k|        return vscan_parse_format_string(format, handler);
 2868|   406k|    }
 2869|   406k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   984k|{
 2398|   984k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 780k, False: 203k]
  ------------------
 2399|   780k|        return false;
 2400|   780k|    }
 2401|   203k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 203k, False: 0]
  |  Branch (2401:39): [True: 203k, False: 0]
  ------------------
 2402|   984k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   154k|{
 2431|   154k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   154k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   154k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   154k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   154k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   154k|    static_cast<    \
  |  | 1084|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   154k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  15.8k|    }                                                  \
  |  |  |  | 3995|   154k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   139k|    return it.position();
 2448|   154k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|   374k|        : format_handler_base{argcount},
 2674|   374k|          parse_ctx{source_tag<Source&&>, format},
 2675|   374k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   374k|    static_cast<    \
  |  | 1084|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   374k|    static_cast<    \
  |  | 1084|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   374k|    {
 2677|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|  1.53M|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|  1.53M|    {
 2493|  1.53M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|  1.53M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|   374k|        : contiguous_ctx(source, args, loc)
 2625|   374k|    {
 2626|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   374k|{
 2815|   374k|    const auto beg = handler.get_ctx().begin();
 2816|   374k|    detail::parse_format_string<false>(format, handler);
 2817|   374k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.7k, False: 321k]
  |  |  ------------------
  ------------------
 2818|  52.7k|        return unexpected(err.error());
 2819|  52.7k|    }
 2820|   321k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   374k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|  2.51M|    {
 2799|  2.51M|        return ctx.get();
 2800|  2.51M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|  2.51M|    {
 2630|  2.51M|        return contiguous_ctx;
 2631|  2.51M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   695k|    {
 2681|   695k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 695k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   695k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|   316k|    {
 2541|   316k|        error = unexpected(err);
 2542|   316k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|   374k|{
 2453|   374k|    auto arg = ctx.arg(id);
 2454|   374k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   374k|    return arg;
 2458|   374k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  1.53M|    {
 2567|  1.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|  1.53M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|  1.53M|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.53M, False: 0]
  |  |  ------------------
  ------------------
 2579|  1.53M|            visited_args_lower64 |= (1ull << id);
 2580|  1.53M|            return;
 2581|  1.53M|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  1.53M|    {
 2551|  1.53M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  1.53M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.53M, False: 0]
  |  |  ------------------
  ------------------
 2558|  1.53M|            return (visited_args_lower64 >> id) & 1ull;
 2559|  1.53M|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  1.53M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|   374k|    {
 2721|   374k|        return parse_ctx.next_arg_id();
 2722|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|   374k|    {
 2761|   374k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   374k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   374k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 374k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   374k|        auto specs = detail::format_specs{};
 2774|   374k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   374k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   374k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   374k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   374k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 374k]
  |  Branch (2779:29): [True: 0, False: 374k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   374k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   374k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   374k|        on_visit_scan_arg(
 2791|   374k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   374k|                                           get_ctx().locale()},
 2793|   374k|            arg);
 2794|   374k|        return parse_ctx.begin();
 2795|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|   374k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   374k|    {
 2472|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|   374k|    {
 2732|   374k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 374k]
  |  Branch (2732:13): [True: 0, False: 374k]
  |  Branch (2732:29): [True: 0, False: 374k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   374k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   374k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.7k, False: 321k]
  |  |  ------------------
  ------------------
 2739|  52.7k|            on_error(r.error());
 2740|  52.7k|        }
 2741|   321k|        else {
 2742|   321k|            get_ctx().advance_to(*r);
 2743|   321k|        }
 2744|   374k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|  1.53M|    {
 2500|  1.53M|        {
 2501|  1.53M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 1.53M]
  ------------------
 2502|  1.53M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 1.53M]
  ------------------
 2503|  1.53M|                                      ? std::numeric_limits<uint64_t>::max()
 2504|  1.53M|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|  1.53M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 1.53M]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|  1.53M|        }
 2511|       |
 2512|  1.53M|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 1.53M, False: 0]
  ------------------
 2513|  1.53M|            return;
 2514|  1.53M|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  6.13M|    {
 2546|  6.13M|        return error;
 2547|  6.13M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|   406k|        : format_handler_base{argcount},
 2674|   406k|          parse_ctx{source_tag<Source&&>, format},
 2675|   406k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   406k|    {
 2677|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|   406k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   406k|    static_cast<    \
  |  | 1084|   406k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   406k|    {
 2602|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   406k|{
 2815|   406k|    const auto beg = handler.get_ctx().begin();
 2816|   406k|    detail::parse_format_string<false>(format, handler);
 2817|   406k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.7k, False: 353k]
  |  |  ------------------
  ------------------
 2818|  52.7k|        return unexpected(err.error());
 2819|  52.7k|    }
 2820|   353k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   406k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|  2.73M|    {
 2799|  2.73M|        return ctx.get();
 2800|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|  2.73M|    {
 2606|  2.73M|        return ctx;
 2607|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   760k|    {
 2681|   760k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 760k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   760k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|   406k|{
 2453|   406k|    auto arg = ctx.arg(id);
 2454|   406k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   406k|    return arg;
 2458|   406k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|   406k|    {
 2721|   406k|        return parse_ctx.next_arg_id();
 2722|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|   406k|    {
 2761|   406k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   406k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   406k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 406k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   406k|        auto specs = detail::format_specs{};
 2774|   406k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   406k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   406k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   406k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   406k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 406k]
  |  Branch (2779:29): [True: 0, False: 406k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   406k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 406k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   406k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   406k|        on_visit_scan_arg(
 2791|   406k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   406k|                                           get_ctx().locale()},
 2793|   406k|            arg);
 2794|   406k|        return parse_ctx.begin();
 2795|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2470|   406k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   406k|    {
 2472|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   406k|    {
 2732|   406k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 406k]
  |  Branch (2732:13): [True: 0, False: 406k]
  |  Branch (2732:29): [True: 0, False: 406k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   406k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   406k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 52.7k, False: 353k]
  |  |  ------------------
  ------------------
 2739|  52.7k|            on_error(r.error());
 2740|  52.7k|        }
 2741|   353k|        else {
 2742|   353k|            get_ctx().advance_to(*r);
 2743|   353k|        }
 2744|   406k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   474k|{
 2830|   474k|    const auto argcount = args.size();
 2831|   474k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 100k, False: 374k]
  |  Branch (2831:60): [True: 100k, False: 0]
  ------------------
 2832|   100k|        auto arg = args.get(0);
 2833|   100k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   100k|    static_cast<    \
  |  | 1084|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|   100k|    }
 2835|       |
 2836|   374k|    auto handler = format_handler<true, CharT>{
 2837|   374k|        ranges::subrange<const CharT*>{source.data(),
 2838|   374k|                                       source.data() + source.size()},
 2839|   374k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   374k|    static_cast<    \
  |  | 1084|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   374k|    static_cast<    \
  |  | 1084|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   374k|    return vscan_parse_format_string(format, handler);
 2841|   474k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   151k|{
 2411|   151k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   151k|    auto reader =
 2417|   151k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   151k|            ranges::subrange<const CharT*>{source.data(),
 2419|   151k|                                           source.data() + source.size()},
 2420|   151k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   151k|    static_cast<    \
  |  | 1084|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   151k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  15.8k|    }                                                  \
  |  |  |  | 3995|   151k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   135k|    return ranges::distance(source.data(), it);
 2423|   151k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   561k|{
 2930|   561k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   561k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 492k, False: 68.6k]
  |  |  ------------------
  ------------------
 2931|   492k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   492k|    }
 2937|  68.6k|    else {
 2938|  68.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 68.6k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  68.6k|    }
 2944|   561k|    return result;
 2945|   561k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   469k|{
 2830|   469k|    const auto argcount = args.size();
 2831|   469k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 92.9k, False: 376k]
  |  Branch (2831:60): [True: 92.9k, False: 0]
  ------------------
 2832|  92.9k|        auto arg = args.get(0);
 2833|  92.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  92.9k|    static_cast<    \
  |  | 1084|  92.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  92.9k|    }
 2835|       |
 2836|   376k|    auto handler = format_handler<true, CharT>{
 2837|   376k|        ranges::subrange<const CharT*>{source.data(),
 2838|   376k|                                       source.data() + source.size()},
 2839|   376k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   376k|    static_cast<    \
  |  | 1084|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   376k|    static_cast<    \
  |  | 1084|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   376k|    return vscan_parse_format_string(format, handler);
 2841|   469k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   937k|{
 2398|   937k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 752k, False: 185k]
  ------------------
 2399|   752k|        return false;
 2400|   752k|    }
 2401|   185k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 185k, False: 0]
  |  Branch (2401:39): [True: 185k, False: 0]
  ------------------
 2402|   937k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   139k|{
 2411|   139k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   139k|    auto reader =
 2417|   139k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   139k|            ranges::subrange<const CharT*>{source.data(),
 2419|   139k|                                           source.data() + source.size()},
 2420|   139k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   139k|    static_cast<    \
  |  | 1084|   139k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   139k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 31.6k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  31.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  31.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  31.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  31.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  31.6k|    }                                                  \
  |  |  |  | 3995|   139k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   107k|    return ranges::distance(source.data(), it);
 2423|   139k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   376k|        : format_handler_base{argcount},
 2674|   376k|          parse_ctx{source_tag<Source&&>, format},
 2675|   376k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   376k|    static_cast<    \
  |  | 1084|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   376k|    static_cast<    \
  |  | 1084|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   376k|    {
 2677|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   376k|        : contiguous_ctx(source, args, loc)
 2625|   376k|    {
 2626|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   376k|{
 2815|   376k|    const auto beg = handler.get_ctx().begin();
 2816|   376k|    detail::parse_format_string<false>(format, handler);
 2817|   376k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 270k]
  |  |  ------------------
  ------------------
 2818|   105k|        return unexpected(err.error());
 2819|   105k|    }
 2820|   270k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   376k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|  2.42M|    {
 2799|  2.42M|        return ctx.get();
 2800|  2.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|  2.42M|    {
 2630|  2.42M|        return contiguous_ctx;
 2631|  2.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|   646k|    {
 2681|   646k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 646k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|   376k|{
 2453|   376k|    auto arg = ctx.arg(id);
 2454|   376k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   376k|    return arg;
 2458|   376k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|   376k|    {
 2721|   376k|        return parse_ctx.next_arg_id();
 2722|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|   376k|    {
 2761|   376k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   376k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   376k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 376k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   376k|        auto specs = detail::format_specs{};
 2774|   376k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   376k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   376k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   376k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   376k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 376k]
  |  Branch (2779:29): [True: 0, False: 376k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   376k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 376k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   376k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   376k|        on_visit_scan_arg(
 2791|   376k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   376k|                                           get_ctx().locale()},
 2793|   376k|            arg);
 2794|   376k|        return parse_ctx.begin();
 2795|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|   376k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   376k|    {
 2472|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|   376k|    {
 2732|   376k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 376k]
  |  Branch (2732:13): [True: 0, False: 376k]
  |  Branch (2732:29): [True: 0, False: 376k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   376k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   376k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 270k]
  |  |  ------------------
  ------------------
 2739|   105k|            on_error(r.error());
 2740|   105k|        }
 2741|   270k|        else {
 2742|   270k|            get_ctx().advance_to(*r);
 2743|   270k|        }
 2744|   376k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   468k|{
 2850|   468k|    const auto argcount = args.size();
 2851|   468k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 92.8k, False: 375k]
  |  Branch (2851:60): [True: 92.8k, False: 0]
  ------------------
 2852|  92.8k|        auto arg = args.get(0);
 2853|  92.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  92.8k|    static_cast<    \
  |  | 1084|  92.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  92.8k|    }
 2855|       |
 2856|   375k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 375k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   375k|    SCN_UNLIKELY_ATTR
 2864|   375k|    {
 2865|   375k|        auto handler = format_handler<false, CharT>{
 2866|   375k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   375k|        return vscan_parse_format_string(format, handler);
 2868|   375k|    }
 2869|   375k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   139k|{
 2431|   139k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   139k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   139k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   139k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   139k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   139k|    static_cast<    \
  |  | 1084|   139k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   139k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 31.6k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  31.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  31.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  31.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  31.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  31.6k|    }                                                  \
  |  |  |  | 3995|   139k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   107k|    return it.position();
 2448|   139k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|   375k|        : format_handler_base{argcount},
 2674|   375k|          parse_ctx{source_tag<Source&&>, format},
 2675|   375k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   375k|    {
 2677|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|   375k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   375k|    static_cast<    \
  |  | 1084|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   375k|    {
 2602|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   375k|{
 2815|   375k|    const auto beg = handler.get_ctx().begin();
 2816|   375k|    detail::parse_format_string<false>(format, handler);
 2817|   375k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 270k]
  |  |  ------------------
  ------------------
 2818|   105k|        return unexpected(err.error());
 2819|   105k|    }
 2820|   270k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   375k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|  2.42M|    {
 2799|  2.42M|        return ctx.get();
 2800|  2.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|  2.42M|    {
 2606|  2.42M|        return ctx;
 2607|  2.42M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   646k|    {
 2681|   646k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 646k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   646k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|   375k|{
 2453|   375k|    auto arg = ctx.arg(id);
 2454|   375k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   375k|    return arg;
 2458|   375k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|   375k|    {
 2721|   375k|        return parse_ctx.next_arg_id();
 2722|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|   375k|    {
 2761|   375k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   375k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   375k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 375k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   375k|        auto specs = detail::format_specs{};
 2774|   375k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   375k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   375k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   375k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   375k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 375k]
  |  Branch (2779:29): [True: 0, False: 375k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   375k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2786|      0|            return parse_ctx.begin();
 2787|      0|        }
 2788|   375k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   375k|        on_visit_scan_arg(
 2791|   375k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   375k|                                           get_ctx().locale()},
 2793|   375k|            arg);
 2794|   375k|        return parse_ctx.begin();
 2795|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2470|   375k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   375k|    {
 2472|   375k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   375k|    {
 2732|   375k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 375k]
  |  Branch (2732:13): [True: 0, False: 375k]
  |  Branch (2732:29): [True: 0, False: 375k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   375k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   375k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 105k, False: 270k]
  |  |  ------------------
  ------------------
 2739|   105k|            on_error(r.error());
 2740|   105k|        }
 2741|   270k|        else {
 2742|   270k|            get_ctx().advance_to(*r);
 2743|   270k|        }
 2744|   375k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   515k|{
 2930|   515k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   515k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 378k, False: 137k]
  |  |  ------------------
  ------------------
 2931|   378k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 378k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   378k|    }
 2937|   137k|    else {
 2938|   137k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|   137k|    }
 2944|   515k|    return result;
 2945|   515k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  50.3k|{
 2876|  50.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  50.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  50.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  51.6k|{
 2876|  51.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  51.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  46.4k|{
 2876|  46.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  46.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  46.4k|{
 2876|  46.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  46.4k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|  1.75k|{
 1487|  1.75k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|  1.75k|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|  1.75k|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|  1.75k|            return transcode_to_string_impl_to32(src, dest);
 1498|  1.75k|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|  1.75k|    SCN_EXPECT(false);
  ------------------
  |  | 1079|  1.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|  1.75k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|  1.75k|{
 1379|  1.75k|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|  1.75k|    auto it = src.begin();
 1382|   405k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 403k, False: 1.75k]
  ------------------
 1383|   403k|        auto res = get_next_code_point(
 1384|   403k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   403k|                                                                 src.end()));
 1386|   403k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.63k, False: 401k]
  |  |  ------------------
  ------------------
 1387|  1.63k|            dest.push_back(DestCharT{0xfffd});
 1388|  1.63k|        }
 1389|   401k|        else {
 1390|   401k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   401k|        }
 1392|   403k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   403k|    }
 1394|  1.75k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   666k|{
 1303|   666k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   666k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   666k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   666k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   666k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 25.2k, False: 641k]
  |  |  ------------------
  ------------------
 1307|  25.2k|        return {get_start_for_next_code_point(input),
 1308|  25.2k|                detail::invalid_code_point};
 1309|  25.2k|    }
 1310|   641k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   641k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.89k, False: 638k]
  |  |  ------------------
  ------------------
 1311|  2.89k|        return {input.end(), detail::invalid_code_point};
 1312|  2.89k|    }
 1313|       |
 1314|   638k|    return {input.begin() + len,
 1315|   638k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   641k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  25.2k|{
 1289|  25.2k|    auto it = input.begin();
 1290|   122k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 115k, False: 7.20k]
  ------------------
 1291|   115k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 18.0k, False: 96.9k]
  ------------------
 1292|  18.0k|            break;
 1293|  18.0k|        }
 1294|   115k|    }
 1295|  25.2k|    return it;
 1296|  25.2k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  817|  19.1M|    constexpr parse_error(code c) : m_code(c)
  818|  19.1M|    {
  819|  19.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|  19.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  820|  19.1M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  832|  8.69M|    {
  833|  8.69M|        return a.m_code == b.m_code;
  834|  8.69M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  836|  2.25M|    {
  837|  2.25M|        return !(a == b);
  838|  2.25M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1851|  1.64M|    clocale_restorer(int cat) : m_category(cat)
 1852|  1.64M|    {
 1853|  1.64M|        const auto loc = std::setlocale(cat, nullptr);
 1854|  1.64M|        std::strcpy(m_locbuf, loc);
 1855|  1.64M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1857|  1.64M|    {
 1858|       |        // Restore locale to what it was before
 1859|  1.64M|        std::setlocale(m_category, m_locbuf);
 1860|  1.64M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1880|  1.64M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1881|  1.64M|    {
 1882|  1.64M|        std::setlocale(cat, "C");
 1883|  1.64M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|  1.53M|    {
 3114|  1.53M|        return m_msg == nullptr;
 3115|  1.53M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3760|  1.51M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  10.5M|{
  458|  10.5M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  10.5M|        static_cast<unsigned char>(ch))];
  460|  10.5M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   314k|{
  469|   314k|    return static_cast<unsigned char>(ch) <= 127;
  470|   314k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|  2.49M|{
  538|  2.49M|    SCN_GCC_PUSH
  539|  2.49M|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|  2.49M|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|  2.49M|    SCN_GCC_POP
  542|  2.49M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  6.97M|{
  794|  6.97M|    return e != eof_error::good;
  795|  6.97M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  28.3k|{
  808|  28.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  28.3k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  28.3k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  854|   197k|{
  855|   197k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  856|   197k|    return parse_error::eof;
  857|   197k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  863|  2.25M|{
  864|  2.25M|    if (err == parse_error::good) {
  ------------------
  |  Branch (864:9): [True: 0, False: 2.25M]
  ------------------
  865|      0|        return {};
  866|      0|    }
  867|       |
  868|  2.25M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (868:9): [True: 75.7k, False: 2.18M]
  ------------------
  869|  75.7k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  870|  75.7k|    }
  871|       |
  872|  2.18M|    return detail::unexpected_scan_error(code, msg);
  873|  2.25M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  877|  2.25M|{
  878|  2.25M|    return [code, msg](parse_error err) {
  879|  2.25M|        assert(err != parse_error::good);
  880|  2.25M|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  2.25M|    };
  882|  2.25M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2381|  1.33M|{
 2382|  1.33M|    unsigned char running_diff{0};
 2383|  5.02M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2383:24): [True: 3.68M, False: 1.33M]
  ------------------
 2384|  3.68M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2385|  3.68M|    }
 2386|  1.33M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2386:12): [True: 39.1k, False: 1.29M]
  |  Branch (2386:33): [True: 18.1k, False: 1.27M]
  ------------------
 2387|  1.33M|}
_ZN3scn2v44impl11char_to_intEc:
 3302|  7.69M|{
 3303|  7.69M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3304|  7.69M|}
_ZN3scn2v44impl11char_to_intEw:
 3306|  2.88M|{
 3307|  2.88M|#if WCHAR_MIN < 0
 3308|  2.88M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3308:9): [True: 2.86M, False: 14.8k]
  |  Branch (3308:20): [True: 1.83M, False: 1.03M]
  ------------------
 3309|       |#else
 3310|       |    if (ch <= 255) {
 3311|       |#endif
 3312|  1.83M|        return char_to_int(static_cast<char>(ch));
 3313|  1.83M|    }
 3314|  1.04M|    return 255;
 3315|  2.88M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|  1.21M|{
 6146|  1.21M|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 0, False: 1.21M]
  ------------------
 6147|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 0, False: 0]
  ------------------
 6148|      0|            return detail::unexpected_scan_error(
 6149|      0|                scan_error::length_too_short,
 6150|      0|                "Scanned value too narrow, width did not exceed what "
 6151|      0|                "was specified in the format string");
 6152|      0|        }
 6153|      0|    }
 6154|  1.21M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 0, False: 1.21M]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|      0|                   specs.precision);
 6158|      0|    }
 6159|  1.21M|    return {};
 6160|  1.21M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.88M|    {
  304|  1.88M|        ranges::advance(x, n);
  305|  1.88M|        return x;
  306|  1.88M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.88M|    {
  268|  1.88M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.88M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.88M|    {
  151|  1.88M|        i += n;
  152|  1.88M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.24M|    {
  108|  2.24M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.24M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.24M|    {
   87|  2.24M|        return s - i;
   88|  2.24M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.67M|    {
  304|  1.67M|        ranges::advance(x, n);
  305|  1.67M|        return x;
  306|  1.67M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.67M|    {
  268|  1.67M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.67M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.67M|    {
  151|  1.67M|        i += n;
  152|  1.67M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   502k|    {
  108|   502k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   502k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   502k|    {
   87|   502k|        return s - i;
   88|   502k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|  1.06M|    {
 3055|  1.06M|        return m_current;
 3056|  1.06M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|  1.02M|    {
 3055|  1.02M|        return m_current;
 3056|  1.02M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   561k|{
  993|   561k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   561k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   561k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   561k|        auto beg = r.begin();
 1004|   561k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 561k, False: 0]
  ------------------
 1005|   561k|            return false;
 1006|   561k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   561k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|  1.45M|{
 1982|  1.45M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  1.45M|    else {
 1993|  1.45M|        auto it = range.begin();
 1994|  1.45M|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 883k, False: 572k]
  ------------------
 1995|   883k|            return ranges::next(it, count);
 1996|   883k|        }
 1997|       |
 1998|  2.25M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 1.70M, False: 543k]
  ------------------
 1999|  1.70M|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 29.3k, False: 1.67M]
  ------------------
 2000|  29.3k|                return unexpected(eof_error::eof);
 2001|  29.3k|            }
 2002|  1.70M|        }
 2003|       |
 2004|   543k|        return it;
 2005|   572k|    }
 2006|  1.45M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|  1.45M|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|  1.45M|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|  1.45M|        else {
 1125|  1.45M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 1.45M, False: 0]
  ------------------
 1126|  1.45M|                return static_cast<size_t>(
 1127|  1.45M|                    r.begin().parent()->chars_available() -
 1128|  1.45M|                    r.begin().position());
 1129|  1.45M|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|  1.45M|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|  1.45M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  10.0M|    {
  773|  10.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  10.0M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.32M|        : m_fptr([](storage fn,
  753|  1.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.32M|              cvref<T> obj = *get<T>(fn);
  755|  1.32M|              if constexpr (std::is_void_v<R>) {
  756|  1.32M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.32M|              }
  758|  1.32M|              else {
  759|  1.32M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.32M|              }
  761|  1.32M|          }),
  762|  1.32M|          m_storage(std::addressof(f))
  763|  1.32M|    {
  764|  1.32M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  5.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.01M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.01M|              else {
  759|  5.01M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.01M|              }
  761|  5.01M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  5.01M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  5.01M|        else if constexpr (std::is_object_v<T>) {
  694|  5.01M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.01M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.32M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.32M|        {
  668|  1.32M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  6.56M|    {
  773|  6.56M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  6.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  6.56M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.51M|        : m_fptr([](storage fn,
  753|  1.51M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.51M|              cvref<T> obj = *get<T>(fn);
  755|  1.51M|              if constexpr (std::is_void_v<R>) {
  756|  1.51M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.51M|              }
  758|  1.51M|              else {
  759|  1.51M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.51M|              }
  761|  1.51M|          }),
  762|  1.51M|          m_storage(std::addressof(f))
  763|  1.51M|    {
  764|  1.51M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|  2.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.62M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.62M|              else {
  759|  2.62M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.62M|              }
  761|  2.62M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|  2.62M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  2.62M|        else if constexpr (std::is_object_v<T>) {
  694|  2.62M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.62M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.51M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.51M|        {
  668|  1.51M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   406k|    {
 6174|   406k|        const bool need_skipped_width =
 6175|   406k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 406k]
  |  Branch (6175:33): [True: 0, False: 406k]
  ------------------
 6176|   406k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   406k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 406k]
  ------------------
 6180|   406k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 406k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   406k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 406k, False: 0]
  |  Branch (6184:56): [True: 406k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   406k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 406k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   805k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   406k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   406k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   406k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 7.58k, False: 398k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  7.58k|    }                                                  \
  |  |  |  | 3995|   406k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   805k|                            make_eof_scan_error));
 6195|       |
 6196|   805k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 398k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   398k|            return result_type{it, 0};
 6204|   805k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   406k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  1.02M|{
 2134|  1.02M|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  1.02M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  1.02M|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  1.02M|    else {
 2105|  1.02M|        auto first = range.begin();
 2106|  3.88M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 3.87M, False: 14.0k]
  ------------------
 2107|  3.87M|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 1.01M, False: 2.86M]
  ------------------
 2108|  1.01M|                return first;
 2109|  1.01M|            }
 2110|  3.87M|        }
 2111|  14.0k|        return first;
 2112|  1.02M|    }
 2113|  1.02M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   875k|    {
  108|   875k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   875k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   875k|    {
   94|   875k|        iter_difference_t<I> counter{0};
   95|  5.98M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 5.10M, False: 875k]
  ------------------
   96|  5.10M|            ++i;
   97|  5.10M|            ++counter;
   98|  5.10M|        }
   99|   875k|        return counter;
  100|   875k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  878|  2.25M|    return [code, msg](parse_error err) {
  879|  2.25M|        assert(err != parse_error::good);
  880|  2.25M|        return make_scan_error_from_parse_error(err, code, msg).error();
  881|  2.25M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1904|   208k|    {
 1905|   208k|        auto stdloc = loc.get<std::locale>();
 1906|   208k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|   208k|        grouping = numpunct.grouping();
 1908|   208k|        thousands_sep =
 1909|   208k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 208k]
  ------------------
 1910|   208k|        decimal_point = numpunct.decimal_point();
 1911|   208k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1841|   208k|{
 1842|   208k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 208k, False: 0]
  ------------------
 1843|   208k|        return std::use_facet<Facet>(stdloc);
 1844|   208k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|   208k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|  1.51M|{
 1971|  1.51M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.5k, False: 1.50M]
  |  |  ------------------
  ------------------
 1972|  10.5k|        return unexpected(e);
 1973|  10.5k|    }
 1974|       |
 1975|  1.50M|    return ranges::next(range.begin());
 1976|  1.51M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  2.22M|{
  961|  2.22M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.2k, False: 2.20M]
  |  |  ------------------
  ------------------
  962|  20.2k|        return eof_error::eof;
  963|  20.2k|    }
  964|  2.20M|    return eof_error::good;
  965|  2.22M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  3.05M|{
  955|  3.05M|    return is_range_eof(r.begin(), r.end());
  956|  3.05M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  3.05M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  3.05M|    {
  948|  3.05M|        return begin == end;
  949|  3.05M|    }
  950|  3.05M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.50M|    {
  296|  1.50M|        ++x;
  297|  1.50M|        return x;
  298|  1.50M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   590k|{
 3321|   590k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   590k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 457k, False: 132k]
  ------------------
 3323|   457k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 457k, False: 204]
  ------------------
 3324|   457k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   457k|        }
 3326|    204|        return unexpected(eof_error::eof);
 3327|   457k|    }
 3328|       |
 3329|   132k|    auto& it = *r;
 3330|   132k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 62.0k, False: 70.5k]
  ------------------
 3331|  62.0k|        return std::pair{it, sign_type::minus_sign};
 3332|  62.0k|    }
 3333|  70.5k|    return std::pair{it, sign_type::plus_sign};
 3334|   132k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|  1.00M|{
 2435|  1.00M|    auto it = read_code_unit(range);
 2436|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.25k, False: 1.00M]
  |  |  ------------------
  ------------------
 2437|  5.25k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  5.25k|    }
 2439|       |
 2440|  1.90M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.90M, False: 828k]
  ------------------
 2441|  1.90M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 171k, False: 1.73M]
  ------------------
 2442|   171k|            return *it;
 2443|   171k|        }
 2444|  1.90M|    }
 2445|       |
 2446|   828k|    return unexpected(parse_error::error);
 2447|  1.00M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|  1.45M|{
 2393|  1.45M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.45M|    else {
 2407|  1.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.45M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.45M|                return ch;
 2410|  1.45M|            }
 2411|  1.45M|            return static_cast<char_type>(ch +
 2412|  1.45M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.45M|        };
 2414|       |
 2415|  1.45M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 29.3k, False: 1.42M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  29.3k|    }                                                  \
  |  |  |  | 3995|  1.45M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.42M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.42M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.42M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.36M, False: 64.5k]
  |  |  ------------------
  ------------------
 2420|  1.42M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.42M|                    return ascii_tolower(a) ==
 2422|  1.42M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.42M|                }))) {
 2424|  1.36M|            return unexpected(parse_error::error);
 2425|  1.36M|        }
 2426|       |
 2427|  64.5k|        return it;
 2428|  1.42M|    }
 2429|  1.45M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2407|  1.66M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.66M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.44M, False: 223k]
  |  Branch (2408:29): [True: 157k, False: 65.8k]
  ------------------
 2409|  1.59M|                return ch;
 2410|  1.59M|            }
 2411|  65.8k|            return static_cast<char_type>(ch +
 2412|  65.8k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.66M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|   508k|{
 2308|   508k|    auto it = read_code_unit(range);
 2309|   508k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.31k, False: 503k]
  |  |  ------------------
  ------------------
 2310|  5.31k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  5.31k|    }
 2312|       |
 2313|   503k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 424k, False: 79.2k]
  |  |  ------------------
  ------------------
 2314|   503k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   424k|        return unexpected(parse_error::error);
 2316|   424k|    }
 2317|       |
 2318|  79.2k|    return *it;
 2319|   503k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|  1.01M|{
 2154|  1.01M|    auto it = read_while_code_unit(range, pred);
 2155|  1.01M|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 456k, False: 559k]
  ------------------
 2156|   456k|        return unexpected(parse_error::error);
 2157|   456k|    }
 2158|   559k|    return it;
 2159|  1.01M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1744|   465k|    {
 1745|   465k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   465k|                           ranges::common_range<Range>) {
 1762|   465k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   465k|            auto end_seg = range.end().contiguous_segment();
 1764|   465k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 58.1k, False: 407k]
  |  |  ------------------
  ------------------
 1765|   465k|                             detail::to_address(end_seg.end()))) {
 1766|  58.1k|                auto& str = m_storage.emplace();
 1767|  58.1k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  58.1k|                                                     range.begin().position()));
 1769|  58.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  58.1k|                m_view = string_view_type{str.data(), str.size()};
 1771|  58.1k|                return;
 1772|  58.1k|            }
 1773|       |
 1774|   407k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   407k|                                                            end_seg.data());
 1776|   407k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   465k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|  3.68M|    {
 1706|  3.68M|        return m_view;
 1707|  3.68M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|  2.13M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   348k|    {
 6216|   348k|        const bool need_skipped_width =
 6217|   348k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 348k]
  |  Branch (6217:33): [True: 0, False: 348k]
  ------------------
 6218|   348k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   348k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 348k]
  ------------------
 6221|   348k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 348k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   348k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 348k, False: 0]
  ------------------
 6230|   348k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 348k]
  ------------------
 6231|   348k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   348k|        return result_type{rng.begin(), 0};
 6255|   348k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   783k|{
 1971|   783k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   783k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.91k, False: 780k]
  |  |  ------------------
  ------------------
 1972|  2.91k|        return unexpected(e);
 1973|  2.91k|    }
 1974|       |
 1975|   780k|    return ranges::next(range.begin());
 1976|   783k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|  1.46M|{
  961|  1.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 1.45M]
  |  |  ------------------
  ------------------
  962|  10.7k|        return eof_error::eof;
  963|  10.7k|    }
  964|  1.45M|    return eof_error::good;
  965|  1.46M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|  1.46M|{
  955|  1.46M|    return is_range_eof(r.begin(), r.end());
  956|  1.46M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|  1.48M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.48M|    {
  948|  1.48M|        return begin == end;
  949|  1.48M|    }
  950|  1.48M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   791k|    {
  296|   791k|        ++x;
  297|   791k|        return x;
  298|   791k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   529k|{
 3321|   529k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   529k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 410k, False: 119k]
  ------------------
 3323|   410k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 410k, False: 60]
  ------------------
 3324|   410k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   410k|        }
 3326|     60|        return unexpected(eof_error::eof);
 3327|   410k|    }
 3328|       |
 3329|   119k|    auto& it = *r;
 3330|   119k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 59.6k, False: 59.5k]
  ------------------
 3331|  59.6k|        return std::pair{it, sign_type::minus_sign};
 3332|  59.6k|    }
 3333|  59.5k|    return std::pair{it, sign_type::plus_sign};
 3334|   119k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   612k|{
 2435|   612k|    auto it = read_code_unit(range);
 2436|   612k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   612k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 916, False: 611k]
  |  |  ------------------
  ------------------
 2437|    916|        return unexpected(make_eof_parse_error(it.error()));
 2438|    916|    }
 2439|       |
 2440|  1.15M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.15M, False: 480k]
  ------------------
 2441|  1.15M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 131k, False: 1.02M]
  ------------------
 2442|   131k|            return *it;
 2443|   131k|        }
 2444|  1.15M|    }
 2445|       |
 2446|   480k|    return unexpected(parse_error::error);
 2447|   611k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3406|  11.1k|{
 3407|  11.1k|    switch (base) {
 3408|      0|        case 2:
  ------------------
  |  Branch (3408:9): [True: 0, False: 11.1k]
  ------------------
 3409|       |            // allow 0b/0B
 3410|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3411|      0|                    false};
 3412|       |
 3413|      0|        case 8: {
  ------------------
  |  Branch (3413:9): [True: 0, False: 11.1k]
  ------------------
 3414|       |            // allow 0o/0O/0
 3415|      0|            bool zero_parsed = false;
 3416|      0|            auto it = apply_opt(
 3417|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3418|      0|            return {it, 8, zero_parsed};
 3419|      0|        }
 3420|       |
 3421|      0|        case 16:
  ------------------
  |  Branch (3421:9): [True: 0, False: 11.1k]
  ------------------
 3422|       |            // allow 0x/0X
 3423|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3424|      0|                    false};
 3425|       |
 3426|      0|        case 0:
  ------------------
  |  Branch (3426:9): [True: 0, False: 11.1k]
  ------------------
 3427|       |            // detect base
 3428|      0|            return parse_integer_base_prefix_for_detection(range);
 3429|       |
 3430|  11.1k|        default:
  ------------------
  |  Branch (3430:9): [True: 11.1k, False: 0]
  ------------------
 3431|       |            // no base prefix allowed
 3432|  11.1k|            return {range.begin(), base, false};
 3433|  11.1k|    }
 3434|  11.1k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  1.36M|{
 2393|  1.36M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|  1.36M|                  std::is_same_v<char_type, char>) {
 2397|  1.36M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2397:13): [True: 30.0k, False: 1.33M]
  ------------------
 2398|  30.0k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|  30.0k|        }
 2400|  1.33M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2400:13): [True: 1.27M, False: 57.2k]
  ------------------
 2401|  1.27M|            return unexpected(parse_error::error);
 2402|  1.27M|        }
 2403|  57.2k|        return ranges::next(range.begin(),
 2404|  57.2k|                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|       |    else {
 2407|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|       |            if (ch < 'A' || ch > 'Z') {
 2409|       |                return ch;
 2410|       |            }
 2411|       |            return static_cast<char_type>(ch +
 2412|       |                                          static_cast<char_type>('a' - 'A'));
 2413|       |        };
 2414|       |
 2415|       |        SCN_TRY(it, read_exactly_n_code_units(
 2416|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|       |                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|       |        if (SCN_UNLIKELY(!std::equal(
 2420|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|       |                    return ascii_tolower(a) ==
 2422|       |                           static_cast<detail::char_t<Range>>(b);
 2423|       |                }))) {
 2424|       |            return unexpected(parse_error::error);
 2425|       |        }
 2426|       |
 2427|       |        return it;
 2428|       |    }
 2429|  1.36M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|   171k|{
 2308|   171k|    auto it = read_code_unit(range);
 2309|   171k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.00k, False: 169k]
  |  |  ------------------
  ------------------
 2310|  2.00k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  2.00k|    }
 2312|       |
 2313|   169k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 137k, False: 31.4k]
  |  |  ------------------
  ------------------
 2314|   169k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   137k|        return unexpected(parse_error::error);
 2316|   137k|    }
 2317|       |
 2318|  31.4k|    return *it;
 2319|   169k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3473|  11.1k|{
 3474|  11.1k|    SCN_UNUSED(base);
  ------------------
  |  | 1064|  11.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3475|  11.1k|    using char_type = detail::char_t<Range>;
 3476|       |
 3477|  11.1k|    if constexpr (ranges::contiguous_range<Range>) {
 3478|  11.1k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 3479|      0|            return detail::unexpected_scan_error(
 3480|      0|                scan_error::invalid_scanned_value,
 3481|      0|                "Failed to parse integer: No digits found");
 3482|      0|        }
 3483|  11.1k|        return range.end();
 3484|       |    }
 3485|       |    else {
 3486|       |        return read_while1_code_unit(range,
 3487|       |                                     [&](char_type ch) noexcept {
 3488|       |                                         return char_to_int(ch) < base;
 3489|       |                                     })
 3490|       |            .transform_error(map_parse_error_to_scan_error(
 3491|       |                scan_error::invalid_scanned_value,
 3492|       |                "Failed to parse integer: No digits found"));
 3493|       |    }
 3494|  11.1k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|  11.1k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  11.1k|                  ranges::sized_range<Range>) {
 1811|  11.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  11.1k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  11.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  11.1k|    {
 1614|  11.1k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  2.72M|    {
 1627|  2.72M|        return sv;
 1628|  2.72M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|   300k|{
 2134|   300k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   300k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|   300k|{
 2101|   300k|    if constexpr (ranges::common_range<Range>) {
 2102|   300k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|   300k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   523k|{
 3129|   523k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 523k, False: 0]
  ------------------
 3130|   523k|        auto it = read_while_classic_space(range);
 3131|   523k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   523k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.08k, False: 517k]
  |  |  ------------------
  ------------------
 3133|  6.08k|            return unexpected(e);
 3134|  6.08k|        }
 3135|       |
 3136|   517k|        return it;
 3137|   523k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   523k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   523k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|   523k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|   523k|        auto buf = make_contiguous_buffer(range);
 2281|   523k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|   523k|        return ranges::next(range.begin(),
 2283|   523k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|   523k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   523k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   523k|                  ranges::sized_range<Range>) {
 1811|   523k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   523k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|   523k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   523k|    {
 1614|   523k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.44M|    {
  304|  1.44M|        ranges::advance(x, n);
  305|  1.44M|        return x;
  306|  1.44M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.93M|    {
  268|  1.93M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.93M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.93M|    {
  181|  7.44M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 5.50M, False: 1.93M]
  ------------------
  182|  5.50M|            ++i;
  183|  5.50M|        }
  184|  1.93M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   131k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   131k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   131k|            auto rd = make_reader<T, char_type>();
 6336|   131k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   131k|    do {                                                            \
  |  | 3985|   131k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 131k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   131k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   131k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 131k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   131k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   131k|                return impl(rd, range, value);
 6341|   131k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   131k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|   780k|    {
 3219|   780k|        reader_error_handler eh{};
 3220|   780k|        get_derived().check_specs_impl(specs, eh);
 3221|   780k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 780k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   780k|        return {};
 3226|   780k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3230|   780k|    {
 3231|   780k|        return static_cast<Derived&>(*this);
 3232|   780k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|   780k|    {
 4273|   780k|        detail::check_float_type_specs(specs, eh);
 4274|   780k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   131k|    {
 6261|   131k|        const bool need_skipped_width =
 6262|   131k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 131k]
  |  Branch (6262:33): [True: 0, False: 131k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   131k|        auto it = rng.begin();
 6266|   131k|        std::ptrdiff_t prefix_width = 0;
 6267|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 131k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   131k|        else {
 6275|   131k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.27k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.27k|    }                                                  \
  |  |  |  | 3995|   131k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   129k|            std::tie(it, prefix_width) = prefix_result;
 6277|   129k|        }
 6278|   129k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   129k|        std::ptrdiff_t value_width = 0;
 6282|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 129k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   129k|        else {
 6298|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.3k, False: 113k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.3k|    }                                                  \
  |  | 3995|   129k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   113k|                                             specs, value, loc));
 6300|       |
 6301|   113k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 113k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   113k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   113k|        std::ptrdiff_t postfix_width = 0;
 6310|   113k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 112k, False: 1.63k]
  ------------------
 6311|   112k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   112k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   112k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   112k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   112k|                                 value_width));
 6315|   112k|            std::tie(it, postfix_width) = postfix_result;
 6316|   112k|        }
 6317|       |
 6318|   113k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   113k|    do {                                                            \
  |  | 3985|   113k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 113k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   113k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   113k|            specs, prefix_width, value_width, postfix_width));
 6320|   113k|        return it;
 6321|   113k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3213|  1.75M|    {
 3214|  1.75M|        return true;
 3215|  1.75M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4346|   767k|    {
 4347|   767k|        unsigned options{};
 4348|   767k|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 208k, False: 558k]
  ------------------
 4349|   208k|            options |= float_reader_base::allow_thsep;
 4350|   208k|        }
 4351|       |
 4352|   767k|        SCN_GCC_COMPAT_PUSH
 4353|   767k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|   767k|        switch (specs.type) {
 4356|   124k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 124k, False: 642k]
  ------------------
 4357|   124k|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|  28.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 28.0k, False: 739k]
  ------------------
 4360|  28.0k|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|   226k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 226k, False: 540k]
  ------------------
 4363|   226k|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|   179k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 179k, False: 588k]
  ------------------
 4366|   179k|                return options | float_reader_base::allow_scientific |
 4367|   179k|                       float_reader_base::allow_fixed;
 4368|       |
 4369|   208k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 208k, False: 558k]
  ------------------
 4370|   208k|                return options | float_reader_base::allow_scientific |
 4371|   208k|                       float_reader_base::allow_fixed |
 4372|   208k|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 767k]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|   767k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|   767k|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|   767k|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3775|   767k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1895|  1.06M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1655|  2.13M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3806|   318k|    {
 3807|   318k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   318k|        const std::ptrdiff_t sign_len =
 3810|   318k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 73.6k, False: 244k]
  ------------------
 3811|       |
 3812|   318k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 12.7k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  12.7k|    }                                                  \
  |  |  |  | 3995|   318k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   305k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   318k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4163|   983k|    {
 4164|   983k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 983k, False: 0]
  ------------------
 4165|   983k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 983k, False: 0]
  ------------------
 4166|   983k|            return;
 4167|   983k|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1710|  1.94M|    {
 1711|  1.94M|        return m_storage.has_value();
 1712|  1.94M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1715|  1.06M|    {
 1716|  1.06M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.06M|        return *m_storage;
 1718|  1.06M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   129k|    {
 4298|   129k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   129k|#if !SCN_DISABLE_LOCALE
 4301|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 35.0k, False: 94.1k]
  ------------------
 4302|  35.0k|            return read_impl<Range>(
 4303|  35.0k|                range, rd,
 4304|  35.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  35.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  35.0k|                },
 4307|  35.0k|                value, loc);
 4308|  35.0k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  94.1k|        return read_impl<Range>(
 4314|  94.1k|            range, rd,
 4315|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.1k|                return r.read_source(SCN_FWD(args)...);
 4317|  94.1k|            },
 4318|  94.1k|            value);
 4319|   129k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   178k|    {
 4336|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 17.9k, False: 160k]
  |  |  ------------------
  ------------------
 4338|  17.9k|            return unexpected(r.error());
 4339|  17.9k|        }
 4340|       |
 4341|   160k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.03k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.03k|    }                                                  \
  |  |  |  | 3995|   178k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   158k|        return ranges::next(range.begin(), n);
 4343|   160k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  772|   551k|    {
  773|   551k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   551k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  35.0k|        : m_fptr([](storage fn,
  753|  35.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  35.0k|              cvref<T> obj = *get<T>(fn);
  755|  35.0k|              if constexpr (std::is_void_v<R>) {
  756|  35.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  35.0k|              }
  758|  35.0k|              else {
  759|  35.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  35.0k|              }
  761|  35.0k|          }),
  762|  35.0k|          m_storage(std::addressof(f))
  763|  35.0k|    {
  764|  35.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  35.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  35.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  35.0k|              else {
  759|  35.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  35.0k|              }
  761|  35.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  35.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  35.0k|        else if constexpr (std::is_object_v<T>) {
  694|  35.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  35.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  35.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  35.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  35.0k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3794|   109k|    {
 3795|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|   109k|        return read_source_impl(range);
 3801|   109k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3820|   551k|    {
 3821|   551k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   551k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 551k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   551k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   551k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   551k|        auto it = sign_result.first;
 3824|   551k|        m_sign = sign_result.second;
 3825|       |
 3826|   551k|        auto digits_begin = it;
 3827|   551k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|   551k|        else {
 3854|   551k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 55.3k, False: 496k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  55.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  55.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  55.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  55.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  55.3k|    }                                                  \
  |  | 3995|   551k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|   496k|                it,
 3856|   496k|                do_read_source_impl(
 3857|   496k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|   496k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|   496k|        }
 3860|       |
 3861|   551k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   496k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 492k, False: 3.95k]
  |  Branch (3863:48): [True: 489k, False: 2.32k]
  ------------------
 3864|   496k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 464k, False: 25.6k]
  ------------------
 3865|   496k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 457k, False: 7.02k]
  ------------------
 3866|   457k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   457k|        }
 3868|       |
 3869|   496k|        handle_separators();
 3870|       |
 3871|   496k|        return it;
 3872|   551k|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4106|   551k|    {
 4107|   551k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   551k|        const bool allowed_nonhex =
 4109|   551k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   551k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   551k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 545k, False: 6.27k]
  |  Branch (4112:45): [True: 0, False: 545k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   551k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 6.27k, False: 545k]
  ------------------
 4118|  6.27k|            return *r;
 4119|  6.27k|        }
 4120|       |
 4121|   545k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 512k, False: 32.6k]
  |  Branch (4121:45): [True: 1.56k, False: 511k]
  ------------------
 4122|  1.56k|            return unexpected(r.error());
 4123|  1.56k|        }
 4124|   543k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 32.6k, False: 511k]
  ------------------
 4125|  32.6k|            return *r;
 4126|  32.6k|        }
 4127|       |
 4128|   511k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 353k, False: 157k]
  |  Branch (4128:28): [True: 110k, False: 243k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|   110k|            auto it = range.begin();
 4132|       |
 4133|   110k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 6.44k, False: 103k]
  ------------------
 4134|  6.44k|                m_kind = float_kind::hex_with_prefix;
 4135|  6.44k|                it = *r;
 4136|  6.44k|            }
 4137|   103k|            else {
 4138|   103k|                m_kind = float_kind::hex_without_prefix;
 4139|   103k|            }
 4140|       |
 4141|   110k|            return read_hex(ranges::subrange{it, range.end()});
 4142|   110k|        }
 4143|   400k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 157k, False: 243k]
  |  Branch (4143:29): [True: 157k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   157k|            m_kind = float_kind::generic;
 4147|   157k|            return read_regular_float(range);
 4148|   157k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   243k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 15.2k, False: 227k]
  |  |  ------------------
  ------------------
 4154|  15.2k|            m_kind = float_kind::hex_with_prefix;
 4155|  15.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4156|  15.2k|        }
 4157|       |
 4158|   227k|        m_kind = float_kind::generic;
 4159|   227k|        return read_regular(range);
 4160|   243k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3914|   551k|    {
 3915|   551k|        auto it = range.begin();
 3916|   551k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 545k, False: 6.27k]
  ------------------
 3917|   545k|            return unexpected(r.error());
 3918|   545k|        }
 3919|  6.27k|        else {
 3920|  6.27k|            it = *r;
 3921|  6.27k|        }
 3922|       |
 3923|  6.27k|        if (auto r = read_matching_string_classic_nocase(
 3924|  6.27k|                ranges::subrange{it, range.end()}, "inity");
 3925|  6.27k|            !r) {
  ------------------
  |  Branch (3925:13): [True: 3.95k, False: 2.32k]
  ------------------
 3926|  3.95k|            m_kind = float_kind::inf_short;
 3927|  3.95k|            return it;
 3928|  3.95k|        }
 3929|  2.32k|        else {
 3930|  2.32k|            m_kind = float_kind::inf_long;
 3931|  2.32k|            return *r;
 3932|  2.32k|        }
 3933|  6.27k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3937|   545k|    {
 3938|   545k|        auto it = range.begin();
 3939|   545k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 511k, False: 34.2k]
  ------------------
 3940|   511k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   511k|                scan_error::invalid_scanned_value,
 3942|   511k|                "Invalid floating-point NaN value"));
 3943|   511k|        }
 3944|  34.2k|        else {
 3945|  34.2k|            it = *r;
 3946|  34.2k|        }
 3947|       |
 3948|  34.2k|        if (auto r =
 3949|  34.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|  34.2k|            !r) {
  ------------------
  |  Branch (3950:13): [True: 25.6k, False: 8.58k]
  ------------------
 3951|  25.6k|            m_kind = float_kind::nan_simple;
 3952|  25.6k|            return it;
 3953|  25.6k|        }
 3954|  8.58k|        else {
 3955|  8.58k|            it = *r;
 3956|  8.58k|        }
 3957|       |
 3958|  8.58k|        auto payload_beg_it = it;
 3959|  8.58k|        it = read_while_code_unit(
 3960|  8.58k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|  8.58k|                return is_ascii_char(ch) &&
 3962|  8.58k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|  8.58k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|  8.58k|            });
 3965|  8.58k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|  8.58k|        m_kind = float_kind::nan_with_payload;
 3968|  8.58k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 7.02k, False: 1.56k]
  ------------------
 3969|  8.58k|                                             ')')) {
 3970|  7.02k|            return *r;
 3971|  7.02k|        }
 3972|  1.56k|        return detail::unexpected_scan_error(
 3973|  1.56k|            scan_error::invalid_scanned_value,
 3974|  1.56k|            "Invalid floating-point NaN payload");
 3975|  8.58k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|  8.58k|        : m_fptr([](storage fn,
  753|  8.58k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  8.58k|              cvref<T> obj = *get<T>(fn);
  755|  8.58k|              if constexpr (std::is_void_v<R>) {
  756|  8.58k|                  obj(static_cast<decltype(args)>(args)...);
  757|  8.58k|              }
  758|  8.58k|              else {
  759|  8.58k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  8.58k|              }
  761|  8.58k|          }),
  762|  8.58k|          m_storage(std::addressof(f))
  763|  8.58k|    {
  764|  8.58k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   161k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   161k|              else {
  759|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   161k|              }
  761|   161k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  689|   161k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   161k|        else if constexpr (std::is_object_v<T>) {
  694|   161k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   161k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3960|   161k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|   161k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3961:24): [True: 161k, False: 122]
  ------------------
 3962|   161k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3962:26): [True: 153k, False: 7.44k]
  |  Branch (3962:39): [True: 145k, False: 8.56k]
  |  Branch (3962:54): [True: 2.99k, False: 13.0k]
  |  Branch (3962:67): [True: 2.89k, False: 95]
  ------------------
 3963|   161k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3963:26): [True: 5.62k, False: 7.48k]
  |  Branch (3963:39): [True: 2.81k, False: 2.81k]
  |  Branch (3963:53): [True: 2.72k, False: 7.58k]
  ------------------
 3964|   161k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  8.58k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  8.58k|        {
  668|  8.58k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3907|   353k|    {
 3908|   353k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   353k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4008|   125k|    {
 4009|   125k|        auto it = range.begin();
 4010|       |
 4011|   125k|        std::ptrdiff_t digits_count = 0;
 4012|   125k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|   125k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 118k]
  |  |  ------------------
  ------------------
 4014|  7.17k|            return r.transform_error(map_parse_error_to_scan_error(
 4015|  7.17k|                scan_error::invalid_scanned_value,
 4016|  7.17k|                "Invalid hexadecimal floating-point value"));
 4017|  7.17k|        }
 4018|   118k|        else {
 4019|   118k|            digits_count += ranges::distance(it, *r);
 4020|   118k|            it = *r;
 4021|   118k|        }
 4022|       |
 4023|   118k|        m_integral_part_length = digits_count;
 4024|   118k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 13.9k, False: 104k]
  ------------------
 4025|   118k|                                             m_locale_options.decimal_point)) {
 4026|  13.9k|            it = *r;
 4027|  13.9k|        }
 4028|       |
 4029|   118k|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 12.0k, False: 106k]
  ------------------
 4030|   118k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|  12.0k|            digits_count += ranges::distance(it, *r);
 4032|  12.0k|            it = *r;
 4033|  12.0k|        }
 4034|       |
 4035|   118k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|   118k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|   118k|        return it;
 4044|   118k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3892|   243k|    {
 3893|   243k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 243k]
  |  |  |  Branch (1014:45): [True: 0, False: 243k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|   243k|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|   243k|        return read_while1_code_unit(
 3902|   243k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|   243k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   243k|        : m_fptr([](storage fn,
  753|   243k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   243k|              cvref<T> obj = *get<T>(fn);
  755|   243k|              if constexpr (std::is_void_v<R>) {
  756|   243k|                  obj(static_cast<decltype(args)>(args)...);
  757|   243k|              }
  758|   243k|              else {
  759|   243k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   243k|              }
  761|   243k|          }),
  762|   243k|          m_storage(std::addressof(f))
  763|   243k|    {
  764|   243k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|   914k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   914k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   914k|              else {
  759|   914k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   914k|              }
  761|   914k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  689|   914k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   914k|        else if constexpr (std::is_object_v<T>) {
  694|   914k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   914k|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3902|   914k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   243k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   243k|        {
  668|   243k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3980|   415k|    {
 3981|   415k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 38.8k, False: 376k]
  ------------------
 3982|  38.8k|            auto beg_exp_it = range.begin();
 3983|  38.8k|            auto it = *r;
 3984|       |
 3985|  38.8k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 38.6k, False: 204]
  ------------------
 3986|  38.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  38.6k|                it = r_sign->first;
 3988|  38.6k|            }
 3989|       |
 3990|  38.8k|            if (auto r_exp = read_while1_code_unit(
 3991|  38.8k|                    ranges::subrange{it, range.end()},
 3992|  38.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  38.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.56k, False: 37.3k]
  |  |  ------------------
  ------------------
 3994|  1.56k|                it = beg_exp_it;
 3995|  1.56k|            }
 3996|  37.3k|            else {
 3997|  37.3k|                it = *r_exp;
 3998|  37.3k|            }
 3999|       |
 4000|  38.8k|            return it;
 4001|  38.8k|        }
 4002|   376k|        return range.begin();
 4003|   415k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|  38.8k|        : m_fptr([](storage fn,
  753|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  38.8k|              cvref<T> obj = *get<T>(fn);
  755|  38.8k|              if constexpr (std::is_void_v<R>) {
  756|  38.8k|                  obj(static_cast<decltype(args)>(args)...);
  757|  38.8k|              }
  758|  38.8k|              else {
  759|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  38.8k|              }
  761|  38.8k|          }),
  762|  38.8k|          m_storage(std::addressof(f))
  763|  38.8k|    {
  764|  38.8k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  753|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   120k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   120k|              else {
  759|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   120k|              }
  761|   120k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  689|   120k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   120k|        else if constexpr (std::is_object_v<T>) {
  694|   120k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   120k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3992|   120k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|  38.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  38.8k|        {
  668|  38.8k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4049|   385k|    {
 4050|   385k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   385k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 325k, False: 60.2k]
  |  Branch (4051:50): [True: 12.8k, False: 312k]
  ------------------
 4052|       |
 4053|   385k|        auto it = ranges::begin(range);
 4054|   385k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   385k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   385k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 37.6k, False: 347k]
  |  |  ------------------
  ------------------
 4058|  37.6k|            return r.transform_error(
 4059|  37.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  37.6k|                                              "Invalid floating-point value"));
 4061|  37.6k|        }
 4062|   347k|        else {
 4063|   347k|            digits_count += ranges::distance(it, *r);
 4064|   347k|            it = *r;
 4065|   347k|        }
 4066|       |
 4067|   347k|        m_integral_part_length = digits_count;
 4068|   347k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 49.7k, False: 298k]
  ------------------
 4069|   347k|                                             m_locale_options.decimal_point)) {
 4070|  49.7k|            it = *r;
 4071|  49.7k|        }
 4072|       |
 4073|   347k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 44.0k, False: 303k]
  ------------------
 4074|   347k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  44.0k|            digits_count += ranges::distance(it, *r);
 4076|  44.0k|            it = *r;
 4077|  44.0k|        }
 4078|       |
 4079|   347k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   347k|        auto beg_exp_it = it;
 4086|   347k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 296k, False: 50.9k]
  ------------------
 4087|   296k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|   296k|        }
 4089|   347k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 12.0k, False: 335k]
  |  Branch (4089:29): [True: 8.94k, False: 3.09k]
  ------------------
 4090|  8.94k|            return detail::unexpected_scan_error(
 4091|  8.94k|                scan_error::invalid_scanned_value,
 4092|  8.94k|                "No exponent given to scientific float");
 4093|  8.94k|        }
 4094|       |
 4095|   338k|        m_kind =
 4096|   338k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 302k, False: 36.6k]
  ------------------
 4097|       |
 4098|   338k|        return it;
 4099|   347k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3877|   733k|    {
 3878|   733k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 733k]
  |  |  |  Branch (1014:45): [True: 0, False: 733k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   733k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   733k|        return read_while1_code_unit(
 3887|   733k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   733k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   733k|        : m_fptr([](storage fn,
  753|   733k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   733k|              cvref<T> obj = *get<T>(fn);
  755|   733k|              if constexpr (std::is_void_v<R>) {
  756|   733k|                  obj(static_cast<decltype(args)>(args)...);
  757|   733k|              }
  758|   733k|              else {
  759|   733k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   733k|              }
  761|   733k|          }),
  762|   733k|          m_storage(std::addressof(f))
  763|   733k|    {
  764|   733k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.67M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  2.67M|              else {
  759|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.67M|              }
  761|  2.67M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  689|  2.67M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  2.67M|        else if constexpr (std::is_object_v<T>) {
  694|  2.67M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  2.67M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3887|  2.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   733k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   733k|        {
  668|   733k|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1700|   465k|    {
 1701|   465k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   465k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   465k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  35.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  35.0k|        {
  668|  35.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  94.1k|        : m_fptr([](storage fn,
  753|  94.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.1k|              cvref<T> obj = *get<T>(fn);
  755|  94.1k|              if constexpr (std::is_void_v<R>) {
  756|  94.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  94.1k|              }
  758|  94.1k|              else {
  759|  94.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.1k|              }
  761|  94.1k|          }),
  762|  94.1k|          m_storage(std::addressof(f))
  763|  94.1k|    {
  764|  94.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  94.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  94.1k|              else {
  759|  94.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.1k|              }
  761|  94.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  94.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  94.1k|        else if constexpr (std::is_object_v<T>) {
  694|  94.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  94.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  94.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  94.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  94.1k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3780|   441k|    {
 3781|   441k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   441k|        return read_source_impl(range);
 3787|   441k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  94.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  94.1k|        {
  668|  94.1k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   119k|    {
 4298|   119k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   119k|#if !SCN_DISABLE_LOCALE
 4301|   119k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 31.7k, False: 88.0k]
  ------------------
 4302|  31.7k|            return read_impl<Range>(
 4303|  31.7k|                range, rd,
 4304|  31.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  31.7k|                },
 4307|  31.7k|                value, loc);
 4308|  31.7k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  88.0k|        return read_impl<Range>(
 4314|  88.0k|            range, rd,
 4315|  88.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  88.0k|                return r.read_source(SCN_FWD(args)...);
 4317|  88.0k|            },
 4318|  88.0k|            value);
 4319|   119k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   167k|    {
 4336|   167k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   167k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 9.83k, False: 157k]
  |  |  ------------------
  ------------------
 4338|  9.83k|            return unexpected(r.error());
 4339|  9.83k|        }
 4340|       |
 4341|   157k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.7k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.7k|    }                                                  \
  |  |  |  | 3995|   167k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   146k|        return ranges::next(range.begin(), n);
 4343|   157k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|   517k|    {
  773|   517k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   517k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   517k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  31.7k|        : m_fptr([](storage fn,
  753|  31.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.7k|              cvref<T> obj = *get<T>(fn);
  755|  31.7k|              if constexpr (std::is_void_v<R>) {
  756|  31.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  31.7k|              }
  758|  31.7k|              else {
  759|  31.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.7k|              }
  761|  31.7k|          }),
  762|  31.7k|          m_storage(std::addressof(f))
  763|  31.7k|    {
  764|  31.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  31.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  31.7k|              else {
  759|  31.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.7k|              }
  761|  31.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  31.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  31.7k|        else if constexpr (std::is_object_v<T>) {
  694|  31.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  31.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  31.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  31.7k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|  99.3k|    {
 3795|  99.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  99.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  99.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 99.3k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  99.3k|        return read_source_impl(range);
 3801|  99.3k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|   517k|    {
 3821|   517k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   517k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   517k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   517k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 517k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   517k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   517k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   517k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   517k|        auto it = sign_result.first;
 3824|   517k|        m_sign = sign_result.second;
 3825|       |
 3826|   517k|        auto digits_begin = it;
 3827|   517k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|   517k|                      ranges::sized_range<Range>) {
 3830|   517k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 517k]
  |  |  |  Branch (1014:45): [True: 0, False: 517k]
  |  |  |  Branch (1014:45): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
 3831|   517k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|   517k|            else {
 3840|   517k|                auto cb = [&](const auto& rr)
 3841|   517k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   517k|                    auto res = read_all(rr);
 3843|   517k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|   517k|                        return detail::unexpected_scan_error(
 3845|   517k|                            scan_error::invalid_scanned_value,
 3846|   517k|                            "Invalid float value");
 3847|   517k|                    }
 3848|   517k|                    return res;
 3849|   517k|                };
 3850|   517k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|   517k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   517k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 30.0k, False: 487k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  30.0k|    }                                                  \
  |  | 3995|   517k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   517k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|   487k|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|   517k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   487k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 483k, False: 3.79k]
  |  Branch (3863:48): [True: 481k, False: 2.17k]
  ------------------
 3864|   487k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 456k, False: 25.0k]
  ------------------
 3865|   487k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 449k, False: 6.29k]
  ------------------
 3866|   449k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   449k|        }
 3868|       |
 3869|   487k|        handle_separators();
 3870|       |
 3871|   487k|        return it;
 3872|   517k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|   517k|    {
 3915|   517k|        auto it = range.begin();
 3916|   517k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 511k, False: 5.97k]
  ------------------
 3917|   511k|            return unexpected(r.error());
 3918|   511k|        }
 3919|  5.97k|        else {
 3920|  5.97k|            it = *r;
 3921|  5.97k|        }
 3922|       |
 3923|  5.97k|        if (auto r = read_matching_string_classic_nocase(
 3924|  5.97k|                ranges::subrange{it, range.end()}, "inity");
 3925|  5.97k|            !r) {
  ------------------
  |  Branch (3925:13): [True: 3.79k, False: 2.17k]
  ------------------
 3926|  3.79k|            m_kind = float_kind::inf_short;
 3927|  3.79k|            return it;
 3928|  3.79k|        }
 3929|  2.17k|        else {
 3930|  2.17k|            m_kind = float_kind::inf_long;
 3931|  2.17k|            return *r;
 3932|  2.17k|        }
 3933|  5.97k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|   511k|    {
 3938|   511k|        auto it = range.begin();
 3939|   511k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 478k, False: 32.8k]
  ------------------
 3940|   478k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   478k|                scan_error::invalid_scanned_value,
 3942|   478k|                "Invalid floating-point NaN value"));
 3943|   478k|        }
 3944|  32.8k|        else {
 3945|  32.8k|            it = *r;
 3946|  32.8k|        }
 3947|       |
 3948|  32.8k|        if (auto r =
 3949|  32.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|  32.8k|            !r) {
  ------------------
  |  Branch (3950:13): [True: 25.0k, False: 7.81k]
  ------------------
 3951|  25.0k|            m_kind = float_kind::nan_simple;
 3952|  25.0k|            return it;
 3953|  25.0k|        }
 3954|  7.81k|        else {
 3955|  7.81k|            it = *r;
 3956|  7.81k|        }
 3957|       |
 3958|  7.81k|        auto payload_beg_it = it;
 3959|  7.81k|        it = read_while_code_unit(
 3960|  7.81k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|  7.81k|                return is_ascii_char(ch) &&
 3962|  7.81k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|  7.81k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|  7.81k|            });
 3965|  7.81k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|  7.81k|        m_kind = float_kind::nan_with_payload;
 3968|  7.81k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 6.29k, False: 1.51k]
  ------------------
 3969|  7.81k|                                             ')')) {
 3970|  6.29k|            return *r;
 3971|  6.29k|        }
 3972|  1.51k|        return detail::unexpected_scan_error(
 3973|  1.51k|            scan_error::invalid_scanned_value,
 3974|  1.51k|            "Invalid floating-point NaN payload");
 3975|  7.81k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|  7.81k|        : m_fptr([](storage fn,
  753|  7.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.81k|              cvref<T> obj = *get<T>(fn);
  755|  7.81k|              if constexpr (std::is_void_v<R>) {
  756|  7.81k|                  obj(static_cast<decltype(args)>(args)...);
  757|  7.81k|              }
  758|  7.81k|              else {
  759|  7.81k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.81k|              }
  761|  7.81k|          }),
  762|  7.81k|          m_storage(std::addressof(f))
  763|  7.81k|    {
  764|  7.81k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  753|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   153k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   153k|              else {
  759|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   153k|              }
  761|   153k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  689|   153k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   153k|        else if constexpr (std::is_object_v<T>) {
  694|   153k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   153k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3960|   153k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|   153k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3961:24): [True: 152k, False: 122]
  ------------------
 3962|   153k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3962:26): [True: 146k, False: 6.69k]
  |  Branch (3962:39): [True: 137k, False: 8.34k]
  |  Branch (3962:54): [True: 2.85k, False: 12.1k]
  |  Branch (3962:67): [True: 2.76k, False: 83]
  ------------------
 3963|   152k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3963:26): [True: 5.53k, False: 6.73k]
  |  Branch (3963:39): [True: 2.73k, False: 2.80k]
  |  Branch (3963:53): [True: 2.72k, False: 6.81k]
  ------------------
 3964|   153k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  7.81k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  7.81k|        {
  668|  7.81k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|   328k|    {
 3908|   328k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   328k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|   292k|{
 2154|   292k|    auto it = read_while_code_unit(range, pred);
 2155|   292k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 135k, False: 157k]
  ------------------
 2156|   135k|        return unexpected(parse_error::error);
 2157|   135k|    }
 2158|   157k|    return it;
 2159|   292k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3980|  82.8k|    {
 3981|  82.8k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 12.0k, False: 70.8k]
  ------------------
 3982|  12.0k|            auto beg_exp_it = range.begin();
 3983|  12.0k|            auto it = *r;
 3984|       |
 3985|  12.0k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 11.9k, False: 60]
  ------------------
 3986|  12.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  11.9k|                it = r_sign->first;
 3988|  11.9k|            }
 3989|       |
 3990|  12.0k|            if (auto r_exp = read_while1_code_unit(
 3991|  12.0k|                    ranges::subrange{it, range.end()},
 3992|  12.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  12.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 596, False: 11.4k]
  |  |  ------------------
  ------------------
 3994|    596|                it = beg_exp_it;
 3995|    596|            }
 3996|  11.4k|            else {
 3997|  11.4k|                it = *r_exp;
 3998|  11.4k|            }
 3999|       |
 4000|  12.0k|            return it;
 4001|  12.0k|        }
 4002|  70.8k|        return range.begin();
 4003|  82.8k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  752|  12.0k|        : m_fptr([](storage fn,
  753|  12.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  12.0k|              cvref<T> obj = *get<T>(fn);
  755|  12.0k|              if constexpr (std::is_void_v<R>) {
  756|  12.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  12.0k|              }
  758|  12.0k|              else {
  759|  12.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  12.0k|              }
  761|  12.0k|          }),
  762|  12.0k|          m_storage(std::addressof(f))
  763|  12.0k|    {
  764|  12.0k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  753|  35.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  35.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  35.1k|              else {
  759|  35.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  35.1k|              }
  761|  35.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  689|  35.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  35.1k|        else if constexpr (std::is_object_v<T>) {
  694|  35.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  35.1k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3992|  35.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|  12.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  12.0k|        {
  668|  12.0k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|   149k|    {
 4050|   149k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   149k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 92.3k, False: 57.2k]
  |  Branch (4051:50): [True: 12.6k, False: 79.7k]
  ------------------
 4052|       |
 4053|   149k|        auto it = ranges::begin(range);
 4054|   149k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   149k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   149k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 19.1k, False: 130k]
  |  |  ------------------
  ------------------
 4058|  19.1k|            return r.transform_error(
 4059|  19.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  19.1k|                                              "Invalid floating-point value"));
 4061|  19.1k|        }
 4062|   130k|        else {
 4063|   130k|            digits_count += ranges::distance(it, *r);
 4064|   130k|            it = *r;
 4065|   130k|        }
 4066|       |
 4067|   130k|        m_integral_part_length = digits_count;
 4068|   130k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 17.3k, False: 113k]
  ------------------
 4069|   130k|                                             m_locale_options.decimal_point)) {
 4070|  17.3k|            it = *r;
 4071|  17.3k|        }
 4072|       |
 4073|   130k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 15.1k, False: 115k]
  ------------------
 4074|   130k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  15.1k|            digits_count += ranges::distance(it, *r);
 4076|  15.1k|            it = *r;
 4077|  15.1k|        }
 4078|       |
 4079|   130k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   130k|        auto beg_exp_it = it;
 4086|   130k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 82.8k, False: 47.6k]
  ------------------
 4087|  82.8k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|  82.8k|        }
 4089|   130k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 11.5k, False: 118k]
  |  Branch (4089:29): [True: 8.78k, False: 2.78k]
  ------------------
 4090|  8.78k|            return detail::unexpected_scan_error(
 4091|  8.78k|                scan_error::invalid_scanned_value,
 4092|  8.78k|                "No exponent given to scientific float");
 4093|  8.78k|        }
 4094|       |
 4095|   121k|        m_kind =
 4096|   121k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 110k, False: 11.4k]
  ------------------
 4097|       |
 4098|   121k|        return it;
 4099|   130k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|   280k|    {
 3878|   280k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 280k]
  |  |  |  Branch (1014:45): [True: 0, False: 280k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   280k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   280k|        return read_while1_code_unit(
 3887|   280k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   280k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|   280k|        : m_fptr([](storage fn,
  753|   280k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   280k|              cvref<T> obj = *get<T>(fn);
  755|   280k|              if constexpr (std::is_void_v<R>) {
  756|   280k|                  obj(static_cast<decltype(args)>(args)...);
  757|   280k|              }
  758|   280k|              else {
  759|   280k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   280k|              }
  761|   280k|          }),
  762|   280k|          m_storage(std::addressof(f))
  763|   280k|    {
  764|   280k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  753|   957k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   957k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   957k|              else {
  759|   957k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   957k|              }
  761|   957k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  689|   957k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   957k|        else if constexpr (std::is_object_v<T>) {
  694|   957k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   957k|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3887|   957k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   280k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   280k|        {
  668|   280k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|   517k|    {
 4107|   517k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   517k|        const bool allowed_nonhex =
 4109|   517k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   517k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   517k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 511k, False: 5.97k]
  |  Branch (4112:45): [True: 0, False: 511k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   517k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 5.97k, False: 511k]
  ------------------
 4118|  5.97k|            return *r;
 4119|  5.97k|        }
 4120|       |
 4121|   511k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 480k, False: 31.3k]
  |  Branch (4121:45): [True: 1.51k, False: 478k]
  ------------------
 4122|  1.51k|            return unexpected(r.error());
 4123|  1.51k|        }
 4124|   509k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 31.3k, False: 478k]
  ------------------
 4125|  31.3k|            return *r;
 4126|  31.3k|        }
 4127|       |
 4128|   478k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 328k, False: 149k]
  |  Branch (4128:28): [True: 99.4k, False: 229k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|  99.4k|            auto it = range.begin();
 4132|       |
 4133|  99.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 4.69k, False: 94.7k]
  ------------------
 4134|  4.69k|                m_kind = float_kind::hex_with_prefix;
 4135|  4.69k|                it = *r;
 4136|  4.69k|            }
 4137|  94.7k|            else {
 4138|  94.7k|                m_kind = float_kind::hex_without_prefix;
 4139|  94.7k|            }
 4140|       |
 4141|  99.4k|            return read_hex(ranges::subrange{it, range.end()});
 4142|  99.4k|        }
 4143|   379k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 149k, False: 229k]
  |  Branch (4143:29): [True: 149k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   149k|            m_kind = float_kind::generic;
 4147|   149k|            return read_regular_float(range);
 4148|   149k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   229k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.6k, False: 217k]
  |  |  ------------------
  ------------------
 4154|  11.6k|            m_kind = float_kind::hex_with_prefix;
 4155|  11.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4156|  11.6k|        }
 4157|       |
 4158|   217k|        m_kind = float_kind::generic;
 4159|   217k|        return read_regular(range);
 4160|   229k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|   328k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   328k|                    auto res = read_all(rr);
 3843|   328k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 687, False: 328k]
  |  |  ------------------
  ------------------
 3844|    687|                        return detail::unexpected_scan_error(
 3845|    687|                            scan_error::invalid_scanned_value,
 3846|    687|                            "Invalid float value");
 3847|    687|                    }
 3848|   328k|                    return res;
 3849|   328k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|   328k|{
 1964|   328k|    return ranges::next(range.begin(), range.end());
 1965|   328k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   328k|    {
  313|   328k|        ranges::advance(x, bound);
  314|   328k|        return x;
  315|   328k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   328k|    {
  275|   328k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   328k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   328k|    {
  190|   328k|        i = std::move(bound);
  191|   328k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|   457k|    {
 1701|   457k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   457k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1744|   457k|    {
 1745|   457k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|   457k|                      ranges::sized_range<Range>) {
 1750|   457k|            m_storage.reset();
 1751|   457k|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   457k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  31.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  31.7k|        {
  668|  31.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  88.0k|        : m_fptr([](storage fn,
  753|  88.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  88.0k|              cvref<T> obj = *get<T>(fn);
  755|  88.0k|              if constexpr (std::is_void_v<R>) {
  756|  88.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  88.0k|              }
  758|  88.0k|              else {
  759|  88.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  88.0k|              }
  761|  88.0k|          }),
  762|  88.0k|          m_storage(std::addressof(f))
  763|  88.0k|    {
  764|  88.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  88.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  88.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  88.0k|              else {
  759|  88.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  88.0k|              }
  761|  88.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  88.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  88.0k|        else if constexpr (std::is_object_v<T>) {
  694|  88.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  88.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  88.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  88.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  88.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  88.0k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|   418k|    {
 3781|   418k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 418k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   418k|        return read_source_impl(range);
 3787|   418k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  88.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  88.0k|        {
  668|  88.0k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   136k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   136k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   136k|            auto rd = make_reader<T, char_type>();
 6336|   136k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   136k|    do {                                                            \
  |  | 3985|   136k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   136k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   136k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 136k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   136k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   136k|                return impl(rd, range, value);
 6341|   136k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   136k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   136k|    {
 6261|   136k|        const bool need_skipped_width =
 6262|   136k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 136k]
  |  Branch (6262:33): [True: 0, False: 136k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   136k|        auto it = rng.begin();
 6266|   136k|        std::ptrdiff_t prefix_width = 0;
 6267|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 136k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   136k|        else {
 6275|   136k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.55k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.55k|    }                                                  \
  |  |  |  | 3995|   136k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   133k|            std::tie(it, prefix_width) = prefix_result;
 6277|   133k|        }
 6278|   133k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   133k|        std::ptrdiff_t value_width = 0;
 6282|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 133k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   133k|        else {
 6298|   133k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.0k, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.0k|    }                                                  \
  |  | 3995|   133k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   118k|                                             specs, value, loc));
 6300|       |
 6301|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 118k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   118k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   118k|        std::ptrdiff_t postfix_width = 0;
 6310|   118k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 117k, False: 1.84k]
  ------------------
 6311|   117k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   117k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   117k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   117k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   117k|                                 value_width));
 6315|   117k|            std::tie(it, postfix_width) = postfix_result;
 6316|   117k|        }
 6317|       |
 6318|   118k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   118k|    do {                                                            \
  |  | 3985|   118k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   118k|            specs, prefix_width, value_width, postfix_width));
 6320|   118k|        return it;
 6321|   118k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|   330k|    {
 3807|   330k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   330k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   330k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   330k|        const std::ptrdiff_t sign_len =
 3810|   330k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 77.8k, False: 252k]
  ------------------
 3811|       |
 3812|   330k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   330k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   330k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   330k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   330k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 11.3k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  11.3k|    }                                                  \
  |  |  |  | 3995|   330k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   318k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   330k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   133k|    {
 4298|   133k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   133k|#if !SCN_DISABLE_LOCALE
 4301|   133k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 36.9k, False: 96.9k]
  ------------------
 4302|  36.9k|            return read_impl<Range>(
 4303|  36.9k|                range, rd,
 4304|  36.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  36.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  36.9k|                },
 4307|  36.9k|                value, loc);
 4308|  36.9k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  96.9k|        return read_impl<Range>(
 4314|  96.9k|            range, rd,
 4315|  96.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.9k|                return r.read_source(SCN_FWD(args)...);
 4317|  96.9k|            },
 4318|  96.9k|            value);
 4319|   133k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   185k|    {
 4336|   185k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   185k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.4k, False: 166k]
  |  |  ------------------
  ------------------
 4338|  18.4k|            return unexpected(r.error());
 4339|  18.4k|        }
 4340|       |
 4341|   166k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.16k, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.16k|    }                                                  \
  |  |  |  | 3995|   185k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   165k|        return ranges::next(range.begin(), n);
 4343|   166k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  36.9k|        : m_fptr([](storage fn,
  753|  36.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  36.9k|              cvref<T> obj = *get<T>(fn);
  755|  36.9k|              if constexpr (std::is_void_v<R>) {
  756|  36.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  36.9k|              }
  758|  36.9k|              else {
  759|  36.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  36.9k|              }
  761|  36.9k|          }),
  762|  36.9k|          m_storage(std::addressof(f))
  763|  36.9k|    {
  764|  36.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  36.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  36.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  36.9k|              else {
  759|  36.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  36.9k|              }
  761|  36.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  36.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  36.9k|        else if constexpr (std::is_object_v<T>) {
  694|  36.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  36.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  36.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  36.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  36.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  36.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  36.9k|        {
  668|  36.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  96.9k|        : m_fptr([](storage fn,
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|  96.9k|              if constexpr (std::is_void_v<R>) {
  756|  96.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.9k|              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
  762|  96.9k|          m_storage(std::addressof(f))
  763|  96.9k|    {
  764|  96.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  96.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  96.9k|              else {
  759|  96.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.9k|              }
  761|  96.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  96.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  96.9k|        else if constexpr (std::is_object_v<T>) {
  694|  96.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  96.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  96.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  96.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  96.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.9k|        {
  668|  96.9k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   123k|    {
 4298|   123k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   123k|#if !SCN_DISABLE_LOCALE
 4301|   123k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 33.3k, False: 90.1k]
  ------------------
 4302|  33.3k|            return read_impl<Range>(
 4303|  33.3k|                range, rd,
 4304|  33.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  33.3k|                },
 4307|  33.3k|                value, loc);
 4308|  33.3k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  90.1k|        return read_impl<Range>(
 4314|  90.1k|            range, rd,
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
 4317|  90.1k|            },
 4318|  90.1k|            value);
 4319|   123k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   173k|    {
 4336|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.0k, False: 163k]
  |  |  ------------------
  ------------------
 4338|  10.0k|            return unexpected(r.error());
 4339|  10.0k|        }
 4340|       |
 4341|   163k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.2k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.2k|    }                                                  \
  |  |  |  | 3995|   173k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   153k|        return ranges::next(range.begin(), n);
 4343|   163k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  33.3k|        : m_fptr([](storage fn,
  753|  33.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.3k|              cvref<T> obj = *get<T>(fn);
  755|  33.3k|              if constexpr (std::is_void_v<R>) {
  756|  33.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  33.3k|              }
  758|  33.3k|              else {
  759|  33.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.3k|              }
  761|  33.3k|          }),
  762|  33.3k|          m_storage(std::addressof(f))
  763|  33.3k|    {
  764|  33.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  33.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  33.3k|              else {
  759|  33.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.3k|              }
  761|  33.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  33.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  33.3k|        else if constexpr (std::is_object_v<T>) {
  694|  33.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  33.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  33.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  33.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  33.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  33.3k|        {
  668|  33.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  90.1k|        : m_fptr([](storage fn,
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|  90.1k|              if constexpr (std::is_void_v<R>) {
  756|  90.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  90.1k|              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
  762|  90.1k|          m_storage(std::addressof(f))
  763|  90.1k|    {
  764|  90.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  90.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  90.1k|        else if constexpr (std::is_object_v<T>) {
  694|  90.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  90.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  90.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  90.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  90.1k|        {
  668|  90.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|   138k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   138k|            auto rd = make_reader<T, char_type>();
 6336|   138k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   138k|    do {                                                            \
  |  | 3985|   138k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 138k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   138k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   138k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 138k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   138k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   138k|                return impl(rd, range, value);
 6341|   138k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   138k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   138k|    {
 6261|   138k|        const bool need_skipped_width =
 6262|   138k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 138k]
  |  Branch (6262:33): [True: 0, False: 138k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   138k|        auto it = rng.begin();
 6266|   138k|        std::ptrdiff_t prefix_width = 0;
 6267|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 138k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   138k|        else {
 6275|   138k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.75k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.75k|    }                                                  \
  |  |  |  | 3995|   138k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   135k|            std::tie(it, prefix_width) = prefix_result;
 6277|   135k|        }
 6278|   135k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   135k|        std::ptrdiff_t value_width = 0;
 6282|   135k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 135k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   135k|        else {
 6298|   135k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 14.8k, False: 120k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  14.8k|    }                                                  \
  |  | 3995|   135k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   120k|                                             specs, value, loc));
 6300|       |
 6301|   120k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 120k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   120k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   120k|        std::ptrdiff_t postfix_width = 0;
 6310|   120k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 118k, False: 2.01k]
  ------------------
 6311|   118k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   118k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   118k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   118k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   118k|                                 value_width));
 6315|   118k|            std::tie(it, postfix_width) = postfix_result;
 6316|   118k|        }
 6317|       |
 6318|   120k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   120k|    do {                                                            \
  |  | 3985|   120k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 120k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   120k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   120k|            specs, prefix_width, value_width, postfix_width));
 6320|   120k|        return it;
 6321|   120k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3806|   334k|    {
 3807|   334k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   334k|        const std::ptrdiff_t sign_len =
 3810|   334k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 80.6k, False: 254k]
  ------------------
 3811|       |
 3812|   334k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.0k, False: 324k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.0k|    }                                                  \
  |  |  |  | 3995|   334k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   324k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   334k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   135k|    {
 4298|   135k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   135k|#if !SCN_DISABLE_LOCALE
 4301|   135k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 37.7k, False: 98.0k]
  ------------------
 4302|  37.7k|            return read_impl<Range>(
 4303|  37.7k|                range, rd,
 4304|  37.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  37.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  37.7k|                },
 4307|  37.7k|                value, loc);
 4308|  37.7k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  98.0k|        return read_impl<Range>(
 4314|  98.0k|            range, rd,
 4315|  98.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  98.0k|                return r.read_source(SCN_FWD(args)...);
 4317|  98.0k|            },
 4318|  98.0k|            value);
 4319|   135k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   187k|    {
 4336|   187k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   187k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 18.9k, False: 168k]
  |  |  ------------------
  ------------------
 4338|  18.9k|            return unexpected(r.error());
 4339|  18.9k|        }
 4340|       |
 4341|   168k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 306, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    306|    }                                                  \
  |  |  |  | 3995|   187k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   168k|        return ranges::next(range.begin(), n);
 4343|   168k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  37.7k|        : m_fptr([](storage fn,
  753|  37.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  37.7k|              cvref<T> obj = *get<T>(fn);
  755|  37.7k|              if constexpr (std::is_void_v<R>) {
  756|  37.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  37.7k|              }
  758|  37.7k|              else {
  759|  37.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  37.7k|              }
  761|  37.7k|          }),
  762|  37.7k|          m_storage(std::addressof(f))
  763|  37.7k|    {
  764|  37.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  37.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  37.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  37.7k|              else {
  759|  37.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  37.7k|              }
  761|  37.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  37.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  37.7k|        else if constexpr (std::is_object_v<T>) {
  694|  37.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  37.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  37.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  37.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  37.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  37.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  37.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  37.7k|        {
  668|  37.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  98.0k|        : m_fptr([](storage fn,
  753|  98.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  98.0k|              cvref<T> obj = *get<T>(fn);
  755|  98.0k|              if constexpr (std::is_void_v<R>) {
  756|  98.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  98.0k|              }
  758|  98.0k|              else {
  759|  98.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  98.0k|              }
  761|  98.0k|          }),
  762|  98.0k|          m_storage(std::addressof(f))
  763|  98.0k|    {
  764|  98.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  98.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  98.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  98.0k|              else {
  759|  98.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  98.0k|              }
  761|  98.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  98.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  98.0k|        else if constexpr (std::is_object_v<T>) {
  694|  98.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  98.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  98.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  98.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  98.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  98.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  98.0k|        {
  668|  98.0k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   125k|    {
 4298|   125k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   125k|#if !SCN_DISABLE_LOCALE
 4301|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 34.1k, False: 90.9k]
  ------------------
 4302|  34.1k|            return read_impl<Range>(
 4303|  34.1k|                range, rd,
 4304|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  34.1k|                },
 4307|  34.1k|                value, loc);
 4308|  34.1k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  90.9k|        return read_impl<Range>(
 4314|  90.9k|            range, rd,
 4315|  90.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.9k|                return r.read_source(SCN_FWD(args)...);
 4317|  90.9k|            },
 4318|  90.9k|            value);
 4319|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   176k|    {
 4336|   176k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   176k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.2k, False: 166k]
  |  |  ------------------
  ------------------
 4338|  10.2k|            return unexpected(r.error());
 4339|  10.2k|        }
 4340|       |
 4341|   166k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 9.72k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  9.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  9.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  9.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  9.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  9.72k|    }                                                  \
  |  |  |  | 3995|   176k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   156k|        return ranges::next(range.begin(), n);
 4343|   166k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  34.1k|        : m_fptr([](storage fn,
  753|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  34.1k|              cvref<T> obj = *get<T>(fn);
  755|  34.1k|              if constexpr (std::is_void_v<R>) {
  756|  34.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  34.1k|              }
  758|  34.1k|              else {
  759|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  34.1k|              }
  761|  34.1k|          }),
  762|  34.1k|          m_storage(std::addressof(f))
  763|  34.1k|    {
  764|  34.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  34.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  34.1k|              else {
  759|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  34.1k|              }
  761|  34.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  34.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  34.1k|        else if constexpr (std::is_object_v<T>) {
  694|  34.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  34.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  34.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  34.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  34.1k|        {
  668|  34.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  90.9k|        : m_fptr([](storage fn,
  753|  90.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.9k|              cvref<T> obj = *get<T>(fn);
  755|  90.9k|              if constexpr (std::is_void_v<R>) {
  756|  90.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  90.9k|              }
  758|  90.9k|              else {
  759|  90.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.9k|              }
  761|  90.9k|          }),
  762|  90.9k|          m_storage(std::addressof(f))
  763|  90.9k|    {
  764|  90.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  90.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  90.9k|              else {
  759|  90.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.9k|              }
  761|  90.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  689|  90.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  90.9k|        else if constexpr (std::is_object_v<T>) {
  694|  90.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  90.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  90.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  90.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  90.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  90.9k|        {
  668|  90.9k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|   559k|{
 1055|   559k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   559k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|   559k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|   559k|        else {
 1072|   559k|            return r.begin().contiguous_segment();
 1073|   559k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|   559k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   485k|{
 2220|   485k|    auto it = range.begin();
 2221|   838k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 830k, False: 7.91k]
  ------------------
 2222|   830k|        const auto val =
 2223|   830k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   830k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   830k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 823k, False: 6.31k]
  |  |  ------------------
  ------------------
 2225|   823k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   823k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   823k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   823k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 477k, False: 345k]
  ------------------
 2229|   477k|                return it;
 2230|   477k|            }
 2231|   823k|        }
 2232|   352k|        it = val.iterator;
 2233|   352k|    }
 2234|       |
 2235|  7.91k|    return it;
 2236|   485k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   830k|{
 2024|   830k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   830k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   830k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   830k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   830k|    auto it = range.begin();
 2028|   830k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   830k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   830k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.31k, False: 823k]
  |  |  ------------------
  ------------------
 2031|  6.31k|        ++it;
 2032|  6.31k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  6.31k|        return {it, {}};
 2034|  6.31k|    }
 2035|       |
 2036|   823k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 813k, False: 10.2k]
  ------------------
 2037|   813k|        ++it;
 2038|   813k|        return {it, string_type(1, *range.begin())};
 2039|   813k|    }
 2040|       |
 2041|  10.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  10.2k|    return {it, string_type{range.begin(), it}};
 2043|   823k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  6.31k|{
 1289|  6.31k|    auto it = input.begin();
 1290|  25.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 24.6k, False: 1.03k]
  ------------------
 1291|  24.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 5.27k, False: 19.4k]
  ------------------
 1292|  5.27k|            break;
 1293|  5.27k|        }
 1294|  24.6k|    }
 1295|  6.31k|    return it;
 1296|  6.31k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  10.2k|    {
  283|  10.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  10.2k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  10.2k|    {
  252|  10.2k|        constexpr iter_difference_t<I> zero{0};
  253|  10.2k|        iter_difference_t<I> counter{0};
  254|       |
  255|  31.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 22.1k, False: 9.54k]
  |  Branch (255:30): [True: 21.4k, False: 731]
  ------------------
  256|  21.4k|            ++i;
  257|  21.4k|            ++counter;
  258|  21.4k|        }
  259|       |
  260|  10.2k|        return counter;
  261|  10.2k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|   830k|    {
 2015|   830k|        return !codepoint.empty();
 2016|   830k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   485k|{
 2242|   485k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   485k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   559k|{
 3129|   559k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 559k, False: 0]
  ------------------
 3130|   559k|        auto it = read_while_classic_space(range);
 3131|   559k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   559k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   559k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.91k, False: 551k]
  |  |  ------------------
  ------------------
 3133|  7.91k|            return unexpected(e);
 3134|  7.91k|        }
 3135|       |
 3136|   551k|        return it;
 3137|   559k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   559k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   559k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   559k|    else {
 2286|   559k|        auto it = range.begin();
 2287|       |
 2288|   559k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|   559k|            auto seg = get_contiguous_beginning(range);
 2290|   559k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|   559k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 73.5k, False: 485k]
  ------------------
 2292|  73.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|  73.5k|            }
 2294|   485k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|   485k|        }
 2296|       |
 2297|   559k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   559k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   559k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   559k|            return detail::is_cp_space(cp);
 2300|   559k|        });
 2301|   559k|    }
 2302|   559k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   485k|        : m_fptr([](storage fn,
  753|   485k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   485k|              cvref<T> obj = *get<T>(fn);
  755|   485k|              if constexpr (std::is_void_v<R>) {
  756|   485k|                  obj(static_cast<decltype(args)>(args)...);
  757|   485k|              }
  758|   485k|              else {
  759|   485k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   485k|              }
  761|   485k|          }),
  762|   485k|          m_storage(std::addressof(f))
  763|   485k|    {
  764|   485k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   823k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   823k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   823k|              else {
  759|   823k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   823k|              }
  761|   823k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   823k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   823k|        else if constexpr (std::is_object_v<T>) {
  694|   823k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   823k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   823k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   823k|            return detail::is_cp_space(cp);
 2300|   823k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   485k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   485k|        {
  668|   485k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   515k|{
  993|   515k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   515k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   515k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   515k|        auto beg = r.begin();
 1004|   515k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 515k, False: 0]
  ------------------
 1005|   515k|            return false;
 1006|   515k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   515k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1981|  1.35M|{
 1982|  1.35M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|       |    if constexpr (ranges::sized_range<Range>) {
 1985|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|       |        if (sz < count) {
 1987|       |            return unexpected(eof_error::eof);
 1988|       |        }
 1989|       |
 1990|       |        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|  1.35M|    else {
 1993|  1.35M|        auto it = range.begin();
 1994|  1.35M|        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
  ------------------
  |  Branch (1994:13): [True: 808k, False: 544k]
  ------------------
 1995|   808k|            return ranges::next(it, count);
 1996|   808k|        }
 1997|       |
 1998|  2.08M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1998:36): [True: 1.59M, False: 485k]
  ------------------
 1999|  1.59M|            if (it == range.end()) {
  ------------------
  |  Branch (1999:17): [True: 59.2k, False: 1.53M]
  ------------------
 2000|  59.2k|                return unexpected(eof_error::eof);
 2001|  59.2k|            }
 2002|  1.59M|        }
 2003|       |
 2004|   485k|        return it;
 2005|   544k|    }
 2006|  1.35M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1113|  1.35M|{
 1114|       |    if constexpr (ranges::sized_range<Range>) {
 1115|       |        return r.size();
 1116|       |    }
 1117|       |    else if constexpr (std::is_same_v<
 1118|       |                           ranges::const_iterator_t<Range>,
 1119|       |                           typename detail::basic_scan_buffer<
 1120|  1.35M|                               detail::char_t<Range>>::forward_iterator>) {
 1121|       |        if constexpr (ranges::common_range<Range>) {
 1122|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1123|       |        }
 1124|  1.35M|        else {
 1125|  1.35M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1125:17): [True: 1.35M, False: 0]
  ------------------
 1126|  1.35M|                return static_cast<size_t>(
 1127|  1.35M|                    r.begin().parent()->chars_available() -
 1128|  1.35M|                    r.begin().position());
 1129|  1.35M|            }
 1130|      0|            return r.begin().contiguous_segment().size();
 1131|  1.35M|        }
 1132|       |    }
 1133|       |    else {
 1134|       |        SCN_UNUSED(r);
 1135|       |        return 0;
 1136|       |    }
 1137|  1.35M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|  3.78M|    {
  773|  3.78M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  3.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  3.78M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  1.22M|        : m_fptr([](storage fn,
  753|  1.22M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.22M|              cvref<T> obj = *get<T>(fn);
  755|  1.22M|              if constexpr (std::is_void_v<R>) {
  756|  1.22M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.22M|              }
  758|  1.22M|              else {
  759|  1.22M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.22M|              }
  761|  1.22M|          }),
  762|  1.22M|          m_storage(std::addressof(f))
  763|  1.22M|    {
  764|  1.22M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|  1.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.89M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.89M|              else {
  759|  1.89M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.89M|              }
  761|  1.89M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|  1.89M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.89M|        else if constexpr (std::is_object_v<T>) {
  694|  1.89M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.89M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  1.22M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.22M|        {
  668|  1.22M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   375k|    {
 6174|   375k|        const bool need_skipped_width =
 6175|   375k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 375k]
  |  Branch (6175:33): [True: 0, False: 375k]
  ------------------
 6176|   375k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   375k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 375k]
  ------------------
 6180|   375k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 375k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   375k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 375k, False: 0]
  |  Branch (6184:56): [True: 375k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   375k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 375k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   748k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   375k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   375k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   375k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.18k, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.18k|    }                                                  \
  |  |  |  | 3995|   375k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   748k|                            make_eof_scan_error));
 6195|       |
 6196|   748k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 372k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   372k|            return result_type{it, 0};
 6204|   748k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   375k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|   913k|{
 2134|   913k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   913k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|   913k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|   913k|    else {
 2105|   913k|        auto first = range.begin();
 2106|  1.42M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 1.41M, False: 3.98k]
  ------------------
 2107|  1.41M|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 909k, False: 510k]
  ------------------
 2108|   909k|                return first;
 2109|   909k|            }
 2110|  1.41M|        }
 2111|  3.98k|        return first;
 2112|   913k|    }
 2113|   913k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   659k|    {
  108|   659k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   659k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   659k|    {
   94|   659k|        iter_difference_t<I> counter{0};
   95|  1.77M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.11M, False: 659k]
  ------------------
   96|  1.11M|            ++i;
   97|  1.11M|            ++counter;
   98|  1.11M|        }
   99|   659k|        return counter;
  100|   659k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1904|   184k|    {
 1905|   184k|        auto stdloc = loc.get<std::locale>();
 1906|   184k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1907|   184k|        grouping = numpunct.grouping();
 1908|   184k|        thousands_sep =
 1909|   184k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1909:13): [True: 0, False: 184k]
  ------------------
 1910|   184k|        decimal_point = numpunct.decimal_point();
 1911|   184k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1841|   184k|{
 1842|   184k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1842:9): [True: 184k, False: 0]
  ------------------
 1843|   184k|        return std::use_facet<Facet>(stdloc);
 1844|   184k|    }
 1845|      0|    stdloc = std::locale(stdloc, new Facet{});
 1846|      0|    return std::use_facet<Facet>(stdloc);
 1847|   184k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1970|  1.24M|{
 1971|  1.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.67k, False: 1.24M]
  |  |  ------------------
  ------------------
 1972|  2.67k|        return unexpected(e);
 1973|  2.67k|    }
 1974|       |
 1975|  1.24M|    return ranges::next(range.begin());
 1976|  1.24M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  1.89M|{
  961|  1.89M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 6.95k, False: 1.89M]
  |  |  ------------------
  ------------------
  962|  6.95k|        return eof_error::eof;
  963|  6.95k|    }
  964|  1.89M|    return eof_error::good;
  965|  1.89M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  2.80M|{
  955|  2.80M|    return is_range_eof(r.begin(), r.end());
  956|  2.80M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  2.80M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  2.80M|    {
  948|  2.80M|        return begin == end;
  949|  2.80M|    }
  950|  2.80M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.24M|    {
  296|  1.24M|        ++x;
  297|  1.24M|        return x;
  298|  1.24M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3320|   528k|{
 3321|   528k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   528k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 521k, False: 6.95k]
  ------------------
 3323|   521k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 521k, False: 78]
  ------------------
 3324|   521k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   521k|        }
 3326|     78|        return unexpected(eof_error::eof);
 3327|   521k|    }
 3328|       |
 3329|  6.95k|    auto& it = *r;
 3330|  6.95k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 5.33k, False: 1.61k]
  ------------------
 3331|  5.33k|        return std::pair{it, sign_type::minus_sign};
 3332|  5.33k|    }
 3333|  1.61k|    return std::pair{it, sign_type::plus_sign};
 3334|  6.95k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2434|   861k|{
 2435|   861k|    auto it = read_code_unit(range);
 2436|   861k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   861k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.53k, False: 859k]
  |  |  ------------------
  ------------------
 2437|  1.53k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  1.53k|    }
 2439|       |
 2440|  1.71M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.71M, False: 835k]
  ------------------
 2441|  1.71M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 24.8k, False: 1.69M]
  ------------------
 2442|  24.8k|            return *it;
 2443|  24.8k|        }
 2444|  1.71M|    }
 2445|       |
 2446|   835k|    return unexpected(parse_error::error);
 2447|   859k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2392|  1.35M|{
 2393|  1.35M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.35M|    else {
 2407|  1.35M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.35M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.35M|                return ch;
 2410|  1.35M|            }
 2411|  1.35M|            return static_cast<char_type>(ch +
 2412|  1.35M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.35M|        };
 2414|       |
 2415|  1.35M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 59.2k, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  59.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  59.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  59.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  59.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  59.2k|    }                                                  \
  |  |  |  | 3995|  1.35M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.29M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.29M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.29M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.29M, False: 674]
  |  |  ------------------
  ------------------
 2420|  1.29M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.29M|                    return ascii_tolower(a) ==
 2422|  1.29M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.29M|                }))) {
 2424|  1.29M|            return unexpected(parse_error::error);
 2425|  1.29M|        }
 2426|       |
 2427|    674|        return it;
 2428|  1.29M|    }
 2429|  1.35M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  1.51M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.51M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.22M, False: 294k]
  |  Branch (2408:29): [True: 278k, False: 15.5k]
  ------------------
 2409|  1.50M|                return ch;
 2410|  1.50M|            }
 2411|  15.5k|            return static_cast<char_type>(ch +
 2412|  15.5k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.51M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2307|   384k|{
 2308|   384k|    auto it = read_code_unit(range);
 2309|   384k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.13k, False: 383k]
  |  |  ------------------
  ------------------
 2310|  1.13k|        return unexpected(make_eof_parse_error(it.error()));
 2311|  1.13k|    }
 2312|       |
 2313|   383k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 377k, False: 5.85k]
  |  |  ------------------
  ------------------
 2314|   383k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   377k|        return unexpected(parse_error::error);
 2316|   377k|    }
 2317|       |
 2318|  5.85k|    return *it;
 2319|   383k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2153|   913k|{
 2154|   913k|    auto it = read_while_code_unit(range, pred);
 2155|   913k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 507k, False: 405k]
  ------------------
 2156|   507k|        return unexpected(parse_error::error);
 2157|   507k|    }
 2158|   405k|    return it;
 2159|   913k|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1744|   380k|    {
 1745|   380k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   380k|                           ranges::common_range<Range>) {
 1762|   380k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   380k|            auto end_seg = range.end().contiguous_segment();
 1764|   380k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.5k, False: 359k]
  |  |  ------------------
  ------------------
 1765|   380k|                             detail::to_address(end_seg.end()))) {
 1766|  21.5k|                auto& str = m_storage.emplace();
 1767|  21.5k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  21.5k|                                                     range.begin().position()));
 1769|  21.5k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  21.5k|                m_view = string_view_type{str.data(), str.size()};
 1771|  21.5k|                return;
 1772|  21.5k|            }
 1773|       |
 1774|   359k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   359k|                                                            end_seg.data());
 1776|   359k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   380k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  3.30M|    {
 1706|  3.30M|        return m_view;
 1707|  3.30M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|  2.04M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   268k|    {
 6216|   268k|        const bool need_skipped_width =
 6217|   268k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 268k]
  |  Branch (6217:33): [True: 0, False: 268k]
  ------------------
 6218|   268k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   268k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 268k]
  ------------------
 6221|   268k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 268k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   268k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 268k, False: 0]
  ------------------
 6230|   268k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 268k]
  ------------------
 6231|   268k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   268k|        return result_type{rng.begin(), 0};
 6255|   268k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1981|  1.35M|{
 1982|  1.35M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1079|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1983|       |
 1984|  1.35M|    if constexpr (ranges::sized_range<Range>) {
 1985|  1.35M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1986|  1.35M|        if (sz < count) {
  ------------------
  |  Branch (1986:13): [True: 59.5k, False: 1.29M]
  ------------------
 1987|  59.5k|            return unexpected(eof_error::eof);
 1988|  59.5k|        }
 1989|       |
 1990|  1.29M|        return ranges::next(range.begin(), count);
 1991|       |    }
 1992|       |    else {
 1993|       |        auto it = range.begin();
 1994|       |        if (guaranteed_minimum_size(range) >= static_cast<std::size_t>(count)) {
 1995|       |            return ranges::next(it, count);
 1996|       |        }
 1997|       |
 1998|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1999|       |            if (it == range.end()) {
 2000|       |                return unexpected(eof_error::eof);
 2001|       |            }
 2002|       |        }
 2003|       |
 2004|       |        return it;
 2005|       |    }
 2006|  1.35M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|  2.21M|{
 2024|  2.21M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  2.21M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  2.21M|    auto it = range.begin();
 2028|  2.21M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  2.21M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  2.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.21M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  2.21M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 2.21M, False: 0]
  ------------------
 2037|  2.21M|        ++it;
 2038|  2.21M|        return {it, string_type(1, *range.begin())};
 2039|  2.21M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  2.21M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|  3.57M|{
  955|  3.57M|    return is_range_eof(r.begin(), r.end());
  956|  3.57M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|  3.57M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  3.57M|    {
  948|  3.57M|        return begin == end;
  949|  3.57M|    }
  950|  3.57M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   331k|    {
  190|   331k|        i = std::move(bound);
  191|   331k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|  2.21M|    {
 2015|  2.21M|        return !codepoint.empty();
 2016|  2.21M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  1.36M|{
  961|  1.36M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.90k, False: 1.36M]
  |  |  ------------------
  ------------------
  962|  4.90k|        return eof_error::eof;
  963|  4.90k|    }
  964|  1.36M|    return eof_error::good;
  965|  1.36M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1970|   711k|{
 1971|   711k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 624, False: 710k]
  |  |  ------------------
  ------------------
 1972|    624|        return unexpected(e);
 1973|    624|    }
 1974|       |
 1975|   710k|    return ranges::next(range.begin());
 1976|   711k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   710k|    {
  296|   710k|        ++x;
  297|   710k|        return x;
  298|   710k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3320|   517k|{
 3321|   517k|    auto r = read_one_of_code_unit(range, "+-");
 3322|   517k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 513k, False: 4.66k]
  ------------------
 3323|   513k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 513k, False: 24]
  ------------------
 3324|   513k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|   513k|        }
 3326|     24|        return unexpected(eof_error::eof);
 3327|   513k|    }
 3328|       |
 3329|  4.66k|    auto& it = *r;
 3330|  4.66k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 3.24k, False: 1.42k]
  ------------------
 3331|  3.24k|        return std::pair{it, sign_type::minus_sign};
 3332|  3.24k|    }
 3333|  1.42k|    return std::pair{it, sign_type::plus_sign};
 3334|  4.66k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2434|   588k|{
 2435|   588k|    auto it = read_code_unit(range);
 2436|   588k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 332, False: 588k]
  |  |  ------------------
  ------------------
 2437|    332|        return unexpected(make_eof_parse_error(it.error()));
 2438|    332|    }
 2439|       |
 2440|  1.17M|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 1.17M, False: 576k]
  ------------------
 2441|  1.17M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 11.3k, False: 1.16M]
  ------------------
 2442|  11.3k|            return *it;
 2443|  11.3k|        }
 2444|  1.17M|    }
 2445|       |
 2446|   576k|    return unexpected(parse_error::error);
 2447|   588k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2392|  1.35M|{
 2393|  1.35M|    using char_type = detail::char_t<Range>;
 2394|       |
 2395|       |    if constexpr (ranges::contiguous_range<Range> &&
 2396|       |                  std::is_same_v<char_type, char>) {
 2397|       |        if (range.size() < str.size()) {
 2398|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2399|       |        }
 2400|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2401|       |            return unexpected(parse_error::error);
 2402|       |        }
 2403|       |        return ranges::next(range.begin(),
 2404|       |                            static_cast<std::ptrdiff_t>(str.size()));
 2405|       |    }
 2406|  1.35M|    else {
 2407|  1.35M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.35M|            if (ch < 'A' || ch > 'Z') {
 2409|  1.35M|                return ch;
 2410|  1.35M|            }
 2411|  1.35M|            return static_cast<char_type>(ch +
 2412|  1.35M|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.35M|        };
 2414|       |
 2415|  1.35M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3996|  1.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  1.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  1.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 59.5k, False: 1.29M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  59.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  59.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  59.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  59.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  59.5k|    }                                                  \
  |  |  |  | 3995|  1.35M|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2416|  1.29M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2417|  1.29M|                        .transform_error(make_eof_parse_error));
 2418|       |
 2419|  1.29M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1014|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.29M, False: 674]
  |  |  ------------------
  ------------------
 2420|  1.29M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2421|  1.29M|                    return ascii_tolower(a) ==
 2422|  1.29M|                           static_cast<detail::char_t<Range>>(b);
 2423|  1.29M|                }))) {
 2424|  1.29M|            return unexpected(parse_error::error);
 2425|  1.29M|        }
 2426|       |
 2427|    674|        return it;
 2428|  1.29M|    }
 2429|  1.35M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2407|  1.52M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2408|  1.52M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2408:17): [True: 1.22M, False: 294k]
  |  Branch (2408:29): [True: 279k, False: 15.6k]
  ------------------
 2409|  1.50M|                return ch;
 2410|  1.50M|            }
 2411|  15.6k|            return static_cast<char_type>(ch +
 2412|  15.6k|                                          static_cast<char_type>('a' - 'A'));
 2413|  1.52M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2307|   122k|{
 2308|   122k|    auto it = read_code_unit(range);
 2309|   122k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 292, False: 122k]
  |  |  ------------------
  ------------------
 2310|    292|        return unexpected(make_eof_parse_error(it.error()));
 2311|    292|    }
 2312|       |
 2313|   122k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1014|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 119k, False: 2.20k]
  |  |  ------------------
  ------------------
 2314|   122k|                     static_cast<detail::char_t<Range>>(ch))) {
 2315|   119k|        return unexpected(parse_error::error);
 2316|   119k|    }
 2317|       |
 2318|  2.20k|    return *it;
 2319|   122k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|   309k|{
 2134|   309k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|   309k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|   309k|{
 2101|   309k|    if constexpr (ranges::common_range<Range>) {
 2102|   309k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|   309k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   514k|{
 3129|   514k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 514k, False: 0]
  ------------------
 3130|   514k|        auto it = read_while_classic_space(range);
 3131|   514k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   514k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   514k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.69k, False: 511k]
  |  |  ------------------
  ------------------
 3133|  3.69k|            return unexpected(e);
 3134|  3.69k|        }
 3135|       |
 3136|   511k|        return it;
 3137|   514k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   514k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   514k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   514k|    else {
 2286|   514k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   514k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   514k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   514k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   514k|            return detail::is_cp_space(cp);
 2300|   514k|        });
 2301|   514k|    }
 2302|   514k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|   514k|{
 2242|   514k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   514k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  1.25M|{
 2220|  1.25M|    auto it = range.begin();
 2221|  2.70M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 2.21M, False: 490k]
  ------------------
 2222|  2.21M|        const auto val =
 2223|  2.21M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  2.21M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  2.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 2.21M, False: 0]
  |  |  ------------------
  ------------------
 2225|  2.21M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  2.21M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  2.21M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  2.21M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 764k, False: 1.44M]
  ------------------
 2229|   764k|                return it;
 2230|   764k|            }
 2231|  2.21M|        }
 2232|  1.44M|        it = val.iterator;
 2233|  1.44M|    }
 2234|       |
 2235|   490k|    return it;
 2236|  1.25M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|   514k|        : m_fptr([](storage fn,
  753|   514k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   514k|              cvref<T> obj = *get<T>(fn);
  755|   514k|              if constexpr (std::is_void_v<R>) {
  756|   514k|                  obj(static_cast<decltype(args)>(args)...);
  757|   514k|              }
  758|   514k|              else {
  759|   514k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   514k|              }
  761|   514k|          }),
  762|   514k|          m_storage(std::addressof(f))
  763|   514k|    {
  764|   514k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|   901k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   901k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   901k|              else {
  759|   901k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   901k|              }
  761|   901k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|   901k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   901k|        else if constexpr (std::is_object_v<T>) {
  694|   901k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   901k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|   901k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   901k|            return detail::is_cp_space(cp);
 2300|   901k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|   514k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   514k|        {
  668|   514k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.18M|    {
  304|  1.18M|        ranges::advance(x, n);
  305|  1.18M|        return x;
  306|  1.18M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.18M|    {
  268|  1.18M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.18M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.18M|    {
  181|  3.80M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.61M, False: 1.18M]
  ------------------
  182|  2.61M|            ++i;
  183|  2.61M|        }
  184|  1.18M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   118k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   118k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   118k|            auto rd = make_reader<T, char_type>();
 6336|   118k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   118k|    do {                                                            \
  |  | 3985|   118k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   118k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 118k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   118k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   118k|                return impl(rd, range, value);
 6341|   118k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   118k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|   752k|    {
 3219|   752k|        reader_error_handler eh{};
 3220|   752k|        get_derived().check_specs_impl(specs, eh);
 3221|   752k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   752k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 752k]
  |  |  ------------------
  ------------------
 3222|      0|            return detail::unexpected_scan_error(
 3223|      0|                scan_error::invalid_format_string, eh.m_msg);
 3224|      0|        }
 3225|   752k|        return {};
 3226|   752k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3230|   752k|    {
 3231|   752k|        return static_cast<Derived&>(*this);
 3232|   752k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4272|   752k|    {
 4273|   752k|        detail::check_float_type_specs(specs, eh);
 4274|   752k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   118k|    {
 6261|   118k|        const bool need_skipped_width =
 6262|   118k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 118k]
  |  Branch (6262:33): [True: 0, False: 118k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   118k|        auto it = rng.begin();
 6266|   118k|        std::ptrdiff_t prefix_width = 0;
 6267|   118k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 118k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   118k|        else {
 6275|   118k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 976, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    976|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    976|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    976|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    976|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    976|    }                                                  \
  |  |  |  | 3995|   118k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   117k|            std::tie(it, prefix_width) = prefix_result;
 6277|   117k|        }
 6278|   117k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   117k|        std::ptrdiff_t value_width = 0;
 6282|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 117k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   117k|        else {
 6298|   117k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.2k, False: 83.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.2k|    }                                                  \
  |  | 3995|   117k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  83.2k|                                             specs, value, loc));
 6300|       |
 6301|  83.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 83.2k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  83.2k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  83.2k|        std::ptrdiff_t postfix_width = 0;
 6310|  83.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 82.7k, False: 470]
  ------------------
 6311|  82.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  82.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  82.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  82.7k|                                 value_width));
 6315|  82.7k|            std::tie(it, postfix_width) = postfix_result;
 6316|  82.7k|        }
 6317|       |
 6318|  83.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  83.2k|    do {                                                            \
  |  | 3985|  83.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 83.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  83.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  83.2k|            specs, prefix_width, value_width, postfix_width));
 6320|  83.2k|        return it;
 6321|  83.2k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3213|  1.56M|    {
 3214|  1.56M|        return true;
 3215|  1.56M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4346|   745k|    {
 4347|   745k|        unsigned options{};
 4348|   745k|        if (specs.localized) {
  ------------------
  |  Branch (4348:13): [True: 184k, False: 561k]
  ------------------
 4349|   184k|            options |= float_reader_base::allow_thsep;
 4350|   184k|        }
 4351|       |
 4352|   745k|        SCN_GCC_COMPAT_PUSH
 4353|   745k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4354|       |
 4355|   745k|        switch (specs.type) {
 4356|   144k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4356:13): [True: 144k, False: 600k]
  ------------------
 4357|   144k|                return options | float_reader_base::allow_fixed;
 4358|       |
 4359|  45.7k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4359:13): [True: 45.7k, False: 699k]
  ------------------
 4360|  45.7k|                return options | float_reader_base::allow_scientific;
 4361|       |
 4362|   201k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4362:13): [True: 201k, False: 544k]
  ------------------
 4363|   201k|                return options | float_reader_base::allow_hex;
 4364|       |
 4365|   169k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4365:13): [True: 169k, False: 576k]
  ------------------
 4366|   169k|                return options | float_reader_base::allow_scientific |
 4367|   169k|                       float_reader_base::allow_fixed;
 4368|       |
 4369|   184k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4369:13): [True: 184k, False: 561k]
  ------------------
 4370|   184k|                return options | float_reader_base::allow_scientific |
 4371|   184k|                       float_reader_base::allow_fixed |
 4372|   184k|                       float_reader_base::allow_hex;
 4373|       |
 4374|      0|            default:
  ------------------
  |  Branch (4374:13): [True: 0, False: 745k]
  ------------------
 4375|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4376|   745k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4377|   745k|        }
 4378|       |
 4379|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4380|   745k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3775|   745k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1895|  1.02M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1655|  2.04M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3806|   253k|    {
 3807|   253k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   253k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   253k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   253k|        const std::ptrdiff_t sign_len =
 3810|   253k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.16k, False: 251k]
  ------------------
 3811|       |
 3812|   253k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 25.9k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  25.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  25.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  25.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  25.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  25.9k|    }                                                  \
  |  |  |  | 3995|   253k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   227k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   253k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4163|   830k|    {
 4164|   830k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4164:13): [True: 830k, False: 0]
  ------------------
 4165|   830k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4165:13): [True: 830k, False: 0]
  ------------------
 4166|   830k|            return;
 4167|   830k|        }
 4168|       |
 4169|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4170|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4170:13): [True: 0, False: 0]
  ------------------
 4171|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4171:27): [True: 0, False: 0]
  ------------------
 4172|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4172:21): [True: 0, False: 0]
  ------------------
 4173|      0|                    ch = CharT{'.'};
 4174|      0|                }
 4175|      0|            }
 4176|      0|        }
 4177|       |
 4178|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4178:13): [True: 0, False: 0]
  ------------------
 4179|      0|            return;
 4180|      0|        }
 4181|       |
 4182|      0|        auto first =
 4183|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4184|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4184:13): [True: 0, False: 0]
  ------------------
 4185|      0|            return;
 4186|      0|        }
 4187|       |
 4188|      0|        m_thsep_indices.push_back(
 4189|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4190|       |
 4191|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4191:31): [True: 0, False: 0]
  ------------------
 4192|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4192:17): [True: 0, False: 0]
  ------------------
 4193|      0|                *first++ = std::move(*it);
 4194|      0|            }
 4195|      0|            else {
 4196|      0|                m_thsep_indices.push_back(
 4197|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4198|      0|            }
 4199|      0|        }
 4200|       |
 4201|      0|        str.erase(first, str.end());
 4202|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1710|  1.68M|    {
 1711|  1.68M|        return m_storage.has_value();
 1712|  1.68M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1715|   923k|    {
 1716|   923k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|   923k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   923k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|   923k|        return *m_storage;
 1718|   923k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   117k|    {
 4298|   117k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   117k|#if !SCN_DISABLE_LOCALE
 4301|   117k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 27.3k, False: 90.1k]
  ------------------
 4302|  27.3k|            return read_impl<Range>(
 4303|  27.3k|                range, rd,
 4304|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  27.3k|                },
 4307|  27.3k|                value, loc);
 4308|  27.3k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  90.1k|        return read_impl<Range>(
 4314|  90.1k|            range, rd,
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
 4317|  90.1k|            },
 4318|  90.1k|            value);
 4319|   117k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   158k|    {
 4336|   158k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   158k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 42.7k, False: 115k]
  |  |  ------------------
  ------------------
 4338|  42.7k|            return unexpected(r.error());
 4339|  42.7k|        }
 4340|       |
 4341|   115k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.71k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.71k|    }                                                  \
  |  |  |  | 3995|   158k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   113k|        return ranges::next(range.begin(), n);
 4343|   115k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  772|   510k|    {
  773|   510k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   510k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  27.3k|        : m_fptr([](storage fn,
  753|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  27.3k|              cvref<T> obj = *get<T>(fn);
  755|  27.3k|              if constexpr (std::is_void_v<R>) {
  756|  27.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  27.3k|              }
  758|  27.3k|              else {
  759|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  27.3k|              }
  761|  27.3k|          }),
  762|  27.3k|          m_storage(std::addressof(f))
  763|  27.3k|    {
  764|  27.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  27.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  27.3k|              else {
  759|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  27.3k|              }
  761|  27.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  27.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  27.3k|        else if constexpr (std::is_object_v<T>) {
  694|  27.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  27.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  27.3k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3794|  92.1k|    {
 3795|  92.1k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  92.1k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  92.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 92.1k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  92.1k|        return read_source_impl(range);
 3801|  92.1k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3820|   510k|    {
 3821|   510k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   510k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   510k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   510k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 510k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   510k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   510k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   510k|        auto it = sign_result.first;
 3824|   510k|        m_sign = sign_result.second;
 3825|       |
 3826|   510k|        auto digits_begin = it;
 3827|   510k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|       |                      ranges::sized_range<Range>) {
 3830|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3831|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|       |                SCN_TRY_ASSIGN(
 3833|       |                    it,
 3834|       |                    do_read_source_impl(
 3835|       |                        r,
 3836|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|       |            }
 3839|       |            else {
 3840|       |                auto cb = [&](const auto& rr)
 3841|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|       |                    auto res = read_all(rr);
 3843|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|       |                        return detail::unexpected_scan_error(
 3845|       |                            scan_error::invalid_scanned_value,
 3846|       |                            "Invalid float value");
 3847|       |                    }
 3848|       |                    return res;
 3849|       |                };
 3850|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3851|       |            }
 3852|       |        }
 3853|   510k|        else {
 3854|   510k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|   510k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   510k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 130k, False: 380k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|   130k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|   130k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|   130k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|   130k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|   130k|    }                                                  \
  |  | 3995|   510k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3855|   380k|                it,
 3856|   380k|                do_read_source_impl(
 3857|   380k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|   380k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|   380k|        }
 3860|       |
 3861|   510k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   380k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 380k, False: 0]
  |  Branch (3863:48): [True: 380k, False: 0]
  ------------------
 3864|   380k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 380k, False: 0]
  ------------------
 3865|   380k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 380k, False: 0]
  ------------------
 3866|   380k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   380k|        }
 3868|       |
 3869|   380k|        handle_separators();
 3870|       |
 3871|   380k|        return it;
 3872|   510k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4106|   510k|    {
 4107|   510k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   510k|        const bool allowed_nonhex =
 4109|   510k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   510k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   510k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 510k, False: 0]
  |  Branch (4112:45): [True: 0, False: 510k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   510k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 510k]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|   510k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 510k, False: 0]
  |  Branch (4121:45): [True: 0, False: 510k]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|   510k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 510k]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|   510k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 331k, False: 179k]
  |  Branch (4128:28): [True: 100k, False: 230k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|   100k|            auto it = range.begin();
 4132|       |
 4133|   100k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 204, False: 100k]
  ------------------
 4134|    204|                m_kind = float_kind::hex_with_prefix;
 4135|    204|                it = *r;
 4136|    204|            }
 4137|   100k|            else {
 4138|   100k|                m_kind = float_kind::hex_without_prefix;
 4139|   100k|            }
 4140|       |
 4141|   100k|            return read_hex(ranges::subrange{it, range.end()});
 4142|   100k|        }
 4143|   410k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 179k, False: 230k]
  |  Branch (4143:29): [True: 179k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   179k|            m_kind = float_kind::generic;
 4147|   179k|            return read_regular_float(range);
 4148|   179k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   230k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 470, False: 229k]
  |  |  ------------------
  ------------------
 4154|    470|            m_kind = float_kind::hex_with_prefix;
 4155|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4156|    470|        }
 4157|       |
 4158|   229k|        m_kind = float_kind::generic;
 4159|   229k|        return read_regular(range);
 4160|   230k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3914|   510k|    {
 3915|   510k|        auto it = range.begin();
 3916|   510k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 510k, False: 0]
  ------------------
 3917|   510k|            return unexpected(r.error());
 3918|   510k|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3937|   510k|    {
 3938|   510k|        auto it = range.begin();
 3939|   510k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 510k, False: 0]
  ------------------
 3940|   510k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   510k|                scan_error::invalid_scanned_value,
 3942|   510k|                "Invalid floating-point NaN value"));
 3943|   510k|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3907|   331k|    {
 3908|   331k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   331k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4008|   101k|    {
 4009|   101k|        auto it = range.begin();
 4010|       |
 4011|   101k|        std::ptrdiff_t digits_count = 0;
 4012|   101k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 4013|   101k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.0k, False: 81.0k]
  |  |  ------------------
  ------------------
 4014|  20.0k|            return r.transform_error(map_parse_error_to_scan_error(
 4015|  20.0k|                scan_error::invalid_scanned_value,
 4016|  20.0k|                "Invalid hexadecimal floating-point value"));
 4017|  20.0k|        }
 4018|  81.0k|        else {
 4019|  81.0k|            digits_count += ranges::distance(it, *r);
 4020|  81.0k|            it = *r;
 4021|  81.0k|        }
 4022|       |
 4023|  81.0k|        m_integral_part_length = digits_count;
 4024|  81.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4024:18): [True: 1.08k, False: 80.0k]
  ------------------
 4025|  81.0k|                                             m_locale_options.decimal_point)) {
 4026|  1.08k|            it = *r;
 4027|  1.08k|        }
 4028|       |
 4029|  81.0k|        if (auto r =
  ------------------
  |  Branch (4029:18): [True: 902, False: 80.1k]
  ------------------
 4030|  81.0k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 4031|    902|            digits_count += ranges::distance(it, *r);
 4032|    902|            it = *r;
 4033|    902|        }
 4034|       |
 4035|  81.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 81.0k]
  |  |  ------------------
  ------------------
 4036|      0|            return detail::unexpected_scan_error(
 4037|      0|                scan_error::invalid_scanned_value,
 4038|      0|                "No significand digits in hexfloat");
 4039|      0|        }
 4040|       |
 4041|  81.0k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4042|       |
 4043|  81.0k|        return it;
 4044|  81.0k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3892|   182k|    {
 3893|   182k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 182k]
  |  |  |  Branch (1014:45): [True: 0, False: 182k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3894|   182k|                         thsep_allowed)) {
 3895|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3896|      0|                return char_to_int(ch) < 16 ||
 3897|      0|                       ch == m_locale_options.thousands_sep;
 3898|      0|            });
 3899|      0|        }
 3900|       |
 3901|   182k|        return read_while1_code_unit(
 3902|   182k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3903|   182k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   182k|        : m_fptr([](storage fn,
  753|   182k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   182k|              cvref<T> obj = *get<T>(fn);
  755|   182k|              if constexpr (std::is_void_v<R>) {
  756|   182k|                  obj(static_cast<decltype(args)>(args)...);
  757|   182k|              }
  758|   182k|              else {
  759|   182k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   182k|              }
  761|   182k|          }),
  762|   182k|          m_storage(std::addressof(f))
  763|   182k|    {
  764|   182k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|   290k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   290k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   290k|              else {
  759|   290k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   290k|              }
  761|   290k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  689|   290k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   290k|        else if constexpr (std::is_object_v<T>) {
  694|   290k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   290k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3902|   290k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   182k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   182k|        {
  668|   182k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3980|   332k|    {
 3981|   332k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 17.9k, False: 314k]
  ------------------
 3982|  17.9k|            auto beg_exp_it = range.begin();
 3983|  17.9k|            auto it = *r;
 3984|       |
 3985|  17.9k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 17.8k, False: 78]
  ------------------
 3986|  17.9k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  17.8k|                it = r_sign->first;
 3988|  17.8k|            }
 3989|       |
 3990|  17.9k|            if (auto r_exp = read_while1_code_unit(
 3991|  17.9k|                    ranges::subrange{it, range.end()},
 3992|  17.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  17.9k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  17.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.39k, False: 16.5k]
  |  |  ------------------
  ------------------
 3994|  1.39k|                it = beg_exp_it;
 3995|  1.39k|            }
 3996|  16.5k|            else {
 3997|  16.5k|                it = *r_exp;
 3998|  16.5k|            }
 3999|       |
 4000|  17.9k|            return it;
 4001|  17.9k|        }
 4002|   314k|        return range.begin();
 4003|   332k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  752|  17.9k|        : m_fptr([](storage fn,
  753|  17.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  17.9k|              cvref<T> obj = *get<T>(fn);
  755|  17.9k|              if constexpr (std::is_void_v<R>) {
  756|  17.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  17.9k|              }
  758|  17.9k|              else {
  759|  17.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  17.9k|              }
  761|  17.9k|          }),
  762|  17.9k|          m_storage(std::addressof(f))
  763|  17.9k|    {
  764|  17.9k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  753|  50.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  50.5k|              else {
  759|  50.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.5k|              }
  761|  50.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  689|  50.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  50.5k|        else if constexpr (std::is_object_v<T>) {
  694|  50.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  50.5k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3992|  50.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  666|  17.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  17.9k|        {
  668|  17.9k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4049|   409k|    {
 4050|   409k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   409k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 337k, False: 72.3k]
  |  Branch (4051:50): [True: 22.8k, False: 314k]
  ------------------
 4052|       |
 4053|   409k|        auto it = ranges::begin(range);
 4054|   409k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   409k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   409k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 106k, False: 303k]
  |  |  ------------------
  ------------------
 4058|   106k|            return r.transform_error(
 4059|   106k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|   106k|                                              "Invalid floating-point value"));
 4061|   106k|        }
 4062|   303k|        else {
 4063|   303k|            digits_count += ranges::distance(it, *r);
 4064|   303k|            it = *r;
 4065|   303k|        }
 4066|       |
 4067|   303k|        m_integral_part_length = digits_count;
 4068|   303k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 4.77k, False: 298k]
  ------------------
 4069|   303k|                                             m_locale_options.decimal_point)) {
 4070|  4.77k|            it = *r;
 4071|  4.77k|        }
 4072|       |
 4073|   303k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 3.92k, False: 299k]
  ------------------
 4074|   303k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  3.92k|            digits_count += ranges::distance(it, *r);
 4076|  3.92k|            it = *r;
 4077|  3.92k|        }
 4078|       |
 4079|   303k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   303k|        auto beg_exp_it = it;
 4086|   303k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 251k, False: 51.7k]
  ------------------
 4087|   251k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|   251k|        }
 4089|   303k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 5.63k, False: 297k]
  |  Branch (4089:29): [True: 3.51k, False: 2.12k]
  ------------------
 4090|  3.51k|            return detail::unexpected_scan_error(
 4091|  3.51k|                scan_error::invalid_scanned_value,
 4092|  3.51k|                "No exponent given to scientific float");
 4093|  3.51k|        }
 4094|       |
 4095|   299k|        m_kind =
 4096|   299k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 283k, False: 16.3k]
  ------------------
 4097|       |
 4098|   299k|        return it;
 4099|   303k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3877|   713k|    {
 3878|   713k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   713k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 713k]
  |  |  |  Branch (1014:45): [True: 0, False: 713k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   713k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   713k|        return read_while1_code_unit(
 3887|   713k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   713k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  752|   713k|        : m_fptr([](storage fn,
  753|   713k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   713k|              cvref<T> obj = *get<T>(fn);
  755|   713k|              if constexpr (std::is_void_v<R>) {
  756|   713k|                  obj(static_cast<decltype(args)>(args)...);
  757|   713k|              }
  758|   713k|              else {
  759|   713k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   713k|              }
  761|   713k|          }),
  762|   713k|          m_storage(std::addressof(f))
  763|   713k|    {
  764|   713k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.07M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.07M|              else {
  759|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.07M|              }
  761|  1.07M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  689|  1.07M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.07M|        else if constexpr (std::is_object_v<T>) {
  694|  1.07M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.07M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3887|  1.07M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|   713k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   713k|        {
  668|   713k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1700|   380k|    {
 1701|   380k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   380k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  27.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  27.3k|        {
  668|  27.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  90.1k|        : m_fptr([](storage fn,
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|  90.1k|              if constexpr (std::is_void_v<R>) {
  756|  90.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  90.1k|              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
  762|  90.1k|          m_storage(std::addressof(f))
  763|  90.1k|    {
  764|  90.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  90.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  90.1k|        else if constexpr (std::is_object_v<T>) {
  694|  90.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  90.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  90.1k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3780|   418k|    {
 3781|   418k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 418k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   418k|        return read_source_impl(range);
 3787|   418k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  90.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  90.1k|        {
  668|  90.1k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   117k|    {
 4298|   117k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   117k|#if !SCN_DISABLE_LOCALE
 4301|   117k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 27.3k, False: 90.1k]
  ------------------
 4302|  27.3k|            return read_impl<Range>(
 4303|  27.3k|                range, rd,
 4304|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  27.3k|                },
 4307|  27.3k|                value, loc);
 4308|  27.3k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  90.1k|        return read_impl<Range>(
 4314|  90.1k|            range, rd,
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
 4317|  90.1k|            },
 4318|  90.1k|            value);
 4319|   117k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   158k|    {
 4336|   158k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   158k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.2k, False: 138k]
  |  |  ------------------
  ------------------
 4338|  20.2k|            return unexpected(r.error());
 4339|  20.2k|        }
 4340|       |
 4341|   138k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.2k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.2k|    }                                                  \
  |  |  |  | 3995|   158k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   114k|        return ranges::next(range.begin(), n);
 4343|   138k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  772|   511k|    {
  773|   511k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|   511k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  27.3k|        : m_fptr([](storage fn,
  753|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  27.3k|              cvref<T> obj = *get<T>(fn);
  755|  27.3k|              if constexpr (std::is_void_v<R>) {
  756|  27.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  27.3k|              }
  758|  27.3k|              else {
  759|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  27.3k|              }
  761|  27.3k|          }),
  762|  27.3k|          m_storage(std::addressof(f))
  763|  27.3k|    {
  764|  27.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  27.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  27.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  27.3k|              else {
  759|  27.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  27.3k|              }
  761|  27.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  27.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  27.3k|        else if constexpr (std::is_object_v<T>) {
  694|  27.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  27.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  27.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  27.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  27.3k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3794|  92.2k|    {
 3795|  92.2k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3796|  92.2k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1013|  92.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 92.2k]
  |  |  ------------------
  ------------------
 3797|      0|            m_locale_options.thousands_sep = CharT{0};
 3798|      0|        }
 3799|       |
 3800|  92.2k|        return read_source_impl(range);
 3801|  92.2k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3820|   511k|    {
 3821|   511k|        SCN_TRY(sign_result,
  ------------------
  |  | 3996|   511k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   511k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   511k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   511k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 511k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   511k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3822|   511k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3823|   511k|        auto it = sign_result.first;
 3824|   511k|        m_sign = sign_result.second;
 3825|       |
 3826|   511k|        auto digits_begin = it;
 3827|   511k|        auto r = ranges::subrange{it, range.end()};
 3828|       |        if constexpr (ranges::contiguous_range<Range> &&
 3829|   511k|                      ranges::sized_range<Range>) {
 3830|   511k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1014|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 511k]
  |  |  |  Branch (1014:45): [True: 0, False: 511k]
  |  |  |  Branch (1014:45): [True: 0, False: 511k]
  |  |  ------------------
  ------------------
 3831|   511k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3832|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|      0|    }                                                  \
  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3833|      0|                    it,
 3834|      0|                    do_read_source_impl(
 3835|      0|                        r,
 3836|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3837|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3838|      0|            }
 3839|   511k|            else {
 3840|   511k|                auto cb = [&](const auto& rr)
 3841|   511k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   511k|                    auto res = read_all(rr);
 3843|   511k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3844|   511k|                        return detail::unexpected_scan_error(
 3845|   511k|                            scan_error::invalid_scanned_value,
 3846|   511k|                            "Invalid float value");
 3847|   511k|                    }
 3848|   511k|                    return res;
 3849|   511k|                };
 3850|   511k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3991|   511k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   511k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   511k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 61.2k, False: 449k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  61.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  61.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  61.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  61.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  61.2k|    }                                                  \
  |  | 3995|   511k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   511k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3851|   449k|            }
 3852|       |        }
 3853|       |        else {
 3854|       |            SCN_TRY_ASSIGN(
 3855|       |                it,
 3856|       |                do_read_source_impl(
 3857|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3858|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3859|       |        }
 3860|       |
 3861|   511k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3862|       |
 3863|   449k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3863:13): [True: 449k, False: 0]
  |  Branch (3863:48): [True: 449k, False: 0]
  ------------------
 3864|   449k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3864:13): [True: 449k, False: 0]
  ------------------
 3865|   449k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3865:13): [True: 449k, False: 0]
  ------------------
 3866|   449k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3867|   449k|        }
 3868|       |
 3869|   449k|        handle_separators();
 3870|       |
 3871|   449k|        return it;
 3872|   511k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3914|   511k|    {
 3915|   511k|        auto it = range.begin();
 3916|   511k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3916:73): [True: 511k, False: 0]
  ------------------
 3917|   511k|            return unexpected(r.error());
 3918|   511k|        }
 3919|      0|        else {
 3920|      0|            it = *r;
 3921|      0|        }
 3922|       |
 3923|      0|        if (auto r = read_matching_string_classic_nocase(
 3924|      0|                ranges::subrange{it, range.end()}, "inity");
 3925|      0|            !r) {
  ------------------
  |  Branch (3925:13): [True: 0, False: 0]
  ------------------
 3926|      0|            m_kind = float_kind::inf_short;
 3927|      0|            return it;
 3928|      0|        }
 3929|      0|        else {
 3930|      0|            m_kind = float_kind::inf_long;
 3931|      0|            return *r;
 3932|      0|        }
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3937|   511k|    {
 3938|   511k|        auto it = range.begin();
 3939|   511k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3939:73): [True: 511k, False: 0]
  ------------------
 3940|   511k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|   511k|                scan_error::invalid_scanned_value,
 3942|   511k|                "Invalid floating-point NaN value"));
 3943|   511k|        }
 3944|      0|        else {
 3945|      0|            it = *r;
 3946|      0|        }
 3947|       |
 3948|      0|        if (auto r =
 3949|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3950|      0|            !r) {
  ------------------
  |  Branch (3950:13): [True: 0, False: 0]
  ------------------
 3951|      0|            m_kind = float_kind::nan_simple;
 3952|      0|            return it;
 3953|      0|        }
 3954|      0|        else {
 3955|      0|            it = *r;
 3956|      0|        }
 3957|       |
 3958|      0|        auto payload_beg_it = it;
 3959|      0|        it = read_while_code_unit(
 3960|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3961|      0|                return is_ascii_char(ch) &&
 3962|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3963|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3964|      0|            });
 3965|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3966|       |
 3967|      0|        m_kind = float_kind::nan_with_payload;
 3968|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                                             ')')) {
 3970|      0|            return *r;
 3971|      0|        }
 3972|      0|        return detail::unexpected_scan_error(
 3973|      0|            scan_error::invalid_scanned_value,
 3974|      0|            "Invalid floating-point NaN payload");
 3975|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3907|   331k|    {
 3908|   331k|        return read_matching_string_classic_nocase(range, "0x");
 3909|   331k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2153|   309k|{
 2154|   309k|    auto it = read_while_code_unit(range, pred);
 2155|   309k|    if (it == range.begin()) {
  ------------------
  |  Branch (2155:9): [True: 178k, False: 130k]
  ------------------
 2156|   178k|        return unexpected(parse_error::error);
 2157|   178k|    }
 2158|   130k|    return it;
 2159|   309k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3980|  70.6k|    {
 3981|  70.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3981:18): [True: 6.72k, False: 63.9k]
  ------------------
 3982|  6.72k|            auto beg_exp_it = range.begin();
 3983|  6.72k|            auto it = *r;
 3984|       |
 3985|  6.72k|            if (auto r_sign =
  ------------------
  |  Branch (3985:22): [True: 6.69k, False: 24]
  ------------------
 3986|  6.72k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3987|  6.69k|                it = r_sign->first;
 3988|  6.69k|            }
 3989|       |
 3990|  6.72k|            if (auto r_exp = read_while1_code_unit(
 3991|  6.72k|                    ranges::subrange{it, range.end()},
 3992|  6.72k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3993|  6.72k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1014|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 538, False: 6.18k]
  |  |  ------------------
  ------------------
 3994|    538|                it = beg_exp_it;
 3995|    538|            }
 3996|  6.18k|            else {
 3997|  6.18k|                it = *r_exp;
 3998|  6.18k|            }
 3999|       |
 4000|  6.72k|            return it;
 4001|  6.72k|        }
 4002|  63.9k|        return range.begin();
 4003|  70.6k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  752|  6.72k|        : m_fptr([](storage fn,
  753|  6.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  6.72k|              cvref<T> obj = *get<T>(fn);
  755|  6.72k|              if constexpr (std::is_void_v<R>) {
  756|  6.72k|                  obj(static_cast<decltype(args)>(args)...);
  757|  6.72k|              }
  758|  6.72k|              else {
  759|  6.72k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  6.72k|              }
  761|  6.72k|          }),
  762|  6.72k|          m_storage(std::addressof(f))
  763|  6.72k|    {
  764|  6.72k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  753|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  18.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  18.3k|              else {
  759|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  18.3k|              }
  761|  18.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  689|  18.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  18.3k|        else if constexpr (std::is_object_v<T>) {
  694|  18.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  18.3k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3992|  18.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  666|  6.72k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  6.72k|        {
  668|  6.72k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4049|   179k|    {
 4050|   179k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4051|   179k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4051:35): [True: 107k, False: 72.3k]
  |  Branch (4051:50): [True: 22.8k, False: 84.7k]
  ------------------
 4052|       |
 4053|   179k|        auto it = ranges::begin(range);
 4054|   179k|        std::ptrdiff_t digits_count = 0;
 4055|       |
 4056|   179k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4057|   179k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 57.5k, False: 122k]
  |  |  ------------------
  ------------------
 4058|  57.5k|            return r.transform_error(
 4059|  57.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4060|  57.5k|                                              "Invalid floating-point value"));
 4061|  57.5k|        }
 4062|   122k|        else {
 4063|   122k|            digits_count += ranges::distance(it, *r);
 4064|   122k|            it = *r;
 4065|   122k|        }
 4066|       |
 4067|   122k|        m_integral_part_length = digits_count;
 4068|   122k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4068:18): [True: 2.20k, False: 120k]
  ------------------
 4069|   122k|                                             m_locale_options.decimal_point)) {
 4070|  2.20k|            it = *r;
 4071|  2.20k|        }
 4072|       |
 4073|   122k|        if (auto r =
  ------------------
  |  Branch (4073:18): [True: 1.79k, False: 120k]
  ------------------
 4074|   122k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4075|  1.79k|            digits_count += ranges::distance(it, *r);
 4076|  1.79k|            it = *r;
 4077|  1.79k|        }
 4078|       |
 4079|   122k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1014|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 4080|      0|            return detail::unexpected_scan_error(
 4081|      0|                scan_error::invalid_scanned_value,
 4082|      0|                "No significand digits in float");
 4083|      0|        }
 4084|       |
 4085|   122k|        auto beg_exp_it = it;
 4086|   122k|        if (allowed_exp) {
  ------------------
  |  Branch (4086:13): [True: 70.6k, False: 51.7k]
  ------------------
 4087|  70.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4088|  70.6k|        }
 4089|   122k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4089:13): [True: 5.63k, False: 116k]
  |  Branch (4089:29): [True: 3.51k, False: 2.12k]
  ------------------
 4090|  3.51k|            return detail::unexpected_scan_error(
 4091|  3.51k|                scan_error::invalid_scanned_value,
 4092|  3.51k|                "No exponent given to scientific float");
 4093|  3.51k|        }
 4094|       |
 4095|   118k|        m_kind =
 4096|   118k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4096:13): [True: 112k, False: 6.18k]
  ------------------
 4097|       |
 4098|   118k|        return it;
 4099|   122k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3877|   302k|    {
 3878|   302k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1014|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 302k]
  |  |  |  Branch (1014:45): [True: 0, False: 302k]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3879|   302k|                         thsep_allowed)) {
 3880|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3881|      0|                return char_to_int(ch) < 10 ||
 3882|      0|                       ch == m_locale_options.thousands_sep;
 3883|      0|            });
 3884|      0|        }
 3885|       |
 3886|   302k|        return read_while1_code_unit(
 3887|   302k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   302k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  752|   302k|        : m_fptr([](storage fn,
  753|   302k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   302k|              cvref<T> obj = *get<T>(fn);
  755|   302k|              if constexpr (std::is_void_v<R>) {
  756|   302k|                  obj(static_cast<decltype(args)>(args)...);
  757|   302k|              }
  758|   302k|              else {
  759|   302k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   302k|              }
  761|   302k|          }),
  762|   302k|          m_storage(std::addressof(f))
  763|   302k|    {
  764|   302k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  753|   453k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   453k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   453k|              else {
  759|   453k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   453k|              }
  761|   453k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  689|   453k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   453k|        else if constexpr (std::is_object_v<T>) {
  694|   453k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   453k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3887|   453k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   302k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   302k|        {
  668|   302k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4106|   511k|    {
 4107|   511k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4108|   511k|        const bool allowed_nonhex =
 4109|   511k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4110|   511k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4111|       |
 4112|   511k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4112:39): [True: 511k, False: 0]
  |  Branch (4112:45): [True: 0, False: 511k]
  ------------------
 4113|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4114|      0|                scan_error::invalid_scanned_value,
 4115|      0|                "Invalid infinite floating-point value"));
 4116|      0|        }
 4117|   511k|        else if (r) {
  ------------------
  |  Branch (4117:18): [True: 0, False: 511k]
  ------------------
 4118|      0|            return *r;
 4119|      0|        }
 4120|       |
 4121|   511k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4121:39): [True: 511k, False: 0]
  |  Branch (4121:45): [True: 0, False: 511k]
  ------------------
 4122|      0|            return unexpected(r.error());
 4123|      0|        }
 4124|   511k|        else if (r) {
  ------------------
  |  Branch (4124:18): [True: 0, False: 511k]
  ------------------
 4125|      0|            return *r;
 4126|      0|        }
 4127|       |
 4128|   511k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4128:13): [True: 331k, False: 179k]
  |  Branch (4128:28): [True: 100k, False: 230k]
  ------------------
 4129|       |            // only hex allowed:
 4130|       |            // prefix "0x" allowed, not required
 4131|   100k|            auto it = range.begin();
 4132|       |
 4133|   100k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4133:22): [True: 204, False: 100k]
  ------------------
 4134|    204|                m_kind = float_kind::hex_with_prefix;
 4135|    204|                it = *r;
 4136|    204|            }
 4137|   100k|            else {
 4138|   100k|                m_kind = float_kind::hex_without_prefix;
 4139|   100k|            }
 4140|       |
 4141|   100k|            return read_hex(ranges::subrange{it, range.end()});
 4142|   100k|        }
 4143|   410k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4143:13): [True: 179k, False: 230k]
  |  Branch (4143:29): [True: 179k, False: 0]
  ------------------
 4144|       |            // only nonhex allowed:
 4145|       |            // no prefix allowed
 4146|   179k|            m_kind = float_kind::generic;
 4147|   179k|            return read_regular_float(range);
 4148|   179k|        }
 4149|       |        // both hex and nonhex allowed:
 4150|       |        // check for "0x" prefix -> hex,
 4151|       |        // regular otherwise
 4152|       |
 4153|   230k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1014|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 470, False: 230k]
  |  |  ------------------
  ------------------
 4154|    470|            m_kind = float_kind::hex_with_prefix;
 4155|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4156|    470|        }
 4157|       |
 4158|   230k|        m_kind = float_kind::generic;
 4159|   230k|        return read_regular(range);
 4160|   230k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3841|   331k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3842|   331k|                    auto res = read_all(rr);
 3843|   331k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1014|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 155, False: 331k]
  |  |  ------------------
  ------------------
 3844|    155|                        return detail::unexpected_scan_error(
 3845|    155|                            scan_error::invalid_scanned_value,
 3846|    155|                            "Invalid float value");
 3847|    155|                    }
 3848|   331k|                    return res;
 3849|   331k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1963|   331k|{
 1964|   331k|    return ranges::next(range.begin(), range.end());
 1965|   331k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   331k|    {
  313|   331k|        ranges::advance(x, bound);
  314|   331k|        return x;
  315|   331k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   331k|    {
  275|   331k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   331k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1700|   449k|    {
 1701|   449k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   449k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1744|   449k|    {
 1745|   449k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|   449k|                      ranges::sized_range<Range>) {
 1750|   449k|            m_storage.reset();
 1751|   449k|            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   449k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  27.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  27.3k|        {
  668|  27.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  90.1k|        : m_fptr([](storage fn,
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|  90.1k|              if constexpr (std::is_void_v<R>) {
  756|  90.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  90.1k|              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
  762|  90.1k|          m_storage(std::addressof(f))
  763|  90.1k|    {
  764|  90.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  90.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  90.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  90.1k|              else {
  759|  90.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  90.1k|              }
  761|  90.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  90.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  90.1k|        else if constexpr (std::is_object_v<T>) {
  694|  90.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  90.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  90.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  90.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  90.1k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3780|   419k|    {
 3781|   419k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1014|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 3782|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3783|      0|                classic_with_thsep_tag{}};
 3784|      0|        }
 3785|       |
 3786|   419k|        return read_source_impl(range);
 3787|   419k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  90.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  90.1k|        {
  668|  90.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   127k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   127k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   127k|            auto rd = make_reader<T, char_type>();
 6336|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   127k|    do {                                                            \
  |  | 3985|   127k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   127k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   127k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 127k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   127k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   127k|                return impl(rd, range, value);
 6341|   127k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   127k|    {
 6261|   127k|        const bool need_skipped_width =
 6262|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 127k]
  |  Branch (6262:33): [True: 0, False: 127k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   127k|        auto it = rng.begin();
 6266|   127k|        std::ptrdiff_t prefix_width = 0;
 6267|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 127k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   127k|        else {
 6275|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.06k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.06k|    }                                                  \
  |  |  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   126k|            std::tie(it, prefix_width) = prefix_result;
 6277|   126k|        }
 6278|   126k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   126k|        std::ptrdiff_t value_width = 0;
 6282|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 126k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   126k|        else {
 6298|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.1k, False: 92.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.1k|    }                                                  \
  |  | 3995|   126k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  92.0k|                                             specs, value, loc));
 6300|       |
 6301|  92.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 92.0k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  92.0k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  92.0k|        std::ptrdiff_t postfix_width = 0;
 6310|  92.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 91.5k, False: 532]
  ------------------
 6311|  91.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  91.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  91.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  91.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  91.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  91.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  91.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  91.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  91.5k|                                 value_width));
 6315|  91.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  91.5k|        }
 6317|       |
 6318|  92.0k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  92.0k|    do {                                                            \
  |  | 3985|  92.0k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  92.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 92.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  92.0k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  92.0k|            specs, prefix_width, value_width, postfix_width));
 6320|  92.0k|        return it;
 6321|  92.0k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3806|   283k|    {
 3807|   283k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   283k|        const std::ptrdiff_t sign_len =
 3810|   283k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.20k, False: 281k]
  ------------------
 3811|       |
 3812|   283k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 24.8k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  24.8k|    }                                                  \
  |  |  |  | 3995|   283k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   258k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   283k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   126k|    {
 4298|   126k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   126k|#if !SCN_DISABLE_LOCALE
 4301|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 31.6k, False: 94.5k]
  ------------------
 4302|  31.6k|            return read_impl<Range>(
 4303|  31.6k|                range, rd,
 4304|  31.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  31.6k|                },
 4307|  31.6k|                value, loc);
 4308|  31.6k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  94.5k|        return read_impl<Range>(
 4314|  94.5k|            range, rd,
 4315|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.5k|                return r.read_source(SCN_FWD(args)...);
 4317|  94.5k|            },
 4318|  94.5k|            value);
 4319|   126k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   173k|    {
 4336|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 43.3k, False: 130k]
  |  |  ------------------
  ------------------
 4338|  43.3k|            return unexpected(r.error());
 4339|  43.3k|        }
 4340|       |
 4341|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 936, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    936|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    936|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    936|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    936|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    936|    }                                                  \
  |  |  |  | 3995|   173k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   129k|        return ranges::next(range.begin(), n);
 4343|   130k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  31.6k|        : m_fptr([](storage fn,
  753|  31.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.6k|              cvref<T> obj = *get<T>(fn);
  755|  31.6k|              if constexpr (std::is_void_v<R>) {
  756|  31.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  31.6k|              }
  758|  31.6k|              else {
  759|  31.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.6k|              }
  761|  31.6k|          }),
  762|  31.6k|          m_storage(std::addressof(f))
  763|  31.6k|    {
  764|  31.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  31.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  31.6k|              else {
  759|  31.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.6k|              }
  761|  31.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  31.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  31.6k|        else if constexpr (std::is_object_v<T>) {
  694|  31.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  31.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  31.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  31.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  31.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  31.6k|        {
  668|  31.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  94.5k|        : m_fptr([](storage fn,
  753|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.5k|              cvref<T> obj = *get<T>(fn);
  755|  94.5k|              if constexpr (std::is_void_v<R>) {
  756|  94.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  94.5k|              }
  758|  94.5k|              else {
  759|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.5k|              }
  761|  94.5k|          }),
  762|  94.5k|          m_storage(std::addressof(f))
  763|  94.5k|    {
  764|  94.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  94.5k|              else {
  759|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.5k|              }
  761|  94.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  94.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  94.5k|        else if constexpr (std::is_object_v<T>) {
  694|  94.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  94.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  94.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  94.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  94.5k|        {
  668|  94.5k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   126k|    {
 4298|   126k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   126k|#if !SCN_DISABLE_LOCALE
 4301|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 31.7k, False: 94.5k]
  ------------------
 4302|  31.7k|            return read_impl<Range>(
 4303|  31.7k|                range, rd,
 4304|  31.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  31.7k|                },
 4307|  31.7k|                value, loc);
 4308|  31.7k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  94.5k|        return read_impl<Range>(
 4314|  94.5k|            range, rd,
 4315|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.5k|                return r.read_source(SCN_FWD(args)...);
 4317|  94.5k|            },
 4318|  94.5k|            value);
 4319|   126k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   173k|    {
 4336|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.3k, False: 153k]
  |  |  ------------------
  ------------------
 4338|  20.3k|            return unexpected(r.error());
 4339|  20.3k|        }
 4340|       |
 4341|   153k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.9k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.9k|    }                                                  \
  |  |  |  | 3995|   173k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   129k|        return ranges::next(range.begin(), n);
 4343|   153k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  31.7k|        : m_fptr([](storage fn,
  753|  31.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.7k|              cvref<T> obj = *get<T>(fn);
  755|  31.7k|              if constexpr (std::is_void_v<R>) {
  756|  31.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  31.7k|              }
  758|  31.7k|              else {
  759|  31.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.7k|              }
  761|  31.7k|          }),
  762|  31.7k|          m_storage(std::addressof(f))
  763|  31.7k|    {
  764|  31.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  31.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  31.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  31.7k|              else {
  759|  31.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  31.7k|              }
  761|  31.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  31.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  31.7k|        else if constexpr (std::is_object_v<T>) {
  694|  31.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  31.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  31.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  31.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  31.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  31.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  31.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  31.7k|        {
  668|  31.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  94.5k|        : m_fptr([](storage fn,
  753|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.5k|              cvref<T> obj = *get<T>(fn);
  755|  94.5k|              if constexpr (std::is_void_v<R>) {
  756|  94.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  94.5k|              }
  758|  94.5k|              else {
  759|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.5k|              }
  761|  94.5k|          }),
  762|  94.5k|          m_storage(std::addressof(f))
  763|  94.5k|    {
  764|  94.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  94.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  94.5k|              else {
  759|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  94.5k|              }
  761|  94.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  94.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  94.5k|        else if constexpr (std::is_object_v<T>) {
  694|  94.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  94.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  94.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  94.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  94.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  94.5k|        {
  668|  94.5k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   130k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   130k|            auto rd = make_reader<T, char_type>();
 6336|   130k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   130k|    do {                                                            \
  |  | 3985|   130k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 130k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   130k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   130k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 130k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   130k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   130k|                return impl(rd, range, value);
 6341|   130k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   130k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6260|   130k|    {
 6261|   130k|        const bool need_skipped_width =
 6262|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 130k]
  |  Branch (6262:33): [True: 0, False: 130k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   130k|        auto it = rng.begin();
 6266|   130k|        std::ptrdiff_t prefix_width = 0;
 6267|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 130k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   130k|        else {
 6275|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.14k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.14k|    }                                                  \
  |  |  |  | 3995|   130k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   129k|            std::tie(it, prefix_width) = prefix_result;
 6277|   129k|        }
 6278|   129k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   129k|        std::ptrdiff_t value_width = 0;
 6282|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 129k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   129k|        else {
 6298|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.0k, False: 95.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.0k|    }                                                  \
  |  | 3995|   129k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  95.1k|                                             specs, value, loc));
 6300|       |
 6301|  95.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 95.1k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  95.1k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  95.1k|        std::ptrdiff_t postfix_width = 0;
 6310|  95.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 94.5k, False: 586]
  ------------------
 6311|  94.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  94.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  94.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  94.5k|                                 value_width));
 6315|  94.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  94.5k|        }
 6317|       |
 6318|  95.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  95.1k|    do {                                                            \
  |  | 3985|  95.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 95.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  95.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  95.1k|            specs, prefix_width, value_width, postfix_width));
 6320|  95.1k|        return it;
 6321|  95.1k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3806|   293k|    {
 3807|   293k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1079|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3808|       |
 3809|   293k|        const std::ptrdiff_t sign_len =
 3810|   293k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3810:13): [True: 2.25k, False: 290k]
  ------------------
 3811|       |
 3812|   293k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3996|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.6k, False: 269k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.6k|    }                                                  \
  |  |  |  | 3995|   293k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3813|   269k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3814|   293k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4297|   129k|    {
 4298|   129k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   129k|#if !SCN_DISABLE_LOCALE
 4301|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 33.1k, False: 96.0k]
  ------------------
 4302|  33.1k|            return read_impl<Range>(
 4303|  33.1k|                range, rd,
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  33.1k|                },
 4307|  33.1k|                value, loc);
 4308|  33.1k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  96.0k|        return read_impl<Range>(
 4314|  96.0k|            range, rd,
 4315|  96.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.0k|                return r.read_source(SCN_FWD(args)...);
 4317|  96.0k|            },
 4318|  96.0k|            value);
 4319|   129k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4335|   178k|    {
 4336|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 44.0k, False: 134k]
  |  |  ------------------
  ------------------
 4338|  44.0k|            return unexpected(r.error());
 4339|  44.0k|        }
 4340|       |
 4341|   134k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 142, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    142|    }                                                  \
  |  |  |  | 3995|   178k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   134k|        return ranges::next(range.begin(), n);
 4343|   134k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  33.1k|        : m_fptr([](storage fn,
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|  33.1k|              if constexpr (std::is_void_v<R>) {
  756|  33.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  33.1k|              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
  762|  33.1k|          m_storage(std::addressof(f))
  763|  33.1k|    {
  764|  33.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  33.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  33.1k|        else if constexpr (std::is_object_v<T>) {
  694|  33.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  33.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  33.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  33.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  33.1k|        {
  668|  33.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  752|  96.0k|        : m_fptr([](storage fn,
  753|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.0k|              cvref<T> obj = *get<T>(fn);
  755|  96.0k|              if constexpr (std::is_void_v<R>) {
  756|  96.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.0k|              }
  758|  96.0k|              else {
  759|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.0k|              }
  761|  96.0k|          }),
  762|  96.0k|          m_storage(std::addressof(f))
  763|  96.0k|    {
  764|  96.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  753|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  96.0k|              else {
  759|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.0k|              }
  761|  96.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  96.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  96.0k|        else if constexpr (std::is_object_v<T>) {
  694|  96.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  96.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4315|  96.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  96.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  96.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.0k|        {
  668|  96.0k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4297|   129k|    {
 4298|   129k|        float_reader<CharT> rd{get_options(specs)};
 4299|       |
 4300|   129k|#if !SCN_DISABLE_LOCALE
 4301|   129k|        if (specs.localized) {
  ------------------
  |  Branch (4301:13): [True: 33.1k, False: 96.0k]
  ------------------
 4302|  33.1k|            return read_impl<Range>(
 4303|  33.1k|                range, rd,
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4306|  33.1k|                },
 4307|  33.1k|                value, loc);
 4308|  33.1k|        }
 4309|       |#else
 4310|       |        SCN_UNUSED(loc);
 4311|       |#endif
 4312|       |
 4313|  96.0k|        return read_impl<Range>(
 4314|  96.0k|            range, rd,
 4315|  96.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.0k|                return r.read_source(SCN_FWD(args)...);
 4317|  96.0k|            },
 4318|  96.0k|            value);
 4319|   129k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4335|   178k|    {
 4336|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4337|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 20.6k, False: 158k]
  |  |  ------------------
  ------------------
 4338|  20.6k|            return unexpected(r.error());
 4339|  20.6k|        }
 4340|       |
 4341|   158k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3996|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 23.5k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  23.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  23.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  23.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  23.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  23.5k|    }                                                  \
  |  |  |  | 3995|   178k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4342|   134k|        return ranges::next(range.begin(), n);
 4343|   158k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  33.1k|        : m_fptr([](storage fn,
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|  33.1k|              if constexpr (std::is_void_v<R>) {
  756|  33.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  33.1k|              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
  762|  33.1k|          m_storage(std::addressof(f))
  763|  33.1k|    {
  764|  33.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  33.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  33.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  33.1k|              else {
  759|  33.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  33.1k|              }
  761|  33.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  33.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  33.1k|        else if constexpr (std::is_object_v<T>) {
  694|  33.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  33.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4304|  33.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4305|  33.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1085|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4306|  33.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  33.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  33.1k|        {
  668|  33.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  752|  96.0k|        : m_fptr([](storage fn,
  753|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.0k|              cvref<T> obj = *get<T>(fn);
  755|  96.0k|              if constexpr (std::is_void_v<R>) {
  756|  96.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  96.0k|              }
  758|  96.0k|              else {
  759|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.0k|              }
  761|  96.0k|          }),
  762|  96.0k|          m_storage(std::addressof(f))
  763|  96.0k|    {
  764|  96.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  753|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  96.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  96.0k|              else {
  759|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  96.0k|              }
  761|  96.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  689|  96.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  96.0k|        else if constexpr (std::is_object_v<T>) {
  694|  96.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  96.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4315|  96.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4316|  96.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4317|  96.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  96.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  96.0k|        {
  668|  96.0k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   514k|{
 2220|   514k|    auto it = range.begin();
 2221|   905k|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 901k, False: 3.69k]
  ------------------
 2222|   901k|        const auto val =
 2223|   901k|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|   901k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|   901k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 901k, False: 0]
  |  |  ------------------
  ------------------
 2225|   901k|            const auto cp = detail::decode_code_point_exhaustive(
 2226|   901k|                std::basic_string_view<detail::char_t<Range>>{
 2227|   901k|                    val.codepoint.data(), val.codepoint.size()});
 2228|   901k|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 510k, False: 390k]
  ------------------
 2229|   510k|                return it;
 2230|   510k|            }
 2231|   901k|        }
 2232|   390k|        it = val.iterator;
 2233|   390k|    }
 2234|       |
 2235|  3.69k|    return it;
 2236|   514k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|   901k|{
 2024|   901k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|   901k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   901k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|   901k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|   901k|    auto it = range.begin();
 2028|   901k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|   901k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 901k]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|   901k|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 901k, False: 0]
  ------------------
 2037|   901k|        ++it;
 2038|   901k|        return {it, string_type(1, *range.begin())};
 2039|   901k|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|   901k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|   901k|    {
 2015|   901k|        return !codepoint.empty();
 2016|   901k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   514k|{
 2242|   514k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   514k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   514k|{
 3129|   514k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 514k, False: 0]
  ------------------
 3130|   514k|        auto it = read_while_classic_space(range);
 3131|   514k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   514k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   514k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.69k, False: 510k]
  |  |  ------------------
  ------------------
 3133|  3.69k|            return unexpected(e);
 3134|  3.69k|        }
 3135|       |
 3136|   510k|        return it;
 3137|   514k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   514k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   514k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   514k|    else {
 2286|   514k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   514k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   514k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   514k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   514k|            return detail::is_cp_space(cp);
 2300|   514k|        });
 2301|   514k|    }
 2302|   514k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   514k|        : m_fptr([](storage fn,
  753|   514k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   514k|              cvref<T> obj = *get<T>(fn);
  755|   514k|              if constexpr (std::is_void_v<R>) {
  756|   514k|                  obj(static_cast<decltype(args)>(args)...);
  757|   514k|              }
  758|   514k|              else {
  759|   514k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   514k|              }
  761|   514k|          }),
  762|   514k|          m_storage(std::addressof(f))
  763|   514k|    {
  764|   514k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   901k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   901k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   901k|              else {
  759|   901k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   901k|              }
  761|   901k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   901k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   901k|        else if constexpr (std::is_object_v<T>) {
  694|   901k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   901k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   901k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   901k|            return detail::is_cp_space(cp);
 2300|   901k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   514k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   514k|        {
  668|   514k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3650|  13.3k|    {
 3651|  13.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  13.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3652|  13.3k|        return read_default_with_base(range, value, 10);
 3653|  13.3k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3614|  13.3k|    {
 3615|  13.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3996|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.18k, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.18k|    }                                                  \
  |  |  |  | 3995|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3616|  11.1k|                                   .transform_error(make_eof_scan_error));
 3617|       |
 3618|  11.1k|        if constexpr (!std::is_signed_v<T>) {
 3619|  11.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3619:17): [True: 0, False: 11.1k]
  ------------------
 3620|      0|                return detail::unexpected_scan_error(
 3621|      0|                    scan_error::invalid_scanned_value,
 3622|      0|                    "Unexpected '-' sign when parsing an "
 3623|      0|                    "unsigned value");
 3624|      0|            }
 3625|  11.1k|        }
 3626|       |
 3627|  11.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3627:13): [True: 0, False: 11.1k]
  ------------------
 3628|      0|            value = T{0};
 3629|      0|            return std::next(prefix_result.iterator);
 3630|      0|        }
 3631|       |
 3632|  22.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3996|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3633|  22.2k|                parse_integer_digits_without_thsep(
 3634|  22.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3635|  22.2k|                    prefix_result.parsed_base));
 3636|       |
 3637|  22.2k|        auto buf = make_contiguous_buffer(
 3638|  22.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3639|  22.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3996|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.21k, False: 9.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.21k|    }                                                  \
  |  |  |  | 3995|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3640|  9.91k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3641|  9.91k|                                    prefix_result.parsed_base));
 3642|       |
 3643|  9.91k|        return ranges::next(prefix_result.iterator,
 3644|  9.91k|                            ranges::distance(buf.view().begin(), result_it));
 3645|  22.2k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3439|  13.3k|{
 3440|  13.3k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3996|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.18k, False: 11.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.18k|    }                                                  \
  |  |  |  | 3995|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3441|  11.1k|    auto [base_prefix_begin_it, sign] = sign_result;
 3442|       |
 3443|  11.1k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3444|  11.1k|        parse_integer_base_prefix(
 3445|  11.1k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3446|       |
 3447|  11.1k|    if (parsed_zero) {
  ------------------
  |  Branch (3447:9): [True: 0, False: 11.1k]
  ------------------
 3448|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3448:13): [True: 0, False: 0]
  ------------------
 3449|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3449:13): [True: 0, False: 0]
  ------------------
 3450|      0|            digits_begin_it = base_prefix_begin_it;
 3451|      0|        }
 3452|      0|        else {
 3453|      0|            parsed_zero = false;
 3454|      0|        }
 3455|      0|    }
 3456|  11.1k|    else {
 3457|  11.1k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3457:13): [True: 0, False: 11.1k]
  ------------------
 3458|  11.1k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3458:13): [True: 290, False: 10.8k]
  ------------------
 3459|    290|            digits_begin_it = base_prefix_begin_it;
 3460|    290|        }
 3461|  11.1k|    }
 3462|       |
 3463|  11.1k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3463:9): [True: 11.1k, False: 0]
  ------------------
 3464|  11.1k|        sign = sign_type::plus_sign;
 3465|  11.1k|    }
 3466|  11.1k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3467|  11.1k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3468|  13.3k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3320|  13.3k|{
 3321|  13.3k|    auto r = read_one_of_code_unit(range, "+-");
 3322|  13.3k|    if (!r) {
  ------------------
  |  Branch (3322:9): [True: 13.3k, False: 0]
  ------------------
 3323|  13.3k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3323:13): [True: 11.1k, False: 2.18k]
  ------------------
 3324|  11.1k|            return std::pair{range.begin(), sign_type::default_sign};
 3325|  11.1k|        }
 3326|  2.18k|        return unexpected(eof_error::eof);
 3327|  13.3k|    }
 3328|       |
 3329|      0|    auto& it = *r;
 3330|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3330:9): [True: 0, False: 0]
  ------------------
 3331|      0|        return std::pair{it, sign_type::minus_sign};
 3332|      0|    }
 3333|      0|    return std::pair{it, sign_type::plus_sign};
 3334|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2434|  13.3k|{
 2435|  13.3k|    auto it = read_code_unit(range);
 2436|  13.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.18k, False: 11.1k]
  |  |  ------------------
  ------------------
 2437|  2.18k|        return unexpected(make_eof_parse_error(it.error()));
 2438|  2.18k|    }
 2439|       |
 2440|  22.2k|    for (auto ch : str) {
  ------------------
  |  Branch (2440:18): [True: 22.2k, False: 11.1k]
  ------------------
 2441|  22.2k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2441:13): [True: 0, False: 22.2k]
  ------------------
 2442|      0|            return *it;
 2443|      0|        }
 2444|  22.2k|    }
 2445|       |
 2446|  11.1k|    return unexpected(parse_error::error);
 2447|  11.1k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1970|  13.3k|{
 1971|  13.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.18k, False: 11.1k]
  |  |  ------------------
  ------------------
 1972|  2.18k|        return unexpected(e);
 1973|  2.18k|    }
 1974|       |
 1975|  11.1k|    return ranges::next(range.begin());
 1976|  13.3k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  960|  13.3k|{
  961|  13.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.18k, False: 11.1k]
  |  |  ------------------
  ------------------
  962|  2.18k|        return eof_error::eof;
  963|  2.18k|    }
  964|  11.1k|    return eof_error::good;
  965|  13.3k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  954|  13.3k|{
  955|  13.3k|    return is_range_eof(r.begin(), r.end());
  956|  13.3k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2247|   828k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|   828k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|   828k|        auto buf = make_contiguous_buffer(range);
 2252|   828k|        auto it = find_classic_space_narrow_fast(buf.view());
 2253|   828k|        return ranges::next(range.begin(),
 2254|   828k|                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|       |    else {
 2257|       |        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|       |        return read_until_code_point(
 2269|       |            ranges::subrange{it, range.end()},
 2270|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|       |    }
 2272|   828k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1807|   828k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   828k|                  ranges::sized_range<Range>) {
 1811|   828k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   828k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1612|   828k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   828k|    {
 1614|   828k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1700|   828k|    {
 1701|   828k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   828k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1744|   828k|    {
 1745|   828k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|   828k|                                          std::basic_string<CharT>>) {
 1755|   828k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1085|   828k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1756|   828k|            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   828k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4206|   305k|    {
 4207|   305k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 36.0k, False: 269k]
  ------------------
 4208|  36.0k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  36.0k|        }
 4210|   269k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   305k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2247|   740k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   740k|    else {
 2257|   740k|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|   740k|        return read_until_code_point(
 2269|   740k|            ranges::subrange{it, range.end()},
 2270|   740k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   740k|    }
 2272|   740k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  752|   740k|        : m_fptr([](storage fn,
  753|   740k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   740k|              cvref<T> obj = *get<T>(fn);
  755|   740k|              if constexpr (std::is_void_v<R>) {
  756|   740k|                  obj(static_cast<decltype(args)>(args)...);
  757|   740k|              }
  758|   740k|              else {
  759|   740k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   740k|              }
  761|   740k|          }),
  762|   740k|          m_storage(std::addressof(f))
  763|   740k|    {
  764|   740k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  753|  1.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.30M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.30M|              else {
  759|  1.30M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.30M|              }
  761|  1.30M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  689|  1.30M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.30M|        else if constexpr (std::is_object_v<T>) {
  694|  1.30M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.30M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2270|  1.30M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  666|   740k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   740k|        {
  668|   740k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1700|   740k|    {
 1701|   740k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1702|   740k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1744|   740k|    {
 1745|   740k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|   740k|                                          std::basic_string<CharT>>) {
 1755|   740k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1085|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1756|   740k|            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|       |                           ranges::common_range<Range>) {
 1762|       |            auto beg_seg = range.begin().contiguous_segment();
 1763|       |            auto end_seg = range.end().contiguous_segment();
 1764|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1765|       |                             detail::to_address(end_seg.end()))) {
 1766|       |                auto& str = m_storage.emplace();
 1767|       |                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|       |                                                     range.begin().position()));
 1769|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|       |                m_view = string_view_type{str.data(), str.size()};
 1771|       |                return;
 1772|       |            }
 1773|       |
 1774|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|       |                                                            end_seg.data());
 1776|       |            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   740k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4206|   227k|    {
 4207|   227k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.15k, False: 226k]
  ------------------
 4208|  1.15k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.15k|        }
 4210|   226k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   227k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4206|   318k|    {
 4207|   318k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 38.2k, False: 280k]
  ------------------
 4208|  38.2k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  38.2k|        }
 4210|   280k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   318k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4206|   258k|    {
 4207|   258k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.18k, False: 257k]
  ------------------
 4208|  1.18k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.18k|        }
 4210|   257k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   258k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4206|   324k|    {
 4207|   324k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 40.1k, False: 284k]
  ------------------
 4208|  40.1k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  40.1k|        }
 4210|   284k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   324k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4206|   269k|    {
 4207|   269k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4207:13): [True: 1.33k, False: 268k]
  ------------------
 4208|  1.33k|            return std::copysign(value, static_cast<T>(-1.0));
 4209|  1.33k|        }
 4210|   268k|        return std::copysign(value, static_cast<T>(1.0));
 4211|   269k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   151k|{
 5922|   151k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.78k, False: 149k]
  |  |  ------------------
  ------------------
 5923|  1.78k|        return unexpected(e);
 5924|  1.78k|    }
 5925|       |
 5926|   149k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 149k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   149k|    return skip_classic_whitespace(range);
 5931|   149k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6009|  48.2k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  48.2k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  48.2k|            auto rd = make_reader<T, char_type>();
 6015|  48.2k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  48.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  48.2k|    {
 6002|  48.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 600, False: 47.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    600|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    600|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    600|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    600|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    600|    }                                                  \
  |  |  |  | 3995|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  47.6k|                        .transform_error(make_eof_scan_error));
 6004|  47.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  48.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  47.6k|    {
 4280|  47.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  47.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  47.6k|        float_reader<CharT> rd{};
 4283|  47.6k|        return read_impl<Range>(
 4284|  47.6k|            range, rd,
 4285|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.6k|                return r.read_source(SCN_FWD(args)...);
 4287|  47.6k|            },
 4288|  47.6k|            value);
 4289|  47.6k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3773|   301k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3759|   578k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  47.6k|        : m_fptr([](storage fn,
  753|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.6k|              cvref<T> obj = *get<T>(fn);
  755|  47.6k|              if constexpr (std::is_void_v<R>) {
  756|  47.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  47.6k|              }
  758|  47.6k|              else {
  759|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.6k|              }
  761|  47.6k|          }),
  762|  47.6k|          m_storage(std::addressof(f))
  763|  47.6k|    {
  764|  47.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  47.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  47.6k|              else {
  759|  47.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.6k|              }
  761|  47.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  47.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  47.6k|        else if constexpr (std::is_object_v<T>) {
  694|  47.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  47.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  47.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  47.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  47.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  47.6k|        {
  668|  47.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|  50.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  50.7k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  50.7k|            auto rd = make_reader<T, char_type>();
 6015|  50.7k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  50.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  50.7k|    {
 6002|  50.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 711, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    711|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    711|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    711|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    711|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    711|    }                                                  \
  |  |  |  | 3995|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  50.0k|                        .transform_error(make_eof_scan_error));
 6004|  50.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  50.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  50.0k|    {
 4280|  50.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  50.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  50.0k|        float_reader<CharT> rd{};
 4283|  50.0k|        return read_impl<Range>(
 4284|  50.0k|            range, rd,
 4285|  50.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.0k|                return r.read_source(SCN_FWD(args)...);
 4287|  50.0k|            },
 4288|  50.0k|            value);
 4289|  50.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  50.0k|        : m_fptr([](storage fn,
  753|  50.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.0k|              cvref<T> obj = *get<T>(fn);
  755|  50.0k|              if constexpr (std::is_void_v<R>) {
  756|  50.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  50.0k|              }
  758|  50.0k|              else {
  759|  50.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.0k|              }
  761|  50.0k|          }),
  762|  50.0k|          m_storage(std::addressof(f))
  763|  50.0k|    {
  764|  50.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  50.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  50.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  50.0k|              else {
  759|  50.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  50.0k|              }
  761|  50.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  50.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  50.0k|        else if constexpr (std::is_object_v<T>) {
  694|  50.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  50.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  50.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  50.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  50.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  50.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  50.0k|        {
  668|  50.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6009|  52.0k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  52.0k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  52.0k|            auto rd = make_reader<T, char_type>();
 6015|  52.0k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  52.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  52.0k|    {
 6002|  52.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 810, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    810|    }                                                  \
  |  |  |  | 3995|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  51.2k|                        .transform_error(make_eof_scan_error));
 6004|  51.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  52.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  51.2k|    {
 4280|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  51.2k|        float_reader<CharT> rd{};
 4283|  51.2k|        return read_impl<Range>(
 4284|  51.2k|            range, rd,
 4285|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.2k|                return r.read_source(SCN_FWD(args)...);
 4287|  51.2k|            },
 4288|  51.2k|            value);
 4289|  51.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  51.2k|        : m_fptr([](storage fn,
  753|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.2k|              cvref<T> obj = *get<T>(fn);
  755|  51.2k|              if constexpr (std::is_void_v<R>) {
  756|  51.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  51.2k|              }
  758|  51.2k|              else {
  759|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.2k|              }
  761|  51.2k|          }),
  762|  51.2k|          m_storage(std::addressof(f))
  763|  51.2k|    {
  764|  51.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  51.2k|              else {
  759|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.2k|              }
  761|  51.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  51.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  51.2k|        else if constexpr (std::is_object_v<T>) {
  694|  51.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  51.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  51.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  51.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  51.2k|        {
  668|  51.2k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   154k|{
 5922|   154k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.80k, False: 153k]
  |  |  ------------------
  ------------------
 5923|  1.80k|        return unexpected(e);
 5924|  1.80k|    }
 5925|       |
 5926|   153k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 153k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   153k|    return skip_classic_whitespace(range);
 5931|   153k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  49.8k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  49.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  49.8k|            auto rd = make_reader<T, char_type>();
 6019|  49.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 49.8k, False: 0]
  ------------------
 6020|  49.8k|                return impl(rd, range, value);
 6021|  49.8k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  49.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  49.8k|    {
 6002|  49.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  49.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  49.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  49.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 612, False: 49.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    612|    }                                                  \
  |  |  |  | 3995|  49.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  49.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  49.2k|                        .transform_error(make_eof_scan_error));
 6004|  49.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  49.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  49.2k|    {
 4280|  49.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  49.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  49.2k|        float_reader<CharT> rd{};
 4283|  49.2k|        return read_impl<Range>(
 4284|  49.2k|            range, rd,
 4285|  49.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.2k|                return r.read_source(SCN_FWD(args)...);
 4287|  49.2k|            },
 4288|  49.2k|            value);
 4289|  49.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  49.2k|        : m_fptr([](storage fn,
  753|  49.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.2k|              cvref<T> obj = *get<T>(fn);
  755|  49.2k|              if constexpr (std::is_void_v<R>) {
  756|  49.2k|                  obj(static_cast<decltype(args)>(args)...);
  757|  49.2k|              }
  758|  49.2k|              else {
  759|  49.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.2k|              }
  761|  49.2k|          }),
  762|  49.2k|          m_storage(std::addressof(f))
  763|  49.2k|    {
  764|  49.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  49.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.2k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  49.2k|              else {
  759|  49.2k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.2k|              }
  761|  49.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  49.2k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  49.2k|        else if constexpr (std::is_object_v<T>) {
  694|  49.2k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  49.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  49.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  49.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  49.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  49.2k|        {
  668|  49.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  52.0k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  52.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  52.0k|            auto rd = make_reader<T, char_type>();
 6019|  52.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 52.0k, False: 0]
  ------------------
 6020|  52.0k|                return impl(rd, range, value);
 6021|  52.0k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  52.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  52.0k|    {
 6002|  52.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  52.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 717, False: 51.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    717|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    717|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    717|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    717|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    717|    }                                                  \
  |  |  |  | 3995|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  51.3k|                        .transform_error(make_eof_scan_error));
 6004|  51.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  52.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  51.3k|    {
 4280|  51.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  51.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  51.3k|        float_reader<CharT> rd{};
 4283|  51.3k|        return read_impl<Range>(
 4284|  51.3k|            range, rd,
 4285|  51.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.3k|                return r.read_source(SCN_FWD(args)...);
 4287|  51.3k|            },
 4288|  51.3k|            value);
 4289|  51.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  51.3k|        : m_fptr([](storage fn,
  753|  51.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.3k|              cvref<T> obj = *get<T>(fn);
  755|  51.3k|              if constexpr (std::is_void_v<R>) {
  756|  51.3k|                  obj(static_cast<decltype(args)>(args)...);
  757|  51.3k|              }
  758|  51.3k|              else {
  759|  51.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.3k|              }
  761|  51.3k|          }),
  762|  51.3k|          m_storage(std::addressof(f))
  763|  51.3k|    {
  764|  51.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  51.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  51.3k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  51.3k|              else {
  759|  51.3k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  51.3k|              }
  761|  51.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  51.3k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  51.3k|        else if constexpr (std::is_object_v<T>) {
  694|  51.3k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  51.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  51.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  51.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  51.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  51.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  51.3k|        {
  668|  51.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  52.9k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  52.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  52.9k|            auto rd = make_reader<T, char_type>();
 6019|  52.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 52.9k, False: 0]
  ------------------
 6020|  52.9k|                return impl(rd, range, value);
 6021|  52.9k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  52.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  52.9k|    {
 6002|  52.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 810, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    810|    }                                                  \
  |  |  |  | 3995|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  52.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  52.1k|                        .transform_error(make_eof_scan_error));
 6004|  52.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  52.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  52.1k|    {
 4280|  52.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  52.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  52.1k|        float_reader<CharT> rd{};
 4283|  52.1k|        return read_impl<Range>(
 4284|  52.1k|            range, rd,
 4285|  52.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  52.1k|                return r.read_source(SCN_FWD(args)...);
 4287|  52.1k|            },
 4288|  52.1k|            value);
 4289|  52.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  52.1k|        : m_fptr([](storage fn,
  753|  52.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  52.1k|              cvref<T> obj = *get<T>(fn);
  755|  52.1k|              if constexpr (std::is_void_v<R>) {
  756|  52.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  52.1k|              }
  758|  52.1k|              else {
  759|  52.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  52.1k|              }
  761|  52.1k|          }),
  762|  52.1k|          m_storage(std::addressof(f))
  763|  52.1k|    {
  764|  52.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  52.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  52.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  52.1k|              else {
  759|  52.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  52.1k|              }
  761|  52.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  689|  52.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  52.1k|        else if constexpr (std::is_object_v<T>) {
  694|  52.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  52.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  52.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  52.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  52.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  52.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  52.1k|        {
  668|  52.1k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|   374k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   374k|    static_cast<    \
  |  | 1084|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   374k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   374k|          m_current(m_range.begin())
 3050|   374k|    {
 3051|   374k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   695k|    {
 3060|   695k|        return m_range.end();
 3061|   695k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|   321k|    {
 3075|   321k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   321k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   321k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 321k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   321k|        }
 3081|   321k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   321k|    static_cast<    \
  |  | 1084|   321k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   321k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|   374k|    {
 3065|   374k|        return ranges::subrange{begin(), end()};
 3066|   374k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   374k|    {
 6174|   374k|        const bool need_skipped_width =
 6175|   374k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 374k]
  |  Branch (6175:33): [True: 0, False: 374k]
  ------------------
 6176|   374k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   374k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 374k]
  ------------------
 6180|   374k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 374k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   374k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 374k, False: 0]
  |  Branch (6184:56): [True: 374k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   374k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 374k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   742k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   374k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   374k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   374k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.74k, False: 368k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.74k|    }                                                  \
  |  |  |  | 3995|   374k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   742k|                            make_eof_scan_error));
 6195|       |
 6196|   742k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 368k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   368k|            return result_type{it, 0};
 6204|   742k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   374k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   316k|    {
 6216|   316k|        const bool need_skipped_width =
 6217|   316k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 316k]
  |  Branch (6217:33): [True: 0, False: 316k]
  ------------------
 6218|   316k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   316k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 316k]
  ------------------
 6221|   316k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 316k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   316k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 316k, False: 0]
  ------------------
 6230|   316k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 316k]
  ------------------
 6231|   316k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   316k|        return result_type{rng.begin(), 0};
 6255|   316k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6325|   121k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   121k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   121k|            auto rd = make_reader<T, char_type>();
 6331|   121k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   121k|    do {                                                            \
  |  | 3985|   121k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   121k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   121k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   121k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   121k|    {
 6261|   121k|        const bool need_skipped_width =
 6262|   121k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 121k]
  |  Branch (6262:33): [True: 0, False: 121k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   121k|        auto it = rng.begin();
 6266|   121k|        std::ptrdiff_t prefix_width = 0;
 6267|   121k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 121k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   121k|        else {
 6275|   121k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.73k, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.73k|    }                                                  \
  |  |  |  | 3995|   121k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   119k|            std::tie(it, prefix_width) = prefix_result;
 6277|   119k|        }
 6278|   119k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   119k|        std::ptrdiff_t value_width = 0;
 6282|   119k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 119k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   119k|        else {
 6298|   119k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.8k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.8k|    }                                                  \
  |  | 3995|   119k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   103k|                                             specs, value, loc));
 6300|       |
 6301|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 103k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   103k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   103k|        std::ptrdiff_t postfix_width = 0;
 6310|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 102k, False: 1.42k]
  ------------------
 6311|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   102k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   102k|                                 value_width));
 6315|   102k|            std::tie(it, postfix_width) = postfix_result;
 6316|   102k|        }
 6317|       |
 6318|   103k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   103k|    do {                                                            \
  |  | 3985|   103k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   103k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   103k|            specs, prefix_width, value_width, postfix_width));
 6320|   103k|        return it;
 6321|   103k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|   125k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   125k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   125k|            auto rd = make_reader<T, char_type>();
 6331|   125k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   125k|    do {                                                            \
  |  | 3985|   125k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   125k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   125k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   125k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   125k|    {
 6261|   125k|        const bool need_skipped_width =
 6262|   125k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 125k]
  |  Branch (6262:33): [True: 0, False: 125k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   125k|        auto it = rng.begin();
 6266|   125k|        std::ptrdiff_t prefix_width = 0;
 6267|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 125k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   125k|        else {
 6275|   125k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.92k, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.92k|    }                                                  \
  |  |  |  | 3995|   125k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   123k|            std::tie(it, prefix_width) = prefix_result;
 6277|   123k|        }
 6278|   123k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   123k|        std::ptrdiff_t value_width = 0;
 6282|   123k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 123k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   123k|        else {
 6298|   123k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.6k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.6k|    }                                                  \
  |  | 3995|   123k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   107k|                                             specs, value, loc));
 6300|       |
 6301|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 107k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   107k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   107k|        std::ptrdiff_t postfix_width = 0;
 6310|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 106k, False: 1.58k]
  ------------------
 6311|   106k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   106k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   106k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   106k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   106k|                                 value_width));
 6315|   106k|            std::tie(it, postfix_width) = postfix_result;
 6316|   106k|        }
 6317|       |
 6318|   107k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   107k|    do {                                                            \
  |  | 3985|   107k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   107k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   107k|            specs, prefix_width, value_width, postfix_width));
 6320|   107k|        return it;
 6321|   107k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6325|   127k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   127k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   127k|            auto rd = make_reader<T, char_type>();
 6331|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   127k|    do {                                                            \
  |  | 3985|   127k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   127k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   127k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   127k|    {
 6261|   127k|        const bool need_skipped_width =
 6262|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 127k]
  |  Branch (6262:33): [True: 0, False: 127k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   127k|        auto it = rng.begin();
 6266|   127k|        std::ptrdiff_t prefix_width = 0;
 6267|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 127k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   127k|        else {
 6275|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.09k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.09k|    }                                                  \
  |  |  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   125k|            std::tie(it, prefix_width) = prefix_result;
 6277|   125k|        }
 6278|   125k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   125k|        std::ptrdiff_t value_width = 0;
 6282|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 125k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   125k|        else {
 6298|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 15.4k, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  15.4k|    }                                                  \
  |  | 3995|   125k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   109k|                                             specs, value, loc));
 6300|       |
 6301|   109k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 109k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   109k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   109k|        std::ptrdiff_t postfix_width = 0;
 6310|   109k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 107k, False: 1.73k]
  ------------------
 6311|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   107k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   107k|                                 value_width));
 6315|   107k|            std::tie(it, postfix_width) = postfix_result;
 6316|   107k|        }
 6317|       |
 6318|   109k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   109k|    do {                                                            \
  |  | 3985|   109k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   109k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   109k|            specs, prefix_width, value_width, postfix_width));
 6320|   109k|        return it;
 6321|   109k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   139k|{
 5922|   139k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 582, False: 138k]
  |  |  ------------------
  ------------------
 5923|    582|        return unexpected(e);
 5924|    582|    }
 5925|       |
 5926|   138k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 138k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   138k|    return skip_classic_whitespace(range);
 5931|   138k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6009|  41.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  41.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  41.3k|            auto rd = make_reader<T, char_type>();
 6015|  41.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  41.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  41.3k|    {
 6002|  41.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  41.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 315, False: 41.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    315|    }                                                  \
  |  |  |  | 3995|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  41.0k|                        .transform_error(make_eof_scan_error));
 6004|  41.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  41.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  41.0k|    {
 4280|  41.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  41.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  41.0k|        float_reader<CharT> rd{};
 4283|  41.0k|        return read_impl<Range>(
 4284|  41.0k|            range, rd,
 4285|  41.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  41.0k|                return r.read_source(SCN_FWD(args)...);
 4287|  41.0k|            },
 4288|  41.0k|            value);
 4289|  41.0k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3773|   276k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  41.0k|        : m_fptr([](storage fn,
  753|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  41.0k|              cvref<T> obj = *get<T>(fn);
  755|  41.0k|              if constexpr (std::is_void_v<R>) {
  756|  41.0k|                  obj(static_cast<decltype(args)>(args)...);
  757|  41.0k|              }
  758|  41.0k|              else {
  759|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  41.0k|              }
  761|  41.0k|          }),
  762|  41.0k|          m_storage(std::addressof(f))
  763|  41.0k|    {
  764|  41.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  41.0k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  41.0k|              else {
  759|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  41.0k|              }
  761|  41.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  41.0k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  41.0k|        else if constexpr (std::is_object_v<T>) {
  694|  41.0k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  41.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  41.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  41.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  41.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  41.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  41.0k|        {
  668|  41.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6009|  47.9k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  47.9k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  47.9k|            auto rd = make_reader<T, char_type>();
 6015|  47.9k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  47.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  47.9k|    {
 6002|  47.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 369, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    369|    }                                                  \
  |  |  |  | 3995|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  47.5k|                        .transform_error(make_eof_scan_error));
 6004|  47.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  47.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  47.5k|    {
 4280|  47.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  47.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  47.5k|        float_reader<CharT> rd{};
 4283|  47.5k|        return read_impl<Range>(
 4284|  47.5k|            range, rd,
 4285|  47.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.5k|                return r.read_source(SCN_FWD(args)...);
 4287|  47.5k|            },
 4288|  47.5k|            value);
 4289|  47.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  47.5k|        : m_fptr([](storage fn,
  753|  47.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.5k|              cvref<T> obj = *get<T>(fn);
  755|  47.5k|              if constexpr (std::is_void_v<R>) {
  756|  47.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  47.5k|              }
  758|  47.5k|              else {
  759|  47.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.5k|              }
  761|  47.5k|          }),
  762|  47.5k|          m_storage(std::addressof(f))
  763|  47.5k|    {
  764|  47.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  47.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  47.5k|              else {
  759|  47.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.5k|              }
  761|  47.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  47.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  47.5k|        else if constexpr (std::is_object_v<T>) {
  694|  47.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  47.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  47.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  47.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  47.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  47.5k|        {
  668|  47.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6009|  50.1k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  50.1k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  50.1k|            auto rd = make_reader<T, char_type>();
 6015|  50.1k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  50.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6001|  50.1k|    {
 6002|  50.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 417, False: 49.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    417|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    417|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    417|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    417|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    417|    }                                                  \
  |  |  |  | 3995|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  49.7k|                        .transform_error(make_eof_scan_error));
 6004|  49.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  50.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4279|  49.7k|    {
 4280|  49.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  49.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  49.7k|        float_reader<CharT> rd{};
 4283|  49.7k|        return read_impl<Range>(
 4284|  49.7k|            range, rd,
 4285|  49.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.7k|                return r.read_source(SCN_FWD(args)...);
 4287|  49.7k|            },
 4288|  49.7k|            value);
 4289|  49.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  752|  49.7k|        : m_fptr([](storage fn,
  753|  49.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.7k|              cvref<T> obj = *get<T>(fn);
  755|  49.7k|              if constexpr (std::is_void_v<R>) {
  756|  49.7k|                  obj(static_cast<decltype(args)>(args)...);
  757|  49.7k|              }
  758|  49.7k|              else {
  759|  49.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.7k|              }
  761|  49.7k|          }),
  762|  49.7k|          m_storage(std::addressof(f))
  763|  49.7k|    {
  764|  49.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  753|  49.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  49.7k|              else {
  759|  49.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.7k|              }
  761|  49.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  49.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  49.7k|        else if constexpr (std::is_object_v<T>) {
  694|  49.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  49.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4285|  49.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  49.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|  49.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  49.7k|        {
  668|  49.7k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   376k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   376k|    static_cast<    \
  |  | 1084|   376k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   376k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   376k|          m_current(m_range.begin())
 3050|   376k|    {
 3051|   376k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|   646k|    {
 3060|   646k|        return m_range.end();
 3061|   646k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|   270k|    {
 3075|   270k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   270k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   270k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   270k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   270k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 270k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   270k|        }
 3081|   270k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   270k|    static_cast<    \
  |  | 1084|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   270k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   376k|    {
 3065|   376k|        return ranges::subrange{begin(), end()};
 3066|   376k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   376k|    {
 6174|   376k|        const bool need_skipped_width =
 6175|   376k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 376k]
  |  Branch (6175:33): [True: 0, False: 376k]
  ------------------
 6176|   376k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   376k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 376k]
  ------------------
 6180|   376k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 376k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   376k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 376k, False: 0]
  |  Branch (6184:56): [True: 376k, False: 0]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   376k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 376k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   749k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 3.18k, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  3.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  3.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  3.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  3.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  3.18k|    }                                                  \
  |  |  |  | 3995|   376k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   376k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   749k|                            make_eof_scan_error));
 6195|       |
 6196|   749k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 372k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   372k|            return result_type{it, 0};
 6204|   749k|        }
 6205|       |
 6206|      0|        return result_type{rng.begin(), 0};
 6207|   376k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   268k|    {
 6216|   268k|        const bool need_skipped_width =
 6217|   268k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 268k]
  |  Branch (6217:33): [True: 0, False: 268k]
  ------------------
 6218|   268k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   268k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 268k]
  ------------------
 6221|   268k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 268k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   268k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 268k, False: 0]
  ------------------
 6230|   268k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 0, False: 268k]
  ------------------
 6231|   268k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 0]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 0]
  ------------------
 6233|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   268k|        return result_type{rng.begin(), 0};
 6255|   268k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6325|   118k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   118k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   118k|            auto rd = make_reader<T, char_type>();
 6331|   118k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   118k|    do {                                                            \
  |  | 3985|   118k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   118k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   118k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   118k|    {
 6261|   118k|        const bool need_skipped_width =
 6262|   118k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 118k]
  |  Branch (6262:33): [True: 0, False: 118k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   118k|        auto it = rng.begin();
 6266|   118k|        std::ptrdiff_t prefix_width = 0;
 6267|   118k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 118k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   118k|        else {
 6275|   118k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 976, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    976|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    976|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    976|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    976|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    976|    }                                                  \
  |  |  |  | 3995|   118k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   117k|            std::tie(it, prefix_width) = prefix_result;
 6277|   117k|        }
 6278|   117k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   117k|        std::ptrdiff_t value_width = 0;
 6282|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 117k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   117k|        else {
 6298|   117k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.2k, False: 83.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.2k|    }                                                  \
  |  | 3995|   117k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  83.2k|                                             specs, value, loc));
 6300|       |
 6301|  83.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 83.2k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  83.2k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  83.2k|        std::ptrdiff_t postfix_width = 0;
 6310|  83.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 82.7k, False: 470]
  ------------------
 6311|  82.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  82.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  82.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  82.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  82.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 82.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  82.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  82.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  82.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  82.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  82.7k|                                 value_width));
 6315|  82.7k|            std::tie(it, postfix_width) = postfix_result;
 6316|  82.7k|        }
 6317|       |
 6318|  83.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  83.2k|    do {                                                            \
  |  | 3985|  83.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  83.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 83.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  83.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  83.2k|            specs, prefix_width, value_width, postfix_width));
 6320|  83.2k|        return it;
 6321|  83.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6325|   127k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   127k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   127k|            auto rd = make_reader<T, char_type>();
 6331|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   127k|    do {                                                            \
  |  | 3985|   127k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   127k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   127k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   127k|    {
 6261|   127k|        const bool need_skipped_width =
 6262|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 127k]
  |  Branch (6262:33): [True: 0, False: 127k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   127k|        auto it = rng.begin();
 6266|   127k|        std::ptrdiff_t prefix_width = 0;
 6267|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 127k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   127k|        else {
 6275|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.06k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.06k|    }                                                  \
  |  |  |  | 3995|   127k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   126k|            std::tie(it, prefix_width) = prefix_result;
 6277|   126k|        }
 6278|   126k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   126k|        std::ptrdiff_t value_width = 0;
 6282|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 126k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   126k|        else {
 6298|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.1k, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.1k|    }                                                  \
  |  | 3995|   126k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  92.1k|                                             specs, value, loc));
 6300|       |
 6301|  92.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 92.1k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  92.1k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  92.1k|        std::ptrdiff_t postfix_width = 0;
 6310|  92.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 91.5k, False: 532]
  ------------------
 6311|  91.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  91.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  91.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  91.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  91.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 91.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  91.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  91.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  91.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  91.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  91.5k|                                 value_width));
 6315|  91.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  91.5k|        }
 6317|       |
 6318|  92.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  92.1k|    do {                                                            \
  |  | 3985|  92.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 92.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  92.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  92.1k|            specs, prefix_width, value_width, postfix_width));
 6320|  92.1k|        return it;
 6321|  92.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6325|   130k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   130k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   130k|            auto rd = make_reader<T, char_type>();
 6331|   130k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   130k|    do {                                                            \
  |  | 3985|   130k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 130k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   130k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   130k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   130k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6260|   130k|    {
 6261|   130k|        const bool need_skipped_width =
 6262|   130k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 130k]
  |  Branch (6262:33): [True: 0, False: 130k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   130k|        auto it = rng.begin();
 6266|   130k|        std::ptrdiff_t prefix_width = 0;
 6267|   130k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 130k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   130k|        else {
 6275|   130k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.14k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.14k|    }                                                  \
  |  |  |  | 3995|   130k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   129k|            std::tie(it, prefix_width) = prefix_result;
 6277|   129k|        }
 6278|   129k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   129k|        std::ptrdiff_t value_width = 0;
 6282|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 129k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   129k|        else {
 6298|   129k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 34.0k, False: 95.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  34.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  34.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  34.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  34.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  34.0k|    }                                                  \
  |  | 3995|   129k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  95.1k|                                             specs, value, loc));
 6300|       |
 6301|  95.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 95.1k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  95.1k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  95.1k|        std::ptrdiff_t postfix_width = 0;
 6310|  95.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 94.5k, False: 586]
  ------------------
 6311|  94.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  94.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  94.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  94.5k|                                 value_width));
 6315|  94.5k|            std::tie(it, postfix_width) = postfix_result;
 6316|  94.5k|        }
 6317|       |
 6318|  95.1k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  95.1k|    do {                                                            \
  |  | 3985|  95.1k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 95.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  95.1k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  95.1k|            specs, prefix_width, value_width, postfix_width));
 6320|  95.1k|        return it;
 6321|  95.1k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   139k|{
 5922|   139k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 582, False: 138k]
  |  |  ------------------
  ------------------
 5923|    582|        return unexpected(e);
 5924|    582|    }
 5925|       |
 5926|   138k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 138k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   138k|    return skip_classic_whitespace(range);
 5931|   138k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  41.2k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  41.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  41.2k|            auto rd = make_reader<T, char_type>();
 6019|  41.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 41.2k, False: 0]
  ------------------
 6020|  41.2k|                return impl(rd, range, value);
 6021|  41.2k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  41.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  41.2k|    {
 6002|  41.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  41.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 315, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    315|    }                                                  \
  |  |  |  | 3995|  41.2k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  40.9k|                        .transform_error(make_eof_scan_error));
 6004|  40.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  41.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  40.9k|    {
 4280|  40.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  40.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  40.9k|        float_reader<CharT> rd{};
 4283|  40.9k|        return read_impl<Range>(
 4284|  40.9k|            range, rd,
 4285|  40.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  40.9k|                return r.read_source(SCN_FWD(args)...);
 4287|  40.9k|            },
 4288|  40.9k|            value);
 4289|  40.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  40.9k|        : m_fptr([](storage fn,
  753|  40.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  40.9k|              cvref<T> obj = *get<T>(fn);
  755|  40.9k|              if constexpr (std::is_void_v<R>) {
  756|  40.9k|                  obj(static_cast<decltype(args)>(args)...);
  757|  40.9k|              }
  758|  40.9k|              else {
  759|  40.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  40.9k|              }
  761|  40.9k|          }),
  762|  40.9k|          m_storage(std::addressof(f))
  763|  40.9k|    {
  764|  40.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  40.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  40.9k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  40.9k|              else {
  759|  40.9k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  40.9k|              }
  761|  40.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  40.9k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  40.9k|        else if constexpr (std::is_object_v<T>) {
  694|  40.9k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  40.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  40.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  40.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  40.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  40.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  40.9k|        {
  668|  40.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  47.9k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  47.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  47.9k|            auto rd = make_reader<T, char_type>();
 6019|  47.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 47.9k, False: 0]
  ------------------
 6020|  47.9k|                return impl(rd, range, value);
 6021|  47.9k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  47.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  47.9k|    {
 6002|  47.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 369, False: 47.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    369|    }                                                  \
  |  |  |  | 3995|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  47.5k|                        .transform_error(make_eof_scan_error));
 6004|  47.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  47.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  47.5k|    {
 4280|  47.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  47.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  47.5k|        float_reader<CharT> rd{};
 4283|  47.5k|        return read_impl<Range>(
 4284|  47.5k|            range, rd,
 4285|  47.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.5k|                return r.read_source(SCN_FWD(args)...);
 4287|  47.5k|            },
 4288|  47.5k|            value);
 4289|  47.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  47.5k|        : m_fptr([](storage fn,
  753|  47.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.5k|              cvref<T> obj = *get<T>(fn);
  755|  47.5k|              if constexpr (std::is_void_v<R>) {
  756|  47.5k|                  obj(static_cast<decltype(args)>(args)...);
  757|  47.5k|              }
  758|  47.5k|              else {
  759|  47.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.5k|              }
  761|  47.5k|          }),
  762|  47.5k|          m_storage(std::addressof(f))
  763|  47.5k|    {
  764|  47.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  47.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  47.5k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  47.5k|              else {
  759|  47.5k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  47.5k|              }
  761|  47.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  47.5k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  47.5k|        else if constexpr (std::is_object_v<T>) {
  694|  47.5k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  47.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  47.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  47.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  47.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  47.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  47.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  47.5k|        {
  668|  47.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|  50.1k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  50.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  50.1k|            auto rd = make_reader<T, char_type>();
 6019|  50.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 50.1k, False: 0]
  ------------------
 6020|  50.1k|                return impl(rd, range, value);
 6021|  50.1k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  50.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6001|  50.1k|    {
 6002|  50.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  50.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  50.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  50.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  50.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 417, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    417|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    417|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    417|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    417|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    417|    }                                                  \
  |  |  |  | 3995|  50.1k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  50.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  49.6k|                        .transform_error(make_eof_scan_error));
 6004|  49.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  50.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4279|  49.6k|    {
 4280|  49.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  49.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4281|       |
 4282|  49.6k|        float_reader<CharT> rd{};
 4283|  49.6k|        return read_impl<Range>(
 4284|  49.6k|            range, rd,
 4285|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.6k|                return r.read_source(SCN_FWD(args)...);
 4287|  49.6k|            },
 4288|  49.6k|            value);
 4289|  49.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  752|  49.6k|        : m_fptr([](storage fn,
  753|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.6k|              cvref<T> obj = *get<T>(fn);
  755|  49.6k|              if constexpr (std::is_void_v<R>) {
  756|  49.6k|                  obj(static_cast<decltype(args)>(args)...);
  757|  49.6k|              }
  758|  49.6k|              else {
  759|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.6k|              }
  761|  49.6k|          }),
  762|  49.6k|          m_storage(std::addressof(f))
  763|  49.6k|    {
  764|  49.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  753|  49.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  49.6k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  49.6k|              else {
  759|  49.6k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  49.6k|              }
  761|  49.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  689|  49.6k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  49.6k|        else if constexpr (std::is_object_v<T>) {
  694|  49.6k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  49.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4285|  49.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4286|  49.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1085|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4287|  49.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  666|  49.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  49.6k|        {
  668|  49.6k|        }

LLVMFuzzerTestOneInput:
   54|  1.75k|{
   55|  1.75k|    scn::fuzz::run(data, size);
   56|  1.75k|    return 0;
   57|  1.75k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  1.75k|{
   33|  1.75k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 1.75k]
  |  Branch (33:35): [True: 0, False: 1.75k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  1.75k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  1.75k|    const auto& f =
   40|  1.75k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  1.75k|    do_basic_run(sv, f);
   42|       |
   43|  1.75k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  1.75k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  1.75k|    do_basic_run(wsv_reinterpret, wf);
   46|  1.75k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.75k, False: 0]
  ------------------
   47|  1.75k|        do_basic_run(wsv_transcode, wf);
   48|  1.75k|    }
   49|  1.75k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.75k|{
   25|  1.75k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.75k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.75k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.75k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.75k|{
   25|  1.75k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.75k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.75k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.75k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.51k|{
   25|  3.51k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.51k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.51k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.51k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.51k|{
   25|  3.51k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.51k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.51k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.51k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.75k|{
   53|  1.75k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|  1.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.75k|    string_buffer.resize(size);
   57|  1.75k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.75k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.75k|    const auto wsv_reinterpret_size =
   62|  1.75k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 69, False: 1.69k]
  ------------------
   63|  1.75k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.75k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.75k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.75k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.75k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.75k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.75k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.75k|{
  123|  1.75k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.75k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.75k|    buf.resize(sizeof...(Args));
  126|  1.75k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.75k|    return buf;
  128|  1.75k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.75k|{
  109|  1.75k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.75k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.75k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.75k|{
  186|  1.75k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.75k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.75k|                                   format_strings);
  189|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  76.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  76.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  76.8k|            auto result = scn::scan<T>(
  140|  76.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  76.8k|                scn::runtime_format(f));
  142|  76.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 66.3k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  66.3k|            it = result->begin();
  146|  66.3k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  76.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  76.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  76.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  76.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  76.8k|            auto result = scn::scan<T>(
  155|  76.8k|                global_locale,
  156|  76.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  76.8k|                scn::runtime_format(f));
  158|  76.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 66.3k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  66.3k|            it = result->begin();
  162|  66.3k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  16.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.0k|            auto result = scn::scan_value<T>(
  171|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 14.3k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  14.3k|            it = result->begin();
  176|  14.3k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  79.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.6k|            auto result = scn::scan<T>(
  140|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.6k|                scn::runtime_format(f));
  142|  79.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 69.0k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  69.0k|            it = result->begin();
  146|  69.0k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  79.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.6k|            auto result = scn::scan<T>(
  155|  79.6k|                global_locale,
  156|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.6k|                scn::runtime_format(f));
  158|  79.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 69.0k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  69.0k|            it = result->begin();
  162|  69.0k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  16.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.9k|            auto result = scn::scan_value<T>(
  171|  16.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 15.1k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  15.1k|            it = result->begin();
  176|  15.1k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  80.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.9k|            auto result = scn::scan<T>(
  140|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.9k|                scn::runtime_format(f));
  142|  80.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 70.3k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  70.3k|            it = result->begin();
  146|  70.3k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  80.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.9k|            auto result = scn::scan<T>(
  155|  80.9k|                global_locale,
  156|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.9k|                scn::runtime_format(f));
  158|  80.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 70.3k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  70.3k|            it = result->begin();
  162|  70.3k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  17.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.3k|            auto result = scn::scan_value<T>(
  171|  17.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 15.5k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  15.5k|            it = result->begin();
  176|  15.5k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  82.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  82.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  82.3k|            auto result = scn::scan<T>(
  140|  82.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  82.3k|                scn::runtime_format(f));
  142|  82.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 71.8k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  71.8k|            it = result->begin();
  146|  71.8k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  82.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  82.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  82.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  82.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  82.3k|            auto result = scn::scan<T>(
  155|  82.3k|                global_locale,
  156|  82.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  82.3k|                scn::runtime_format(f));
  158|  82.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 71.8k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  71.8k|            it = result->begin();
  162|  71.8k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  16.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.6k|            auto result = scn::scan_value<T>(
  171|  16.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 14.8k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  14.8k|            it = result->begin();
  176|  14.8k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  85.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  85.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  85.5k|            auto result = scn::scan<T>(
  140|  85.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  85.5k|                scn::runtime_format(f));
  142|  85.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 75.0k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  75.0k|            it = result->begin();
  146|  75.0k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  85.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  85.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  85.5k|            auto result = scn::scan<T>(
  155|  85.5k|                global_locale,
  156|  85.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  85.5k|                scn::runtime_format(f));
  158|  85.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 75.0k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  75.0k|            it = result->begin();
  162|  75.0k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  17.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.3k|            auto result = scn::scan_value<T>(
  171|  17.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 15.5k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  15.5k|            it = result->begin();
  176|  15.5k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.75k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.75k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  86.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.9k|            auto result = scn::scan<T>(
  140|  86.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.9k|                scn::runtime_format(f));
  142|  86.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 76.3k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  76.3k|            it = result->begin();
  146|  76.3k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.75k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  86.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.9k|            auto result = scn::scan<T>(
  155|  86.9k|                global_locale,
  156|  86.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.9k|                scn::runtime_format(f));
  158|  86.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 76.3k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  76.3k|            it = result->begin();
  162|  76.3k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.75k|    {
  167|  1.75k|        auto it = scn::ranges::begin(source);
  168|  17.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.6k|            auto result = scn::scan_value<T>(
  171|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.75k, False: 15.8k]
  ------------------
  173|  1.75k|                break;
  174|  1.75k|            }
  175|  15.8k|            it = result->begin();
  176|  15.8k|        }
  177|  1.75k|    }
  178|  1.75k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.75k|{
   91|  1.75k|    using char_type = ranges::range_value_t<Source>;
   92|  1.75k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.75k|    deque.clear();
   94|  1.75k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.75k|              std::back_inserter(deque));
   96|  1.75k|    return deque;
   97|  1.75k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.75k|{
   80|  1.75k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.75k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.75k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.75k|{
  123|  1.75k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.75k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.75k|    buf.resize(sizeof...(Args));
  126|  1.75k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.75k|    return buf;
  128|  1.75k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.75k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.75k|    else {
  113|  1.75k|        return wformat_string_view_buffer;
  114|  1.75k|    }
  115|  1.75k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  3.51k|{
  186|  3.51k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  3.51k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  3.51k|                                   format_strings);
  189|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  72.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.9k|            auto result = scn::scan<T>(
  140|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.9k|                scn::runtime_format(f));
  142|  72.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 51.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  51.8k|            it = result->begin();
  146|  51.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  72.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.9k|            auto result = scn::scan<T>(
  155|  72.9k|                global_locale,
  156|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.9k|                scn::runtime_format(f));
  158|  72.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 51.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  51.8k|            it = result->begin();
  162|  51.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  13.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.7k|            auto result = scn::scan_value<T>(
  171|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 10.2k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  10.2k|            it = result->begin();
  176|  10.2k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  79.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.6k|            auto result = scn::scan<T>(
  140|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.6k|                scn::runtime_format(f));
  142|  79.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 58.5k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  58.5k|            it = result->begin();
  146|  58.5k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  79.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.6k|            auto result = scn::scan<T>(
  155|  79.6k|                global_locale,
  156|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.6k|                scn::runtime_format(f));
  158|  79.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 58.5k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  58.5k|            it = result->begin();
  162|  58.5k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  15.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.9k|            auto result = scn::scan_value<T>(
  171|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 12.4k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  12.4k|            it = result->begin();
  176|  12.4k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  81.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  81.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  81.8k|            auto result = scn::scan<T>(
  140|  81.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  81.8k|                scn::runtime_format(f));
  142|  81.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 60.7k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  60.7k|            it = result->begin();
  146|  60.7k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  81.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  81.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  81.8k|            auto result = scn::scan<T>(
  155|  81.8k|                global_locale,
  156|  81.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  81.8k|                scn::runtime_format(f));
  158|  81.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 60.7k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  60.7k|            it = result->begin();
  162|  60.7k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  16.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.7k|            auto result = scn::scan_value<T>(
  171|  16.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 13.1k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  13.1k|            it = result->begin();
  176|  13.1k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  72.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.9k|            auto result = scn::scan<T>(
  140|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.9k|                scn::runtime_format(f));
  142|  72.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 51.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  51.8k|            it = result->begin();
  146|  51.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  72.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  72.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  72.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.9k|            auto result = scn::scan<T>(
  155|  72.9k|                global_locale,
  156|  72.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.9k|                scn::runtime_format(f));
  158|  72.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 51.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  51.8k|            it = result->begin();
  162|  51.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  13.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.7k|            auto result = scn::scan_value<T>(
  171|  13.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 10.2k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  10.2k|            it = result->begin();
  176|  10.2k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  79.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.5k|            auto result = scn::scan<T>(
  140|  79.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.5k|                scn::runtime_format(f));
  142|  79.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 58.4k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  58.4k|            it = result->begin();
  146|  58.4k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  79.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  79.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  79.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.5k|            auto result = scn::scan<T>(
  155|  79.5k|                global_locale,
  156|  79.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.5k|                scn::runtime_format(f));
  158|  79.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 58.4k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  58.4k|            it = result->begin();
  162|  58.4k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  15.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.9k|            auto result = scn::scan_value<T>(
  171|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 12.4k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  12.4k|            it = result->begin();
  176|  12.4k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.51k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.51k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  81.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  81.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  81.8k|            auto result = scn::scan<T>(
  140|  81.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  81.8k|                scn::runtime_format(f));
  142|  81.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 60.7k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  60.7k|            it = result->begin();
  146|  60.7k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.51k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  81.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  81.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  81.8k|            auto result = scn::scan<T>(
  155|  81.8k|                global_locale,
  156|  81.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  81.8k|                scn::runtime_format(f));
  158|  81.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 60.7k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  60.7k|            it = result->begin();
  162|  60.7k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.51k|    {
  167|  3.51k|        auto it = scn::ranges::begin(source);
  168|  16.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.7k|            auto result = scn::scan_value<T>(
  171|  16.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.51k, False: 13.1k]
  ------------------
  173|  3.51k|                break;
  174|  3.51k|            }
  175|  13.1k|            it = result->begin();
  176|  13.1k|        }
  177|  3.51k|    }
  178|  3.51k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  3.51k|{
   91|  3.51k|    using char_type = ranges::range_value_t<Source>;
   92|  3.51k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  3.51k|    deque.clear();
   94|  3.51k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  3.51k|              std::back_inserter(deque));
   96|  3.51k|    return deque;
   97|  3.51k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  3.51k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  3.51k|    else {
   84|  3.51k|        return wnoncontiguous_buffer;
   85|  3.51k|    }
   86|  3.51k|}

