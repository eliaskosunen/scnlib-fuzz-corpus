_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1039|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1039|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  1.79M|{
 4086|  1.79M|    if constexpr (sizeof(U) == 1) {
 4087|  1.79M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  1.79M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  1.79M|{
 4050|  1.79M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  1.79M|    SCN_GCC_COMPAT_PUSH
 4053|  1.79M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  1.79M|    constexpr char lengths[] =
 4055|  1.79M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  1.79M|        "\1\1\1\1\1\1\1\1"
 4057|  1.79M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  1.79M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  1.79M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  1.79M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  1.79M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  1.79M|    SCN_GCC_COMPAT_POP
 4064|  1.79M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  1.58M|{
 4292|  1.58M|    if constexpr (sizeof(CharT) == 1) {
 4293|  1.58M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  1.58M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  1.58M|{
 4105|  1.58M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  1.58M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  1.58M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  1.58M|    };
 4110|       |
 4111|  1.58M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 1.53M, False: 55.3k]
  ------------------
 4112|  1.53M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 471, False: 1.53M]
  ------------------
 4113|    471|            SCN_UNLIKELY_ATTR
 4114|    471|            return invalid_code_point;
 4115|    471|        }
 4116|  1.53M|        return static_cast<char32_t>(input[0]);
 4117|  1.53M|    }
 4118|       |
 4119|  55.3k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 48.5k, False: 6.76k]
  ------------------
 4120|  48.5k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 174, False: 48.3k]
  ------------------
 4121|    174|            SCN_UNLIKELY_ATTR
 4122|    174|            return invalid_code_point;
 4123|    174|        }
 4124|  48.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 7.65k, False: 40.7k]
  ------------------
 4125|  7.65k|            SCN_UNLIKELY_ATTR
 4126|  7.65k|            return invalid_code_point;
 4127|  7.65k|        }
 4128|       |
 4129|  40.7k|        char32_t cp{};
 4130|  40.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  40.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  40.7k|        return cp;
 4133|  48.3k|    }
 4134|       |
 4135|  6.76k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 3.16k, False: 3.60k]
  ------------------
 4136|  3.16k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 137, False: 3.02k]
  ------------------
 4137|    137|            SCN_UNLIKELY_ATTR
 4138|    137|            return invalid_code_point;
 4139|    137|        }
 4140|  3.02k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 492, False: 2.53k]
  ------------------
 4141|  3.02k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 1.58k, False: 953]
  ------------------
 4142|  2.07k|            SCN_UNLIKELY_ATTR
 4143|  2.07k|            return invalid_code_point;
 4144|  2.07k|        }
 4145|       |
 4146|    953|        char32_t cp{};
 4147|    953|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    953|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    953|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    953|        return cp;
 4151|  3.02k|    }
 4152|       |
 4153|  3.60k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 3.60k, False: 0]
  ------------------
 4154|  3.60k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 3.60k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  3.60k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 535, False: 3.06k]
  ------------------
 4159|    535|            SCN_UNLIKELY_ATTR
 4160|    535|            return invalid_code_point;
 4161|    535|        }
 4162|  3.06k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 519, False: 2.55k]
  ------------------
 4163|  3.06k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 1.36k, False: 1.18k]
  ------------------
 4164|  3.06k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 848, False: 336]
  ------------------
 4165|  2.73k|            SCN_UNLIKELY_ATTR
 4166|  2.73k|            return invalid_code_point;
 4167|  2.73k|        }
 4168|       |
 4169|    336|        char32_t cp{};
 4170|    336|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    336|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    336|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    336|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    336|        return cp;
 4175|  3.06k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  60.7k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  60.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  60.7k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  3.57M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  3.57M|    else {
 3984|  3.57M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  3.57M|                                       to_address(first), to_address(last)))};
 3986|  3.57M|    }
 3987|  3.57M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  10.9M|{
  331|  10.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  10.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  10.9M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  15.9M|{
  309|  15.9M|    return p;
  310|  15.9M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  5.42M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  5.42M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  5.42M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  5.42M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  5.42M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  5.42M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  69.4k|    {
 2883|  69.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  69.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  69.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  69.4k|    {
 2864|  69.4k|        return decay_copy(t.begin());
 2865|  69.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  6.87M|{
 2108|  6.87M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  6.87M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  6.87M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.15M|    {
 2940|  1.15M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.15M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.15M|    {
 2922|  1.15M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.15M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  84.0k|{
 9893|  84.0k|    auto result = make_scan_result<Source, Args...>();
 9894|  84.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  84.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  84.0k|                                   make_scan_args(result->values())));
 9896|  84.0k|    return result;
 9897|  84.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9848|   185k|{
 9849|   185k|    return scan_result_type<Source, Args...>();
 9850|   185k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   185k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   185k|        : m_value(T{}), m_has_value(true)
  442|   185k|    {
  443|   185k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6692|   185k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   575k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   575k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6466|   700k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   185k|{
 9834|   185k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 163k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   163k|    else {
 9838|   163k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   163k|    static_cast<    \
  |  | 1109|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   163k|    }
 9840|   185k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   575k|    {
 1754|   575k|        return has_value();
 1755|   575k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.15M|    {
  505|  1.15M|        return m_has_value;
  506|  1.15M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  67.6k|    {
 1760|  67.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  67.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  67.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  67.6k|        return this->get_unexpected().error();
 1762|  67.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  67.6k|    {
  488|  67.6k|        return m_unexpected;
  489|  67.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  10.3M|    {
  380|  10.3M|        return m_unexpected;
  381|  10.3M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  2.64M|        : m_unexpected(std::forward<Err>(e))
  365|  2.64M|    {
  366|  2.64M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.64M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  7.51M|        : m_unexpected(std::forward<Args>(args)...)
  374|  7.51M|    {
  375|  7.51M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  7.51M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  7.51M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   743k|    {
  505|   743k|        return m_has_value;
  506|   743k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   512k|    {
  471|   512k|        return m_value;
  472|   512k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   405k|{
  411|   405k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   405k|        T(std::forward<Args>(args)...);
  413|   405k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   508k|    {
 6567|   508k|        m_range = std::forward<Other>(r);
 6568|   508k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   508k|    {
 1809|   508k|        return value();
 1810|   508k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   508k|    {
 1783|   508k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   508k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   508k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   508k|        return this->get_value();
 1785|   508k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   508k|    {
  471|   508k|        return m_value;
  472|   508k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|   260k|{
 9655|   260k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   260k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   260k|{
 9592|   260k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   260k|    auto result = vscan_impl(buffer, format, args);
 9595|   260k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 228k]
  |  |  ------------------
  ------------------
 9596|  31.2k|        return unexpected(result.error());
 9597|  31.2k|    }
 9598|   228k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   260k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   575k|{
 5399|   575k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   575k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   575k|                  "\n"
 5403|   575k|                  "Unsupported range type given as input to a scanning "
 5404|   575k|                  "function.\n"
 5405|   575k|                  "A range needs to have a character type (value type) "
 5406|   575k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   575k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   575k|                  "to be included.\n"
 5409|   575k|                  "See the scnlib documentation for more details.");
 5410|   575k|    static_assert(
 5411|   575k|        !std::is_same_v<T, custom_char_traits>,
 5412|   575k|        "\n"
 5413|   575k|        "Unsupported range type given as input to a scanning "
 5414|   575k|        "function.\n"
 5415|   575k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   575k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   575k|        "not supported.");
 5418|   575k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   575k|                  "\n"
 5420|   575k|                  "Unsupported range type given as input to a scanning "
 5421|   575k|                  "function.\n"
 5422|   575k|                  "file_marker_found cannot be used as an "
 5423|   575k|                  "source range type to scn::scan.\n"
 5424|   575k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   575k|                  "and do not provide an explicit source range, "
 5426|   575k|                  "or use scn::scan with a FILE* directly.");
 5427|   575k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   575k|                  "\n"
 5429|   575k|                  "Unsupported range type given as input to a scanning "
 5430|   575k|                  "function.\n"
 5431|   575k|                  "In order to be scannable, a range needs to satisfy "
 5432|   575k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   575k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   575k|                  "\n"
 5435|   575k|                  "Unsupported range type given as input to a scanning "
 5436|   575k|                  "function.\n"
 5437|   575k|                  "A range needs to model forward_range and have a valid "
 5438|   575k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   575k|                  "Examples of scannable ranges are std::string, "
 5440|   575k|                  "std::string_view, "
 5441|   575k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   575k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   575k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   575k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   575k|{
 5338|   575k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   575k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   575k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   575k|    {
 3014|   575k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   575k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   575k|    {
 2995|   575k|        return t.data();
 2996|   575k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   575k|    {
 3397|   575k|        return detail::to_address(ranges::begin(derived()));
 3398|   575k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  5.00M|{
  331|  5.00M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  5.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  5.00M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.08M|    {
 2883|  1.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.08M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.08M|    {
 2864|  1.08M|        return decay_copy(t.begin());
 2865|  1.08M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  14.6M|    {
 3494|  14.6M|        return m_iterator;
 3495|  14.6M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   575k|    {
 3353|   575k|        return static_cast<const D&>(*this);
 3354|   575k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   575k|    {
 3089|   575k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   575k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   575k|    {
 3055|   575k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   575k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  3.67M|{
 2108|  3.67M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  3.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  3.67M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.57M|    {
 3510|  3.57M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.57M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  9.08M|    {
 1754|  9.08M|        return has_value();
 1755|  9.08M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  16.2M|    {
  505|  16.2M|        return m_has_value;
  506|  16.2M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   835k|    {
 1760|   835k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   835k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   835k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   835k|        return this->get_unexpected().error();
 1762|   835k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   835k|    {
  488|   835k|        return m_unexpected;
  489|   835k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  67.6k|        : base(unexpect, std::move(e.error())),
 1630|  67.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  67.6k|    {
 1632|  67.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  67.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  67.6k|          m_has_value(false)
  466|  67.6k|    {
  467|  67.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   575k|    {
 1330|   575k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   508k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   508k|                      ranges::iterator_t<SourceRange>>) {
 6799|   508k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   508k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  4.05M|    {
 2883|  4.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  4.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  4.05M|    {
 2864|  4.05M|        return decay_copy(t.begin());
 2865|  4.05M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   508k|{
 6784|   508k|    return ranges::end(source);
 6785|   508k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   508k|    {
 2940|   508k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   508k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   508k|    {
 2922|   508k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   508k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  6.75M|    {
 3498|  6.75M|        return m_sentinel;
 3499|  6.75M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  2.73M|    {
 1809|  2.73M|        return value();
 1810|  2.73M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  6.34M|    {
 1783|  6.34M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.34M|        return this->get_value();
 1785|  6.34M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  6.34M|    {
  471|  6.34M|        return m_value;
  472|  6.34M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   508k|        : base(std::in_place, std::forward<U>(val)),
 1584|   508k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   508k|    {
 1586|   508k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   508k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   508k|    {
  457|   508k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   168k|    {
 8855|   168k|        return m_str;
 8856|   168k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   348k|{
 6196|   348k|    detail::check_scan_arg_types<Args...>();
 6197|   348k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   348k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5910|   700k|{
 5911|   700k|    constexpr bool default_constructible_constraint =
 5912|   700k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   700k|    static_assert(default_constructible_constraint,
 5914|   700k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   700k|    constexpr bool destructible_constraint =
 5917|   700k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   700k|    static_assert(destructible_constraint,
 5919|   700k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   700k|    constexpr bool non_reference_constraint =
 5922|   700k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   700k|    static_assert(non_reference_constraint,
 5924|   700k|                  "Scan argument types must not be references");
 5925|       |
 5926|   700k|    constexpr bool movable_constraint =
 5927|   700k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   700k|    static_assert(movable_constraint,
 5929|   700k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   700k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   700k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   700k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   348k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   348k|    {
 6173|   348k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   348k|    {
 6181|   348k|        return {detail::make_arg<
 6182|   348k|            kind, Context,
 6183|   348k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   348k|                                 typename Context::char_type>::value>(args)...};
 6185|   348k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   348k|{
 5961|   348k|    return make_value<Context>(value).ref_value;
 5962|   348k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5895|   384k|{
 5896|   384k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   384k|                                  needs_context_tag>) {
 5900|   384k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   384k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5702|   384k|    {                                                                        \
 5703|   384k|        return val;                                                          \
 5704|   384k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5864|   700k|{
 5865|   700k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   700k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   700k|    constexpr bool scannable_char =
 5869|   700k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   700k|    static_assert(scannable_char,
 5871|   700k|                  "Cannot scan an argument of an unsupported character "
 5872|   700k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   700k|    constexpr bool scannable_const =
 5875|   700k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   700k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   700k|    constexpr bool scannable_disabled =
 5879|   700k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   700k|    static_assert(scannable_disabled,
 5881|   700k|                  "Cannot scan an argument that has been disabled by "
 5882|   700k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   700k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   700k|    static_assert(
 5886|   700k|        scannable,
 5887|   700k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   700k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   700k|    return arg_value{arg};
 5891|   700k|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5645|   700k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   700k|    {
 5647|   700k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6475|   637k|    {
 6476|   637k|        return m_values;
 6477|   637k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   348k|        : basic_scan_args(store.desc, store.args.data())
 6222|   348k|    {
 6223|   348k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  1.08M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.08M|    {
 6275|  1.08M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  5.82M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.82M|    static_cast<    \
  |  | 1109|  5.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.82M|    static_cast<    \
  |  | 1109|  5.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.82M|    {
 3480|  5.82M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  1.08M|{
 8532|  1.08M|    return s;
 8533|  1.08M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  1.08M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   168k|        : m_str(r.str)
 8850|   168k|    {
 8851|   168k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   185k|    {
 1754|   185k|        return has_value();
 1755|   185k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   512k|    {
 1829|   512k|        return &value();
 1830|   512k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   512k|    {
 1783|   512k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   512k|        return this->get_value();
 1785|   512k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   508k|    {
 6556|   508k|        return ranges::begin(m_range);
 6557|   508k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  84.0k|{
 9962|  84.0k|    auto result = make_scan_result<Source, Args...>();
 9963|  84.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  84.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  84.0k|                                   make_scan_args(result->values())));
 9965|  84.0k|    return result;
 9966|  84.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|   260k|{
 9673|   260k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   260k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   260k|{
 9608|   260k|#if !SCN_DISABLE_LOCALE
 9609|   260k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   260k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   260k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   260k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   260k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 228k]
  |  |  ------------------
  ------------------
 9616|  31.2k|        return unexpected(result.error());
 9617|  31.2k|    }
 9618|   228k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   260k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  17.6k|{
10003|  17.6k|    auto result = make_scan_result<Source, T>();
10004|  17.6k|    fill_scan_result(
10005|  17.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  17.6k|                            detail::make_arg<scan_context>(result->value())));
10007|  17.6k|    return result;
10008|  17.6k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  55.4k|{
 9686|  55.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  55.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  55.4k|{
 9632|  55.4k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  55.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  55.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.20k, False: 50.2k]
  |  |  ------------------
  ------------------
 9636|  5.20k|        return unexpected(result.error());
 9637|  5.20k|    }
 9638|  50.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  55.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  35.6k|{
 5946|  35.6k|    check_scan_arg_types<T>();
 5947|       |
 5948|  35.6k|    basic_scan_arg<Context> arg;
 5949|  35.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  35.6k|    arg.m_value = make_value<Context>(value);
 5951|  35.6k|    return arg;
 5952|  35.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  1.19M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  2.21M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  62.8k|    {
 6498|  62.8k|        return std::get<0>(m_values);
 6499|  62.8k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  87.1k|{
 9893|  87.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  87.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  87.1k|                                   make_scan_args(result->values())));
 9896|  87.1k|    return result;
 9897|  87.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9848|   192k|{
 9849|   192k|    return scan_result_type<Source, Args...>();
 9850|   192k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   192k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   192k|        : m_value(T{}), m_has_value(true)
  442|   192k|    {
  443|   192k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|   192k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|   748k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   192k|{
 9834|   192k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 170k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   170k|    else {
 9838|   170k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   170k|    static_cast<    \
  |  | 1109|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   170k|    }
 9840|   192k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   771k|    {
  505|   771k|        return m_has_value;
  506|   771k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   533k|    {
  471|   533k|        return m_value;
  472|   533k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   174k|    {
 8855|   174k|        return m_str;
 8856|   174k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   362k|{
 6196|   362k|    detail::check_scan_arg_types<Args...>();
 6197|   362k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   362k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|   748k|{
 5911|   748k|    constexpr bool default_constructible_constraint =
 5912|   748k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   748k|    static_assert(default_constructible_constraint,
 5914|   748k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   748k|    constexpr bool destructible_constraint =
 5917|   748k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   748k|    static_assert(destructible_constraint,
 5919|   748k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   748k|    constexpr bool non_reference_constraint =
 5922|   748k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   748k|    static_assert(non_reference_constraint,
 5924|   748k|                  "Scan argument types must not be references");
 5925|       |
 5926|   748k|    constexpr bool movable_constraint =
 5927|   748k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   748k|    static_assert(movable_constraint,
 5929|   748k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   748k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   748k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   748k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   362k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   362k|    {
 6173|   362k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   362k|    {
 6181|   362k|        return {detail::make_arg<
 6182|   362k|            kind, Context,
 6183|   362k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   362k|                                 typename Context::char_type>::value>(args)...};
 6185|   362k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   362k|{
 5961|   362k|    return make_value<Context>(value).ref_value;
 5962|   362k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|   400k|{
 5896|   400k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   400k|                                  needs_context_tag>) {
 5900|   400k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   400k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|   400k|    {                                                                        \
 5703|   400k|        return val;                                                          \
 5704|   400k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|   748k|{
 5865|   748k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   748k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   748k|    constexpr bool scannable_char =
 5869|   748k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   748k|    static_assert(scannable_char,
 5871|   748k|                  "Cannot scan an argument of an unsupported character "
 5872|   748k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   748k|    constexpr bool scannable_const =
 5875|   748k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   748k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   748k|    constexpr bool scannable_disabled =
 5879|   748k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   748k|    static_assert(scannable_disabled,
 5881|   748k|                  "Cannot scan an argument that has been disabled by "
 5882|   748k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   748k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   748k|    static_assert(
 5886|   748k|        scannable,
 5887|   748k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   748k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   748k|    return arg_value{arg};
 5891|   748k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|   748k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   748k|    {
 5647|   748k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|   679k|    {
 6476|   679k|        return m_values;
 6477|   679k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   362k|        : basic_scan_args(store.desc, store.args.data())
 6222|   362k|    {
 6223|   362k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   174k|        : m_str(r.str)
 8850|   174k|    {
 8851|   174k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   192k|    {
 1754|   192k|        return has_value();
 1755|   192k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   533k|    {
 1829|   533k|        return &value();
 1830|   533k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   533k|    {
 1783|   533k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   533k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   533k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   533k|        return this->get_value();
 1785|   533k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  87.1k|{
 9962|  87.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  87.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  87.1k|                                   make_scan_args(result->values())));
 9965|  87.1k|    return result;
 9966|  87.1k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  18.5k|{
10003|  18.5k|    auto result = make_scan_result<Source, T>();
10004|  18.5k|    fill_scan_result(
10005|  18.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.5k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.5k|    return result;
10008|  18.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  37.3k|{
 5946|  37.3k|    check_scan_arg_types<T>();
 5947|       |
 5948|  37.3k|    basic_scan_arg<Context> arg;
 5949|  37.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  37.3k|    arg.m_value = make_value<Context>(value);
 5951|  37.3k|    return arg;
 5952|  37.3k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  69.1k|    {
 6498|  69.1k|        return std::get<0>(m_values);
 6499|  69.1k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  89.0k|{
 9893|  89.0k|    auto result = make_scan_result<Source, Args...>();
 9894|  89.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  89.0k|                                   make_scan_args(result->values())));
 9896|  89.0k|    return result;
 9897|  89.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9848|   197k|{
 9849|   197k|    return scan_result_type<Source, Args...>();
 9850|   197k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   197k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   197k|        : m_value(T{}), m_has_value(true)
  442|   197k|    {
  443|   197k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6692|   197k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6466|   765k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   197k|{
 9834|   197k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 174k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   174k|    else {
 9838|   174k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   174k|    static_cast<    \
  |  | 1109|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   174k|    }
 9840|   197k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   789k|    {
  505|   789k|        return m_has_value;
  506|   789k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   546k|    {
  471|   546k|        return m_value;
  472|   546k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   178k|    {
 8855|   178k|        return m_str;
 8856|   178k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   370k|{
 6196|   370k|    detail::check_scan_arg_types<Args...>();
 6197|   370k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   370k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5910|   765k|{
 5911|   765k|    constexpr bool default_constructible_constraint =
 5912|   765k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   765k|    static_assert(default_constructible_constraint,
 5914|   765k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   765k|    constexpr bool destructible_constraint =
 5917|   765k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   765k|    static_assert(destructible_constraint,
 5919|   765k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   765k|    constexpr bool non_reference_constraint =
 5922|   765k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   765k|    static_assert(non_reference_constraint,
 5924|   765k|                  "Scan argument types must not be references");
 5925|       |
 5926|   765k|    constexpr bool movable_constraint =
 5927|   765k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   765k|    static_assert(movable_constraint,
 5929|   765k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   765k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   765k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   765k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   370k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   370k|    {
 6173|   370k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   370k|    {
 6181|   370k|        return {detail::make_arg<
 6182|   370k|            kind, Context,
 6183|   370k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   370k|                                 typename Context::char_type>::value>(args)...};
 6185|   370k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   370k|{
 5961|   370k|    return make_value<Context>(value).ref_value;
 5962|   370k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5895|   408k|{
 5896|   408k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   408k|                                  needs_context_tag>) {
 5900|   408k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   408k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   408k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5702|   408k|    {                                                                        \
 5703|   408k|        return val;                                                          \
 5704|   408k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5864|   765k|{
 5865|   765k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   765k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   765k|    constexpr bool scannable_char =
 5869|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   765k|    static_assert(scannable_char,
 5871|   765k|                  "Cannot scan an argument of an unsupported character "
 5872|   765k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   765k|    constexpr bool scannable_const =
 5875|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   765k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   765k|    constexpr bool scannable_disabled =
 5879|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   765k|    static_assert(scannable_disabled,
 5881|   765k|                  "Cannot scan an argument that has been disabled by "
 5882|   765k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   765k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   765k|    static_assert(
 5886|   765k|        scannable,
 5887|   765k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   765k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   765k|    return arg_value{arg};
 5891|   765k|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5645|   765k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   765k|    {
 5647|   765k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6475|   694k|    {
 6476|   694k|        return m_values;
 6477|   694k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   370k|        : basic_scan_args(store.desc, store.args.data())
 6222|   370k|    {
 6223|   370k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   178k|        : m_str(r.str)
 8850|   178k|    {
 8851|   178k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   197k|    {
 1754|   197k|        return has_value();
 1755|   197k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   546k|    {
 1829|   546k|        return &value();
 1830|   546k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   546k|    {
 1783|   546k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   546k|        return this->get_value();
 1785|   546k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  89.0k|{
 9962|  89.0k|    auto result = make_scan_result<Source, Args...>();
 9963|  89.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  89.0k|                                   make_scan_args(result->values())));
 9965|  89.0k|    return result;
 9966|  89.0k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  19.1k|{
10003|  19.1k|    auto result = make_scan_result<Source, T>();
10004|  19.1k|    fill_scan_result(
10005|  19.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.1k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.1k|    return result;
10008|  19.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  38.4k|{
 5946|  38.4k|    check_scan_arg_types<T>();
 5947|       |
 5948|  38.4k|    basic_scan_arg<Context> arg;
 5949|  38.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  38.4k|    arg.m_value = make_value<Context>(value);
 5951|  38.4k|    return arg;
 5952|  38.4k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  71.3k|    {
 6498|  71.3k|        return std::get<0>(m_values);
 6499|  71.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  67.6k|    {
 2883|  67.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  67.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  67.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  67.6k|    {
 2864|  67.6k|        return decay_copy(t.begin());
 2865|  67.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  21.0M|{
 2108|  21.0M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  21.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  21.0M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.23M|    {
 2940|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.23M|    {
 2922|  1.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.23M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  90.2k|{
 9893|  90.2k|    auto result = make_scan_result<Source, Args...>();
 9894|  90.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  90.2k|                                   make_scan_args(result->values())));
 9896|  90.2k|    return result;
 9897|  90.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9848|   198k|{
 9849|   198k|    return scan_result_type<Source, Args...>();
 9850|   198k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   198k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   198k|        : m_value(T{}), m_has_value(true)
  442|   198k|    {
  443|   198k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6692|   198k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   617k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   617k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   198k|{
 9834|   198k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 175k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   175k|    else {
 9838|   175k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   175k|    static_cast<    \
  |  | 1109|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   175k|    }
 9840|   198k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   617k|    {
 1754|   617k|        return has_value();
 1755|   617k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.23M|    {
  505|  1.23M|        return m_has_value;
  506|  1.23M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  67.6k|    {
 1760|  67.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  67.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  67.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  67.6k|        return this->get_unexpected().error();
 1762|  67.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  67.6k|    {
  488|  67.6k|        return m_unexpected;
  489|  67.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   793k|    {
  505|   793k|        return m_has_value;
  506|   793k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   550k|    {
  471|   550k|        return m_value;
  472|   550k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   549k|    {
 6567|   549k|        m_range = std::forward<Other>(r);
 6568|   549k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   549k|    {
 1809|   549k|        return value();
 1810|   549k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   549k|    {
 1783|   549k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   549k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   549k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   549k|        return this->get_value();
 1785|   549k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   549k|    {
  471|   549k|        return m_value;
  472|   549k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|   280k|{
 9655|   280k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   280k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   280k|{
 9592|   280k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   280k|    auto result = vscan_impl(buffer, format, args);
 9595|   280k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 249k]
  |  |  ------------------
  ------------------
 9596|  31.2k|        return unexpected(result.error());
 9597|  31.2k|    }
 9598|   249k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   280k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   617k|{
 5399|   617k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   617k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   617k|                  "\n"
 5403|   617k|                  "Unsupported range type given as input to a scanning "
 5404|   617k|                  "function.\n"
 5405|   617k|                  "A range needs to have a character type (value type) "
 5406|   617k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   617k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   617k|                  "to be included.\n"
 5409|   617k|                  "See the scnlib documentation for more details.");
 5410|   617k|    static_assert(
 5411|   617k|        !std::is_same_v<T, custom_char_traits>,
 5412|   617k|        "\n"
 5413|   617k|        "Unsupported range type given as input to a scanning "
 5414|   617k|        "function.\n"
 5415|   617k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   617k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   617k|        "not supported.");
 5418|   617k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   617k|                  "\n"
 5420|   617k|                  "Unsupported range type given as input to a scanning "
 5421|   617k|                  "function.\n"
 5422|   617k|                  "file_marker_found cannot be used as an "
 5423|   617k|                  "source range type to scn::scan.\n"
 5424|   617k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   617k|                  "and do not provide an explicit source range, "
 5426|   617k|                  "or use scn::scan with a FILE* directly.");
 5427|   617k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   617k|                  "\n"
 5429|   617k|                  "Unsupported range type given as input to a scanning "
 5430|   617k|                  "function.\n"
 5431|   617k|                  "In order to be scannable, a range needs to satisfy "
 5432|   617k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   617k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   617k|                  "\n"
 5435|   617k|                  "Unsupported range type given as input to a scanning "
 5436|   617k|                  "function.\n"
 5437|   617k|                  "A range needs to model forward_range and have a valid "
 5438|   617k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   617k|                  "Examples of scannable ranges are std::string, "
 5440|   617k|                  "std::string_view, "
 5441|   617k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   617k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   617k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   617k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   617k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   617k|    else {
 5384|   617k|        return make_forward_scan_buffer(r);
 5385|   617k|    }
 5386|   617k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   617k|{
 5203|   617k|    return basic_scan_forward_buffer_impl(range);
 5204|   617k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   617k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   617k|          m_cursor(ranges::begin(*m_range))
 4784|   617k|    {
 4785|   617k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   617k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   617k|    {
 4756|   617k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   617k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   617k|    {
 4447|   617k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   617k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.16M|    {
 2883|  1.16M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.16M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.16M|    {
 2864|  1.16M|        return decay_copy(t.begin());
 2865|  1.16M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|  1.71M|    {
 3494|  1.71M|        return m_iterator;
 3495|  1.71M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  5.94M|    {
 4789|  5.94M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 176k, False: 5.76M]
  ------------------
 4790|   176k|            return false;
 4791|   176k|        }
 4792|  5.76M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  5.76M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  5.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  5.76M|        }
 4795|  5.76M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 5.15M, False: 610k]
  ------------------
 4796|  5.15M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  5.15M|                                          this->m_current_view.begin(),
 4798|  5.15M|                                          this->m_current_view.end());
 4799|  5.15M|        }
 4800|  5.76M|        m_latest = *m_cursor;
 4801|  5.76M|        ++m_cursor;
 4802|  5.76M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  5.76M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  5.76M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  5.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  5.76M|        }
 4806|  5.76M|        return true;
 4807|  5.94M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  17.4M|    {
 2940|  17.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  17.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  17.4M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  17.4M|    {
 2922|  17.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  17.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  17.4M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  18.0M|    {
 3498|  18.0M|        return m_sentinel;
 3499|  18.0M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   617k|    {
 4364|   617k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   617k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   617k|        return true;
 4366|   617k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  67.6k|        : base(unexpect, std::move(e.error())),
 1630|  67.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  67.6k|    {
 1632|  67.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  67.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  67.6k|          m_has_value(false)
  466|  67.6k|    {
  467|  67.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   617k|    {
 1330|   617k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   549k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   549k|                      ranges::iterator_t<SourceRange>>) {
 6799|   549k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   549k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   549k|    {
 2883|   549k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   549k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   549k|    {
 2864|   549k|        return decay_copy(t.begin());
 2865|   549k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   549k|{
 6784|   549k|    return ranges::end(source);
 6785|   549k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   549k|    {
 2940|   549k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   549k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   549k|    {
 2922|   549k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   549k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   549k|        : base(std::in_place, std::forward<U>(val)),
 1584|   549k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   549k|    {
 1586|   549k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   549k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   549k|    {
  457|   549k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   180k|    {
 8855|   180k|        return m_str;
 8856|   180k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.16M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.16M|    static_cast<    \
  |  | 1109|  1.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.16M|    static_cast<    \
  |  | 1109|  1.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.16M|    {
 3480|  1.16M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   180k|        : m_str(r.str)
 8850|   180k|    {
 8851|   180k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   198k|    {
 1754|   198k|        return has_value();
 1755|   198k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   550k|    {
 1829|   550k|        return &value();
 1830|   550k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   550k|    {
 1783|   550k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   550k|        return this->get_value();
 1785|   550k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   549k|    {
 6556|   549k|        return ranges::begin(m_range);
 6557|   549k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  90.2k|{
 9962|  90.2k|    auto result = make_scan_result<Source, Args...>();
 9963|  90.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  90.2k|                                   make_scan_args(result->values())));
 9965|  90.2k|    return result;
 9966|  90.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|   280k|{
 9673|   280k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   280k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   280k|{
 9608|   280k|#if !SCN_DISABLE_LOCALE
 9609|   280k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   280k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   280k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   280k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   280k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 249k]
  |  |  ------------------
  ------------------
 9616|  31.2k|        return unexpected(result.error());
 9617|  31.2k|    }
 9618|   249k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   280k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  17.9k|{
10003|  17.9k|    auto result = make_scan_result<Source, T>();
10004|  17.9k|    fill_scan_result(
10005|  17.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  17.9k|                            detail::make_arg<scan_context>(result->value())));
10007|  17.9k|    return result;
10008|  17.9k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  56.0k|{
 9686|  56.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  56.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  56.0k|{
 9632|  56.0k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  56.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  56.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.20k, False: 50.8k]
  |  |  ------------------
  ------------------
 9636|  5.20k|        return unexpected(result.error());
 9637|  5.20k|    }
 9638|  50.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  50.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  56.0k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  94.2k|{
 9893|  94.2k|    auto result = make_scan_result<Source, Args...>();
 9894|  94.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  94.2k|                                   make_scan_args(result->values())));
 9896|  94.2k|    return result;
 9897|  94.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9848|   207k|{
 9849|   207k|    return scan_result_type<Source, Args...>();
 9850|   207k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   207k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   207k|        : m_value(T{}), m_has_value(true)
  442|   207k|    {
  443|   207k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6692|   207k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   207k|{
 9834|   207k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 184k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   184k|    else {
 9838|   184k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   184k|    static_cast<    \
  |  | 1109|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   184k|    }
 9840|   207k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   829k|    {
  505|   829k|        return m_has_value;
  506|   829k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   576k|    {
  471|   576k|        return m_value;
  472|   576k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   188k|    {
 8855|   188k|        return m_str;
 8856|   188k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   188k|        : m_str(r.str)
 8850|   188k|    {
 8851|   188k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   207k|    {
 1754|   207k|        return has_value();
 1755|   207k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   576k|    {
 1829|   576k|        return &value();
 1830|   576k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   576k|    {
 1783|   576k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   576k|        return this->get_value();
 1785|   576k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  94.2k|{
 9962|  94.2k|    auto result = make_scan_result<Source, Args...>();
 9963|  94.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  94.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  94.2k|                                   make_scan_args(result->values())));
 9965|  94.2k|    return result;
 9966|  94.2k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  18.8k|{
10003|  18.8k|    auto result = make_scan_result<Source, T>();
10004|  18.8k|    fill_scan_result(
10005|  18.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.8k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.8k|    return result;
10008|  18.8k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  96.1k|{
 9893|  96.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  96.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  96.1k|                                   make_scan_args(result->values())));
 9896|  96.1k|    return result;
 9897|  96.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9848|   211k|{
 9849|   211k|    return scan_result_type<Source, Args...>();
 9850|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   211k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   211k|        : m_value(T{}), m_has_value(true)
  442|   211k|    {
  443|   211k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6692|   211k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   211k|{
 9834|   211k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.5k, False: 189k]
  |  |  ------------------
  ------------------
 9835|  22.5k|        out = unexpected(in.error());
 9836|  22.5k|    }
 9837|   189k|    else {
 9838|   189k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   189k|    static_cast<    \
  |  | 1109|   189k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   189k|    }
 9840|   211k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.5k|    {
 1330|  22.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.5k|    {
  917|  22.5k|        assign_common(std::move(other));
  918|  22.5k|        return *this;
  919|  22.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.5k|    {
  964|  22.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.5k, False: 0]
  ------------------
  965|  22.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   846k|    {
  505|   846k|        return m_has_value;
  506|   846k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   589k|    {
  471|   589k|        return m_value;
  472|   589k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.5k|    {
 1060|  22.5k|        this->destroy_value();
 1061|  22.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.5k|    {
  519|  22.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.5k|                                  std::forward<Args>(args)...);
  521|  22.5k|        m_has_value = false;
  522|  22.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.5k|    {
  496|  22.5k|        return std::move(m_unexpected);
  497|  22.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   192k|    {
 8855|   192k|        return m_str;
 8856|   192k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   192k|        : m_str(r.str)
 8850|   192k|    {
 8851|   192k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   211k|    {
 1754|   211k|        return has_value();
 1755|   211k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   589k|    {
 1829|   589k|        return &value();
 1830|   589k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   589k|    {
 1783|   589k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   589k|        return this->get_value();
 1785|   589k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  96.1k|{
 9962|  96.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  96.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  96.1k|                                   make_scan_args(result->values())));
 9965|  96.1k|    return result;
 9966|  96.1k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  19.2k|{
10003|  19.2k|    auto result = make_scan_result<Source, T>();
10004|  19.2k|    fill_scan_result(
10005|  19.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.2k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.2k|    return result;
10008|  19.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   138k|    {
 2883|   138k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   138k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   138k|    {
 2864|   138k|        return decay_copy(t.begin());
 2865|   138k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  4.17M|{
 2108|  4.17M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  4.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  4.17M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.02M|    {
 2940|  1.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.02M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.02M|    {
 2922|  1.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.02M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9848|   158k|{
 9849|   158k|    return scan_result_type<Source, Args...>();
 9850|   158k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   158k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   158k|        : m_value(T{}), m_has_value(true)
  442|   158k|    {
  443|   158k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6692|   158k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   510k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   510k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   158k|{
 9834|   158k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 113k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   113k|    else {
 9838|   113k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   113k|    static_cast<    \
  |  | 1109|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   113k|    }
 9840|   158k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   510k|    {
 1754|   510k|        return has_value();
 1755|   510k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.02M|    {
  505|  1.02M|        return m_has_value;
  506|  1.02M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   135k|    {
 1760|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   135k|        return this->get_unexpected().error();
 1762|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   135k|    {
  488|   135k|        return m_unexpected;
  489|   135k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   632k|    {
  505|   632k|        return m_has_value;
  506|   632k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   384k|    {
  471|   384k|        return m_value;
  472|   384k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|   375k|    {
 6567|   375k|        m_range = std::forward<Other>(r);
 6568|   375k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   375k|    {
 1809|   375k|        return value();
 1810|   375k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   375k|    {
 1783|   375k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   375k|        return this->get_value();
 1785|   375k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   375k|    {
  471|   375k|        return m_value;
  472|   375k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   232k|{
 9592|   232k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   232k|    auto result = vscan_impl(buffer, format, args);
 9595|   232k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.4k, False: 169k]
  |  |  ------------------
  ------------------
 9596|  62.4k|        return unexpected(result.error());
 9597|  62.4k|    }
 9598|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   232k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|   510k|{
 5399|   510k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   510k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   510k|                  "\n"
 5403|   510k|                  "Unsupported range type given as input to a scanning "
 5404|   510k|                  "function.\n"
 5405|   510k|                  "A range needs to have a character type (value type) "
 5406|   510k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   510k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   510k|                  "to be included.\n"
 5409|   510k|                  "See the scnlib documentation for more details.");
 5410|   510k|    static_assert(
 5411|   510k|        !std::is_same_v<T, custom_char_traits>,
 5412|   510k|        "\n"
 5413|   510k|        "Unsupported range type given as input to a scanning "
 5414|   510k|        "function.\n"
 5415|   510k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   510k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   510k|        "not supported.");
 5418|   510k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   510k|                  "\n"
 5420|   510k|                  "Unsupported range type given as input to a scanning "
 5421|   510k|                  "function.\n"
 5422|   510k|                  "file_marker_found cannot be used as an "
 5423|   510k|                  "source range type to scn::scan.\n"
 5424|   510k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   510k|                  "and do not provide an explicit source range, "
 5426|   510k|                  "or use scn::scan with a FILE* directly.");
 5427|   510k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   510k|                  "\n"
 5429|   510k|                  "Unsupported range type given as input to a scanning "
 5430|   510k|                  "function.\n"
 5431|   510k|                  "In order to be scannable, a range needs to satisfy "
 5432|   510k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   510k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   510k|                  "\n"
 5435|   510k|                  "Unsupported range type given as input to a scanning "
 5436|   510k|                  "function.\n"
 5437|   510k|                  "A range needs to model forward_range and have a valid "
 5438|   510k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   510k|                  "Examples of scannable ranges are std::string, "
 5440|   510k|                  "std::string_view, "
 5441|   510k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   510k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   510k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   510k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   510k|{
 5338|   510k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   510k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   510k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   510k|    {
 3014|   510k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   510k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   510k|    {
 2995|   510k|        return t.data();
 2996|   510k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|   510k|    {
 3397|   510k|        return detail::to_address(ranges::begin(derived()));
 3398|   510k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  2.45M|{
  331|  2.45M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  2.45M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  2.45M|{
  309|  2.45M|    return p;
  310|  2.45M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   886k|    {
 2883|   886k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   886k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   886k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   886k|    {
 2864|   886k|        return decay_copy(t.begin());
 2865|   886k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  21.2M|    {
 3494|  21.2M|        return m_iterator;
 3495|  21.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|   510k|    {
 3353|   510k|        return static_cast<const D&>(*this);
 3354|   510k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   510k|    {
 3089|   510k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   510k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   510k|    {
 3055|   510k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   510k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  2.67M|    {
 3510|  2.67M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  2.67M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   135k|        : base(unexpect, std::move(e.error())),
 1630|   135k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   135k|    {
 1632|   135k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   135k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   135k|          m_has_value(false)
  466|   135k|    {
  467|   135k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   510k|    {
 1330|   510k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   375k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   375k|                      ranges::iterator_t<SourceRange>>) {
 6799|   375k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   375k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.74M|    {
 2883|  1.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.74M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.74M|    {
 2864|  1.74M|        return decay_copy(t.begin());
 2865|  1.74M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|   375k|{
 6784|   375k|    return ranges::end(source);
 6785|   375k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   375k|    {
 2940|   375k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   375k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   375k|    {
 2922|   375k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   375k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  12.7M|    {
 3498|  12.7M|        return m_sentinel;
 3499|  12.7M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   375k|        : base(std::in_place, std::forward<U>(val)),
 1584|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   375k|    {
 1586|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   375k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   375k|    {
  457|   375k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   144k|    {
 8855|   144k|        return m_str;
 8856|   144k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   289k|{
 6196|   289k|    detail::check_scan_arg_types<Args...>();
 6197|   289k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   289k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   289k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   289k|    {
 6173|   289k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   289k|    {
 6181|   289k|        return {detail::make_arg<
 6182|   289k|            kind, Context,
 6183|   289k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   289k|                                 typename Context::char_type>::value>(args)...};
 6185|   289k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   289k|{
 5961|   289k|    return make_value<Context>(value).ref_value;
 5962|   289k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5895|   316k|{
 5896|   316k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   316k|                                  needs_context_tag>) {
 5900|   316k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   316k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5702|   316k|    {                                                                        \
 5703|   316k|        return val;                                                          \
 5704|   316k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   289k|        : basic_scan_args(store.desc, store.args.data())
 6222|   289k|    {
 6223|   289k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   929k|        : m_desc(desc), m_builtin_values(data)
 6274|   929k|    {
 6275|   929k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  7.91M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.91M|    static_cast<    \
  |  | 1109|  7.91M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.91M|    static_cast<    \
  |  | 1109|  7.91M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  7.91M|    {
 3480|  7.91M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   929k|{
 8537|   929k|    return s;
 8538|   929k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   929k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   144k|        : m_str(r.str)
 8850|   144k|    {
 8851|   144k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   158k|    {
 1754|   158k|        return has_value();
 1755|   158k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   384k|    {
 1829|   384k|        return &value();
 1830|   384k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   384k|    {
 1783|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   384k|        return this->get_value();
 1785|   384k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|   375k|    {
 6556|   375k|        return ranges::begin(m_range);
 6557|   375k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   232k|{
 9608|   232k|#if !SCN_DISABLE_LOCALE
 9609|   232k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   232k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   232k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   232k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   232k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.4k, False: 169k]
  |  |  ------------------
  ------------------
 9616|  62.4k|        return unexpected(result.error());
 9617|  62.4k|    }
 9618|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   232k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.9k|{
 9632|  45.9k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.4k, False: 35.5k]
  |  |  ------------------
  ------------------
 9636|  10.4k|        return unexpected(result.error());
 9637|  10.4k|    }
 9638|  35.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  35.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  27.1k|{
 5946|  27.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  27.1k|    basic_scan_arg<Context> arg;
 5949|  27.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  27.1k|    arg.m_value = make_value<Context>(value);
 5951|  27.1k|    return arg;
 5952|  27.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  1.02M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9848|   174k|{
 9849|   174k|    return scan_result_type<Source, Args...>();
 9850|   174k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   174k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   174k|        : m_value(T{}), m_has_value(true)
  442|   174k|    {
  443|   174k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|   174k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   174k|{
 9834|   174k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 128k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   128k|    else {
 9838|   128k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   128k|    static_cast<    \
  |  | 1109|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   128k|    }
 9840|   174k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   696k|    {
  505|   696k|        return m_has_value;
  506|   696k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   432k|    {
  471|   432k|        return m_value;
  472|   432k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   158k|    {
 8855|   158k|        return m_str;
 8856|   158k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   316k|{
 6196|   316k|    detail::check_scan_arg_types<Args...>();
 6197|   316k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   316k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   316k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   316k|    {
 6173|   316k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   316k|    {
 6181|   316k|        return {detail::make_arg<
 6182|   316k|            kind, Context,
 6183|   316k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   316k|                                 typename Context::char_type>::value>(args)...};
 6185|   316k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   316k|{
 5961|   316k|    return make_value<Context>(value).ref_value;
 5962|   316k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|   348k|{
 5896|   348k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   348k|                                  needs_context_tag>) {
 5900|   348k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   348k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|   348k|    {                                                                        \
 5703|   348k|        return val;                                                          \
 5704|   348k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   316k|        : basic_scan_args(store.desc, store.args.data())
 6222|   316k|    {
 6223|   316k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   158k|        : m_str(r.str)
 8850|   158k|    {
 8851|   158k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   174k|    {
 1754|   174k|        return has_value();
 1755|   174k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   432k|    {
 1829|   432k|        return &value();
 1830|   432k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   432k|    {
 1783|   432k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   432k|        return this->get_value();
 1785|   432k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  31.7k|{
 5946|  31.7k|    check_scan_arg_types<T>();
 5947|       |
 5948|  31.7k|    basic_scan_arg<Context> arg;
 5949|  31.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  31.7k|    arg.m_value = make_value<Context>(value);
 5951|  31.7k|    return arg;
 5952|  31.7k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9848|   178k|{
 9849|   178k|    return scan_result_type<Source, Args...>();
 9850|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   178k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   178k|        : m_value(T{}), m_has_value(true)
  442|   178k|    {
  443|   178k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6692|   178k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   178k|{
 9834|   178k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 133k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   133k|    else {
 9838|   133k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   133k|    static_cast<    \
  |  | 1109|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   133k|    }
 9840|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   713k|    {
  505|   713k|        return m_has_value;
  506|   713k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   444k|    {
  471|   444k|        return m_value;
  472|   444k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   161k|    {
 8855|   161k|        return m_str;
 8856|   161k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   323k|{
 6196|   323k|    detail::check_scan_arg_types<Args...>();
 6197|   323k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   323k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   323k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   323k|    {
 6173|   323k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   323k|    {
 6181|   323k|        return {detail::make_arg<
 6182|   323k|            kind, Context,
 6183|   323k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   323k|                                 typename Context::char_type>::value>(args)...};
 6185|   323k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   323k|{
 5961|   323k|    return make_value<Context>(value).ref_value;
 5962|   323k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5895|   356k|{
 5896|   356k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   356k|                                  needs_context_tag>) {
 5900|   356k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   356k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5702|   356k|    {                                                                        \
 5703|   356k|        return val;                                                          \
 5704|   356k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   323k|        : basic_scan_args(store.desc, store.args.data())
 6222|   323k|    {
 6223|   323k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   161k|        : m_str(r.str)
 8850|   161k|    {
 8851|   161k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   178k|    {
 1754|   178k|        return has_value();
 1755|   178k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   444k|    {
 1829|   444k|        return &value();
 1830|   444k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   444k|    {
 1783|   444k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   444k|        return this->get_value();
 1785|   444k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  32.9k|{
 5946|  32.9k|    check_scan_arg_types<T>();
 5947|       |
 5948|  32.9k|    basic_scan_arg<Context> arg;
 5949|  32.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  32.9k|    arg.m_value = make_value<Context>(value);
 5951|  32.9k|    return arg;
 5952|  32.9k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   135k|    {
 2883|   135k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   135k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   135k|    {
 2864|   135k|        return decay_copy(t.begin());
 2865|   135k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  10.2M|{
 2108|  10.2M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  10.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  10.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.02M|    {
 2940|  1.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.02M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.02M|    {
 2922|  1.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.02M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9848|   158k|{
 9849|   158k|    return scan_result_type<Source, Args...>();
 9850|   158k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   158k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   158k|        : m_value(T{}), m_has_value(true)
  442|   158k|    {
  443|   158k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6692|   158k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   510k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   510k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   158k|{
 9834|   158k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 112k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   112k|    else {
 9838|   112k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   112k|    static_cast<    \
  |  | 1109|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   112k|    }
 9840|   158k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   510k|    {
 1754|   510k|        return has_value();
 1755|   510k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.02M|    {
  505|  1.02M|        return m_has_value;
  506|  1.02M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|   135k|    {
 1760|   135k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   135k|        return this->get_unexpected().error();
 1762|   135k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   135k|    {
  488|   135k|        return m_unexpected;
  489|   135k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   632k|    {
  505|   632k|        return m_has_value;
  506|   632k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   384k|    {
  471|   384k|        return m_value;
  472|   384k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   375k|    {
 6567|   375k|        m_range = std::forward<Other>(r);
 6568|   375k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   375k|    {
 1809|   375k|        return value();
 1810|   375k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   375k|    {
 1783|   375k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   375k|        return this->get_value();
 1785|   375k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   375k|    {
  471|   375k|        return m_value;
  472|   375k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   232k|{
 9592|   232k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   232k|    auto result = vscan_impl(buffer, format, args);
 9595|   232k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.4k, False: 169k]
  |  |  ------------------
  ------------------
 9596|  62.4k|        return unexpected(result.error());
 9597|  62.4k|    }
 9598|   169k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   232k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   510k|{
 5399|   510k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   510k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   510k|                  "\n"
 5403|   510k|                  "Unsupported range type given as input to a scanning "
 5404|   510k|                  "function.\n"
 5405|   510k|                  "A range needs to have a character type (value type) "
 5406|   510k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   510k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   510k|                  "to be included.\n"
 5409|   510k|                  "See the scnlib documentation for more details.");
 5410|   510k|    static_assert(
 5411|   510k|        !std::is_same_v<T, custom_char_traits>,
 5412|   510k|        "\n"
 5413|   510k|        "Unsupported range type given as input to a scanning "
 5414|   510k|        "function.\n"
 5415|   510k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   510k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   510k|        "not supported.");
 5418|   510k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   510k|                  "\n"
 5420|   510k|                  "Unsupported range type given as input to a scanning "
 5421|   510k|                  "function.\n"
 5422|   510k|                  "file_marker_found cannot be used as an "
 5423|   510k|                  "source range type to scn::scan.\n"
 5424|   510k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   510k|                  "and do not provide an explicit source range, "
 5426|   510k|                  "or use scn::scan with a FILE* directly.");
 5427|   510k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   510k|                  "\n"
 5429|   510k|                  "Unsupported range type given as input to a scanning "
 5430|   510k|                  "function.\n"
 5431|   510k|                  "In order to be scannable, a range needs to satisfy "
 5432|   510k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   510k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   510k|                  "\n"
 5435|   510k|                  "Unsupported range type given as input to a scanning "
 5436|   510k|                  "function.\n"
 5437|   510k|                  "A range needs to model forward_range and have a valid "
 5438|   510k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   510k|                  "Examples of scannable ranges are std::string, "
 5440|   510k|                  "std::string_view, "
 5441|   510k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   510k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   510k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   510k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   510k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   510k|    else {
 5384|   510k|        return make_forward_scan_buffer(r);
 5385|   510k|    }
 5386|   510k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   510k|{
 5203|   510k|    return basic_scan_forward_buffer_impl(range);
 5204|   510k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   510k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   510k|          m_cursor(ranges::begin(*m_range))
 4784|   510k|    {
 4785|   510k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   510k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   510k|    {
 4756|   510k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   510k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   510k|    {
 4447|   510k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   510k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   885k|    {
 2883|   885k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   885k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   885k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   885k|    {
 2864|   885k|        return decay_copy(t.begin());
 2865|   885k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  1.26M|    {
 3494|  1.26M|        return m_iterator;
 3495|  1.26M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  2.61M|    {
 4789|  2.61M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 183k, False: 2.42M]
  ------------------
 4790|   183k|            return false;
 4791|   183k|        }
 4792|  2.42M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  2.42M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  2.42M|        }
 4795|  2.42M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.91M, False: 508k]
  ------------------
 4796|  1.91M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.91M|                                          this->m_current_view.begin(),
 4798|  1.91M|                                          this->m_current_view.end());
 4799|  1.91M|        }
 4800|  2.42M|        m_latest = *m_cursor;
 4801|  2.42M|        ++m_cursor;
 4802|  2.42M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  2.42M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  2.42M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  2.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  2.42M|        }
 4806|  2.42M|        return true;
 4807|  2.61M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  7.46M|    {
 2940|  7.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  7.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  7.46M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  7.46M|    {
 2922|  7.46M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  7.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  7.46M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  7.84M|    {
 3498|  7.84M|        return m_sentinel;
 3499|  7.84M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   510k|    {
 4364|   510k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   510k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   510k|        return true;
 4366|   510k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|   135k|        : base(unexpect, std::move(e.error())),
 1630|   135k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   135k|    {
 1632|   135k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|   135k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   135k|          m_has_value(false)
  466|   135k|    {
  467|   135k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   510k|    {
 1330|   510k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   375k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   375k|                      ranges::iterator_t<SourceRange>>) {
 6799|   375k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   375k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   375k|    {
 2883|   375k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   375k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   375k|    {
 2864|   375k|        return decay_copy(t.begin());
 2865|   375k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   375k|{
 6784|   375k|    return ranges::end(source);
 6785|   375k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   375k|    {
 2940|   375k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   375k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   375k|    {
 2922|   375k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   375k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   375k|        : base(std::in_place, std::forward<U>(val)),
 1584|   375k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   375k|    {
 1586|   375k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   375k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   375k|    {
  457|   375k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   144k|    {
 8855|   144k|        return m_str;
 8856|   144k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   885k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   885k|    static_cast<    \
  |  | 1109|   885k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   885k|    static_cast<    \
  |  | 1109|   885k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   885k|    {
 3480|   885k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   144k|        : m_str(r.str)
 8850|   144k|    {
 8851|   144k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   158k|    {
 1754|   158k|        return has_value();
 1755|   158k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   384k|    {
 1829|   384k|        return &value();
 1830|   384k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   384k|    {
 1783|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   384k|        return this->get_value();
 1785|   384k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   375k|    {
 6556|   375k|        return ranges::begin(m_range);
 6557|   375k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   232k|{
 9608|   232k|#if !SCN_DISABLE_LOCALE
 9609|   232k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   232k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   232k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   232k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   232k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.4k, False: 169k]
  |  |  ------------------
  ------------------
 9616|  62.4k|        return unexpected(result.error());
 9617|  62.4k|    }
 9618|   169k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   232k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.9k|{
 9632|  45.9k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.4k, False: 35.4k]
  |  |  ------------------
  ------------------
 9636|  10.4k|        return unexpected(result.error());
 9637|  10.4k|    }
 9638|  35.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9848|   173k|{
 9849|   173k|    return scan_result_type<Source, Args...>();
 9850|   173k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   173k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   173k|        : m_value(T{}), m_has_value(true)
  442|   173k|    {
  443|   173k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6692|   173k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   173k|{
 9834|   173k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 128k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   128k|    else {
 9838|   128k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   128k|    static_cast<    \
  |  | 1109|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   128k|    }
 9840|   173k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   695k|    {
  505|   695k|        return m_has_value;
  506|   695k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   431k|    {
  471|   431k|        return m_value;
  472|   431k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   158k|    {
 8855|   158k|        return m_str;
 8856|   158k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   158k|        : m_str(r.str)
 8850|   158k|    {
 8851|   158k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   173k|    {
 1754|   173k|        return has_value();
 1755|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   431k|    {
 1829|   431k|        return &value();
 1830|   431k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   431k|    {
 1783|   431k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   431k|        return this->get_value();
 1785|   431k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9848|   178k|{
 9849|   178k|    return scan_result_type<Source, Args...>();
 9850|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   178k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   178k|        : m_value(T{}), m_has_value(true)
  442|   178k|    {
  443|   178k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6692|   178k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   178k|{
 9834|   178k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.1k, False: 133k]
  |  |  ------------------
  ------------------
 9835|  45.1k|        out = unexpected(in.error());
 9836|  45.1k|    }
 9837|   133k|    else {
 9838|   133k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   133k|    static_cast<    \
  |  | 1109|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   133k|    }
 9840|   178k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.1k|        : base(unexpect, std::move(e.error())),
 1630|  45.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.1k|    {
 1632|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.1k|          m_has_value(false)
  466|  45.1k|    {
  467|  45.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.1k|    {
 1330|  45.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.1k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.1k|    {
  917|  45.1k|        assign_common(std::move(other));
  918|  45.1k|        return *this;
  919|  45.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.1k|    {
  964|  45.1k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.1k, False: 0]
  ------------------
  965|  45.1k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.1k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.1k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.1k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   713k|    {
  505|   713k|        return m_has_value;
  506|   713k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   444k|    {
  471|   444k|        return m_value;
  472|   444k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.1k|    {
 1060|  45.1k|        this->destroy_value();
 1061|  45.1k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.1k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.1k|    {
  519|  45.1k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.1k|                                  std::forward<Args>(args)...);
  521|  45.1k|        m_has_value = false;
  522|  45.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.1k|    {
  488|  45.1k|        return m_unexpected;
  489|  45.1k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.1k|    {
  496|  45.1k|        return std::move(m_unexpected);
  497|  45.1k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   161k|    {
 8855|   161k|        return m_str;
 8856|   161k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   161k|        : m_str(r.str)
 8850|   161k|    {
 8851|   161k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   178k|    {
 1754|   178k|        return has_value();
 1755|   178k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   444k|    {
 1829|   444k|        return &value();
 1830|   444k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   444k|    {
 1783|   444k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   444k|        return this->get_value();
 1785|   444k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|  2.51M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|  2.51M|    {
 3760|  2.51M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  2.51M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|  2.51M|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|   215k|    {
 3771|   215k|        return m_code;
 3772|   215k|    }
_ZNK3scn2v410scan_error3msgEv:
 3775|  2.10k|    {
 3776|  2.10k|        return m_msg;
 3777|  2.10k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   468k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   468k|    else {
 3999|   468k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   468k|    }
 4001|   468k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  27.1M|    {
 3494|  27.1M|        return m_iterator;
 3495|  27.1M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  21.7M|    {
 3494|  21.7M|        return m_iterator;
 3495|  21.7M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  13.7M|    {
  587|  13.7M|        return m_has_value;
  588|  13.7M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  2.67M|    {
  570|  2.67M|        return m_unexpected;
  571|  2.67M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   324k|    {
 1760|   324k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   324k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   324k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   324k|        return this->get_unexpected().error();
 1762|   324k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.60M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.18M|    {
 7141|  1.18M|        m_specs.type = type;
 7142|  1.18M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  1.60M|    {
 7214|  1.60M|        return m_error;
 7215|  1.60M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|  2.49M|{
 3936|  2.49M|    return unexpected(scan_error{c, m});
 3937|  2.49M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  4.29M|{
 4326|       |    // Pattern_White_Space property
 4327|  4.29M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 4.13M, False: 166k]
  |  Branch (4327:27): [True: 396k, False: 3.73M]
  ------------------
 4328|  4.29M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 31.7k, False: 3.86M]
  ------------------
 4329|  4.29M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 43.6k, False: 3.82M]
  ------------------
 4330|  4.29M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 3.81k, False: 3.82M]
  ------------------
 4331|  4.29M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 24.3k, False: 3.79M]
  ------------------
 4332|  4.29M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 986k, False: 2.81M]
  ------------------
 4333|  4.29M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 522, False: 2.81M]
  ------------------
 4334|  4.29M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|   417k|{
 7897|   417k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 417k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 417k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 417k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 417k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 417k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 417k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 417k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 417k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 417k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 417k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 417k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 417k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 417k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 417k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 417k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 417k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 417k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 417k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|   128k|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 128k, False: 289k]
  ------------------
 7927|   270k|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 142k, False: 275k]
  ------------------
 7928|   417k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 147k, False: 270k]
  ------------------
 7929|   417k|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 417k]
  ------------------
 7930|   417k|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 417k]
  ------------------
 7931|   417k|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 417k]
  ------------------
 7932|   417k|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 417k]
  ------------------
 7933|   417k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 417k]
  ------------------
 7934|   417k|            return arg_type_category::floating;
 7935|       |
 7936|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 0, False: 417k]
  ------------------
 7937|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 0, False: 417k]
  ------------------
 7938|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 0, False: 417k]
  ------------------
 7939|      0|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 417k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 417k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|   417k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|   417k|            SCN_CLANG_POP
 7950|   417k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|   417k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  2.35M|    {
 1770|  2.35M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.35M|        return std::move(this->get_unexpected().error());
 1772|  2.35M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  1.80M|    {
 3055|  1.80M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  1.80M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|  1.80M|    {
 3089|  1.80M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  1.80M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|  1.80M|    {
 3112|  1.80M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|  1.80M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|  1.80M|    {
 3121|  1.80M|        return fn::impl(std::forward<T>(t));
 3122|  1.80M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  1.60M|{
 8033|  1.60M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 1.18M, False: 417k]
  ------------------
 8034|  1.60M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 0, False: 1.18M]
  ------------------
 8035|  1.18M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 0, False: 1.18M]
  ------------------
 8036|      0|        SCN_UNLIKELY_ATTR
 8037|      0|        return handler.on_error("Invalid type specifier for float type");
 8038|      0|    }
 8039|  1.60M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  11.0M|    {
 1754|  11.0M|        return has_value();
 1755|  11.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|   138M|    {
 4491|   138M|        assert(m_begin);
 4492|   138M|        return m_end == nullptr;
 4493|   138M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|  2.27M|    {
 4508|  2.27M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 2.27M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  2.27M|        return parent()->get_segment_starting_at(position());
 4514|  2.27M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  76.4M|    {
 4502|  76.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  76.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  76.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  76.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  2.27M|    {
 4395|  2.27M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 973k, False: 1.30M]
  |  |  ------------------
  ------------------
 4396|  2.27M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   973k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   973k|        }
 4399|  1.30M|        const auto start = pos - m_putback_buffer.size();
 4400|  1.30M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  1.30M|        return m_current_view.substr(start);
 4402|  1.30M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4496|  1.60M|    {
 4497|  1.60M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.60M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.60M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|  4.15M|    {
 4486|  4.15M|        return m_position;
 4487|  4.15M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|  1.85M|    {
 4417|  1.85M|        return m_is_contiguous;
 4418|  1.85M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  70.5M|    {
 4491|  70.5M|        assert(m_begin);
 4492|  70.5M|        return m_end == nullptr;
 4493|  70.5M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   359k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   359k|    else {
 3999|   359k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   359k|    }
 4001|   359k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  1.26M|    {
 4508|  1.26M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 1.26M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  1.26M|        return parent()->get_segment_starting_at(position());
 4514|  1.26M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  37.7M|    {
 4502|  37.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  37.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  37.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  37.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  1.26M|    {
 4395|  1.26M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 736k, False: 529k]
  |  |  ------------------
  ------------------
 4396|  1.26M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   736k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   736k|        }
 4399|   529k|        const auto start = pos - m_putback_buffer.size();
 4400|   529k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   529k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   529k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   529k|        return m_current_view.substr(start);
 4402|   529k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4496|  1.34M|    {
 4497|  1.34M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.34M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  2.74M|    {
 4486|  2.74M|        return m_position;
 4487|  2.74M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  1.53M|    {
 4417|  1.53M|        return m_is_contiguous;
 4418|  1.53M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|  3.38M|    {
 3348|  3.38M|        return static_cast<D&>(*this);
 3349|  3.38M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|  3.38M|    {
 3389|  3.38M|        return detail::to_address(ranges::begin(derived()));
 3390|  3.38M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  1.19M|    {
 3348|  1.19M|        return static_cast<D&>(*this);
 3349|  1.19M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  1.19M|    {
 3389|  1.19M|        return detail::to_address(ranges::begin(derived()));
 3390|  1.19M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   449k|    {
 9052|   449k|        return ranges::subrange{begin(), end()};
 9053|   449k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   449k|    {
 9044|   449k|        return ranges::default_sentinel;
 9045|   449k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  6.59M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.59M|    static_cast<    \
  |  | 1109|  6.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.59M|    static_cast<    \
  |  | 1109|  6.59M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  6.59M|    {
 3480|  6.59M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  3.40M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   617k|    {
 1993|   617k|        return detail::transform_error_impl(std::move(*this),
 1994|   617k|                                            std::forward<F>(f));
 1995|   617k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   617k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   617k|    else {
 1486|   617k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   617k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   617k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 607k, False: 9.83k]
  |  |  ------------------
  ------------------
 1488|   617k|                   ? result(*std::forward<Exp>(exp))
 1489|   617k|                   : result(unexpect,
 1490|  9.83k|                            trivial_invoke(std::forward<F>(f),
 1491|  9.83k|                                           std::forward<Exp>(exp).error()));
 1492|   617k|    }
 1493|   617k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  6.41M|    {
  505|  6.41M|        return m_has_value;
  506|  6.41M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.18M|    {
 1819|  2.18M|        return std::move(value());
 1820|  2.18M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.46M|    {
 1783|  2.46M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.46M|        return this->get_value();
 1785|  2.46M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  2.46M|    {
  471|  2.46M|        return m_value;
  472|  2.46M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  2.64M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.64M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.64M|    {
 1586|  2.64M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.64M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.64M|    {
  457|  2.64M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.49M|    {
 1330|  3.49M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  27.4k|{
 1364|  27.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  27.4k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  37.0k|    {
 1770|  37.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  37.0k|        return std::move(this->get_unexpected().error());
 1772|  37.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  47.6k|    {
  488|  47.6k|        return m_unexpected;
  489|  47.6k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|   365k|    {
  380|   365k|        return m_unexpected;
  381|   365k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   619k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   619k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   619k|    {
 1642|   619k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   798k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   798k|          m_has_value(false)
  466|   798k|    {
  467|   798k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   372k|    {
 9052|   372k|        return ranges::subrange{begin(), end()};
 9053|   372k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   372k|    {
 9044|   372k|        return ranges::default_sentinel;
 9045|   372k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  5.29M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.29M|    static_cast<    \
  |  | 1109|  5.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.29M|    static_cast<    \
  |  | 1109|  5.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.29M|    {
 3480|  5.29M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   510k|    {
 1993|   510k|        return detail::transform_error_impl(std::move(*this),
 1994|   510k|                                            std::forward<F>(f));
 1995|   510k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   510k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   510k|    else {
 1486|   510k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   510k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 506k, False: 3.95k]
  |  |  ------------------
  ------------------
 1488|   510k|                   ? result(*std::forward<Exp>(exp))
 1489|   510k|                   : result(unexpect,
 1490|  3.95k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.95k|                                           std::forward<Exp>(exp).error()));
 1492|   510k|    }
 1493|   510k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.96M|    {
  505|  4.96M|        return m_has_value;
  506|  4.96M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.79M|    {
 1819|  1.79M|        return std::move(value());
 1820|  1.79M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  1.81M|    {
 1783|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.81M|        return this->get_value();
 1785|  1.81M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.81M|    {
  471|  1.81M|        return m_value;
  472|  1.81M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.90M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.90M|    {
 1586|  1.90M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.90M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.90M|    {
  457|  1.90M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.90M|    {
 1330|  2.90M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  57.9k|    {
 1770|  57.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  57.9k|        return std::move(this->get_unexpected().error());
 1772|  57.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  60.1k|    {
  488|  60.1k|        return m_unexpected;
  489|  60.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   635k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   635k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   635k|    {
 1642|   635k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.00M|          m_has_value(false)
  466|  1.00M|    {
  467|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  2.49M|        : m_unexpected(std::forward<Err>(e))
  365|  2.49M|    {
  366|  2.49M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.49M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.49M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   622k|        : base(unexpect, std::move(e.error())),
 1630|   622k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   622k|    {
 1632|   622k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   622k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   622k|          m_has_value(false)
  466|   622k|    {
  467|   622k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.04M|    {
 1330|  6.04M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   161k|        : base(unexpect, std::move(e.error())),
 1630|   161k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   161k|    {
 1632|   161k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   716k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   716k|          m_has_value(false)
  466|   716k|    {
  467|   716k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.29M|    {
 1330|  3.29M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.53M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.53M|    {
 1586|  2.53M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.53M|    {
  457|  2.53M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  3.85M|    {
 1754|  3.85M|        return has_value();
 1755|  3.85M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|  6.07M|    {
  505|  6.07M|        return m_has_value;
  506|  6.07M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|   187k|    {
 1760|   187k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   187k|        return this->get_unexpected().error();
 1762|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   187k|    {
  488|   187k|        return m_unexpected;
  489|   187k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.64M|    {
 1819|  1.64M|        return std::move(value());
 1820|  1.64M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  2.03M|    {
 1783|  2.03M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.03M|        return this->get_value();
 1785|  2.03M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  2.03M|    {
  471|  2.03M|        return m_value;
  472|  2.03M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   300k|        : base(unexpect, std::move(e.error())),
 1630|   300k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   300k|    {
 1632|   300k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   868k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   868k|          m_has_value(false)
  466|   868k|    {
  467|   868k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.91M|    {
 1330|  2.91M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.04M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.04M|    {
 1586|  2.04M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.04M|    {
  457|  2.04M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  3.41M|    {
 1754|  3.41M|        return has_value();
 1755|  3.41M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  5.37M|    {
  505|  5.37M|        return m_has_value;
  506|  5.37M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|   361k|    {
 1760|   361k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   361k|        return this->get_unexpected().error();
 1762|   361k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   361k|    {
  488|   361k|        return m_unexpected;
  489|   361k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.32M|    {
 1819|  1.32M|        return std::move(value());
 1820|  1.32M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  1.59M|    {
 1783|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.59M|        return this->get_value();
 1785|  1.59M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.59M|    {
  471|  1.59M|        return m_value;
  472|  1.59M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   575k|    {
 1993|   575k|        return detail::transform_error_impl(std::move(*this),
 1994|   575k|                                            std::forward<F>(f));
 1995|   575k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   575k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   575k|    else {
 1486|   575k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   575k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   575k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 567k, False: 7.94k]
  |  |  ------------------
  ------------------
 1488|   575k|                   ? result(*std::forward<Exp>(exp))
 1489|   575k|                   : result(unexpect,
 1490|  7.94k|                            trivial_invoke(std::forward<F>(f),
 1491|  7.94k|                                           std::forward<Exp>(exp).error()));
 1492|   575k|    }
 1493|   575k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  2.20M|    {
  505|  2.20M|        return m_has_value;
  506|  2.20M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   567k|    {
 1819|   567k|        return std::move(value());
 1820|   567k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   747k|    {
 1783|   747k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   747k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   747k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   747k|        return this->get_value();
 1785|   747k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   747k|    {
  471|   747k|        return m_value;
  472|   747k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  7.94k|    {
 1770|  7.94k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  7.94k|        return std::move(this->get_unexpected().error());
 1772|  7.94k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  12.6k|    {
  488|  12.6k|        return m_unexpected;
  489|  12.6k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   554k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   554k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   554k|    {
 1642|   554k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|  1.29M|    {
 9036|  1.29M|        return m_current;
 9037|  1.29M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   858k|    {
 8929|   858k|        return m_locale;
 8930|   858k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   858k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   858k|    static_cast<    \
  |  | 1109|   858k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   858k|    static_cast<    \
  |  | 1109|   858k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   858k|    {
 8936|   858k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   931k|    {
 3014|   931k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   931k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   931k|    {
 2995|   931k|        return t.data();
 2996|   931k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   178k|        : base(unexpect, std::move(e.error())),
 1630|   178k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   178k|    {
 1632|   178k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  45.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  45.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  45.9k|    {
 1586|  45.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  45.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  45.9k|    {
  457|  45.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|  1.01M|    {
 9036|  1.01M|        return m_current;
 9037|  1.01M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   745k|    {
 8929|   745k|        return m_locale;
 8930|   745k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   745k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   745k|    static_cast<    \
  |  | 1109|   745k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   745k|    static_cast<    \
  |  | 1109|   745k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   745k|    {
 8936|   745k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   368k|        : base(unexpect, std::move(e.error())),
 1630|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   368k|    {
 1632|   368k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|  2.67M|        : base(unexpect, std::move(e.error())),
 1630|  2.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.67M|    {
 1632|  2.67M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|  2.67M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|  2.67M|          m_has_value(false)
  565|  2.67M|    {
  566|  2.67M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.67M|    {
 1330|  2.67M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  9.43M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  9.43M|        : m_deferred_init(), m_has_value(true)
  544|  9.43M|    {
  545|  9.43M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  5.28M|    {
 4577|  5.28M|        return x.is_at_end();
 4578|  5.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  11.2M|    {
 4621|  11.2M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 11.2M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  11.2M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 11.2M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  11.2M|        return !read_at_position();
 4628|  11.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  44.5M|    {
 4601|  44.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  44.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  44.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  44.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 44.5M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  44.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  44.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 38.6M, False: 5.94M]
  |  |  ------------------
  ------------------
 4608|  38.6M|            return true;
 4609|  38.6M|        }
 4610|       |
 4611|  11.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 5.94M, False: 5.76M]
  ------------------
 4612|  5.94M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 176k, False: 5.76M]
  ------------------
 4613|   176k|                return false;
 4614|   176k|            }
 4615|  5.94M|        }
 4616|  5.76M|        return true;
 4617|  5.94M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  11.9M|    {
 4536|  11.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  11.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 11.9M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  11.9M|        auto res = read_at_position();
 4545|  11.9M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  11.9M|        return parent()->get_character_at(m_position);
 4547|  11.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  11.9M|    {
 4406|  11.9M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  11.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.22M, False: 3.68M]
  |  |  ------------------
  ------------------
 4407|  11.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  8.22M|            return m_putback_buffer[pos];
 4409|  8.22M|        }
 4410|  3.68M|        const auto start = pos - m_putback_buffer.size();
 4411|  3.68M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  3.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  3.68M|        return m_current_view[start];
 4413|  3.68M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  3.85M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.85M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.85M|    {
 1586|  3.85M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  3.85M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.85M|    {
  457|  3.85M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.90M|    {
 1330|  3.90M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|   137k|        : m_unexpected(std::forward<Err>(e))
  365|   137k|    {
  366|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   137k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  47.6k|        : base(unexpect, std::move(e.error())),
 1630|  47.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  47.6k|    {
 1632|  47.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  47.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  47.6k|          m_has_value(false)
  466|  47.6k|    {
  467|  47.6k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|   182k|        : m_unexpected(std::forward<Args>(args)...)
  374|   182k|    {
  375|   182k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   182k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   182k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  21.4M|    {
 4522|  21.4M|        ++m_position;
 4523|  21.4M|        (void)read_at_position();
 4524|  21.4M|        return *this;
 4525|  21.4M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.67M|    {
 1754|  1.67M|        return has_value();
 1755|  1.67M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   276k|    {
 1809|   276k|        return value();
 1810|   276k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  9.91M|    {
 4571|  9.91M|        return !(lhs == rhs);
 4572|  9.91M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  11.4M|    {
 4566|  11.4M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 11.4M, False: 0]
  |  Branch (4566:46): [True: 1.99M, False: 9.44M]
  ------------------
 4567|  11.4M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  45.4k|        : m_unexpected(std::forward<Err>(e))
  365|  45.4k|    {
  366|  45.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  45.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  45.4k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  7.57k|        : base(unexpect, std::move(e.error())),
 1630|  7.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.57k|    {
 1632|  7.57k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  7.57k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.57k|          m_has_value(false)
  466|  7.57k|    {
  467|  7.57k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   840k|    {
 1330|   840k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   833k|        : base(std::in_place, std::forward<U>(val)),
 1584|   833k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   833k|    {
 1586|   833k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   833k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   833k|    {
  457|   833k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   840k|    {
 1754|   840k|        return has_value();
 1755|   840k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.68M|    {
  505|  1.68M|        return m_has_value;
  506|  1.68M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  7.57k|    {
 1760|  7.57k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  7.57k|        return this->get_unexpected().error();
 1762|  7.57k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.57k|    {
  488|  7.57k|        return m_unexpected;
  489|  7.57k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   833k|    {
 1819|   833k|        return std::move(value());
 1820|   833k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   833k|    {
 1783|   833k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   833k|        return this->get_value();
 1785|   833k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   833k|    {
  471|   833k|        return m_value;
  472|   833k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  16.7M|    {
 3498|  16.7M|        return m_sentinel;
 3499|  16.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|  46.2k|        : m_unexpected(std::forward<Err>(e))
  365|  46.2k|    {
  366|  46.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  46.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  46.2k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  9.00M|    {
  380|  9.00M|        return m_unexpected;
  381|  9.00M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  2.49M|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.49M|    {
  375|  2.49M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.49M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.49M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  10.7M|        : m_unexpected(std::forward<Err>(e))
  365|  10.7M|    {
  366|  10.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  10.7M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  10.7M|    {
  380|  10.7M|        return m_unexpected;
  381|  10.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  10.7M|        : m_unexpected(std::forward<Args>(args)...)
  374|  10.7M|    {
  375|  10.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  10.7M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|   135k|{
 1364|   135k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|   135k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  2.30M|        : m_unexpected(std::forward<Err>(e))
  365|  2.30M|    {
  366|  2.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.30M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  10.5k|    {
 1760|  10.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  10.5k|        return this->get_unexpected().error();
 1762|  10.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   637k|        : base(unexpect, std::move(e.error())),
 1630|   637k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   637k|    {
 1632|   637k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   664k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   664k|          m_has_value(false)
  466|   664k|    {
  467|   664k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.62M|    {
 1330|  6.62M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|   279k|        : base(std::in_place, std::forward<U>(val)),
 1584|   279k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   279k|    {
 1586|   279k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|   279k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   279k|    {
  457|   279k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  3.40M|        : base(unexpect, std::move(e.error())),
 1630|  3.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.40M|    {
 1632|  3.40M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.40M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.40M|          m_has_value(false)
  466|  3.40M|    {
  467|  3.40M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  7.23M|    {
 1754|  7.23M|        return has_value();
 1755|  7.23M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  12.7M|    {
  505|  12.7M|        return m_has_value;
  506|  12.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.73M|    {
 1760|  1.73M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.73M|        return this->get_unexpected().error();
 1762|  1.73M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.73M|    {
  488|  1.73M|        return m_unexpected;
  489|  1.73M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   649k|        : base(std::in_place, std::forward<U>(val)),
 1584|   649k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   649k|    {
 1586|   649k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   649k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   649k|    {
  457|   649k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   649k|    {
 1330|   649k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    200|        : base(unexpect, std::move(e.error())),
 1630|    200|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    200|    {
 1632|    200|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|    200|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    200|          m_has_value(false)
  466|    200|    {
  467|    200|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  1.56M|    {
 1809|  1.56M|        return value();
 1810|  1.56M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.14M|    {
 1783|  3.14M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.14M|        return this->get_value();
 1785|  3.14M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  3.14M|    {
  471|  3.14M|        return m_value;
  472|  3.14M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  41.7k|    {
 1754|  41.7k|        return has_value();
 1755|  41.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.29M|    {
  505|  1.29M|        return m_has_value;
  506|  1.29M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   607k|    {
 1819|   607k|        return std::move(value());
 1820|   607k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   649k|    {
 1783|   649k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   649k|        return this->get_value();
 1785|   649k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   649k|    {
  471|   649k|        return m_value;
  472|   649k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.60M|    {
 1993|  1.60M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.60M|                                            std::forward<F>(f));
 1995|  1.60M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.60M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.60M|    else {
 1486|  1.60M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.60M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.57M, False: 27.1k]
  |  |  ------------------
  ------------------
 1488|  1.60M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.60M|                   : result(unexpect,
 1490|  27.1k|                            trivial_invoke(std::forward<F>(f),
 1491|  27.1k|                                           std::forward<Exp>(exp).error()));
 1492|  1.60M|    }
 1493|  1.60M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  2.27M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.27M|    {
 1586|  2.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.27M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.27M|    {
  457|  2.27M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  27.1k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  27.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  27.1k|    {
 1642|  27.1k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.57M|    {
 1819|  1.57M|        return std::move(value());
 1820|  1.57M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  4.08M|    {
 1754|  4.08M|        return has_value();
 1755|  4.08M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.46M|    {
  505|  6.46M|        return m_has_value;
  506|  6.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   231k|    {
 1760|   231k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   231k|        return this->get_unexpected().error();
 1762|   231k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   231k|    {
  488|   231k|        return m_unexpected;
  489|   231k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.71M|    {
 1819|  1.71M|        return std::move(value());
 1820|  1.71M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  2.13M|    {
 1783|  2.13M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.13M|        return this->get_value();
 1785|  2.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.13M|    {
  471|  2.13M|        return m_value;
  472|  2.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   645k|    {
 3494|   645k|        return m_iterator;
 3495|   645k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   645k|    {
 3498|   645k|        return m_sentinel;
 3499|   645k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   521k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   521k|    static_cast<    \
  |  | 1109|   521k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   521k|    static_cast<    \
  |  | 1109|   521k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   521k|    {
 3480|   521k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  5.93M|    {
 4588|  5.93M|        return !x.is_at_end();
 4589|  5.93M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  12.6k|        : base(unexpect, std::move(e.error())),
 1630|  12.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.6k|    {
 1632|  12.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  12.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.6k|          m_has_value(false)
  466|  12.6k|    {
  467|  12.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.44M|    {
 1330|  1.44M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  1.43M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.43M|    {
 1586|  1.43M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.43M|    {
  457|  1.43M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|   868k|    {
 1754|   868k|        return has_value();
 1755|   868k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   179k|    {
 1809|   179k|        return value();
 1810|   179k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  5.77k|        : base(unexpect, std::move(e.error())),
 1630|  5.77k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  5.77k|    {
 1632|  5.77k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  5.77k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  5.77k|          m_has_value(false)
  466|  5.77k|    {
  467|  5.77k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   762k|    {
 1330|   762k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   756k|        : base(std::in_place, std::forward<U>(val)),
 1584|   756k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   756k|    {
 1586|   756k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   756k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   756k|    {
  457|   756k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   762k|    {
 1754|   762k|        return has_value();
 1755|   762k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.52M|    {
  505|  1.52M|        return m_has_value;
  506|  1.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  5.77k|    {
 1760|  5.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  5.77k|        return this->get_unexpected().error();
 1762|  5.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  5.77k|    {
  488|  5.77k|        return m_unexpected;
  489|  5.77k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   756k|    {
 1819|   756k|        return std::move(value());
 1820|   756k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   756k|    {
 1783|   756k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   756k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   756k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   756k|        return this->get_value();
 1785|   756k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   756k|    {
  471|   756k|        return m_value;
  472|   756k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1759|  4.72k|    {
 1760|  4.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  4.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  4.72k|        return this->get_unexpected().error();
 1762|  4.72k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   593k|        : base(unexpect, std::move(e.error())),
 1630|   593k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   593k|    {
 1632|   593k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   593k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   593k|          m_has_value(false)
  466|   593k|    {
  467|   593k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.25M|    {
 1330|  3.25M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|   182k|        : base(std::in_place, std::forward<U>(val)),
 1584|   182k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   182k|    {
 1586|   182k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|   182k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   182k|    {
  457|   182k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.24M|        : base(unexpect, std::move(e.error())),
 1630|  2.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.24M|    {
 1632|  2.24M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.24M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.24M|          m_has_value(false)
  466|  2.24M|    {
  467|  2.24M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  3.82M|    {
 1754|  3.82M|        return has_value();
 1755|  3.82M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  6.52M|    {
  505|  6.52M|        return m_has_value;
  506|  6.52M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  1.56M|    {
 1760|  1.56M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.56M|        return this->get_unexpected().error();
 1762|  1.56M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.56M|    {
  488|  1.56M|        return m_unexpected;
  489|  1.56M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   591k|        : base(std::in_place, std::forward<U>(val)),
 1584|   591k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   591k|    {
 1586|   591k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   591k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   591k|    {
  457|   591k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   592k|    {
 1330|   592k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  1.79k|        : base(unexpect, std::move(e.error())),
 1630|  1.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.79k|    {
 1632|  1.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  1.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.79k|          m_has_value(false)
  466|  1.79k|    {
  467|  1.79k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   584k|    {
 1809|   584k|        return value();
 1810|   584k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   584k|    {
 1783|   584k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   584k|        return this->get_value();
 1785|   584k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   584k|    {
  471|   584k|        return m_value;
  472|   584k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  25.0k|    {
 1754|  25.0k|        return has_value();
 1755|  25.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.18M|    {
  505|  1.18M|        return m_has_value;
  506|  1.18M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1759|  1.73k|    {
 1760|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.73k|        return this->get_unexpected().error();
 1762|  1.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.73k|    {
  488|  1.73k|        return m_unexpected;
  489|  1.73k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.73k|        : base(unexpect, std::move(e.error())),
 1630|  1.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.73k|    {
 1632|  1.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.73k|          m_has_value(false)
  466|  1.73k|    {
  467|  1.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.0k|    {
 1330|  12.0k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   578k|    {
 1819|   578k|        return std::move(value());
 1820|   578k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   591k|    {
 1783|   591k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   591k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   591k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   591k|        return this->get_value();
 1785|   591k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   591k|    {
  471|   591k|        return m_value;
  472|   591k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|   239k|        : base(std::in_place, std::forward<U>(val)),
 1584|   239k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   239k|    {
 1586|   239k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   239k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   239k|    {
  457|   239k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  10.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.2k|    {
 1586|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.2k|    {
  457|  10.2k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  12.0k|    {
 1993|  12.0k|        return detail::transform_error_impl(std::move(*this),
 1994|  12.0k|                                            std::forward<F>(f));
 1995|  12.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  12.0k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  12.0k|    else {
 1486|  12.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  12.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  12.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 10.2k, False: 1.73k]
  |  |  ------------------
  ------------------
 1488|  12.0k|                   ? result(*std::forward<Exp>(exp))
 1489|  12.0k|                   : result(unexpect,
 1490|  1.73k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.73k|                                           std::forward<Exp>(exp).error()));
 1492|  12.0k|    }
 1493|  12.0k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  24.0k|    {
  505|  24.0k|        return m_has_value;
  506|  24.0k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.2k|    {
 1819|  10.2k|        return std::move(value());
 1820|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.2k|    {
 1783|  10.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.2k|        return this->get_value();
 1785|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  10.2k|    {
  471|  10.2k|        return m_value;
  472|  10.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  10.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.2k|    {
 1586|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.2k|    {
  457|  10.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.0k|    {
 1330|  12.0k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1769|  1.73k|    {
 1770|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.73k|        return std::move(this->get_unexpected().error());
 1772|  1.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.73k|    {
  488|  1.73k|        return m_unexpected;
  489|  1.73k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.73k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.73k|    {
 1642|  1.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.73k|          m_has_value(false)
  466|  1.73k|    {
  467|  1.73k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  12.0k|    {
 1754|  12.0k|        return has_value();
 1755|  12.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  24.0k|    {
  505|  24.0k|        return m_has_value;
  506|  24.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1759|  1.73k|    {
 1760|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.73k|        return this->get_unexpected().error();
 1762|  1.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.73k|    {
  488|  1.73k|        return m_unexpected;
  489|  1.73k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.2k|    {
 1819|  10.2k|        return std::move(value());
 1820|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.2k|    {
 1783|  10.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.2k|        return this->get_value();
 1785|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  10.2k|    {
  471|  10.2k|        return m_value;
  472|  10.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.91M|    {
 3014|  1.91M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.91M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.91M|    {
 2995|  1.91M|        return t.data();
 2996|  1.91M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  5.35M|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.35M|    {
 1586|  5.35M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  5.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.35M|    {
  457|  5.35M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|  3.61M|    {
 1819|  3.61M|        return std::move(value());
 1820|  3.61M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  2.35M|{
 1364|  2.35M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  2.35M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   607k|    {
 1993|   607k|        return detail::transform_error_impl(std::move(*this),
 1994|   607k|                                            std::forward<F>(f));
 1995|   607k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   607k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   607k|    else {
 1486|   607k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   607k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   607k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 607k, False: 0]
  |  |  ------------------
  ------------------
 1488|   607k|                   ? result(*std::forward<Exp>(exp))
 1489|   607k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   607k|    }
 1493|   607k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   607k|        : base(std::in_place, std::forward<U>(val)),
 1584|   607k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   607k|    {
 1586|   607k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   607k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   607k|    {
  457|   607k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   607k|    {
 1330|   607k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   607k|    {
 1754|   607k|        return has_value();
 1755|   607k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.21M|    {
  505|  1.21M|        return m_has_value;
  506|  1.21M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   607k|    {
 1819|   607k|        return std::move(value());
 1820|   607k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   607k|    {
 1783|   607k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   607k|        return this->get_value();
 1785|   607k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   607k|    {
  471|   607k|        return m_value;
  472|   607k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   610k|    {
 1979|   610k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   610k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   610k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   610k|    else {
 1486|   610k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   610k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   610k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 610k]
  |  |  ------------------
  ------------------
 1488|   610k|                   ? result(*std::forward<Exp>(exp))
 1489|   610k|                   : result(unexpect,
 1490|   610k|                            trivial_invoke(std::forward<F>(f),
 1491|   610k|                                           std::forward<Exp>(exp).error()));
 1492|   610k|    }
 1493|   610k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   429k|    {
 1809|   429k|        return value();
 1810|   429k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   140k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  41.5k|    {
 1829|  41.5k|        return &value();
 1830|  41.5k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   426k|    {
 2883|   426k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   426k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   426k|    {
 2864|   426k|        return decay_copy(t.begin());
 2865|   426k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   426k|{
 2108|   426k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   426k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   426k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   251k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   567k|    {
 1993|   567k|        return detail::transform_error_impl(std::move(*this),
 1994|   567k|                                            std::forward<F>(f));
 1995|   567k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   567k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   567k|    else {
 1486|   567k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   567k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   567k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 567k, False: 0]
  |  |  ------------------
  ------------------
 1488|   567k|                   ? result(*std::forward<Exp>(exp))
 1489|   567k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   567k|    }
 1493|   567k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   567k|        : base(std::in_place, std::forward<U>(val)),
 1584|   567k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   567k|    {
 1586|   567k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   567k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   567k|    {
  457|   567k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   567k|    {
 1330|   567k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   567k|    {
 1754|   567k|        return has_value();
 1755|   567k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.13M|    {
  505|  1.13M|        return m_has_value;
  506|  1.13M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   567k|    {
 1819|   567k|        return std::move(value());
 1820|   567k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   567k|    {
 1783|   567k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   567k|        return this->get_value();
 1785|   567k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   567k|    {
  471|   567k|        return m_value;
  472|   567k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   547k|    {
 1979|   547k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   547k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   547k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   547k|    else {
 1486|   547k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   547k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   547k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 547k]
  |  |  ------------------
  ------------------
 1488|   547k|                   ? result(*std::forward<Exp>(exp))
 1489|   547k|                   : result(unexpect,
 1490|   547k|                            trivial_invoke(std::forward<F>(f),
 1491|   547k|                                           std::forward<Exp>(exp).error()));
 1492|   547k|    }
 1493|   547k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|  43.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  43.8k|    {
 1586|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  43.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  43.8k|    {
  457|  43.8k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   547k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   547k|    static_cast<    \
  |  | 1109|   547k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   547k|    {
 3930|   547k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   388k|    {
 1809|   388k|        return value();
 1810|   388k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  12.9k|    {
 1829|  12.9k|        return &value();
 1830|  12.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   610k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   610k|    static_cast<    \
  |  | 1109|   610k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   610k|    {
 3930|   610k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  4.35M|    {
 4577|  4.35M|        return x.is_at_end();
 4578|  4.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  6.92M|    {
 4621|  6.92M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 6.92M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  6.92M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 6.92M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  6.92M|        return !read_at_position();
 4628|  6.92M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  21.9M|    {
 4601|  21.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  21.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  21.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 21.9M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  21.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  21.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 19.3M, False: 2.61M]
  |  |  ------------------
  ------------------
 4608|  19.3M|            return true;
 4609|  19.3M|        }
 4610|       |
 4611|  5.03M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 2.61M, False: 2.42M]
  ------------------
 4612|  2.61M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 183k, False: 2.42M]
  ------------------
 4613|   183k|                return false;
 4614|   183k|            }
 4615|  2.61M|        }
 4616|  2.42M|        return true;
 4617|  2.61M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  28.3M|    {
 4375|  28.3M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  28.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  6.87M|    {
 4536|  6.87M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  6.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  6.87M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 6.87M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  6.87M|        auto res = read_at_position();
 4545|  6.87M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  6.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  6.87M|        return parent()->get_character_at(m_position);
 4547|  6.87M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  6.87M|    {
 4406|  6.87M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  6.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.81M, False: 1.05M]
  |  |  ------------------
  ------------------
 4407|  6.87M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  5.81M|            return m_putback_buffer[pos];
 4409|  5.81M|        }
 4410|  1.05M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.05M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.05M|        return m_current_view[start];
 4413|  1.05M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  3.02M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.02M|    {
 1586|  3.02M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  3.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.02M|    {
  457|  3.02M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.08M|    {
 1330|  3.08M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  60.1k|        : base(unexpect, std::move(e.error())),
 1630|  60.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  60.1k|    {
 1632|  60.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  60.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  60.1k|          m_has_value(false)
  466|  60.1k|    {
  467|  60.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  8.16M|    {
 4522|  8.16M|        ++m_position;
 4523|  8.16M|        (void)read_at_position();
 4524|  8.16M|        return *this;
 4525|  8.16M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.23M|    {
 1754|  1.23M|        return has_value();
 1755|  1.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  26.9k|    {
 1809|  26.9k|        return value();
 1810|  26.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  3.38M|    {
 4571|  3.38M|        return !(lhs == rhs);
 4572|  3.38M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  4.58M|    {
 4566|  4.58M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 4.58M, False: 0]
  |  Branch (4566:46): [True: 1.46M, False: 3.12M]
  ------------------
 4567|  4.58M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|  3.08M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|  3.08M|    else {
 4093|       |        // utf-32
 4094|  3.08M|        static_assert(sizeof(U) == 4);
 4095|  3.08M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|  3.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|  3.08M|        return 1;
 4097|  3.08M|    }
 4098|  3.08M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.08M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|  3.08M|    else {
 4299|  3.08M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|  3.08M|        auto cp = static_cast<char32_t>(input.front());
 4301|  3.08M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  3.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 152k, False: 2.93M]
  |  |  ------------------
  ------------------
 4302|   152k|            return invalid_code_point;
 4303|   152k|        }
 4304|  2.93M|        return cp;
 4305|  3.08M|    }
 4306|  3.08M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.94k|        : base(unexpect, std::move(e.error())),
 1630|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.94k|    {
 1632|  2.94k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  2.94k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.94k|          m_has_value(false)
  466|  2.94k|    {
  467|  2.94k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   639k|    {
 1330|   639k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   636k|        : base(std::in_place, std::forward<U>(val)),
 1584|   636k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   636k|    {
 1586|   636k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   636k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   636k|    {
  457|   636k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   639k|    {
 1754|   639k|        return has_value();
 1755|   639k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.27M|    {
  505|  1.27M|        return m_has_value;
  506|  1.27M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  2.94k|    {
 1760|  2.94k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.94k|        return this->get_unexpected().error();
 1762|  2.94k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.94k|    {
  488|  2.94k|        return m_unexpected;
  489|  2.94k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   636k|    {
 1819|   636k|        return std::move(value());
 1820|   636k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   636k|    {
 1783|   636k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   636k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   636k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   636k|        return this->get_value();
 1785|   636k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   636k|    {
  471|   636k|        return m_value;
  472|   636k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  11.3M|    {
 3498|  11.3M|        return m_sentinel;
 3499|  11.3M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  2.17k|    {
 1760|  2.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.17k|        return this->get_unexpected().error();
 1762|  2.17k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   562k|        : base(unexpect, std::move(e.error())),
 1630|   562k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   562k|    {
 1632|   562k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   616k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   616k|          m_has_value(false)
  466|   616k|    {
  467|   616k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.32M|    {
 1330|  5.32M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|  26.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  26.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  26.9k|    {
 1586|  26.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  26.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  26.9k|    {
  457|  26.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.98M|        : base(unexpect, std::move(e.error())),
 1630|  2.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.98M|    {
 1632|  2.98M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.98M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.98M|          m_has_value(false)
  466|  2.98M|    {
  467|  2.98M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  5.82M|    {
 1754|  5.82M|        return has_value();
 1755|  5.82M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  10.2M|    {
  505|  10.2M|        return m_has_value;
  506|  10.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.70M|    {
 1760|  1.70M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.70M|        return this->get_unexpected().error();
 1762|  1.70M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.70M|    {
  488|  1.70M|        return m_unexpected;
  489|  1.70M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   520k|        : base(std::in_place, std::forward<U>(val)),
 1584|   520k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   520k|    {
 1586|   520k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   520k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   520k|    {
  457|   520k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   520k|    {
 1330|   520k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|     72|        : base(unexpect, std::move(e.error())),
 1630|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     72|    {
 1632|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     72|          m_has_value(false)
  466|     72|    {
  467|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   814k|    {
 1809|   814k|        return value();
 1810|   814k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.10M|    {
 1783|  2.10M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.10M|        return this->get_value();
 1785|  2.10M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  2.10M|    {
  471|  2.10M|        return m_value;
  472|  2.10M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  14.4k|    {
 1754|  14.4k|        return has_value();
 1755|  14.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.04M|    {
  505|  1.04M|        return m_has_value;
  506|  1.04M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   506k|    {
 1819|   506k|        return std::move(value());
 1820|   506k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   520k|    {
 1783|   520k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   520k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   520k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   520k|        return this->get_value();
 1785|   520k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   520k|    {
  471|   520k|        return m_value;
  472|   520k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.34M|    {
 1993|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.34M|                                            std::forward<F>(f));
 1995|  1.34M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.34M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.34M|    else {
 1486|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.28M, False: 54.0k]
  |  |  ------------------
  ------------------
 1488|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.34M|                   : result(unexpect,
 1490|  54.0k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.0k|                                           std::forward<Exp>(exp).error()));
 1492|  1.34M|    }
 1493|  1.34M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  1.68M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.68M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.68M|    {
 1586|  1.68M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.68M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.68M|    {
  457|  1.68M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.0k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.0k|    {
 1642|  54.0k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.28M|    {
 1819|  1.28M|        return std::move(value());
 1820|  1.28M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  3.41M|    {
 1754|  3.41M|        return has_value();
 1755|  3.41M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.44M|    {
  505|  5.44M|        return m_has_value;
  506|  5.44M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   497k|    {
 1760|   497k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   497k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   497k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   497k|        return this->get_unexpected().error();
 1762|   497k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   497k|    {
  488|   497k|        return m_unexpected;
  489|   497k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.25M|    {
 1819|  1.25M|        return std::move(value());
 1820|  1.25M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.52M|    {
 1783|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.52M|        return this->get_value();
 1785|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.52M|    {
  471|  1.52M|        return m_value;
  472|  1.52M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   413k|    {
 3494|   413k|        return m_iterator;
 3495|   413k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   413k|    {
 3498|   413k|        return m_sentinel;
 3499|   413k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   377k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   377k|    static_cast<    \
  |  | 1109|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   377k|    static_cast<    \
  |  | 1109|   377k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   377k|    {
 3480|   377k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  2.57M|    {
 4588|  2.57M|        return !x.is_at_end();
 4589|  2.57M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  58.6k|        : base(unexpect, std::move(e.error())),
 1630|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  58.6k|    {
 1632|  58.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  58.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  58.6k|          m_has_value(false)
  466|  58.6k|    {
  467|  58.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.55M|    {
 1330|  2.55M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  2.49M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.49M|    {
 1586|  2.49M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.49M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.49M|    {
  457|  2.49M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|   703k|    {
 1754|   703k|        return has_value();
 1755|   703k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.41M|    {
  505|  4.41M|        return m_has_value;
  506|  4.41M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  11.6k|    {
 1809|  11.6k|        return value();
 1810|  11.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.80M|    {
 1783|  1.80M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.80M|        return this->get_value();
 1785|  1.80M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.80M|    {
  471|  1.80M|        return m_value;
  472|  1.80M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.94k|        : base(unexpect, std::move(e.error())),
 1630|  2.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.94k|    {
 1632|  2.94k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  2.94k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.94k|          m_has_value(false)
  466|  2.94k|    {
  467|  2.94k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   640k|    {
 1330|   640k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   637k|        : base(std::in_place, std::forward<U>(val)),
 1584|   637k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   637k|    {
 1586|   637k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   637k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   637k|    {
  457|   637k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   510k|    {
 1993|   510k|        return detail::transform_error_impl(std::move(*this),
 1994|   510k|                                            std::forward<F>(f));
 1995|   510k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   510k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   510k|    else {
 1486|   510k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   510k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 506k, False: 3.95k]
  |  |  ------------------
  ------------------
 1488|   510k|                   ? result(*std::forward<Exp>(exp))
 1489|   510k|                   : result(unexpect,
 1490|  3.95k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.95k|                                           std::forward<Exp>(exp).error()));
 1492|   510k|    }
 1493|   510k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.79M|    {
 1819|  1.79M|        return std::move(value());
 1820|  1.79M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  58.1k|    {
 1770|  58.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  58.1k|        return std::move(this->get_unexpected().error());
 1772|  58.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  58.6k|    {
  488|  58.6k|        return m_unexpected;
  489|  58.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   567k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   567k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   567k|    {
 1642|   567k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|   640k|    {
 1754|   640k|        return has_value();
 1755|   640k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.28M|    {
  505|  1.28M|        return m_has_value;
  506|  1.28M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  2.94k|    {
 1760|  2.94k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.94k|        return this->get_unexpected().error();
 1762|  2.94k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.94k|    {
  488|  2.94k|        return m_unexpected;
  489|  2.94k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   637k|    {
 1819|   637k|        return std::move(value());
 1820|   637k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   637k|    {
 1783|   637k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   637k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   637k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   637k|        return this->get_value();
 1785|   637k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|   637k|    {
  471|   637k|        return m_value;
  472|   637k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1759|    512|    {
 1760|    512|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    512|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    512|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    512|        return this->get_unexpected().error();
 1762|    512|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   561k|        : base(unexpect, std::move(e.error())),
 1630|   561k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   561k|    {
 1632|   561k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   615k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   615k|          m_has_value(false)
  466|   615k|    {
  467|   615k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  4.19M|    {
 1330|  4.19M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|  11.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.6k|    {
 1586|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  11.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.6k|    {
  457|  11.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.15M|        : base(unexpect, std::move(e.error())),
 1630|  2.15M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.15M|    {
 1632|  2.15M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.15M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.15M|          m_has_value(false)
  466|  2.15M|    {
  467|  2.15M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  4.70M|    {
 1754|  4.70M|        return has_value();
 1755|  4.70M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  8.45M|    {
  505|  8.45M|        return m_has_value;
  506|  8.45M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  1.63M|    {
 1760|  1.63M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.63M|        return this->get_unexpected().error();
 1762|  1.63M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.63M|    {
  488|  1.63M|        return m_unexpected;
  489|  1.63M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   511k|        : base(std::in_place, std::forward<U>(val)),
 1584|   511k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   511k|    {
 1586|   511k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   511k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   511k|    {
  457|   511k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   511k|    {
 1330|   511k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     24|          m_has_value(false)
  466|     24|    {
  467|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   264k|    {
 1809|   264k|        return value();
 1810|   264k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.55M|    {
 1783|  1.55M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.55M|        return this->get_value();
 1785|  1.55M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  1.55M|    {
  471|  1.55M|        return m_value;
  472|  1.55M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  5.25k|    {
 1754|  5.25k|        return has_value();
 1755|  5.25k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.02M|    {
  505|  1.02M|        return m_has_value;
  506|  1.02M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   506k|    {
 1819|   506k|        return std::move(value());
 1820|   506k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   511k|    {
 1783|   511k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   511k|        return this->get_value();
 1785|   511k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   511k|    {
  471|   511k|        return m_value;
  472|   511k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.34M|    {
 1993|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.34M|                                            std::forward<F>(f));
 1995|  1.34M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.34M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.34M|    else {
 1486|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.28M, False: 54.1k]
  |  |  ------------------
  ------------------
 1488|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.34M|                   : result(unexpect,
 1490|  54.1k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.1k|                                           std::forward<Exp>(exp).error()));
 1492|  1.34M|    }
 1493|  1.34M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  1.41M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.41M|    {
 1586|  1.41M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.41M|    {
  457|  1.41M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.1k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.1k|    {
 1642|  54.1k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.28M|    {
 1819|  1.28M|        return std::move(value());
 1820|  1.28M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.19M|    {
 3014|  1.19M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.19M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.19M|    {
 2995|  1.19M|        return t.data();
 2996|  1.19M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   506k|    {
 1993|   506k|        return detail::transform_error_impl(std::move(*this),
 1994|   506k|                                            std::forward<F>(f));
 1995|   506k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   506k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   506k|    else {
 1486|   506k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   506k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 506k, False: 0]
  |  |  ------------------
  ------------------
 1488|   506k|                   ? result(*std::forward<Exp>(exp))
 1489|   506k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   506k|    }
 1493|   506k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   506k|        : base(std::in_place, std::forward<U>(val)),
 1584|   506k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   506k|    {
 1586|   506k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   506k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   506k|    {
  457|   506k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   506k|    {
 1330|   506k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   506k|    {
 1754|   506k|        return has_value();
 1755|   506k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.01M|    {
  505|  1.01M|        return m_has_value;
  506|  1.01M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   506k|    {
 1819|   506k|        return std::move(value());
 1820|   506k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   506k|    {
 1783|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   506k|        return this->get_value();
 1785|   506k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   506k|    {
  471|   506k|        return m_value;
  472|   506k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   631k|    {
 1979|   631k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   631k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   631k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   631k|    else {
 1486|   631k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   631k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   631k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 631k]
  |  |  ------------------
  ------------------
 1488|   631k|                   ? result(*std::forward<Exp>(exp))
 1489|   631k|                   : result(unexpect,
 1490|   631k|                            trivial_invoke(std::forward<F>(f),
 1491|   631k|                                           std::forward<Exp>(exp).error()));
 1492|   631k|    }
 1493|   631k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   268k|    {
 1809|   268k|        return value();
 1810|   268k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   100k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  14.4k|    {
 1829|  14.4k|        return &value();
 1830|  14.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   406k|    {
 2883|   406k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   406k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   406k|    {
 2864|   406k|        return decay_copy(t.begin());
 2865|   406k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   406k|{
 2108|   406k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   406k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   227k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   506k|    {
 1993|   506k|        return detail::transform_error_impl(std::move(*this),
 1994|   506k|                                            std::forward<F>(f));
 1995|   506k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   506k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   506k|    else {
 1486|   506k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   506k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 506k, False: 0]
  |  |  ------------------
  ------------------
 1488|   506k|                   ? result(*std::forward<Exp>(exp))
 1489|   506k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   506k|    }
 1493|   506k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   506k|        : base(std::in_place, std::forward<U>(val)),
 1584|   506k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   506k|    {
 1586|   506k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   506k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   506k|    {
  457|   506k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   506k|    {
 1330|   506k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   506k|    {
 1754|   506k|        return has_value();
 1755|   506k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.01M|    {
  505|  1.01M|        return m_has_value;
  506|  1.01M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   506k|    {
 1819|   506k|        return std::move(value());
 1820|   506k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   506k|    {
 1783|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   506k|        return this->get_value();
 1785|   506k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   506k|    {
  471|   506k|        return m_value;
  472|   506k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   563k|    {
 1979|   563k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   563k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   563k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   563k|    else {
 1486|   563k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   563k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   563k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 563k]
  |  |  ------------------
  ------------------
 1488|   563k|                   ? result(*std::forward<Exp>(exp))
 1489|   563k|                   : result(unexpect,
 1490|   563k|                            trivial_invoke(std::forward<F>(f),
 1491|   563k|                                           std::forward<Exp>(exp).error()));
 1492|   563k|    }
 1493|   563k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   563k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   563k|    static_cast<    \
  |  | 1109|   563k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   563k|    {
 3930|   563k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   268k|    {
 1809|   268k|        return value();
 1810|   268k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  5.23k|    {
 1829|  5.23k|        return &value();
 1830|  5.23k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   631k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   631k|    static_cast<    \
  |  | 1109|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   631k|    {
 3930|   631k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  57.8M|    {
 4375|  57.8M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  57.8M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1583|  65.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  65.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  65.8k|    {
 1586|  65.8k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  455|  65.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  65.8k|    {
  457|  65.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  1.08M|    {
 6263|  1.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.08M|        return static_cast<std::size_t>(m_desc &
 6268|  1.08M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|  2.16M|    {
 6289|  2.16M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  2.16M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  1.08M|    {
 6231|  1.08M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.08M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.08M|        const auto t = type(id);
 6243|  1.08M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.08M|        basic_scan_arg<Context> arg;
 6248|  1.08M|        arg.m_type = t;
 6249|  1.08M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.08M, False: 0]
  ------------------
 6250|  1.08M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.08M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.08M|        return arg;
 6256|  1.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  1.08M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.08M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.08M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.08M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.08M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  1.08M|    {
 6293|  1.08M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.08M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  2.05M|    {
 6047|  2.05M|        return m_type != detail::arg_type::none_type;
 6048|  2.05M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   166k|{
 9494|   166k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   166k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   166k|{
 9353|   166k|#define SCN_VISIT(Type)                                                \
 9354|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   166k|    }                                                                  \
 9357|   166k|    else {                                                             \
 9358|   166k|        return vis(monostate_val);                                     \
 9359|   166k|    }
 9360|       |
 9361|   166k|    monostate monostate_val{};
 9362|       |
 9363|   166k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 166k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 166k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 166k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 166k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 166k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 166k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 166k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 166k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 166k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 166k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 166k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 166k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 166k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 166k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 166k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 166k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 166k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  53.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 53.0k, False: 113k]
  ------------------
 9407|  53.0k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  53.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.0k|    }                                                                  \
  |  | 9357|  53.0k|    else {                                                             \
  |  | 9358|  53.0k|        return vis(monostate_val);                                     \
  |  | 9359|  53.0k|    }
  ------------------
 9408|   108k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 55.6k, False: 110k]
  ------------------
 9409|   108k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   108k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   108k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   108k|    }                                                                  \
  |  | 9357|   108k|    else {                                                             \
  |  | 9358|   108k|        return vis(monostate_val);                                     \
  |  | 9359|   108k|    }
  ------------------
 9410|   166k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 57.5k, False: 108k]
  ------------------
 9411|   166k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   166k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   166k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   166k|    }                                                                  \
  |  | 9357|   166k|    else {                                                             \
  |  | 9358|   166k|        return vis(monostate_val);                                     \
  |  | 9359|   166k|    }
  ------------------
 9412|   166k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 166k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   166k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 166k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 166k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 166k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 166k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 166k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 166k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 166k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 166k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 166k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 166k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   166k|            SCN_CLANG_POP
 9473|   166k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.91M|{
 6092|  2.91M|    return arg.m_type;
 6093|  2.91M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.19M|{
 6104|  1.19M|    return arg.m_value;
 6105|  1.19M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   449k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   449k|    {
 9021|   449k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   617k|{
 4709|   617k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 617k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   617k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   617k|                            ranges::default_sentinel};
 4715|   617k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   617k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   617k|    {
 4473|   617k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   617k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   617k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   168k|{
 9494|   168k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   168k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   168k|{
 9353|   168k|#define SCN_VISIT(Type)                                                \
 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   168k|    }                                                                  \
 9357|   168k|    else {                                                             \
 9358|   168k|        return vis(monostate_val);                                     \
 9359|   168k|    }
 9360|       |
 9361|   168k|    monostate monostate_val{};
 9362|       |
 9363|   168k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 168k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 168k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 168k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 168k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 168k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 168k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 168k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 168k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 168k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 168k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 168k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 168k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 168k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 168k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 168k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 168k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 168k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  53.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 53.9k, False: 114k]
  ------------------
 9407|  53.9k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  53.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  53.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  53.9k|    }                                                                  \
  |  | 9357|  53.9k|    else {                                                             \
  |  | 9358|  53.9k|        return vis(monostate_val);                                     \
  |  | 9359|  53.9k|    }
  ------------------
 9408|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 56.4k, False: 111k]
  ------------------
 9409|   110k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   110k|    }                                                                  \
  |  | 9357|   110k|    else {                                                             \
  |  | 9358|   110k|        return vis(monostate_val);                                     \
  |  | 9359|   110k|    }
  ------------------
 9410|   168k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 57.7k, False: 110k]
  ------------------
 9411|   168k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   168k|    }                                                                  \
  |  | 9357|   168k|    else {                                                             \
  |  | 9358|   168k|        return vis(monostate_val);                                     \
  |  | 9359|   168k|    }
  ------------------
 9412|   168k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 168k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   168k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 168k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 168k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 168k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 168k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 168k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 168k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 168k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 168k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 168k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 168k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   168k|            SCN_CLANG_POP
 9473|   168k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|   409k|        : m_format{format},
 6362|   409k|          m_next_arg_id{next_arg_id},
 6363|   409k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   409k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   409k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   409k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   409k|    {
 6369|   409k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   409k|    {
 3089|   409k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   409k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   409k|    {
 3055|   409k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   409k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   409k|{
 7878|   409k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   409k|    handler.check_args_exhausted();
 7880|   409k|    return handler.get_error();
 7881|   409k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   409k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   409k|    auto begin = format.data();
 7846|   409k|    auto it = begin;
 7847|   409k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   767k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 409k, False: 357k]
  ------------------
 7850|   409k|        const auto ch = *it++;
 7851|   409k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 409k, False: 0]
  ------------------
 7852|   409k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   409k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   409k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 52.0k, False: 357k]
  ------------------
 7856|  52.0k|                return;
 7857|  52.0k|            }
 7858|   409k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   409k|    }
 7869|       |
 7870|   357k|    handler.on_literal_text(begin, end);
 7871|   357k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|   409k|{
 7775|   409k|    struct id_adapter {
 7776|   409k|        constexpr void operator()()
 7777|   409k|        {
 7778|   409k|            arg_id = handler.on_arg_id();
 7779|   409k|        }
 7780|   409k|        constexpr void operator()(std::size_t id)
 7781|   409k|        {
 7782|   409k|            arg_id = handler.on_arg_id(id);
 7783|   409k|        }
 7784|       |
 7785|   409k|        constexpr void on_error(const char* msg)
 7786|   409k|        {
 7787|   409k|            SCN_UNLIKELY_ATTR
 7788|   409k|            handler.on_error(msg);
 7789|   409k|        }
 7790|       |
 7791|   409k|        Handler& handler;
 7792|   409k|        std::size_t arg_id;
 7793|   409k|    };
 7794|       |
 7795|   409k|    ++begin;
 7796|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   409k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 409k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   409k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 409k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   409k|    else {
 7808|   409k|        auto adapter = id_adapter{handler, 0};
 7809|   409k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   409k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   409k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 409k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   409k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 409k, False: 0]
  ------------------
 7820|   409k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   409k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   409k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  |  Branch (1039:45): [True: 0, False: 409k]
  |  |  |  Branch (1039:45): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   409k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   409k|    }
 7836|   409k|    return begin + 1;
 7837|   409k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   858k|    {
 8919|   858k|        return m_args.get(id);
 8920|   858k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   858k|    {
 6397|   858k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   858k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 858k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   858k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   858k|        do_check_arg_id(id);
 6405|   858k|        return id;
 6406|   858k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   858k|{
 6891|   858k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   858k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   858k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   409k|{
 7276|   409k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   409k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 409k, False: 0]
  |  Branch (7277:26): [True: 0, False: 409k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   409k|    handler();
 7282|   409k|    return begin;
 7283|   409k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   409k|        {
 7778|   409k|            arg_id = handler.on_arg_id();
 7779|   409k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   858k|    {
 6392|   858k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   858k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  1.71M|    {
 6381|  1.71M|        return m_format.data();
 6382|  1.71M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   409k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   409k|    {
 7962|   409k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   409k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|   409k|{
 7691|   409k|    auto do_presentation = [&]() -> const CharT* {
 7692|   409k|        if (*begin == CharT{'['}) {
 7693|   409k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   409k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   409k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   409k|                return begin;
 7699|   409k|            }
 7700|   409k|            handler.on_character_set_string(set);
 7701|   409k|            return begin;
 7702|   409k|        }
 7703|   409k|        if (*begin == CharT{'/'}) {
 7704|   409k|            return parse_presentation_regex(begin, end, handler);
 7705|   409k|        }
 7706|   409k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   409k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   409k|            handler.on_error("Invalid type specifier in format string");
 7709|   409k|            return begin;
 7710|   409k|        }
 7711|   409k|        handler.on_type(type);
 7712|   409k|        return begin;
 7713|   409k|    };
 7714|       |
 7715|   409k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 409k, False: 0]
  |  Branch (7715:28): [True: 409k, False: 0]
  ------------------
 7716|   409k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 409k, False: 0]
  |  Branch (7716:36): [True: 298k, False: 110k]
  ------------------
 7717|   298k|        return do_presentation();
 7718|   298k|    }
 7719|       |
 7720|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   110k|    begin = parse_align(begin, end, handler);
 7726|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   110k|    begin = parse_width(begin, end, handler);
 7732|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   110k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 110k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   110k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 110k, False: 0]
  ------------------
 7751|   110k|        handler.on_localized();
 7752|   110k|        ++begin;
 7753|   110k|    }
 7754|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   110k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 110k, False: 0]
  |  Branch (7759:25): [True: 0, False: 110k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   110k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   110k|    return begin;
 7768|   110k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   858k|{
 7340|   858k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 624k, False: 234k]
  |  Branch (7340:33): [True: 624k, False: 0]
  ------------------
 7341|   858k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 234k, False: 0]
  |  Branch (7341:33): [True: 234k, False: 0]
  ------------------
 7342|   858k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   298k|    auto do_presentation = [&]() -> const CharT* {
 7692|   298k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 298k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   298k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 298k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   298k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   298k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 298k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   298k|        handler.on_type(type);
 7712|   298k|        return begin;
 7713|   298k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   624k|{
 7288|   624k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 624k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 624k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 624k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 624k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 624k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 624k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 624k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 624k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 624k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 624k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   256k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 256k, False: 368k]
  ------------------
 7307|   256k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 624k]
  ------------------
 7308|   256k|            return presentation_type::float_hex;
 7309|  28.7k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 28.7k, False: 595k]
  ------------------
 7310|  28.7k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 624k]
  ------------------
 7311|  28.7k|            return presentation_type::float_scientific;
 7312|   139k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 139k, False: 484k]
  ------------------
 7313|   139k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 624k]
  ------------------
 7314|   139k|            return presentation_type::float_fixed;
 7315|   199k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 199k, False: 424k]
  ------------------
 7316|   199k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 624k]
  ------------------
 7317|   199k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 624k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 624k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 624k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 624k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 624k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 624k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 624k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   624k|    }
 7335|   624k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|   110k|{
 7365|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   110k|    auto check_align = [](wchar_t ch) {
 7368|   110k|        switch (ch) {
 7369|   110k|            case L'<':
 7370|   110k|                return align_type::left;
 7371|   110k|            case L'>':
 7372|   110k|                return align_type::right;
 7373|   110k|            case L'^':
 7374|   110k|                return align_type::center;
 7375|   110k|            default:
 7376|   110k|                return align_type::none;
 7377|   110k|        }
 7378|   110k|    };
 7379|       |
 7380|   110k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   110k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  |  Branch (1039:45): [True: 0, False: 110k]
  |  |  |  Branch (1039:45): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7382|   110k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   110k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   110k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   110k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   110k|    const auto begin_before_fill = begin;
 7392|   110k|    begin += potential_fill_len;
 7393|       |
 7394|   110k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 110k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   110k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   110k|    const auto begin_after_fill = begin;
 7400|   110k|    ++begin;
 7401|       |
 7402|   110k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 110k, False: 0]
  ------------------
 7403|   110k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   110k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 110k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   110k|    }
 7411|       |
 7412|   110k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 110k, False: 0]
  ------------------
 7413|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 110k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   110k|        return begin_before_fill;
 7418|   110k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   110k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|   234k|{
 7347|   234k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|   234k|    else {
 7352|   234k|        const auto lengths =
 7353|   234k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|   234k|            "\3\4";
 7355|   234k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|   234k|        return len;
 7357|   234k|    }
 7358|   234k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   221k|    auto check_align = [](wchar_t ch) {
 7368|   221k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 221k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 221k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 221k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   221k|            default:
  ------------------
  |  Branch (7375:13): [True: 221k, False: 0]
  ------------------
 7376|   221k|                return align_type::none;
 7377|   221k|        }
 7378|   221k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|   110k|{
 7430|   110k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   110k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   110k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   110k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 110k, False: 0]
  |  Branch (7432:33): [True: 0, False: 110k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   110k|    return begin;
 7443|   110k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|   110k|    {
 7967|   110k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   110k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 110k, False: 0]
  ------------------
 7969|   110k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 110k, False: 0]
  ------------------
 7970|   110k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 110k]
  ------------------
 7971|   110k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   110k|        Handler::on_localized();
 7979|   110k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|   417k|    {
 7110|   417k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|   417k|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|   417k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   409k|{
 9494|   409k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   409k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   409k|{
 9353|   409k|#define SCN_VISIT(Type)                                                \
 9354|   409k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   409k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   409k|    }                                                                  \
 9357|   409k|    else {                                                             \
 9358|   409k|        return vis(monostate_val);                                     \
 9359|   409k|    }
 9360|       |
 9361|   409k|    monostate monostate_val{};
 9362|       |
 9363|   409k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 409k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 409k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 409k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 409k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 409k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 409k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 409k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 409k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 409k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 409k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 409k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 409k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 409k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 409k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 409k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 409k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 409k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   132k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 132k, False: 276k]
  ------------------
 9407|   132k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   132k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   132k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   132k|    }                                                                  \
  |  | 9357|   132k|    else {                                                             \
  |  | 9358|   132k|        return vis(monostate_val);                                     \
  |  | 9359|   132k|    }
  ------------------
 9408|   269k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 137k, False: 272k]
  ------------------
 9409|   269k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   269k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   269k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   269k|    }                                                                  \
  |  | 9357|   269k|    else {                                                             \
  |  | 9358|   269k|        return vis(monostate_val);                                     \
  |  | 9359|   269k|    }
  ------------------
 9410|   409k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 139k, False: 269k]
  ------------------
 9411|   409k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   409k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   409k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   409k|    }                                                                  \
  |  | 9357|   409k|    else {                                                             \
  |  | 9358|   409k|        return vis(monostate_val);                                     \
  |  | 9359|   409k|    }
  ------------------
 9412|   409k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 409k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   409k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 409k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 409k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 409k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 409k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 409k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 409k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 409k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 409k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 409k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 409k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   409k|            SCN_CLANG_POP
 9473|   409k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|   449k|        : m_format{format},
 6362|   449k|          m_next_arg_id{next_arg_id},
 6363|   449k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   449k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   449k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   449k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   449k|    {
 6369|   449k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   449k|{
 7878|   449k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   449k|    handler.check_args_exhausted();
 7880|   449k|    return handler.get_error();
 7881|   449k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   449k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   449k|    auto begin = format.data();
 7846|   449k|    auto it = begin;
 7847|   449k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   846k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 449k, False: 397k]
  ------------------
 7850|   449k|        const auto ch = *it++;
 7851|   449k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 449k, False: 0]
  ------------------
 7852|   449k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   449k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   449k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 52.0k, False: 397k]
  ------------------
 7856|  52.0k|                return;
 7857|  52.0k|            }
 7858|   449k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   449k|    }
 7869|       |
 7870|   397k|    handler.on_literal_text(begin, end);
 7871|   397k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   397k|    {
 9058|   397k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   397k|    static_cast<    \
  |  | 1109|   397k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   397k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|   449k|{
 7775|   449k|    struct id_adapter {
 7776|   449k|        constexpr void operator()()
 7777|   449k|        {
 7778|   449k|            arg_id = handler.on_arg_id();
 7779|   449k|        }
 7780|   449k|        constexpr void operator()(std::size_t id)
 7781|   449k|        {
 7782|   449k|            arg_id = handler.on_arg_id(id);
 7783|   449k|        }
 7784|       |
 7785|   449k|        constexpr void on_error(const char* msg)
 7786|   449k|        {
 7787|   449k|            SCN_UNLIKELY_ATTR
 7788|   449k|            handler.on_error(msg);
 7789|   449k|        }
 7790|       |
 7791|   449k|        Handler& handler;
 7792|   449k|        std::size_t arg_id;
 7793|   449k|    };
 7794|       |
 7795|   449k|    ++begin;
 7796|   449k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   449k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 449k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   449k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 449k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   449k|    else {
 7808|   449k|        auto adapter = id_adapter{handler, 0};
 7809|   449k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   449k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   449k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 449k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   449k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 449k, False: 0]
  ------------------
 7820|   449k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   449k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   449k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   898k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  |  Branch (1039:45): [True: 0, False: 449k]
  |  |  |  Branch (1039:45): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   449k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   449k|    }
 7836|   449k|    return begin + 1;
 7837|   449k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   449k|{
 7276|   449k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   449k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 449k, False: 0]
  |  Branch (7277:26): [True: 0, False: 449k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   449k|    handler();
 7282|   449k|    return begin;
 7283|   449k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   449k|        {
 7778|   449k|            arg_id = handler.on_arg_id();
 7779|   449k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   449k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   449k|    {
 7962|   449k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   449k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|   449k|{
 7691|   449k|    auto do_presentation = [&]() -> const CharT* {
 7692|   449k|        if (*begin == CharT{'['}) {
 7693|   449k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   449k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   449k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   449k|                return begin;
 7699|   449k|            }
 7700|   449k|            handler.on_character_set_string(set);
 7701|   449k|            return begin;
 7702|   449k|        }
 7703|   449k|        if (*begin == CharT{'/'}) {
 7704|   449k|            return parse_presentation_regex(begin, end, handler);
 7705|   449k|        }
 7706|   449k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   449k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   449k|            handler.on_error("Invalid type specifier in format string");
 7709|   449k|            return begin;
 7710|   449k|        }
 7711|   449k|        handler.on_type(type);
 7712|   449k|        return begin;
 7713|   449k|    };
 7714|       |
 7715|   449k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 449k, False: 0]
  |  Branch (7715:28): [True: 449k, False: 0]
  ------------------
 7716|   449k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 449k, False: 0]
  |  Branch (7716:36): [True: 325k, False: 123k]
  ------------------
 7717|   325k|        return do_presentation();
 7718|   325k|    }
 7719|       |
 7720|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   123k|    begin = parse_align(begin, end, handler);
 7726|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   123k|    begin = parse_width(begin, end, handler);
 7732|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   123k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 123k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   123k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 123k, False: 0]
  ------------------
 7751|   123k|        handler.on_localized();
 7752|   123k|        ++begin;
 7753|   123k|    }
 7754|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   123k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 123k, False: 0]
  |  Branch (7759:25): [True: 0, False: 123k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   123k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   123k|    return begin;
 7768|   123k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   325k|    auto do_presentation = [&]() -> const CharT* {
 7692|   325k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 325k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   325k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 325k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   325k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   325k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   325k|        handler.on_type(type);
 7712|   325k|        return begin;
 7713|   325k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|   123k|{
 7365|   123k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   123k|    auto check_align = [](wchar_t ch) {
 7368|   123k|        switch (ch) {
 7369|   123k|            case L'<':
 7370|   123k|                return align_type::left;
 7371|   123k|            case L'>':
 7372|   123k|                return align_type::right;
 7373|   123k|            case L'^':
 7374|   123k|                return align_type::center;
 7375|   123k|            default:
 7376|   123k|                return align_type::none;
 7377|   123k|        }
 7378|   123k|    };
 7379|       |
 7380|   123k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   123k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  |  Branch (1039:45): [True: 0, False: 123k]
  |  |  |  Branch (1039:45): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7382|   123k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   123k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   123k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   123k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   123k|    const auto begin_before_fill = begin;
 7392|   123k|    begin += potential_fill_len;
 7393|       |
 7394|   123k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 123k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   123k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   123k|    const auto begin_after_fill = begin;
 7400|   123k|    ++begin;
 7401|       |
 7402|   123k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 123k, False: 0]
  ------------------
 7403|   123k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   123k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 123k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   123k|    }
 7411|       |
 7412|   123k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 123k, False: 0]
  ------------------
 7413|   123k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 123k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   123k|        return begin_before_fill;
 7418|   123k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   123k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   246k|    auto check_align = [](wchar_t ch) {
 7368|   246k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 246k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 246k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 246k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   246k|            default:
  ------------------
  |  Branch (7375:13): [True: 246k, False: 0]
  ------------------
 7376|   246k|                return align_type::none;
 7377|   246k|        }
 7378|   246k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|   123k|{
 7430|   123k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   123k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 123k, False: 0]
  |  Branch (7432:33): [True: 0, False: 123k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   123k|    return begin;
 7443|   123k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|   123k|    {
 7967|   123k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   123k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 123k, False: 0]
  ------------------
 7969|   123k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 123k, False: 0]
  ------------------
 7970|   123k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 123k]
  ------------------
 7971|   123k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   123k|        Handler::on_localized();
 7979|   123k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   449k|{
 9494|   449k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   449k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   449k|{
 9353|   449k|#define SCN_VISIT(Type)                                                \
 9354|   449k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   449k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   449k|    }                                                                  \
 9357|   449k|    else {                                                             \
 9358|   449k|        return vis(monostate_val);                                     \
 9359|   449k|    }
 9360|       |
 9361|   449k|    monostate monostate_val{};
 9362|       |
 9363|   449k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 449k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 449k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 449k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 449k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 449k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 449k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 449k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 449k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 449k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 449k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 449k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 449k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 449k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 449k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 449k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 449k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 449k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   144k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 144k, False: 304k]
  ------------------
 9407|   144k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   144k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   144k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   144k|    }                                                                  \
  |  | 9357|   144k|    else {                                                             \
  |  | 9358|   144k|        return vis(monostate_val);                                     \
  |  | 9359|   144k|    }
  ------------------
 9408|   295k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 150k, False: 298k]
  ------------------
 9409|   295k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   295k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   295k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   295k|    }                                                                  \
  |  | 9357|   295k|    else {                                                             \
  |  | 9358|   295k|        return vis(monostate_val);                                     \
  |  | 9359|   295k|    }
  ------------------
 9410|   449k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 153k, False: 295k]
  ------------------
 9411|   449k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   449k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   449k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   449k|    }                                                                  \
  |  | 9357|   449k|    else {                                                             \
  |  | 9358|   449k|        return vis(monostate_val);                                     \
  |  | 9359|   449k|    }
  ------------------
 9412|   449k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 449k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   449k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 449k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 449k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 449k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 449k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 449k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 449k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 449k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 449k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 449k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 449k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   449k|            SCN_CLANG_POP
 9473|   449k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  67.6k|    {
 4370|  67.6k|        return sync(0);
 4371|  67.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   929k|    {
 6263|   929k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 929k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   929k|        return static_cast<std::size_t>(m_desc &
 6268|   929k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   929k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  1.85M|    {
 6289|  1.85M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   929k|    {
 6231|   929k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 929k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   929k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 929k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   929k|        const auto t = type(id);
 6243|   929k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 929k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   929k|        basic_scan_arg<Context> arg;
 6248|   929k|        arg.m_type = t;
 6249|   929k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 929k, False: 0]
  ------------------
 6250|   929k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   929k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   929k|        return arg;
 6256|   929k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   929k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   929k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   929k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   929k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   929k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   929k|    {
 6293|   929k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   929k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  1.76M|    {
 6047|  1.76M|        return m_type != detail::arg_type::none_type;
 6048|  1.76M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   137k|{
 9494|   137k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   137k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   137k|{
 9353|   137k|#define SCN_VISIT(Type)                                                \
 9354|   137k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   137k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   137k|    }                                                                  \
 9357|   137k|    else {                                                             \
 9358|   137k|        return vis(monostate_val);                                     \
 9359|   137k|    }
 9360|       |
 9361|   137k|    monostate monostate_val{};
 9362|       |
 9363|   137k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 137k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 137k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 137k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 137k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 137k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 137k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 137k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 137k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 137k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 137k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 137k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 137k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 137k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 137k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 137k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 137k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 137k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.8k, False: 97.0k]
  ------------------
 9407|  40.8k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.8k|    }                                                                  \
  |  | 9357|  40.8k|    else {                                                             \
  |  | 9358|  40.8k|        return vis(monostate_val);                                     \
  |  | 9359|  40.8k|    }
  ------------------
 9408|  88.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 47.6k, False: 90.2k]
  ------------------
 9409|  88.4k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  88.4k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  88.4k|    }                                                                  \
  |  | 9357|  88.4k|    else {                                                             \
  |  | 9358|  88.4k|        return vis(monostate_val);                                     \
  |  | 9359|  88.4k|    }
  ------------------
 9410|   137k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 49.4k, False: 88.4k]
  ------------------
 9411|   137k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   137k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   137k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   137k|    }                                                                  \
  |  | 9357|   137k|    else {                                                             \
  |  | 9358|   137k|        return vis(monostate_val);                                     \
  |  | 9359|   137k|    }
  ------------------
 9412|   137k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 137k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   137k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 137k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 137k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 137k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 137k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 137k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 137k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 137k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 137k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 137k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 137k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   137k|            SCN_CLANG_POP
 9473|   137k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.51M|{
 6092|  2.51M|    return arg.m_type;
 6093|  2.51M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.02M|{
 6104|  1.02M|    return arg.m_value;
 6105|  1.02M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   372k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   372k|    {
 9021|   372k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   372k|        : m_format{format},
 6362|   372k|          m_next_arg_id{next_arg_id},
 6363|   372k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   372k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   372k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   372k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   372k|    {
 6369|   372k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   372k|    {
 3089|   372k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   372k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   372k|    {
 3055|   372k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   372k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   372k|{
 7878|   372k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   372k|    handler.check_args_exhausted();
 7880|   372k|    return handler.get_error();
 7881|   372k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   372k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   372k|    auto begin = format.data();
 7846|   372k|    auto it = begin;
 7847|   372k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   641k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 372k, False: 268k]
  ------------------
 7850|   372k|        const auto ch = *it++;
 7851|   372k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 372k, False: 0]
  ------------------
 7852|   372k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   372k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   372k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 104k, False: 268k]
  ------------------
 7856|   104k|                return;
 7857|   104k|            }
 7858|   372k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   372k|    }
 7869|       |
 7870|   268k|    handler.on_literal_text(begin, end);
 7871|   268k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   372k|{
 7775|   372k|    struct id_adapter {
 7776|   372k|        constexpr void operator()()
 7777|   372k|        {
 7778|   372k|            arg_id = handler.on_arg_id();
 7779|   372k|        }
 7780|   372k|        constexpr void operator()(std::size_t id)
 7781|   372k|        {
 7782|   372k|            arg_id = handler.on_arg_id(id);
 7783|   372k|        }
 7784|       |
 7785|   372k|        constexpr void on_error(const char* msg)
 7786|   372k|        {
 7787|   372k|            SCN_UNLIKELY_ATTR
 7788|   372k|            handler.on_error(msg);
 7789|   372k|        }
 7790|       |
 7791|   372k|        Handler& handler;
 7792|   372k|        std::size_t arg_id;
 7793|   372k|    };
 7794|       |
 7795|   372k|    ++begin;
 7796|   372k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   372k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 372k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   372k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 372k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   372k|    else {
 7808|   372k|        auto adapter = id_adapter{handler, 0};
 7809|   372k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   372k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   372k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 372k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   372k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 372k, False: 0]
  ------------------
 7820|   372k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   372k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   372k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  |  Branch (1039:45): [True: 0, False: 372k]
  |  |  |  Branch (1039:45): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   372k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   372k|    }
 7836|   372k|    return begin + 1;
 7837|   372k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   745k|    {
 8919|   745k|        return m_args.get(id);
 8920|   745k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   745k|    {
 6397|   745k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 745k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   745k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   745k|        do_check_arg_id(id);
 6405|   745k|        return id;
 6406|   745k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   745k|{
 6891|   745k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   745k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   745k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   372k|{
 7276|   372k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   372k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 372k, False: 0]
  |  Branch (7277:26): [True: 0, False: 372k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   372k|    handler();
 7282|   372k|    return begin;
 7283|   372k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   372k|        {
 7778|   372k|            arg_id = handler.on_arg_id();
 7779|   372k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   745k|    {
 6392|   745k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   745k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   510k|{
 4709|   510k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 510k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   510k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   510k|                            ranges::default_sentinel};
 4715|   510k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   510k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   510k|    {
 4473|   510k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   510k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   510k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   510k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   510k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.49M|    {
 6381|  1.49M|        return m_format.data();
 6382|  1.49M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   372k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   372k|    {
 7962|   372k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   372k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   372k|{
 7691|   372k|    auto do_presentation = [&]() -> const CharT* {
 7692|   372k|        if (*begin == CharT{'['}) {
 7693|   372k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   372k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   372k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   372k|                return begin;
 7699|   372k|            }
 7700|   372k|            handler.on_character_set_string(set);
 7701|   372k|            return begin;
 7702|   372k|        }
 7703|   372k|        if (*begin == CharT{'/'}) {
 7704|   372k|            return parse_presentation_regex(begin, end, handler);
 7705|   372k|        }
 7706|   372k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   372k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   372k|            handler.on_error("Invalid type specifier in format string");
 7709|   372k|            return begin;
 7710|   372k|        }
 7711|   372k|        handler.on_type(type);
 7712|   372k|        return begin;
 7713|   372k|    };
 7714|       |
 7715|   372k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 372k, False: 0]
  |  Branch (7715:28): [True: 372k, False: 0]
  ------------------
 7716|   372k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 372k, False: 0]
  |  Branch (7716:36): [True: 280k, False: 91.8k]
  ------------------
 7717|   280k|        return do_presentation();
 7718|   280k|    }
 7719|       |
 7720|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  91.8k|    begin = parse_align(begin, end, handler);
 7726|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  91.8k|    begin = parse_width(begin, end, handler);
 7732|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  91.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 91.8k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  91.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 91.8k, False: 0]
  ------------------
 7751|  91.8k|        handler.on_localized();
 7752|  91.8k|        ++begin;
 7753|  91.8k|    }
 7754|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  91.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 91.8k, False: 0]
  |  Branch (7759:25): [True: 0, False: 91.8k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  91.8k|    return begin;
 7768|  91.8k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   745k|{
 7340|   745k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 561k, False: 183k]
  |  Branch (7340:33): [True: 561k, False: 0]
  ------------------
 7341|   745k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 183k, False: 0]
  |  Branch (7341:33): [True: 183k, False: 0]
  ------------------
 7342|   745k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   280k|    auto do_presentation = [&]() -> const CharT* {
 7692|   280k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 280k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   280k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 280k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   280k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   280k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   280k|        handler.on_type(type);
 7712|   280k|        return begin;
 7713|   280k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   561k|{
 7288|   561k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 561k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 561k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 561k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 561k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 561k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 561k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 561k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 561k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 561k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 561k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   201k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 201k, False: 360k]
  ------------------
 7307|   201k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 561k]
  ------------------
 7308|   201k|            return presentation_type::float_hex;
 7309|  44.3k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 44.3k, False: 517k]
  ------------------
 7310|  44.3k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 561k]
  ------------------
 7311|  44.3k|            return presentation_type::float_scientific;
 7312|   146k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 146k, False: 415k]
  ------------------
 7313|   146k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 561k]
  ------------------
 7314|   146k|            return presentation_type::float_fixed;
 7315|   169k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 169k, False: 392k]
  ------------------
 7316|   169k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 561k]
  ------------------
 7317|   169k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 561k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 561k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 561k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 561k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 561k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 561k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 561k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   561k|    }
 7335|   561k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  91.8k|{
 7365|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  91.8k|    auto check_align = [](wchar_t ch) {
 7368|  91.8k|        switch (ch) {
 7369|  91.8k|            case L'<':
 7370|  91.8k|                return align_type::left;
 7371|  91.8k|            case L'>':
 7372|  91.8k|                return align_type::right;
 7373|  91.8k|            case L'^':
 7374|  91.8k|                return align_type::center;
 7375|  91.8k|            default:
 7376|  91.8k|                return align_type::none;
 7377|  91.8k|        }
 7378|  91.8k|    };
 7379|       |
 7380|  91.8k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  91.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7382|  91.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  91.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  91.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  91.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  91.8k|    const auto begin_before_fill = begin;
 7392|  91.8k|    begin += potential_fill_len;
 7393|       |
 7394|  91.8k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 91.8k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  91.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  91.8k|    const auto begin_after_fill = begin;
 7400|  91.8k|    ++begin;
 7401|       |
 7402|  91.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 91.8k, False: 0]
  ------------------
 7403|  91.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  91.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 91.8k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  91.8k|    }
 7411|       |
 7412|  91.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 91.8k, False: 0]
  ------------------
 7413|  91.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 91.8k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  91.8k|        return begin_before_fill;
 7418|  91.8k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  91.8k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|   183k|{
 7347|   183k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|   183k|    if constexpr (sizeof(CharT) != 1) {
 7349|   183k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|   183k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   183k|    auto check_align = [](wchar_t ch) {
 7368|   183k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 183k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 183k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 183k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   183k|            default:
  ------------------
  |  Branch (7375:13): [True: 183k, False: 0]
  ------------------
 7376|   183k|                return align_type::none;
 7377|   183k|        }
 7378|   183k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  91.8k|{
 7430|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  91.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 91.8k, False: 0]
  |  Branch (7432:33): [True: 0, False: 91.8k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  91.8k|    return begin;
 7443|  91.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  91.8k|    {
 7967|  91.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  91.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 91.8k, False: 0]
  ------------------
 7969|  91.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 91.8k, False: 0]
  ------------------
 7970|  91.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 91.8k]
  ------------------
 7971|  91.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  91.8k|        Handler::on_localized();
 7979|  91.8k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   372k|{
 9494|   372k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   372k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   372k|{
 9353|   372k|#define SCN_VISIT(Type)                                                \
 9354|   372k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   372k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   372k|    }                                                                  \
 9357|   372k|    else {                                                             \
 9358|   372k|        return vis(monostate_val);                                     \
 9359|   372k|    }
 9360|       |
 9361|   372k|    monostate monostate_val{};
 9362|       |
 9363|   372k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 372k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 372k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 372k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 372k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 372k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 372k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 372k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 372k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 372k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 372k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 372k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 372k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 372k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 372k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 372k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 372k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 372k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   117k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 117k, False: 255k]
  ------------------
 9407|   117k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   117k|    }                                                                  \
  |  | 9357|   117k|    else {                                                             \
  |  | 9358|   117k|        return vis(monostate_val);                                     \
  |  | 9359|   117k|    }
  ------------------
 9408|   243k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 126k, False: 246k]
  ------------------
 9409|   243k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   243k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   243k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   243k|    }                                                                  \
  |  | 9357|   243k|    else {                                                             \
  |  | 9358|   243k|        return vis(monostate_val);                                     \
  |  | 9359|   243k|    }
  ------------------
 9410|   372k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 128k, False: 243k]
  ------------------
 9411|   372k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   372k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   372k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   372k|    }                                                                  \
  |  | 9357|   372k|    else {                                                             \
  |  | 9358|   372k|        return vis(monostate_val);                                     \
  |  | 9359|   372k|    }
  ------------------
 9412|   372k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 372k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   372k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 372k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 372k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 372k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 372k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 372k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 372k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 372k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 372k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 372k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 372k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   372k|            SCN_CLANG_POP
 9473|   372k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   137k|{
 9494|   137k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   137k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   137k|{
 9353|   137k|#define SCN_VISIT(Type)                                                \
 9354|   137k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   137k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   137k|    }                                                                  \
 9357|   137k|    else {                                                             \
 9358|   137k|        return vis(monostate_val);                                     \
 9359|   137k|    }
 9360|       |
 9361|   137k|    monostate monostate_val{};
 9362|       |
 9363|   137k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 137k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 137k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 137k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 137k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 137k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 137k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 137k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 137k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 137k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 137k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 137k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 137k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 137k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 137k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 137k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 137k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 137k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.7k, False: 96.9k]
  ------------------
 9407|  40.7k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.7k|    }                                                                  \
  |  | 9357|  40.7k|    else {                                                             \
  |  | 9358|  40.7k|        return vis(monostate_val);                                     \
  |  | 9359|  40.7k|    }
  ------------------
 9408|  88.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 47.5k, False: 90.1k]
  ------------------
 9409|  88.3k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  88.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  88.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  88.3k|    }                                                                  \
  |  | 9357|  88.3k|    else {                                                             \
  |  | 9358|  88.3k|        return vis(monostate_val);                                     \
  |  | 9359|  88.3k|    }
  ------------------
 9410|   137k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 49.3k, False: 88.3k]
  ------------------
 9411|   137k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   137k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   137k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   137k|    }                                                                  \
  |  | 9357|   137k|    else {                                                             \
  |  | 9358|   137k|        return vis(monostate_val);                                     \
  |  | 9359|   137k|    }
  ------------------
 9412|   137k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 137k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   137k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 137k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 137k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 137k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 137k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 137k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 137k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 137k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 137k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 137k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 137k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   137k|            SCN_CLANG_POP
 9473|   137k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   372k|        : m_format{format},
 6362|   372k|          m_next_arg_id{next_arg_id},
 6363|   372k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   372k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   372k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   372k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   372k|    {
 6369|   372k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   372k|{
 7878|   372k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   372k|    handler.check_args_exhausted();
 7880|   372k|    return handler.get_error();
 7881|   372k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   372k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   372k|    auto begin = format.data();
 7846|   372k|    auto it = begin;
 7847|   372k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   641k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 372k, False: 268k]
  ------------------
 7850|   372k|        const auto ch = *it++;
 7851|   372k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 372k, False: 0]
  ------------------
 7852|   372k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   372k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   372k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 104k, False: 268k]
  ------------------
 7856|   104k|                return;
 7857|   104k|            }
 7858|   372k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   372k|    }
 7869|       |
 7870|   268k|    handler.on_literal_text(begin, end);
 7871|   268k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   268k|    {
 9058|   268k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   268k|    static_cast<    \
  |  | 1109|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   268k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   372k|{
 7775|   372k|    struct id_adapter {
 7776|   372k|        constexpr void operator()()
 7777|   372k|        {
 7778|   372k|            arg_id = handler.on_arg_id();
 7779|   372k|        }
 7780|   372k|        constexpr void operator()(std::size_t id)
 7781|   372k|        {
 7782|   372k|            arg_id = handler.on_arg_id(id);
 7783|   372k|        }
 7784|       |
 7785|   372k|        constexpr void on_error(const char* msg)
 7786|   372k|        {
 7787|   372k|            SCN_UNLIKELY_ATTR
 7788|   372k|            handler.on_error(msg);
 7789|   372k|        }
 7790|       |
 7791|   372k|        Handler& handler;
 7792|   372k|        std::size_t arg_id;
 7793|   372k|    };
 7794|       |
 7795|   372k|    ++begin;
 7796|   372k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   372k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 372k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   372k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 372k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   372k|    else {
 7808|   372k|        auto adapter = id_adapter{handler, 0};
 7809|   372k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   372k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   372k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 372k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   372k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 372k, False: 0]
  ------------------
 7820|   372k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   372k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   372k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  |  Branch (1039:45): [True: 0, False: 372k]
  |  |  |  Branch (1039:45): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   372k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   372k|    }
 7836|   372k|    return begin + 1;
 7837|   372k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   372k|{
 7276|   372k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   372k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 372k, False: 0]
  |  Branch (7277:26): [True: 0, False: 372k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   372k|    handler();
 7282|   372k|    return begin;
 7283|   372k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   372k|        {
 7778|   372k|            arg_id = handler.on_arg_id();
 7779|   372k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   372k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   372k|    {
 7962|   372k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   372k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   372k|{
 7691|   372k|    auto do_presentation = [&]() -> const CharT* {
 7692|   372k|        if (*begin == CharT{'['}) {
 7693|   372k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   372k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   372k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   372k|                return begin;
 7699|   372k|            }
 7700|   372k|            handler.on_character_set_string(set);
 7701|   372k|            return begin;
 7702|   372k|        }
 7703|   372k|        if (*begin == CharT{'/'}) {
 7704|   372k|            return parse_presentation_regex(begin, end, handler);
 7705|   372k|        }
 7706|   372k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   372k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   372k|            handler.on_error("Invalid type specifier in format string");
 7709|   372k|            return begin;
 7710|   372k|        }
 7711|   372k|        handler.on_type(type);
 7712|   372k|        return begin;
 7713|   372k|    };
 7714|       |
 7715|   372k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 372k, False: 0]
  |  Branch (7715:28): [True: 372k, False: 0]
  ------------------
 7716|   372k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 372k, False: 0]
  |  Branch (7716:36): [True: 280k, False: 91.8k]
  ------------------
 7717|   280k|        return do_presentation();
 7718|   280k|    }
 7719|       |
 7720|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  91.8k|    begin = parse_align(begin, end, handler);
 7726|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  91.8k|    begin = parse_width(begin, end, handler);
 7732|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  91.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 91.8k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  91.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 91.8k, False: 0]
  ------------------
 7751|  91.8k|        handler.on_localized();
 7752|  91.8k|        ++begin;
 7753|  91.8k|    }
 7754|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  91.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 91.8k, False: 0]
  |  Branch (7759:25): [True: 0, False: 91.8k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  91.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  91.8k|    return begin;
 7768|  91.8k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   280k|    auto do_presentation = [&]() -> const CharT* {
 7692|   280k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 280k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   280k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 280k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   280k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   280k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   280k|        handler.on_type(type);
 7712|   280k|        return begin;
 7713|   280k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  91.8k|{
 7365|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  91.8k|    auto check_align = [](wchar_t ch) {
 7368|  91.8k|        switch (ch) {
 7369|  91.8k|            case L'<':
 7370|  91.8k|                return align_type::left;
 7371|  91.8k|            case L'>':
 7372|  91.8k|                return align_type::right;
 7373|  91.8k|            case L'^':
 7374|  91.8k|                return align_type::center;
 7375|  91.8k|            default:
 7376|  91.8k|                return align_type::none;
 7377|  91.8k|        }
 7378|  91.8k|    };
 7379|       |
 7380|  91.8k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  91.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.8k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7382|  91.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  91.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  91.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  91.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  91.8k|    const auto begin_before_fill = begin;
 7392|  91.8k|    begin += potential_fill_len;
 7393|       |
 7394|  91.8k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 91.8k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  91.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  91.8k|    const auto begin_after_fill = begin;
 7400|  91.8k|    ++begin;
 7401|       |
 7402|  91.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 91.8k, False: 0]
  ------------------
 7403|  91.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  91.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 91.8k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  91.8k|    }
 7411|       |
 7412|  91.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 91.8k, False: 0]
  ------------------
 7413|  91.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 91.8k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  91.8k|        return begin_before_fill;
 7418|  91.8k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  91.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   183k|    auto check_align = [](wchar_t ch) {
 7368|   183k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 183k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 183k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 183k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   183k|            default:
  ------------------
  |  Branch (7375:13): [True: 183k, False: 0]
  ------------------
 7376|   183k|                return align_type::none;
 7377|   183k|        }
 7378|   183k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  91.8k|{
 7430|  91.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  91.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 91.8k, False: 0]
  |  Branch (7432:33): [True: 0, False: 91.8k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  91.8k|    return begin;
 7443|  91.8k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  91.8k|    {
 7967|  91.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  91.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 91.8k, False: 0]
  ------------------
 7969|  91.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 91.8k, False: 0]
  ------------------
 7970|  91.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 91.8k]
  ------------------
 7971|  91.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  91.8k|        Handler::on_localized();
 7979|  91.8k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   372k|{
 9494|   372k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   372k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   372k|{
 9353|   372k|#define SCN_VISIT(Type)                                                \
 9354|   372k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   372k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   372k|    }                                                                  \
 9357|   372k|    else {                                                             \
 9358|   372k|        return vis(monostate_val);                                     \
 9359|   372k|    }
 9360|       |
 9361|   372k|    monostate monostate_val{};
 9362|       |
 9363|   372k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 372k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 372k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 372k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 372k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 372k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 372k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 372k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 372k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 372k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 372k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 372k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 372k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 372k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 372k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 372k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 372k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 372k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   117k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 117k, False: 255k]
  ------------------
 9407|   117k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   117k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   117k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   117k|    }                                                                  \
  |  | 9357|   117k|    else {                                                             \
  |  | 9358|   117k|        return vis(monostate_val);                                     \
  |  | 9359|   117k|    }
  ------------------
 9408|   243k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 126k, False: 246k]
  ------------------
 9409|   243k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   243k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   243k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   243k|    }                                                                  \
  |  | 9357|   243k|    else {                                                             \
  |  | 9358|   243k|        return vis(monostate_val);                                     \
  |  | 9359|   243k|    }
  ------------------
 9410|   372k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 128k, False: 243k]
  ------------------
 9411|   372k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   372k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   372k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   372k|    }                                                                  \
  |  | 9357|   372k|    else {                                                             \
  |  | 9358|   372k|        return vis(monostate_val);                                     \
  |  | 9359|   372k|    }
  ------------------
 9412|   372k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 372k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   372k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 372k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 372k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 372k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 372k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 372k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 372k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 372k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 372k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 372k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 372k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   372k|            SCN_CLANG_POP
 9473|   372k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|   135k|    {
 4370|   135k|        return sync(0);
 4371|   135k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|   111k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  91.8k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  72.2k|{
   89|  72.2k|    auto result = make_scan_result<Source, Args...>();
   90|  72.2k|    fill_scan_result(result,
   91|  72.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.2k|    return result;
   94|  72.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   232k|{
   44|   232k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   232k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  72.2k|{
  131|  72.2k|    auto result = make_scan_result<Source, Args...>();
  132|  72.2k|    fill_scan_result(result,
  133|  72.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.2k|    return result;
  136|  72.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   232k|{
   60|   232k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   232k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  13.6k|{
  171|  13.6k|    auto result = make_scan_result<Source, T>();
  172|  13.6k|    fill_scan_result(
  173|  13.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.6k|    return result;
  176|  13.6k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  45.9k|{
   72|  45.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  79.1k|{
   89|  79.1k|    auto result = make_scan_result<Source, Args...>();
   90|  79.1k|    fill_scan_result(result,
   91|  79.1k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.1k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.1k|    return result;
   94|  79.1k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  79.1k|{
  131|  79.1k|    auto result = make_scan_result<Source, Args...>();
  132|  79.1k|    fill_scan_result(result,
  133|  79.1k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.1k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.1k|    return result;
  136|  79.1k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  80.9k|{
   89|  80.9k|    auto result = make_scan_result<Source, Args...>();
   90|  80.9k|    fill_scan_result(result,
   91|  80.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  80.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  80.9k|    return result;
   94|  80.9k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  80.9k|{
  131|  80.9k|    auto result = make_scan_result<Source, Args...>();
  132|  80.9k|    fill_scan_result(result,
  133|  80.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  80.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  80.9k|    return result;
  136|  80.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.4k|{
  171|  16.4k|    auto result = make_scan_result<Source, T>();
  172|  16.4k|    fill_scan_result(
  173|  16.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.4k|    return result;
  176|  16.4k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  72.2k|{
   89|  72.2k|    auto result = make_scan_result<Source, Args...>();
   90|  72.2k|    fill_scan_result(result,
   91|  72.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.2k|    return result;
   94|  72.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   232k|{
   44|   232k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   232k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  72.2k|{
  131|  72.2k|    auto result = make_scan_result<Source, Args...>();
  132|  72.2k|    fill_scan_result(result,
  133|  72.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.2k|    return result;
  136|  72.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   232k|{
   60|   232k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   232k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  13.5k|{
  171|  13.5k|    auto result = make_scan_result<Source, T>();
  172|  13.5k|    fill_scan_result(
  173|  13.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.5k|    return result;
  176|  13.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  45.9k|{
   72|  45.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  79.0k|{
   89|  79.0k|    auto result = make_scan_result<Source, Args...>();
   90|  79.0k|    fill_scan_result(result,
   91|  79.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.0k|    return result;
   94|  79.0k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  79.0k|{
  131|  79.0k|    auto result = make_scan_result<Source, Args...>();
  132|  79.0k|    fill_scan_result(result,
  133|  79.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.0k|    return result;
  136|  79.0k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.8k|{
  171|  15.8k|    auto result = make_scan_result<Source, T>();
  172|  15.8k|    fill_scan_result(
  173|  15.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.8k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.8k|    return result;
  176|  15.8k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  80.9k|{
   89|  80.9k|    auto result = make_scan_result<Source, Args...>();
   90|  80.9k|    fill_scan_result(result,
   91|  80.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  80.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  80.9k|    return result;
   94|  80.9k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  80.9k|{
  131|  80.9k|    auto result = make_scan_result<Source, Args...>();
  132|  80.9k|    fill_scan_result(result,
  133|  80.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  80.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  80.9k|    return result;
  136|  80.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.4k|{
  171|  16.4k|    auto result = make_scan_result<Source, T>();
  172|  16.4k|    fill_scan_result(
  173|  16.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.4k|    return result;
  176|  16.4k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.00M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.00M|{
  309|  1.00M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.00M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   413k|{
  315|   413k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   413k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 206k, False: 206k]
  ------------------
  317|   413k|                    : std::locale{};
  318|   413k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   351k|{
 1829|   351k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   351k|                                      m_nan_payload_buffer, value);
 1831|   351k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   351k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 339k, False: 12.6k]
  |  |  ------------------
  ------------------
 1832|   339k|        value = this->setsign(value);
 1833|   339k|        return n;
 1834|   339k|    }
 1835|       |
 1836|  12.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 3.39k, False: 9.24k]
  ------------------
 1837|  12.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 865, False: 2.53k]
  ------------------
 1838|    865|        return detail::unexpected_scan_error(
 1839|    865|            scan_error::value_negative_overflow, n.error().msg());
 1840|    865|    }
 1841|  11.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 550, False: 11.2k]
  ------------------
 1842|  11.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 84, False: 466]
  ------------------
 1843|     84|        return detail::unexpected_scan_error(
 1844|     84|            scan_error::value_negative_underflow, n.error().msg());
 1845|     84|    }
 1846|  11.6k|    return n;
 1847|  11.7k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   251k|{
 1829|   251k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   251k|                                      m_nan_payload_buffer, value);
 1831|   251k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   251k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 226k, False: 25.6k]
  |  |  ------------------
  ------------------
 1832|   226k|        value = this->setsign(value);
 1833|   226k|        return n;
 1834|   226k|    }
 1835|       |
 1836|  25.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.56k, False: 23.0k]
  ------------------
 1837|  25.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 2.46k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  25.5k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 806, False: 24.7k]
  ------------------
 1842|  25.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 50, False: 756]
  ------------------
 1843|     50|        return detail::unexpected_scan_error(
 1844|     50|            scan_error::value_negative_underflow, n.error().msg());
 1845|     50|    }
 1846|  25.5k|    return n;
 1847|  25.5k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   366k|{
 1829|   366k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   366k|                                      m_nan_payload_buffer, value);
 1831|   366k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 355k, False: 11.2k]
  |  |  ------------------
  ------------------
 1832|   355k|        value = this->setsign(value);
 1833|   355k|        return n;
 1834|   355k|    }
 1835|       |
 1836|  11.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.05k, False: 9.22k]
  ------------------
 1837|  11.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 530, False: 1.52k]
  ------------------
 1838|    530|        return detail::unexpected_scan_error(
 1839|    530|            scan_error::value_negative_overflow, n.error().msg());
 1840|    530|    }
 1841|  10.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 227, False: 10.5k]
  ------------------
 1842|  10.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 81, False: 146]
  ------------------
 1843|     81|        return detail::unexpected_scan_error(
 1844|     81|            scan_error::value_negative_underflow, n.error().msg());
 1845|     81|    }
 1846|  10.6k|    return n;
 1847|  10.7k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   282k|{
 1829|   282k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   282k|                                      m_nan_payload_buffer, value);
 1831|   282k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   282k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 257k, False: 24.4k]
  |  |  ------------------
  ------------------
 1832|   257k|        value = this->setsign(value);
 1833|   257k|        return n;
 1834|   257k|    }
 1835|       |
 1836|  24.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 1.52k, False: 22.9k]
  ------------------
 1837|  24.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 1.41k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  24.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 178, False: 24.2k]
  ------------------
 1842|  24.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 160]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  24.3k|    return n;
 1847|  24.3k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   373k|{
 1829|   373k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   373k|                                      m_nan_payload_buffer, value);
 1831|   373k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   373k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 363k, False: 9.86k]
  |  |  ------------------
  ------------------
 1832|   363k|        value = this->setsign(value);
 1833|   363k|        return n;
 1834|   363k|    }
 1835|       |
 1836|  9.86k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 425, False: 9.43k]
  ------------------
 1837|  9.86k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 181, False: 244]
  ------------------
 1838|    181|        return detail::unexpected_scan_error(
 1839|    181|            scan_error::value_negative_overflow, n.error().msg());
 1840|    181|    }
 1841|  9.68k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 98, False: 9.58k]
  ------------------
 1842|  9.68k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 42, False: 56]
  ------------------
 1843|     42|        return detail::unexpected_scan_error(
 1844|     42|            scan_error::value_negative_underflow, n.error().msg());
 1845|     42|    }
 1846|  9.64k|    return n;
 1847|  9.68k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   289k|{
 1829|   289k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   289k|                                      m_nan_payload_buffer, value);
 1831|   289k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 266k, False: 23.4k]
  |  |  ------------------
  ------------------
 1832|   266k|        value = this->setsign(value);
 1833|   266k|        return n;
 1834|   266k|    }
 1835|       |
 1836|  23.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 132, False: 23.2k]
  ------------------
 1837|  23.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 32, False: 100]
  ------------------
 1838|     32|        return detail::unexpected_scan_error(
 1839|     32|            scan_error::value_negative_overflow, n.error().msg());
 1840|     32|    }
 1841|  23.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 68, False: 23.3k]
  ------------------
 1842|  23.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 50]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  23.3k|    return n;
 1847|  23.3k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  10.2k|{
 2185|  10.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  10.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  10.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  10.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  10.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 96, False: 10.1k]
  ------------------
 2191|     96|        SCN_UNLIKELY_ATTR
 2192|     96|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     96|                                             "Invalid integer value");
 2194|     96|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  10.1k|    auto start = source.data();
 2198|  10.1k|    const auto end = source.data() + source.size();
 2199|  10.1k|    {
 2200|   146k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 145k, False: 522]
  ------------------
 2201|   145k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 9.65k, False: 136k]
  ------------------
 2202|  9.65k|                break;
 2203|  9.65k|            }
 2204|   145k|        }
 2205|  10.1k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 600, False: 9.58k]
  |  |  |  Branch (1039:45): [True: 522, False: 9.65k]
  |  |  |  Branch (1039:45): [True: 78, False: 9.58k]
  |  |  ------------------
  ------------------
 2206|    600|            value = 0;
 2207|    600|            return ranges::next(source.begin(),
 2208|    600|                                ranges::distance(source.data(), start));
 2209|    600|        }
 2210|  10.1k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  9.58k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  9.58k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 9.58k, False: 0]
  ------------------
 2215|  9.58k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  9.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.06k, False: 8.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.06k|    }                                                  \
  |  |  |  | 3957|  9.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  8.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  8.51k|                             detail::make_string_view_from_pointers(start, end),
 2217|  8.51k|                             value, sign == sign_type::minus_sign));
 2218|  8.51k|            return ranges::next(source.begin(),
 2219|  8.51k|                                ranges::distance(source.data(), ptr));
 2220|  9.58k|        }
 2221|  9.58k|    }
 2222|       |
 2223|  9.58k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  9.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 9.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  9.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  9.58k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  9.58k|                     base, sign == sign_type::minus_sign));
 2226|  9.58k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  9.58k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|   260k|{
 2952|   260k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|   260k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2959|   280k|{
 2960|   280k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2961|   280k|    return sync_after_vscan(source, n);
 2962|   280k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|   232k|{
 2970|   232k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|   232k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2977|   232k|{
 2978|   232k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2979|   232k|    return sync_after_vscan(source, n);
 2980|   232k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   931k|{
  207|   931k|    return find_classic_impl(
  208|   931k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   931k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   931k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  1.18M|{
  215|  1.18M|    return find_classic_impl(
  216|  1.18M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  1.18M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  1.18M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|   260k|{
 2921|   260k|    return vscan_internal(source, format, args);
 2922|   260k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2926|   280k|{
 2927|   280k|    auto n = vscan_internal(source, format, args);
 2928|   280k|    return sync_after_vscan(source, n);
 2929|   280k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|   232k|{
 2935|   232k|    return vscan_internal(source, format, args);
 2936|   232k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2940|   232k|{
 2941|   232k|    auto n = vscan_internal(source, format, args);
 2942|   232k|    return sync_after_vscan(source, n);
 2943|   232k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3006|  55.4k|{
 3007|  55.4k|    return vscan_value_internal(source, arg);
 3008|  55.4k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3011|  56.0k|{
 3012|  56.0k|    auto n = vscan_value_internal(source, arg);
 3013|  56.0k|    return sync_after_vscan(source, n);
 3014|  56.0k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3019|  45.9k|{
 3020|  45.9k|    return vscan_value_internal(source, arg);
 3021|  45.9k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3025|  45.9k|{
 3026|  45.9k|    auto n = vscan_value_internal(source, arg);
 3027|  45.9k|    return sync_after_vscan(source, n);
 3028|  45.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1959|  9.58k|{
 1960|  9.58k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|  9.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1961|  9.58k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1962|  9.58k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2003|    234|{
 2004|    234|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|    234|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    234|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2005|    234|    return min_safe_u64_table[static_cast<size_t>(base)];
 2006|    234|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2013|  9.58k|{
 2014|  9.58k|    auto max_digits = maxdigits_u64(base);
 2015|  9.58k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 916, False: 8.66k]
  ------------------
 2016|    916|        return true;
 2017|    916|    }
 2018|  8.66k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 234, False: 8.43k]
  |  Branch (2018:39): [True: 150, False: 84]
  ------------------
 2019|    150|        return true;
 2020|    150|    }
 2021|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2023|       |                      static_cast<uint64_t>(is_negative)) {
 2024|       |            SCN_UNLIKELY_ATTR
 2025|       |            return true;
 2026|       |        }
 2027|       |    }
 2028|       |
 2029|  8.51k|    return false;
 2030|  8.66k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2034|  8.51k|{
 2035|  8.51k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 8.51k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  8.51k|    return static_cast<T>(acc);
 2045|  8.51k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1897|  15.8k|{
 1898|  15.8k|    uint64_t val{};
 1899|  15.8k|    std::memcpy(&val, input, sizeof(uint64_t));
 1900|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1901|       |        val = byteswap(val);
 1902|       |    }
 1903|  15.8k|    return val;
 1904|  15.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1907|  7.64k|{
 1908|  7.64k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1909|  7.64k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1910|  7.64k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1911|  7.64k|    word -= 0x3030303030303030;
 1912|  7.64k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1913|  7.64k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1914|  7.64k|    return static_cast<uint32_t>(word);
 1915|  7.64k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1918|  8.22k|{
 1919|  8.22k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1920|  8.22k|              0x8080808080808080));
 1921|  8.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   931k|{
  131|   931k|    auto it = source.begin();
  132|       |
  133|  2.79M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.15M, False: 637k]
  ------------------
  134|  2.15M|        auto sv =
  135|  2.15M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.15M|                .substr(0, 8);
  137|       |
  138|  2.15M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.08M, False: 71.5k]
  ------------------
  139|  2.08M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.08M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.08M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 267k, False: 1.81M]
  ------------------
  142|   267k|                break;
  143|   267k|            }
  144|  1.81M|            continue;
  145|  2.08M|        }
  146|       |
  147|   242k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 196k, False: 46.0k]
  ------------------
  148|   196k|            auto tmp =
  149|   196k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   196k|            auto res = get_next_code_point(tmp);
  151|   196k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 25.5k, False: 171k]
  ------------------
  152|  25.5k|                return it;
  153|  25.5k|            }
  154|   171k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   171k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   171k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   171k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   171k|        }
  158|  71.5k|    }
  159|       |
  160|   905k|    return detail::make_string_view_iterator(source, it);
  161|   931k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  2.89M|{
  118|  2.89M|    static_assert(sizeof(*source.data()) == 1);
  119|  2.89M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  2.89M|    uint64_t word{};
  121|  2.89M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  2.89M|    return has_byte_greater(word, 127) != 0;
  124|  2.89M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  11.8M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   196k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  1.18M|{
  131|  1.18M|    auto it = source.begin();
  132|       |
  133|  1.28M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 740k, False: 544k]
  ------------------
  134|   740k|        auto sv =
  135|   740k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   740k|                .substr(0, 8);
  137|       |
  138|   740k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 688k, False: 52.1k]
  ------------------
  139|   688k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   688k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   688k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 596k, False: 91.7k]
  ------------------
  142|   596k|                break;
  143|   596k|            }
  144|  91.7k|            continue;
  145|   688k|        }
  146|       |
  147|  82.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 79.0k, False: 3.65k]
  ------------------
  148|  79.0k|            auto tmp =
  149|  79.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  79.0k|            auto res = get_next_code_point(tmp);
  151|  79.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 48.5k, False: 30.5k]
  ------------------
  152|  48.5k|                return it;
  153|  48.5k|            }
  154|  30.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  30.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  30.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  30.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  30.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  30.5k|        }
  158|  52.1k|    }
  159|       |
  160|  1.14M|    return detail::make_string_view_iterator(source, it);
  161|  1.18M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.01M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  79.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   351k|{
 1737|   351k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 2.67k, False: 349k]
  ------------------
 1738|  2.67k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  2.67k|            value = std::numeric_limits<T>::infinity();
 1740|  2.67k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  2.67k|    }
 1748|   351k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.81k, False: 349k]
  ------------------
 1749|  1.81k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.81k|            value = std::numeric_limits<T>::infinity();
 1751|  1.81k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.81k|    }
 1759|   351k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 16.6k, False: 335k]
  ------------------
 1760|  16.6k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  16.6k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  16.6k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  16.6k|    }
 1770|   351k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 3.79k, False: 348k]
  ------------------
 1771|  3.79k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  3.79k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  3.79k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  3.79k|#if SCN_HAS_INT128
 1777|  3.79k|                using payload_type =
 1778|  3.79k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  3.79k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  3.79k|                payload_type payload{};
 1784|  3.79k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 2.88k, False: 908]
  ------------------
 1785|  3.79k|                        nan_payload.view(), payload, {})) {
 1786|  2.88k|                    apply_nan_payload(value, payload);
 1787|  2.88k|                }
 1788|    908|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 354, False: 554]
  ------------------
 1789|    908|                         scan_error::value_positive_overflow) {
 1790|    354|                    apply_nan_payload(value,
 1791|    354|                                      std::numeric_limits<payload_type>::max());
 1792|    354|                }
 1793|  3.79k|            }
 1794|       |
 1795|  3.79k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  3.79k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  3.79k|    }
 1804|       |
 1805|   351k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   326k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 70.3k, False: 256k]
  ------------------
 1807|  70.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.38k, False: 67.9k]
  |  |  ------------------
  ------------------
 1808|  2.38k|            return detail::unexpected_scan_error(
 1809|  2.38k|                scan_error::invalid_scanned_value,
 1810|  2.38k|                "Invalid floating-point digit");
 1811|  2.38k|        }
 1812|  70.3k|    }
 1813|   324k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.31k, False: 318k]
  |  |  ------------------
  ------------------
 1814|  6.31k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.31k|                                             "Invalid floating-point digit");
 1816|  6.31k|    }
 1817|       |
 1818|   318k|    return dispatch_parse_float_value<
 1819|   318k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   318k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   318k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   324k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1606|  3.24k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.24k|                                  nil_float_traits>) {
 1610|  3.24k|        using traits = float_traits<F>;
 1611|  3.24k|        typename traits::nan_repr bits{};
 1612|  3.24k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.24k|        traits::apply_nan_payload(bits, payload);
 1614|  3.24k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.24k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  376|  3.24k|    {
  377|  3.24k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  378|  3.24k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1104|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  379|  3.24k|        r.mantissa = payload;
  380|  3.24k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|   318k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   318k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|   318k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   318k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   318k|    else {
 1715|   318k|        auto next =
 1716|   318k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   318k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   318k|                if (!err.has_value()) {
 1721|   318k|                    return unexpected(err.error());
 1722|   318k|                }
 1723|   318k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   318k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   318k|        };
 1727|   318k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   318k|    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   318k|{
 1686|   318k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   318k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   318k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1071|   318k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   318k|    {
 1073|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   318k|    {
 1078|   318k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   318k|                           generic_strtod);
 1080|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   318k|    {
  873|   318k|        CharT* end{};
  874|   318k|        errno = 0;
  875|   318k|        value = strtod_cb(src, &end);
  876|   318k|        const auto saved_errno = errno;
  877|   318k|        auto chars_read = end - src;
  878|       |
  879|   318k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   318k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.94k, False: 314k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.94k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.94k|    }
  ------------------
  880|       |
  881|   314k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 67.4k, False: 246k]
  ------------------
  882|   314k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 67.4k, False: 0]
  ------------------
  883|  67.4k|            chars_read -= 2;
  884|  67.4k|        }
  885|       |
  886|   314k|        return chars_read;
  887|   318k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  915|   547k|    {
  916|   547k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 286k, False: 261k]
  |  Branch (916:41): [True: 0, False: 286k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   547k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 12.7k, False: 534k]
  ------------------
  924|   547k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 12.7k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   547k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 7.45k, False: 540k]
  |  Branch (932:34): [True: 1.35k, False: 6.10k]
  ------------------
  933|  1.35k|            SCN_UNLIKELY_ATTR
  934|  1.35k|            return detail::unexpected_scan_error(
  935|  1.35k|                scan_error::value_positive_underflow,
  936|  1.35k|                "strtod failed: Value too small");
  937|  1.35k|        }
  938|   546k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 6.10k, False: 540k]
  |  Branch (938:34): [True: 0, False: 6.10k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   546k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 546k, False: 0]
  ------------------
  948|   546k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 546k, False: 0]
  ------------------
  949|   546k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 5.96k, False: 540k]
  ------------------
  950|  5.96k|            SCN_UNLIKELY_ATTR
  951|  5.96k|            return detail::unexpected_scan_error(
  952|  5.96k|                scan_error::value_positive_overflow,
  953|  5.96k|                "strtod failed: Value too large");
  954|  5.96k|        }
  955|   540k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 540k, False: 0]
  ------------------
  956|   540k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 540k, False: 0]
  ------------------
  957|   540k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 540k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   540k|        return {};
  965|   540k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  754|   547k|{
  755|   547k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 286k, False: 261k]
  |  Branch (755:44): [True: 0, False: 261k]
  ------------------
  756|   547k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  761|  7.45k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  7.45k|    return value == static_cast<T>(0.0);
  773|  7.45k|#endif
  774|  7.45k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  778|  6.10k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  6.10k|    return value == static_cast<T>(-0.0);
  791|  6.10k|#endif
  792|  6.10k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  797|   546k|{
  798|   546k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   546k|        return value == std::numeric_limits<T>::infinity();
  815|   546k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   546k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  824|   540k|{
  825|   540k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   540k|        return value == -std::numeric_limits<T>::infinity();
  843|   540k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   540k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   318k|    {
  893|   318k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 300k, False: 17.6k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   300k|            auto first_space = read_until_classic_space(input.view());
  896|   300k|            input.assign(
  897|   300k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   300k|        }
  899|       |
  900|   318k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 67.8k, False: 250k]
  ------------------
  901|  67.8k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  67.8k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  67.8k|        }
  908|       |
  909|   318k|        return input.get_allocated_string().c_str();
  910|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1084|   318k|    {
 1085|   318k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   318k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  968|   318k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   318k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|   318k|        if constexpr (std::is_same_v<T, float>) {
 1001|   318k|            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   318k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   251k|{
 1737|   251k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 251k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   251k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 251k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   251k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 251k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   251k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 251k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   251k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   251k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.8k, False: 191k]
  ------------------
 1807|  59.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.52k, False: 53.3k]
  |  |  ------------------
  ------------------
 1808|  6.52k|            return detail::unexpected_scan_error(
 1809|  6.52k|                scan_error::invalid_scanned_value,
 1810|  6.52k|                "Invalid floating-point digit");
 1811|  6.52k|        }
 1812|  59.8k|    }
 1813|   245k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.7k, False: 229k]
  |  |  ------------------
  ------------------
 1814|  15.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  15.7k|                                             "Invalid floating-point digit");
 1816|  15.7k|    }
 1817|       |
 1818|   229k|    return dispatch_parse_float_value<
 1819|   229k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   229k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   229k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   245k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   229k|{
 1711|   229k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   229k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   229k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   229k|{
 1711|   229k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   229k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   229k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   229k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   229k|    else {
 1715|   229k|        auto next =
 1716|   229k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   229k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   229k|                if (!err.has_value()) {
 1721|   229k|                    return unexpected(err.error());
 1722|   229k|                }
 1723|   229k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   229k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   229k|        };
 1727|   229k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   229k|    }
 1729|   229k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   229k|{
 1686|   229k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   229k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   229k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   229k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1071|   229k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   229k|    {
 1073|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   229k|    {
 1078|   229k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   229k|                           generic_strtod);
 1080|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   229k|    {
  873|   229k|        CharT* end{};
  874|   229k|        errno = 0;
  875|   229k|        value = strtod_cb(src, &end);
  876|   229k|        const auto saved_errno = errno;
  877|   229k|        auto chars_read = end - src;
  878|       |
  879|   229k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   229k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.37k, False: 226k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.37k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.37k|    }
  ------------------
  880|       |
  881|   226k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 53.2k, False: 172k]
  ------------------
  882|   226k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 53.2k, False: 0]
  ------------------
  883|  53.2k|            chars_read -= 2;
  884|  53.2k|        }
  885|       |
  886|   226k|        return chars_read;
  887|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   229k|    {
  893|   229k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 224k, False: 5.41k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   224k|            auto first_space = read_until_classic_space(input.view());
  896|   224k|            input.assign(
  897|   224k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   224k|        }
  899|       |
  900|   229k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 53.3k, False: 176k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  53.3k|            else {
  905|  53.3k|                input.get_allocated_string().insert(0, L"0x");
  906|  53.3k|            }
  907|  53.3k|        }
  908|       |
  909|   229k|        return input.get_allocated_string().c_str();
  910|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1084|   229k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   229k|        else {
 1089|   229k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   229k|        }
 1091|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1016|   229k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   229k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|   229k|        if constexpr (std::is_same_v<T, float>) {
 1049|   229k|            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   229k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   229k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   366k|{
 1737|   366k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.01k, False: 363k]
  ------------------
 1738|  3.01k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.01k|            value = std::numeric_limits<T>::infinity();
 1740|  3.01k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.01k|    }
 1748|   366k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.89k, False: 364k]
  ------------------
 1749|  1.89k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.89k|            value = std::numeric_limits<T>::infinity();
 1751|  1.89k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.89k|    }
 1759|   366k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.2k, False: 349k]
  ------------------
 1760|  17.2k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.2k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.2k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.2k|    }
 1770|   366k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.06k, False: 362k]
  ------------------
 1771|  4.06k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.06k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.06k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.06k|#if SCN_HAS_INT128
 1777|  4.06k|                using payload_type =
 1778|  4.06k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.06k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.06k|                payload_type payload{};
 1784|  4.06k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.09k, False: 978]
  ------------------
 1785|  4.06k|                        nan_payload.view(), payload, {})) {
 1786|  3.09k|                    apply_nan_payload(value, payload);
 1787|  3.09k|                }
 1788|    978|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 354, False: 624]
  ------------------
 1789|    978|                         scan_error::value_positive_overflow) {
 1790|    354|                    apply_nan_payload(value,
 1791|    354|                                      std::numeric_limits<payload_type>::max());
 1792|    354|                }
 1793|  4.06k|            }
 1794|       |
 1795|  4.06k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.06k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.06k|    }
 1804|       |
 1805|   366k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   340k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 72.1k, False: 267k]
  ------------------
 1807|  72.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.42k, False: 69.6k]
  |  |  ------------------
  ------------------
 1808|  2.42k|            return detail::unexpected_scan_error(
 1809|  2.42k|                scan_error::invalid_scanned_value,
 1810|  2.42k|                "Invalid floating-point digit");
 1811|  2.42k|        }
 1812|  72.1k|    }
 1813|   337k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.57k, False: 331k]
  |  |  ------------------
  ------------------
 1814|  6.57k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.57k|                                             "Invalid floating-point digit");
 1816|  6.57k|    }
 1817|       |
 1818|   331k|    return dispatch_parse_float_value<
 1819|   331k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   331k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   331k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   337k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1606|  3.44k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.44k|                                  nil_float_traits>) {
 1610|  3.44k|        using traits = float_traits<F>;
 1611|  3.44k|        typename traits::nan_repr bits{};
 1612|  3.44k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.44k|        traits::apply_nan_payload(bits, payload);
 1614|  3.44k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.44k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  429|  3.44k|    {
  430|  3.44k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  431|  3.44k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1104|  3.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  432|  3.44k|        r.mantissa0 = payload >> 32;
  433|  3.44k|        r.mantissa1 = payload;
  434|  3.44k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   331k|{
 1711|   331k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   331k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   331k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   331k|{
 1711|   331k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   331k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   331k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   331k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   331k|    else {
 1715|   331k|        auto next =
 1716|   331k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   331k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   331k|                if (!err.has_value()) {
 1721|   331k|                    return unexpected(err.error());
 1722|   331k|                }
 1723|   331k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   331k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   331k|        };
 1727|   331k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   331k|    }
 1729|   331k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   331k|{
 1686|   331k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   331k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   331k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   331k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1071|   331k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   331k|    {
 1073|   331k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   331k|    {
 1078|   331k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   331k|                           generic_strtod);
 1080|   331k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   331k|    {
  873|   331k|        CharT* end{};
  874|   331k|        errno = 0;
  875|   331k|        value = strtod_cb(src, &end);
  876|   331k|        const auto saved_errno = errno;
  877|   331k|        auto chars_read = end - src;
  878|       |
  879|   331k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   331k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.28k, False: 328k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.28k|    }
  ------------------
  880|       |
  881|   328k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 69.3k, False: 259k]
  ------------------
  882|   328k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 69.3k, False: 0]
  ------------------
  883|  69.3k|            chars_read -= 2;
  884|  69.3k|        }
  885|       |
  886|   328k|        return chars_read;
  887|   331k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|   590k|    {
  916|   590k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 310k, False: 280k]
  |  Branch (916:41): [True: 0, False: 310k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   590k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 14.8k, False: 575k]
  ------------------
  924|   590k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 14.8k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   590k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 4.68k, False: 585k]
  |  Branch (932:34): [True: 405, False: 4.27k]
  ------------------
  933|    405|            SCN_UNLIKELY_ATTR
  934|    405|            return detail::unexpected_scan_error(
  935|    405|                scan_error::value_positive_underflow,
  936|    405|                "strtod failed: Value too small");
  937|    405|        }
  938|   590k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 4.27k, False: 585k]
  |  Branch (938:34): [True: 0, False: 4.27k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   590k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 590k, False: 0]
  ------------------
  948|   590k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 590k, False: 0]
  ------------------
  949|   590k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 3.57k, False: 586k]
  ------------------
  950|  3.57k|            SCN_UNLIKELY_ATTR
  951|  3.57k|            return detail::unexpected_scan_error(
  952|  3.57k|                scan_error::value_positive_overflow,
  953|  3.57k|                "strtod failed: Value too large");
  954|  3.57k|        }
  955|   586k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 586k, False: 0]
  ------------------
  956|   586k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 586k, False: 0]
  ------------------
  957|   586k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 586k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   586k|        return {};
  965|   586k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|   590k|{
  755|   590k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 310k, False: 280k]
  |  Branch (755:44): [True: 0, False: 280k]
  ------------------
  756|   590k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  761|  4.68k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  4.68k|    return value == static_cast<T>(0.0);
  773|  4.68k|#endif
  774|  4.68k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  778|  4.27k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  4.27k|    return value == static_cast<T>(-0.0);
  791|  4.27k|#endif
  792|  4.27k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|   590k|{
  798|   590k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   590k|        return value == std::numeric_limits<T>::infinity();
  815|   590k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   590k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|   586k|{
  825|   586k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   586k|        return value == -std::numeric_limits<T>::infinity();
  843|   586k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   586k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   331k|    {
  893|   331k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 312k, False: 18.8k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   312k|            auto first_space = read_until_classic_space(input.view());
  896|   312k|            input.assign(
  897|   312k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   312k|        }
  899|       |
  900|   331k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 69.5k, False: 261k]
  ------------------
  901|  69.5k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  69.5k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  69.5k|        }
  908|       |
  909|   331k|        return input.get_allocated_string().c_str();
  910|   331k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1084|   331k|    {
 1085|   331k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   331k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   331k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  968|   331k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   331k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|   331k|        else if constexpr (std::is_same_v<T, double>) {
 1004|   331k|            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   331k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   331k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   282k|{
 1737|   282k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 282k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   282k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 282k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   282k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 282k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   282k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 282k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   282k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   282k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.8k, False: 222k]
  ------------------
 1807|  59.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.53k, False: 53.3k]
  |  |  ------------------
  ------------------
 1808|  6.53k|            return detail::unexpected_scan_error(
 1809|  6.53k|                scan_error::invalid_scanned_value,
 1810|  6.53k|                "Invalid floating-point digit");
 1811|  6.53k|        }
 1812|  59.8k|    }
 1813|   275k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.2k, False: 259k]
  |  |  ------------------
  ------------------
 1814|  16.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.2k|                                             "Invalid floating-point digit");
 1816|  16.2k|    }
 1817|       |
 1818|   259k|    return dispatch_parse_float_value<
 1819|   259k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   259k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   259k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   275k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   259k|{
 1711|   259k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   259k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   259k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   259k|{
 1711|   259k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   259k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   259k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   259k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   259k|    else {
 1715|   259k|        auto next =
 1716|   259k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   259k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   259k|                if (!err.has_value()) {
 1721|   259k|                    return unexpected(err.error());
 1722|   259k|                }
 1723|   259k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   259k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   259k|        };
 1727|   259k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   259k|    }
 1729|   259k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   259k|{
 1686|   259k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   259k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   259k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   259k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|   259k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   259k|    {
 1073|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   259k|    {
 1078|   259k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   259k|                           generic_strtod);
 1080|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   259k|    {
  873|   259k|        CharT* end{};
  874|   259k|        errno = 0;
  875|   259k|        value = strtod_cb(src, &end);
  876|   259k|        const auto saved_errno = errno;
  877|   259k|        auto chars_read = end - src;
  878|       |
  879|   259k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   259k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 257k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.69k|    }
  ------------------
  880|       |
  881|   257k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 53.2k, False: 204k]
  ------------------
  882|   257k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 53.2k, False: 0]
  ------------------
  883|  53.2k|            chars_read -= 2;
  884|  53.2k|        }
  885|       |
  886|   257k|        return chars_read;
  887|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   259k|    {
  893|   259k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 253k, False: 6.11k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   253k|            auto first_space = read_until_classic_space(input.view());
  896|   253k|            input.assign(
  897|   253k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   253k|        }
  899|       |
  900|   259k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 53.3k, False: 206k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  53.3k|            else {
  905|  53.3k|                input.get_allocated_string().insert(0, L"0x");
  906|  53.3k|            }
  907|  53.3k|        }
  908|       |
  909|   259k|        return input.get_allocated_string().c_str();
  910|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|   259k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   259k|        else {
 1089|   259k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   259k|        }
 1091|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|   259k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   259k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|   259k|        else if constexpr (std::is_same_v<T, double>) {
 1052|   259k|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   259k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   259k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   373k|{
 1737|   373k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.11k, False: 370k]
  ------------------
 1738|  3.11k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.11k|            value = std::numeric_limits<T>::infinity();
 1740|  3.11k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.11k|    }
 1748|   373k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.99k, False: 371k]
  ------------------
 1749|  1.99k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.99k|            value = std::numeric_limits<T>::infinity();
 1751|  1.99k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.99k|    }
 1759|   373k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.4k, False: 356k]
  ------------------
 1760|  17.4k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.4k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.4k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.4k|    }
 1770|   373k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.15k, False: 369k]
  ------------------
 1771|  4.15k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.15k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.15k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.15k|#if SCN_HAS_INT128
 1777|  4.15k|                using payload_type =
 1778|  4.15k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.15k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.15k|                payload_type payload{};
 1784|  4.15k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.13k, False: 1.01k]
  ------------------
 1785|  4.15k|                        nan_payload.view(), payload, {})) {
 1786|  3.13k|                    apply_nan_payload(value, payload);
 1787|  3.13k|                }
 1788|  1.01k|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 358, False: 656]
  ------------------
 1789|  1.01k|                         scan_error::value_positive_overflow) {
 1790|    358|                    apply_nan_payload(value,
 1791|    358|                                      std::numeric_limits<payload_type>::max());
 1792|    358|                }
 1793|  4.15k|            }
 1794|       |
 1795|  4.15k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.15k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.15k|    }
 1804|       |
 1805|   373k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   346k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 72.4k, False: 274k]
  ------------------
 1807|  72.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.48k, False: 69.9k]
  |  |  ------------------
  ------------------
 1808|  2.48k|            return detail::unexpected_scan_error(
 1809|  2.48k|                scan_error::invalid_scanned_value,
 1810|  2.48k|                "Invalid floating-point digit");
 1811|  2.48k|        }
 1812|  72.4k|    }
 1813|   344k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.86k, False: 337k]
  |  |  ------------------
  ------------------
 1814|  6.86k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.86k|                                             "Invalid floating-point digit");
 1816|  6.86k|    }
 1817|       |
 1818|   337k|    return dispatch_parse_float_value<
 1819|   337k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   337k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   337k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   344k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1606|  3.49k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.49k|                                  nil_float_traits>) {
 1610|  3.49k|        using traits = float_traits<F>;
 1611|  3.49k|        typename traits::nan_repr bits{};
 1612|  3.49k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.49k|        traits::apply_nan_payload(bits, payload);
 1614|  3.49k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  494|  3.49k|    {
  495|  3.49k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  496|  3.49k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1104|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  497|  3.49k|        r.mantissa0 = payload >> 32;
  498|  3.49k|        r.mantissa1 = payload;
  499|  3.49k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   337k|{
 1711|   337k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   337k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   337k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   337k|{
 1711|   337k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   337k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   337k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   337k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   337k|    else {
 1715|   337k|        auto next =
 1716|   337k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   337k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   337k|                if (!err.has_value()) {
 1721|   337k|                    return unexpected(err.error());
 1722|   337k|                }
 1723|   337k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   337k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   337k|        };
 1727|   337k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   337k|    }
 1729|   337k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   337k|{
 1686|   337k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   337k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   337k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   337k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1071|   337k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   337k|    {
 1073|   337k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   337k|    {
 1078|   337k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   337k|                           generic_strtod);
 1080|   337k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   337k|    {
  873|   337k|        CharT* end{};
  874|   337k|        errno = 0;
  875|   337k|        value = strtod_cb(src, &end);
  876|   337k|        const auto saved_errno = errno;
  877|   337k|        auto chars_read = end - src;
  878|       |
  879|   337k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   337k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 523, False: 337k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    523|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    523|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    523|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    523|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    523|    }
  ------------------
  880|       |
  881|   337k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 69.8k, False: 267k]
  ------------------
  882|   337k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 69.8k, False: 0]
  ------------------
  883|  69.8k|            chars_read -= 2;
  884|  69.8k|        }
  885|       |
  886|   337k|        return chars_read;
  887|   337k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  915|   604k|    {
  916|   604k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 316k, False: 288k]
  |  Branch (916:41): [True: 0, False: 316k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   604k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 14.8k, False: 589k]
  ------------------
  924|   604k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 14.8k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   604k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 723, False: 603k]
  |  Branch (932:34): [True: 166, False: 557]
  ------------------
  933|    166|            SCN_UNLIKELY_ATTR
  934|    166|            return detail::unexpected_scan_error(
  935|    166|                scan_error::value_positive_underflow,
  936|    166|                "strtod failed: Value too small");
  937|    166|        }
  938|   604k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 557, False: 603k]
  |  Branch (938:34): [True: 0, False: 557]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   604k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 604k, False: 0]
  ------------------
  948|   604k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 604k, False: 0]
  ------------------
  949|   604k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 557, False: 603k]
  ------------------
  950|    557|            SCN_UNLIKELY_ATTR
  951|    557|            return detail::unexpected_scan_error(
  952|    557|                scan_error::value_positive_overflow,
  953|    557|                "strtod failed: Value too large");
  954|    557|        }
  955|   603k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 603k, False: 0]
  ------------------
  956|   603k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 603k, False: 0]
  ------------------
  957|   603k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 603k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   603k|        return {};
  965|   603k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  754|   604k|{
  755|   604k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 316k, False: 288k]
  |  Branch (755:44): [True: 0, False: 288k]
  ------------------
  756|   604k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  761|    723|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|    723|    return value == static_cast<T>(0.0);
  773|    723|#endif
  774|    723|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  778|    557|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    557|    return value == static_cast<T>(-0.0);
  791|    557|#endif
  792|    557|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  797|   604k|{
  798|   604k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   604k|        return value == std::numeric_limits<T>::infinity();
  815|   604k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   604k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  824|   603k|{
  825|   603k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   603k|        return value == -std::numeric_limits<T>::infinity();
  843|   603k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   603k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   337k|    {
  893|   337k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 318k, False: 19.1k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   318k|            auto first_space = read_until_classic_space(input.view());
  896|   318k|            input.assign(
  897|   318k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   318k|        }
  899|       |
  900|   337k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 69.8k, False: 267k]
  ------------------
  901|  69.8k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  69.8k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  69.8k|        }
  908|       |
  909|   337k|        return input.get_allocated_string().c_str();
  910|   337k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1084|   337k|    {
 1085|   337k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   337k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   337k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  968|   337k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   337k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|   337k|        else if constexpr (std::is_same_v<T, long double>) {
 1007|   337k|            return std::strtold(str, str_end);
 1008|   337k|        }
 1009|      0|#endif
 1010|       |
 1011|   337k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   337k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   289k|{
 1737|   289k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 289k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   289k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 289k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   289k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 289k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   289k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 289k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   289k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   289k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.9k, False: 229k]
  ------------------
 1807|  59.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.55k, False: 53.4k]
  |  |  ------------------
  ------------------
 1808|  6.55k|            return detail::unexpected_scan_error(
 1809|  6.55k|                scan_error::invalid_scanned_value,
 1810|  6.55k|                "Invalid floating-point digit");
 1811|  6.55k|        }
 1812|  59.9k|    }
 1813|   283k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.6k, False: 266k]
  |  |  ------------------
  ------------------
 1814|  16.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.6k|                                             "Invalid floating-point digit");
 1816|  16.6k|    }
 1817|       |
 1818|   266k|    return dispatch_parse_float_value<
 1819|   266k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   266k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   266k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   283k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   266k|{
 1711|   266k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   266k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   266k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   266k|{
 1711|   266k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   266k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   266k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   266k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   266k|    else {
 1715|   266k|        auto next =
 1716|   266k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   266k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   266k|                if (!err.has_value()) {
 1721|   266k|                    return unexpected(err.error());
 1722|   266k|                }
 1723|   266k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   266k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   266k|        };
 1727|   266k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   266k|    }
 1729|   266k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   266k|{
 1686|   266k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   266k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   266k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   266k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1071|   266k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   266k|    {
 1073|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   266k|    {
 1078|   266k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   266k|                           generic_strtod);
 1080|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   266k|    {
  873|   266k|        CharT* end{};
  874|   266k|        errno = 0;
  875|   266k|        value = strtod_cb(src, &end);
  876|   266k|        const auto saved_errno = errno;
  877|   266k|        auto chars_read = end - src;
  878|       |
  879|   266k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   266k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 200, False: 266k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    200|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    200|    }
  ------------------
  880|       |
  881|   266k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 53.3k, False: 213k]
  ------------------
  882|   266k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 53.3k, False: 0]
  ------------------
  883|  53.3k|            chars_read -= 2;
  884|  53.3k|        }
  885|       |
  886|   266k|        return chars_read;
  887|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   266k|    {
  893|   266k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 260k, False: 6.39k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   260k|            auto first_space = read_until_classic_space(input.view());
  896|   260k|            input.assign(
  897|   260k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   260k|        }
  899|       |
  900|   266k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 53.3k, False: 213k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  53.3k|            else {
  905|  53.3k|                input.get_allocated_string().insert(0, L"0x");
  906|  53.3k|            }
  907|  53.3k|        }
  908|       |
  909|   266k|        return input.get_allocated_string().c_str();
  910|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1084|   266k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   266k|        else {
 1089|   266k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   266k|        }
 1091|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1016|   266k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   266k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|   266k|        else if constexpr (std::is_same_v<T, long double>) {
 1055|   266k|            return std::wcstold(str, str_end);
 1056|   266k|        }
 1057|      0|#endif
 1058|       |
 1059|   266k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   266k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1939|  9.58k|{
 1940|  9.58k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1941|       |
 1942|  35.6k|    while (begin != end) {
  ------------------
  |  Branch (1942:12): [True: 26.8k, False: 8.80k]
  ------------------
 1943|  26.8k|        const auto digit = char_to_int(*begin);
 1944|  26.8k|        if (digit >= 10) {
  ------------------
  |  Branch (1944:13): [True: 773, False: 26.0k]
  ------------------
 1945|    773|            break;
 1946|    773|        }
 1947|  26.0k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1948|  26.0k|        ++begin;
 1949|  26.0k|    }
 1950|       |
 1951|  9.58k|    return begin;
 1952|  9.58k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1926|  9.58k|{
 1927|  9.58k|    while (
 1928|  17.2k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1928:9): [True: 8.22k, False: 9.00k]
  ------------------
 1929|  17.2k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1929:9): [True: 7.64k, False: 575]
  ------------------
 1930|  7.64k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1931|  7.64k|                                      get_eight_digits_word(p));
 1932|  7.64k|        p += 8;
 1933|  7.64k|    }
 1934|  9.58k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  9.58k|{
 2052|  9.58k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  9.58k|    uint64_t u64val{};
 2055|  9.58k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  9.58k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  9.58k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  9.58k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  9.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.06k, False: 8.51k]
  |  |  ------------------
  ------------------
 2060|  9.58k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|  1.06k|        return detail::unexpected_scan_error(
 2062|  1.06k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 1.06k]
  ------------------
 2063|  1.06k|                        : scan_error::value_positive_overflow,
 2064|  1.06k|            "Integer overflow");
 2065|  1.06k|    }
 2066|       |
 2067|  8.51k|    val = store_result<T>(u64val, is_negative);
 2068|  8.51k|    return ptr;
 2069|  9.58k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   561k|{
 2818|   561k|    const auto argcount = args.size();
 2819|   561k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 112k, False: 449k]
  |  Branch (2819:60): [True: 112k, False: 0]
  ------------------
 2820|   112k|        auto arg = args.get(0);
 2821|   112k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   112k|    static_cast<    \
  |  | 1109|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|   112k|    }
 2823|       |
 2824|   449k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 449k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   449k|    SCN_UNLIKELY_ATTR
 2832|   449k|    {
 2833|   449k|        auto handler = format_handler<false, CharT>{
 2834|   449k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   449k|        return vscan_parse_format_string(format, handler);
 2836|   449k|    }
 2837|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|  1.08M|{
 2366|  1.08M|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 858k, False: 222k]
  ------------------
 2367|   858k|        return false;
 2368|   858k|    }
 2369|   222k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 222k, False: 0]
  |  Branch (2369:39): [True: 222k, False: 0]
  ------------------
 2370|  1.08M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|   168k|{
 2399|   168k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|   168k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   168k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|   168k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|   168k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   168k|    static_cast<    \
  |  | 1109|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|   168k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.6k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.6k|    }                                                  \
  |  |  |  | 3957|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|   152k|    return it.position();
 2416|   168k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|   409k|        : format_handler_base{argcount},
 2642|   409k|          parse_ctx{source_tag<Source&&>, format},
 2643|   409k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   409k|    static_cast<    \
  |  | 1109|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   409k|    static_cast<    \
  |  | 1109|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   409k|    {
 2645|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|  1.60M|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|  1.60M|    {
 2461|  1.60M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|  1.60M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|   409k|        : contiguous_ctx(source, args, loc)
 2593|   409k|    {
 2594|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   409k|{
 2783|   409k|    const auto beg = handler.get_ctx().begin();
 2784|   409k|    detail::parse_format_string<false>(format, handler);
 2785|   409k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.0k, False: 357k]
  |  |  ------------------
  ------------------
 2786|  52.0k|        return unexpected(err.error());
 2787|  52.0k|    }
 2788|   357k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   409k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|  2.76M|    {
 2767|  2.76M|        return ctx.get();
 2768|  2.76M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|  2.76M|    {
 2598|  2.76M|        return contiguous_ctx;
 2599|  2.76M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|   767k|    {
 2649|   767k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 767k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   767k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|   312k|    {
 2509|   312k|        error = unexpected(err);
 2510|   312k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|   409k|{
 2421|   409k|    auto arg = ctx.arg(id);
 2422|   409k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   409k|    return arg;
 2426|   409k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|  1.60M|    {
 2535|  1.60M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 2536|      0|            on_error({scan_error::invalid_format_string,
 2537|      0|                      "Argument ID out-of-range"});
 2538|      0|            return;
 2539|      0|        }
 2540|       |
 2541|  1.60M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 2542|      0|            on_error({scan_error::invalid_format_string,
 2543|      0|                      "Argument with this ID has already been scanned"});
 2544|      0|        }
 2545|       |
 2546|  1.60M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.60M, False: 0]
  |  |  ------------------
  ------------------
 2547|  1.60M|            visited_args_lower64 |= (1ull << id);
 2548|  1.60M|            return;
 2549|  1.60M|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|  1.60M|    {
 2519|  1.60M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|  1.60M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.60M, False: 0]
  |  |  ------------------
  ------------------
 2526|  1.60M|            return (visited_args_lower64 >> id) & 1ull;
 2527|  1.60M|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|  1.60M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|   409k|    {
 2689|   409k|        return parse_ctx.next_arg_id();
 2690|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|   409k|    {
 2729|   409k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   409k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   409k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 409k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   409k|        auto specs = detail::format_specs{};
 2742|   409k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   409k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   409k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   409k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   409k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 409k]
  |  Branch (2747:29): [True: 0, False: 409k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   409k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   409k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   409k|        on_visit_scan_arg(
 2759|   409k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   409k|                                           get_ctx().locale()},
 2761|   409k|            arg);
 2762|   409k|        return parse_ctx.begin();
 2763|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2438|   409k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   409k|    {
 2440|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|   409k|    {
 2700|   409k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 409k]
  |  Branch (2700:13): [True: 0, False: 409k]
  |  Branch (2700:29): [True: 0, False: 409k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   409k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   409k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.0k, False: 357k]
  |  |  ------------------
  ------------------
 2707|  52.0k|            on_error(r.error());
 2708|  52.0k|        }
 2709|   357k|        else {
 2710|   357k|            get_ctx().advance_to(*r);
 2711|   357k|        }
 2712|   409k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|  1.60M|    {
 2468|  1.60M|        {
 2469|  1.60M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 1.60M]
  ------------------
 2470|  1.60M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 1.60M]
  ------------------
 2471|  1.60M|                                      ? std::numeric_limits<uint64_t>::max()
 2472|  1.60M|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|  1.60M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 0, False: 1.60M]
  ------------------
 2475|      0|                return on_error({scan_error::invalid_format_string,
 2476|      0|                                 "Argument list not exhausted"});
 2477|      0|            }
 2478|  1.60M|        }
 2479|       |
 2480|  1.60M|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 1.60M, False: 0]
  ------------------
 2481|  1.60M|            return;
 2482|  1.60M|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|  6.41M|    {
 2514|  6.41M|        return error;
 2515|  6.41M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2641|   449k|        : format_handler_base{argcount},
 2642|   449k|          parse_ctx{source_tag<Source&&>, format},
 2643|   449k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   449k|    {
 2645|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2568|   449k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   449k|    static_cast<    \
  |  | 1109|   449k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   449k|    {
 2570|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   449k|{
 2783|   449k|    const auto beg = handler.get_ctx().begin();
 2784|   449k|    detail::parse_format_string<false>(format, handler);
 2785|   449k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.0k, False: 397k]
  |  |  ------------------
  ------------------
 2786|  52.0k|        return unexpected(err.error());
 2787|  52.0k|    }
 2788|   397k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2766|  3.03M|    {
 2767|  3.03M|        return ctx.get();
 2768|  3.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2573|  3.03M|    {
 2574|  3.03M|        return ctx;
 2575|  3.03M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2648|   846k|    {
 2649|   846k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 846k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   846k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2420|   449k|{
 2421|   449k|    auto arg = ctx.arg(id);
 2422|   449k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   449k|    return arg;
 2426|   449k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2688|   449k|    {
 2689|   449k|        return parse_ctx.next_arg_id();
 2690|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2728|   449k|    {
 2729|   449k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   449k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   449k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 449k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   449k|        auto specs = detail::format_specs{};
 2742|   449k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   449k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   449k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   449k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   449k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 449k]
  |  Branch (2747:29): [True: 0, False: 449k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   449k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 449k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   449k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   449k|        on_visit_scan_arg(
 2759|   449k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   449k|                                           get_ctx().locale()},
 2761|   449k|            arg);
 2762|   449k|        return parse_ctx.begin();
 2763|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2438|   449k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   449k|    {
 2440|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   449k|    {
 2700|   449k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 449k]
  |  Branch (2700:13): [True: 0, False: 449k]
  |  Branch (2700:29): [True: 0, False: 449k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   449k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   449k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.0k, False: 397k]
  |  |  ------------------
  ------------------
 2707|  52.0k|            on_error(r.error());
 2708|  52.0k|        }
 2709|   397k|        else {
 2710|   397k|            get_ctx().advance_to(*r);
 2711|   397k|        }
 2712|   449k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   520k|{
 2798|   520k|    const auto argcount = args.size();
 2799|   520k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 110k, False: 409k]
  |  Branch (2799:60): [True: 110k, False: 0]
  ------------------
 2800|   110k|        auto arg = args.get(0);
 2801|   110k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   110k|    static_cast<    \
  |  | 1109|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|   110k|    }
 2803|       |
 2804|   409k|    auto handler = format_handler<true, CharT>{
 2805|   409k|        ranges::subrange<const CharT*>{source.data(),
 2806|   409k|                                       source.data() + source.size()},
 2807|   409k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   409k|    static_cast<    \
  |  | 1109|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   409k|    static_cast<    \
  |  | 1109|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   409k|    return vscan_parse_format_string(format, handler);
 2809|   520k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   166k|{
 2379|   166k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   166k|    auto reader =
 2385|   166k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   166k|            ranges::subrange<const CharT*>{source.data(),
 2387|   166k|                                           source.data() + source.size()},
 2388|   166k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   166k|    static_cast<    \
  |  | 1109|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   166k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.6k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.6k|    }                                                  \
  |  |  |  | 3957|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   150k|    return ranges::distance(source.data(), it);
 2391|   166k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   617k|{
 2898|   617k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   617k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 549k, False: 67.6k]
  |  |  ------------------
  ------------------
 2899|   549k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 549k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   549k|    }
 2905|  67.6k|    else {
 2906|  67.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 67.6k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  67.6k|    }
 2912|   617k|    return result;
 2913|   617k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   464k|{
 2798|   464k|    const auto argcount = args.size();
 2799|   464k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 91.8k, False: 372k]
  |  Branch (2799:60): [True: 91.8k, False: 0]
  ------------------
 2800|  91.8k|        auto arg = args.get(0);
 2801|  91.8k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  91.8k|    static_cast<    \
  |  | 1109|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|  91.8k|    }
 2803|       |
 2804|   372k|    auto handler = format_handler<true, CharT>{
 2805|   372k|        ranges::subrange<const CharT*>{source.data(),
 2806|   372k|                                       source.data() + source.size()},
 2807|   372k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   372k|    return vscan_parse_format_string(format, handler);
 2809|   464k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   929k|{
 2366|   929k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 745k, False: 183k]
  ------------------
 2367|   745k|        return false;
 2368|   745k|    }
 2369|   183k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 183k, False: 0]
  |  Branch (2369:39): [True: 183k, False: 0]
  ------------------
 2370|   929k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   137k|{
 2379|   137k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   137k|    auto reader =
 2385|   137k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   137k|            ranges::subrange<const CharT*>{source.data(),
 2387|   137k|                                           source.data() + source.size()},
 2388|   137k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   137k|    static_cast<    \
  |  | 1109|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   137k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 31.2k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  31.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  31.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  31.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  31.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  31.2k|    }                                                  \
  |  |  |  | 3957|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   106k|    return ranges::distance(source.data(), it);
 2391|   137k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|   372k|        : format_handler_base{argcount},
 2642|   372k|          parse_ctx{source_tag<Source&&>, format},
 2643|   372k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   372k|    {
 2645|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|   372k|        : contiguous_ctx(source, args, loc)
 2593|   372k|    {
 2594|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   372k|{
 2783|   372k|    const auto beg = handler.get_ctx().begin();
 2784|   372k|    detail::parse_format_string<false>(format, handler);
 2785|   372k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 104k, False: 268k]
  |  |  ------------------
  ------------------
 2786|   104k|        return unexpected(err.error());
 2787|   104k|    }
 2788|   268k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   372k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|  2.40M|    {
 2767|  2.40M|        return ctx.get();
 2768|  2.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|  2.40M|    {
 2598|  2.40M|        return contiguous_ctx;
 2599|  2.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|   641k|    {
 2649|   641k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 641k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   641k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|   372k|{
 2421|   372k|    auto arg = ctx.arg(id);
 2422|   372k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   372k|    return arg;
 2426|   372k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|   372k|    {
 2689|   372k|        return parse_ctx.next_arg_id();
 2690|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|   372k|    {
 2729|   372k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   372k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   372k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 372k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   372k|        auto specs = detail::format_specs{};
 2742|   372k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   372k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   372k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   372k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   372k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 372k]
  |  Branch (2747:29): [True: 0, False: 372k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   372k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   372k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   372k|        on_visit_scan_arg(
 2759|   372k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   372k|                                           get_ctx().locale()},
 2761|   372k|            arg);
 2762|   372k|        return parse_ctx.begin();
 2763|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2438|   372k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   372k|    {
 2440|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|   372k|    {
 2700|   372k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 372k]
  |  Branch (2700:13): [True: 0, False: 372k]
  |  Branch (2700:29): [True: 0, False: 372k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   372k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   372k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 104k, False: 268k]
  |  |  ------------------
  ------------------
 2707|   104k|            on_error(r.error());
 2708|   104k|        }
 2709|   268k|        else {
 2710|   268k|            get_ctx().advance_to(*r);
 2711|   268k|        }
 2712|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   464k|{
 2818|   464k|    const auto argcount = args.size();
 2819|   464k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 91.8k, False: 372k]
  |  Branch (2819:60): [True: 91.8k, False: 0]
  ------------------
 2820|  91.8k|        auto arg = args.get(0);
 2821|  91.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  91.8k|    static_cast<    \
  |  | 1109|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|  91.8k|    }
 2823|       |
 2824|   372k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 372k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   372k|    SCN_UNLIKELY_ATTR
 2832|   372k|    {
 2833|   372k|        auto handler = format_handler<false, CharT>{
 2834|   372k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   372k|        return vscan_parse_format_string(format, handler);
 2836|   372k|    }
 2837|   372k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|   137k|{
 2399|   137k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|   137k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   137k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|   137k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|   137k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   137k|    static_cast<    \
  |  | 1109|   137k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|   137k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 31.2k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  31.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  31.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  31.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  31.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  31.2k|    }                                                  \
  |  |  |  | 3957|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|   106k|    return it.position();
 2416|   137k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2641|   372k|        : format_handler_base{argcount},
 2642|   372k|          parse_ctx{source_tag<Source&&>, format},
 2643|   372k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   372k|    {
 2645|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2568|   372k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   372k|    {
 2570|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   372k|{
 2783|   372k|    const auto beg = handler.get_ctx().begin();
 2784|   372k|    detail::parse_format_string<false>(format, handler);
 2785|   372k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 104k, False: 268k]
  |  |  ------------------
  ------------------
 2786|   104k|        return unexpected(err.error());
 2787|   104k|    }
 2788|   268k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   372k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2766|  2.40M|    {
 2767|  2.40M|        return ctx.get();
 2768|  2.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2573|  2.40M|    {
 2574|  2.40M|        return ctx;
 2575|  2.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2648|   641k|    {
 2649|   641k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 641k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   641k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2420|   372k|{
 2421|   372k|    auto arg = ctx.arg(id);
 2422|   372k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   372k|    return arg;
 2426|   372k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2688|   372k|    {
 2689|   372k|        return parse_ctx.next_arg_id();
 2690|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2728|   372k|    {
 2729|   372k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   372k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   372k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 372k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   372k|        auto specs = detail::format_specs{};
 2742|   372k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   372k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   372k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   372k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   372k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 372k]
  |  Branch (2747:29): [True: 0, False: 372k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   372k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 372k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   372k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   372k|        on_visit_scan_arg(
 2759|   372k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   372k|                                           get_ctx().locale()},
 2761|   372k|            arg);
 2762|   372k|        return parse_ctx.begin();
 2763|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2438|   372k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   372k|    {
 2440|   372k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   372k|    {
 2700|   372k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 372k]
  |  Branch (2700:13): [True: 0, False: 372k]
  |  Branch (2700:29): [True: 0, False: 372k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   372k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   372k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 104k, False: 268k]
  |  |  ------------------
  ------------------
 2707|   104k|            on_error(r.error());
 2708|   104k|        }
 2709|   268k|        else {
 2710|   268k|            get_ctx().advance_to(*r);
 2711|   268k|        }
 2712|   372k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   510k|{
 2898|   510k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   510k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 375k, False: 135k]
  |  |  ------------------
  ------------------
 2899|   375k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   375k|    }
 2905|   135k|    else {
 2906|   135k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|   135k|    }
 2912|   510k|    return result;
 2913|   510k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  55.4k|{
 2844|  55.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  55.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  55.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  56.0k|{
 2844|  56.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  56.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  45.9k|{
 2844|  45.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  45.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  45.9k|{
 2844|  45.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  45.9k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  1.73k|{
 1462|  1.73k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  1.73k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  1.73k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  1.73k|            return transcode_to_string_impl_to32(src, dest);
 1473|  1.73k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  1.73k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  1.73k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  1.73k|{
 1355|  1.73k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  1.73k|    auto it = src.begin();
 1358|   405k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 403k, False: 1.73k]
  ------------------
 1359|   403k|        auto res = get_next_code_point(
 1360|   403k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   403k|                                                                 src.end()));
 1362|   403k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.66k, False: 401k]
  |  |  ------------------
  ------------------
 1363|  1.66k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.66k|        }
 1365|   401k|        else {
 1366|   401k|            dest.push_back(res.value);
 1367|   401k|        }
 1368|   403k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   403k|    }
 1370|  1.73k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   679k|{
 1279|   679k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   679k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   679k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   679k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   679k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.6k, False: 656k]
  |  |  ------------------
  ------------------
 1283|  22.6k|        return {get_start_for_next_code_point(input),
 1284|  22.6k|                detail::invalid_code_point};
 1285|  22.6k|    }
 1286|   656k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   656k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.23k, False: 653k]
  |  |  ------------------
  ------------------
 1287|  3.23k|        return {input.end(), detail::invalid_code_point};
 1288|  3.23k|    }
 1289|       |
 1290|   653k|    return {input.begin() + len,
 1291|   653k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   656k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  22.6k|{
 1265|  22.6k|    auto it = input.begin();
 1266|   144k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 137k, False: 7.09k]
  ------------------
 1267|   137k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 15.5k, False: 121k]
  ------------------
 1268|  15.5k|            break;
 1269|  15.5k|        }
 1270|   137k|    }
 1271|  22.6k|    return it;
 1272|  22.6k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  20.0M|    constexpr parse_error(code c) : m_code(c)
  808|  20.0M|    {
  809|  20.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  20.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  20.0M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  9.04M|    {
  823|  9.04M|        return a.m_code == b.m_code;
  824|  9.04M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  2.35M|    {
  827|  2.35M|        return !(a == b);
  828|  2.35M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.74M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.74M|    {
 1827|  1.74M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.74M|        std::strcpy(m_locbuf, loc);
 1829|  1.74M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.74M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.74M|        std::setlocale(m_category, m_locbuf);
 1834|  1.74M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.74M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.74M|    {
 1856|  1.74M|        std::setlocale(cat, "C");
 1857|  1.74M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  1.60M|    {
 3083|  1.60M|        return m_msg == nullptr;
 3084|  1.60M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3726|  1.58M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  12.9M|{
  458|  12.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  12.9M|        static_cast<unsigned char>(ch))];
  460|  12.9M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   308k|{
  469|   308k|    return static_cast<unsigned char>(ch) <= 127;
  470|   308k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  2.89M|{
  539|  2.89M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.89M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  7.31M|{
  784|  7.31M|    return e != eof_error::good;
  785|  7.31M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  27.4k|{
  798|  27.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  27.4k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  27.4k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   181k|{
  845|   181k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   181k|    return parse_error::eof;
  847|   181k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  2.35M|{
  854|  2.35M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 2.35M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  2.35M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 69.4k, False: 2.28M]
  ------------------
  859|  69.4k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  69.4k|    }
  861|       |
  862|  2.28M|    return detail::unexpected_scan_error(code, msg);
  863|  2.35M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  2.35M|{
  868|  2.35M|    return [code, msg](parse_error err) {
  869|  2.35M|        assert(err != parse_error::good);
  870|  2.35M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.35M|    };
  872|  2.35M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  1.47M|{
 2353|  1.47M|    unsigned char running_diff{0};
 2354|  5.54M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 4.07M, False: 1.47M]
  ------------------
 2355|  4.07M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  4.07M|    }
 2357|  1.47M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 42.4k, False: 1.43M]
  |  Branch (2357:33): [True: 17.9k, False: 1.41M]
  ------------------
 2358|  1.47M|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  8.57M|{
 3272|  8.57M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  8.57M|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  2.85M|{
 3276|  2.85M|#if WCHAR_MIN < 0
 3277|  2.85M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 2.84M, False: 13.3k]
  |  Branch (3277:20): [True: 1.81M, False: 1.02M]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  1.81M|        return char_to_int(static_cast<char>(ch));
 3282|  1.81M|    }
 3283|  1.04M|    return 255;
 3284|  2.85M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6115|  1.29M|{
 6116|  1.29M|    if (specs.width != 0) {
  ------------------
  |  Branch (6116:9): [True: 0, False: 1.29M]
  ------------------
 6117|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6117:13): [True: 0, False: 0]
  ------------------
 6118|      0|            return detail::unexpected_scan_error(
 6119|      0|                scan_error::length_too_short,
 6120|      0|                "Scanned value too narrow, width did not exceed what "
 6121|      0|                "was specified in the format string");
 6122|      0|        }
 6123|      0|    }
 6124|  1.29M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6124:9): [True: 0, False: 1.29M]
  ------------------
 6125|       |        // Ensured by take_width_view
 6126|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6127|      0|                   specs.precision);
 6128|      0|    }
 6129|  1.29M|    return {};
 6130|  1.29M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.09M|    {
  304|  2.09M|        ranges::advance(x, n);
  305|  2.09M|        return x;
  306|  2.09M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.09M|    {
  268|  2.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.09M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.09M|    {
  151|  2.09M|        i += n;
  152|  2.09M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.47M|    {
  108|  2.47M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.47M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.47M|    {
   87|  2.47M|        return s - i;
   88|  2.47M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.66M|    {
  304|  1.66M|        ranges::advance(x, n);
  305|  1.66M|        return x;
  306|  1.66M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.66M|    {
  268|  1.66M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.66M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.66M|    {
  151|  1.66M|        i += n;
  152|  1.66M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   499k|    {
  108|   499k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   499k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   499k|    {
   87|   499k|        return s - i;
   88|   499k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|  1.17M|    {
 3025|  1.17M|        return m_current;
 3026|  1.17M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|  1.01M|    {
 3025|  1.01M|        return m_current;
 3026|  1.01M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   617k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   617k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   617k|        auto beg = r.begin();
  991|   617k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 617k, False: 0]
  ------------------
  992|   617k|            return false;
  993|   617k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   617k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.60M|{
 1956|  1.60M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.60M|    else {
 1967|  1.60M|        auto it = range.begin();
 1968|  1.60M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 977k, False: 628k]
  ------------------
 1969|   977k|            return ranges::next(it, count);
 1970|   977k|        }
 1971|       |
 1972|  2.48M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.88M, False: 601k]
  ------------------
 1973|  1.88M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 27.1k, False: 1.85M]
  ------------------
 1974|  27.1k|                return unexpected(eof_error::eof);
 1975|  27.1k|            }
 1976|  1.88M|        }
 1977|       |
 1978|   601k|        return it;
 1979|   628k|    }
 1980|  1.60M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.60M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.60M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.60M|        else {
 1107|  1.60M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.60M, False: 0]
  ------------------
 1108|  1.60M|                return static_cast<size_t>(
 1109|  1.60M|                    r.begin().parent()->chars_available() -
 1110|  1.60M|                    r.begin().position());
 1111|  1.60M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.60M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.60M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  11.5M|    {
  763|  11.5M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  11.5M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.46M|        : m_fptr([](storage fn,
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
  752|  1.46M|          m_storage(std::addressof(f))
  753|  1.46M|    {
  754|  1.46M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  5.79M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.79M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.79M|              else {
  749|  5.79M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.79M|              }
  751|  5.79M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  5.79M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.79M|        else if constexpr (std::is_object_v<T>) {
  688|  5.79M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.79M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.46M|        {
  662|  1.46M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  6.74M|    {
  763|  6.74M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  6.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.74M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.55M|        : m_fptr([](storage fn,
  743|  1.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55M|              cvref<T> obj = *get<T>(fn);
  745|  1.55M|              if constexpr (std::is_void_v<R>) {
  746|  1.55M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55M|              }
  748|  1.55M|              else {
  749|  1.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55M|              }
  751|  1.55M|          }),
  752|  1.55M|          m_storage(std::addressof(f))
  753|  1.55M|    {
  754|  1.55M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  2.72M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.72M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.72M|              else {
  749|  2.72M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.72M|              }
  751|  2.72M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  2.72M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.72M|        else if constexpr (std::is_object_v<T>) {
  688|  2.72M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.72M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.55M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.55M|        {
  662|  1.55M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   449k|    {
 6144|   449k|        const bool need_skipped_width =
 6145|   449k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 449k]
  |  Branch (6145:33): [True: 0, False: 449k]
  ------------------
 6146|   449k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   449k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 449k]
  ------------------
 6150|   449k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 449k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   449k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 449k, False: 0]
  |  Branch (6154:56): [True: 449k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   449k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 449k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   890k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   449k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   449k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   449k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 7.57k, False: 441k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  7.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  7.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  7.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  7.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  7.57k|    }                                                  \
  |  |  |  | 3957|   449k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   890k|                            make_eof_scan_error));
 6165|       |
 6166|   890k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 441k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   441k|            return result_type{it, 0};
 6174|   890k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   449k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  1.13M|{
 2108|  1.13M|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.13M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.13M|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.13M|    else {
 2079|  1.13M|        auto first = range.begin();
 2080|  4.52M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 4.50M, False: 14.1k]
  ------------------
 2081|  4.50M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.12M, False: 3.38M]
  ------------------
 2082|  1.12M|                return first;
 2083|  1.12M|            }
 2084|  4.50M|        }
 2085|  14.1k|        return first;
 2086|  1.13M|    }
 2087|  1.13M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   984k|    {
  108|   984k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   984k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   984k|    {
   94|   984k|        iter_difference_t<I> counter{0};
   95|  7.04M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 6.05M, False: 984k]
  ------------------
   96|  6.05M|            ++i;
   97|  6.05M|            ++counter;
   98|  6.05M|        }
   99|   984k|        return counter;
  100|   984k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  2.35M|    return [code, msg](parse_error err) {
  869|  2.35M|        assert(err != parse_error::good);
  870|  2.35M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.35M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   230k|    {
 1879|   230k|        auto stdloc = loc.get<std::locale>();
 1880|   230k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   230k|        grouping = numpunct.grouping();
 1882|   230k|        thousands_sep =
 1883|   230k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 230k]
  ------------------
 1884|   230k|        decimal_point = numpunct.decimal_point();
 1885|   230k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   230k|{
 1816|   230k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 230k, False: 0]
  ------------------
 1817|   230k|        return std::use_facet<Facet>(stdloc);
 1818|   230k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   230k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.67M|{
 1945|  1.67M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 1.66M]
  |  |  ------------------
  ------------------
 1946|  10.5k|        return unexpected(e);
 1947|  10.5k|    }
 1948|       |
 1949|  1.66M|    return ranges::next(range.begin());
 1950|  1.67M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.46M|{
  951|  2.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.4k, False: 2.44M]
  |  |  ------------------
  ------------------
  952|  20.4k|        return eof_error::eof;
  953|  20.4k|    }
  954|  2.44M|    return eof_error::good;
  955|  2.46M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.40M|{
  945|  3.40M|    return is_range_eof(r.begin(), r.end());
  946|  3.40M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.40M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.40M|    {
  938|  3.40M|        return begin == end;
  939|  3.40M|    }
  940|  3.40M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.66M|    {
  296|  1.66M|        ++x;
  297|  1.66M|        return x;
  298|  1.66M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   649k|{
 3290|   649k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   649k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 502k, False: 146k]
  ------------------
 3292|   502k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 502k, False: 200]
  ------------------
 3293|   502k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   502k|        }
 3295|    200|        return unexpected(eof_error::eof);
 3296|   502k|    }
 3297|       |
 3298|   146k|    auto& it = *r;
 3299|   146k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 64.5k, False: 82.4k]
  ------------------
 3300|  64.5k|        return std::pair{it, sign_type::minus_sign};
 3301|  64.5k|    }
 3302|  82.4k|    return std::pair{it, sign_type::plus_sign};
 3303|   146k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|  1.11M|{
 2405|  1.11M|    auto it = read_code_unit(range);
 2406|  1.11M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.35k, False: 1.10M]
  |  |  ------------------
  ------------------
 2407|  5.35k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  5.35k|    }
 2409|       |
 2410|  2.10M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.10M, False: 919k]
  ------------------
 2411|  2.10M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 188k, False: 1.91M]
  ------------------
 2412|   188k|            return *it;
 2413|   188k|        }
 2414|  2.10M|    }
 2415|       |
 2416|   919k|    return unexpected(parse_error::error);
 2417|  1.10M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.60M|{
 2364|  1.60M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.60M|    else {
 2377|  1.60M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.60M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.60M|                return ch;
 2380|  1.60M|            }
 2381|  1.60M|            return static_cast<char_type>(ch +
 2382|  1.60M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.60M|        };
 2384|       |
 2385|  1.60M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.60M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.60M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.60M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 27.1k, False: 1.57M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  27.1k|    }                                                  \
  |  |  |  | 3957|  1.60M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.57M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.57M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.57M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.51M, False: 67.9k]
  |  |  ------------------
  ------------------
 2390|  1.57M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.57M|                    return ascii_tolower(a) ==
 2392|  1.57M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.57M|                }))) {
 2394|  1.51M|            return unexpected(parse_error::error);
 2395|  1.51M|        }
 2396|       |
 2397|  67.9k|        return it;
 2398|  1.57M|    }
 2399|  1.60M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  1.83M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.83M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.60M, False: 230k]
  |  Branch (2378:29): [True: 165k, False: 64.6k]
  ------------------
 2379|  1.77M|                return ch;
 2380|  1.77M|            }
 2381|  64.6k|            return static_cast<char_type>(ch +
 2382|  64.6k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.83M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   563k|{
 2279|   563k|    auto it = read_code_unit(range);
 2280|   563k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.24k, False: 558k]
  |  |  ------------------
  ------------------
 2281|  5.24k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  5.24k|    }
 2283|       |
 2284|   558k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 471k, False: 87.4k]
  |  |  ------------------
  ------------------
 2285|   558k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   471k|        return unexpected(parse_error::error);
 2287|   471k|    }
 2288|       |
 2289|  87.4k|    return *it;
 2290|   558k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|  1.13M|{
 2128|  1.13M|    auto it = read_while_code_unit(range, pred);
 2129|  1.13M|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 503k, False: 627k]
  ------------------
 2130|   503k|        return unexpected(parse_error::error);
 2131|   503k|    }
 2132|   627k|    return it;
 2133|  1.13M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   521k|    {
 1720|   521k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   521k|                           ranges::common_range<Range>) {
 1737|   521k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   521k|            auto end_seg = range.end().contiguous_segment();
 1739|   521k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.1k, False: 459k]
  |  |  ------------------
  ------------------
 1740|   521k|                             detail::to_address(end_seg.end()))) {
 1741|  62.1k|                auto& str = m_storage.emplace();
 1742|  62.1k|                str.reserve(range.end().position() - range.begin().position());
 1743|  62.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  62.1k|                m_view = string_view_type{str};
 1745|  62.1k|                return;
 1746|  62.1k|            }
 1747|       |
 1748|   459k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   459k|                                                            end_seg.data());
 1750|   459k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   521k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.12M|    {
 1681|  4.12M|        return m_view;
 1682|  4.12M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  2.35M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   391k|    {
 6186|   391k|        const bool need_skipped_width =
 6187|   391k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 391k]
  |  Branch (6187:33): [True: 0, False: 391k]
  ------------------
 6188|   391k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   391k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 391k]
  ------------------
 6191|   391k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 391k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   391k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 391k, False: 0]
  ------------------
 6200|   391k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 391k]
  ------------------
 6201|   391k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   391k|        return result_type{rng.begin(), 0};
 6225|   391k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   856k|{
 1945|   856k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   856k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.98k, False: 853k]
  |  |  ------------------
  ------------------
 1946|  2.98k|        return unexpected(e);
 1947|  2.98k|    }
 1948|       |
 1949|   853k|    return ranges::next(range.begin());
 1950|   856k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.60M|{
  951|  1.60M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.9k, False: 1.59M]
  |  |  ------------------
  ------------------
  952|  10.9k|        return eof_error::eof;
  953|  10.9k|    }
  954|  1.59M|    return eof_error::good;
  955|  1.60M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.60M|{
  945|  1.60M|    return is_range_eof(r.begin(), r.end());
  946|  1.60M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.61M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.61M|    {
  938|  1.61M|        return begin == end;
  939|  1.61M|    }
  940|  1.61M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   863k|    {
  296|   863k|        ++x;
  297|   863k|        return x;
  298|   863k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   580k|{
 3290|   580k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   580k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 447k, False: 133k]
  ------------------
 3292|   447k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 447k, False: 60]
  ------------------
 3293|   447k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   447k|        }
 3295|     60|        return unexpected(eof_error::eof);
 3296|   447k|    }
 3297|       |
 3298|   133k|    auto& it = *r;
 3299|   133k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 61.7k, False: 71.5k]
  ------------------
 3300|  61.7k|        return std::pair{it, sign_type::minus_sign};
 3301|  61.7k|    }
 3302|  71.5k|    return std::pair{it, sign_type::plus_sign};
 3303|   133k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   672k|{
 2405|   672k|    auto it = read_code_unit(range);
 2406|   672k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   672k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 934, False: 671k]
  |  |  ------------------
  ------------------
 2407|    934|        return unexpected(make_eof_parse_error(it.error()));
 2408|    934|    }
 2409|       |
 2410|  1.26M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.26M, False: 524k]
  ------------------
 2411|  1.26M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 146k, False: 1.11M]
  ------------------
 2412|   146k|            return *it;
 2413|   146k|        }
 2414|  1.26M|    }
 2415|       |
 2416|   524k|    return unexpected(parse_error::error);
 2417|   671k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  10.2k|{
 3376|  10.2k|    switch (base) {
 3377|      0|        case 2:
  ------------------
  |  Branch (3377:9): [True: 0, False: 10.2k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      0|                    false};
 3381|       |
 3382|      0|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 0, False: 10.2k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|      0|            bool zero_parsed = false;
 3385|      0|            auto it = apply_opt(
 3386|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|      0|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|      0|        case 16:
  ------------------
  |  Branch (3390:9): [True: 0, False: 10.2k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|      0|                    false};
 3394|       |
 3395|      0|        case 0:
  ------------------
  |  Branch (3395:9): [True: 0, False: 10.2k]
  ------------------
 3396|       |            // detect base
 3397|      0|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  10.2k|        default:
  ------------------
  |  Branch (3399:9): [True: 10.2k, False: 0]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  10.2k|            return {range.begin(), base, false};
 3402|  10.2k|    }
 3403|  10.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.50M|{
 2364|  1.50M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  1.50M|                  std::is_same_v<char_type, char>) {
 2368|  1.50M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 28.2k, False: 1.47M]
  ------------------
 2369|  28.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|  28.2k|        }
 2371|  1.47M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 1.41M, False: 60.4k]
  ------------------
 2372|  1.41M|            return unexpected(parse_error::error);
 2373|  1.41M|        }
 2374|  60.4k|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  1.50M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   184k|{
 2279|   184k|    auto it = read_code_unit(range);
 2280|   184k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.05k, False: 182k]
  |  |  ------------------
  ------------------
 2281|  2.05k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  2.05k|    }
 2283|       |
 2284|   182k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 149k, False: 33.3k]
  |  |  ------------------
  ------------------
 2285|   182k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   149k|        return unexpected(parse_error::error);
 2287|   149k|    }
 2288|       |
 2289|  33.3k|    return *it;
 2290|   182k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  10.2k|{
 3443|  10.2k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  10.2k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  10.2k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.2k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  10.2k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  10.2k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  10.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  10.2k|                  ranges::sized_range<Range>) {
 1785|  10.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  10.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  10.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  10.2k|    {
 1589|  10.2k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.02M|    {
 1602|  3.02M|        return sv;
 1603|  3.02M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   328k|{
 2108|   328k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   328k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   328k|{
 2075|   328k|    if constexpr (ranges::common_range<Range>) {
 2076|   328k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   328k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   574k|{
 3098|   574k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 574k, False: 0]
  ------------------
 3099|   574k|        auto it = read_while_classic_space(range);
 3100|   574k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   574k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   574k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.12k, False: 567k]
  |  |  ------------------
  ------------------
 3102|  6.12k|            return unexpected(e);
 3103|  6.12k|        }
 3104|       |
 3105|   567k|        return it;
 3106|   574k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   574k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   574k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   574k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   574k|        auto buf = make_contiguous_buffer(range);
 2253|   574k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   574k|        return ranges::next(range.begin(),
 2255|   574k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   574k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   574k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   574k|                  ranges::sized_range<Range>) {
 1785|   574k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   574k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   574k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   574k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   574k|    {
 1589|   574k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.60M|    {
  304|  1.60M|        ranges::advance(x, n);
  305|  1.60M|        return x;
  306|  1.60M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.14M|    {
  268|  2.14M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.14M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.14M|    {
  181|  8.42M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 6.27M, False: 2.14M]
  ------------------
  182|  6.27M|            ++i;
  183|  6.27M|        }
  184|  2.14M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   144k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   144k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   144k|            auto rd = make_reader<T, char_type>();
 6306|   144k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   144k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 144k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   144k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 144k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   144k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   144k|                return impl(rd, range, value);
 6311|   144k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   144k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   858k|    {
 3188|   858k|        reader_error_handler eh{};
 3189|   858k|        get_derived().check_specs_impl(specs, eh);
 3190|   858k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   858k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 858k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   858k|        return {};
 3195|   858k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|   858k|    {
 3200|   858k|        return static_cast<Derived&>(*this);
 3201|   858k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|   858k|    {
 4239|   858k|        detail::check_float_type_specs(specs, eh);
 4240|   858k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   144k|    {
 6231|   144k|        const bool need_skipped_width =
 6232|   144k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 144k]
  |  Branch (6232:33): [True: 0, False: 144k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   144k|        auto it = rng.begin();
 6236|   144k|        std::ptrdiff_t prefix_width = 0;
 6237|   144k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 144k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   144k|        else {
 6245|   144k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.26k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.26k|    }                                                  \
  |  |  |  | 3957|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   142k|            std::tie(it, prefix_width) = prefix_result;
 6247|   142k|        }
 6248|   142k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   142k|        std::ptrdiff_t value_width = 0;
 6252|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 142k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   142k|        else {
 6268|   142k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.0k, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.0k|    }                                                  \
  |  | 3957|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   127k|                                             specs, value, loc));
 6270|       |
 6271|   127k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 127k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   127k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   127k|        std::ptrdiff_t postfix_width = 0;
 6280|   127k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 125k, False: 1.61k]
  ------------------
 6281|   125k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   125k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   125k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   125k|                                 value_width));
 6285|   125k|            std::tie(it, postfix_width) = postfix_result;
 6286|   125k|        }
 6287|       |
 6288|   127k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   127k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   127k|            specs, prefix_width, value_width, postfix_width));
 6290|   127k|        return it;
 6291|   127k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  1.93M|    {
 3183|  1.93M|        return true;
 3184|  1.93M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4310|   845k|    {
 4311|   845k|        unsigned options{};
 4312|   845k|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 230k, False: 614k]
  ------------------
 4313|   230k|            options |= float_reader_base::allow_thsep;
 4314|   230k|        }
 4315|       |
 4316|   845k|        SCN_GCC_COMPAT_PUSH
 4317|   845k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|   845k|        switch (specs.type) {
 4320|   138k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 138k, False: 707k]
  ------------------
 4321|   138k|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|  28.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 28.0k, False: 817k]
  ------------------
 4324|  28.0k|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|   251k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 251k, False: 594k]
  ------------------
 4327|   251k|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|   197k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 197k, False: 648k]
  ------------------
 4330|   197k|                return options | float_reader_base::allow_scientific |
 4331|   197k|                       float_reader_base::allow_fixed;
 4332|       |
 4333|   230k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 230k, False: 614k]
  ------------------
 4334|   230k|                return options | float_reader_base::allow_scientific |
 4335|   230k|                       float_reader_base::allow_fixed |
 4336|   230k|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 845k]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|   845k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|   845k|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|   845k|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3741|   845k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.17M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.35M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3772|   351k|    {
 3773|   351k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   351k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   351k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   351k|        const std::ptrdiff_t sign_len =
 3776|   351k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 82.2k, False: 269k]
  ------------------
 3777|       |
 3778|   351k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.6k, False: 339k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.6k|    }                                                  \
  |  |  |  | 3957|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   339k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   351k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4129|  1.09M|    {
 4130|  1.09M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 1.09M, False: 0]
  ------------------
 4131|  1.09M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 1.09M, False: 0]
  ------------------
 4132|  1.09M|            return;
 4133|  1.09M|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.18M|    {
 1686|  2.18M|        return m_storage.has_value();
 1687|  2.18M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.19M|    {
 1691|  1.19M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.19M|        return *m_storage;
 1693|  1.19M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   142k|    {
 4264|   142k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   142k|#if !SCN_DISABLE_LOCALE
 4267|   142k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 38.5k, False: 103k]
  ------------------
 4268|  38.5k|            return read_impl<Range>(
 4269|  38.5k|                range, rd,
 4270|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  38.5k|                },
 4273|  38.5k|                value, loc);
 4274|  38.5k|        }
 4275|   103k|#endif
 4276|       |
 4277|   103k|        return read_impl<Range>(
 4278|   103k|            range, rd,
 4279|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   103k|                return r.read_source(SCN_FWD(args)...);
 4281|   103k|            },
 4282|   103k|            value);
 4283|   142k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   195k|    {
 4300|   195k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   195k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.5k, False: 178k]
  |  |  ------------------
  ------------------
 4302|  17.5k|            return unexpected(r.error());
 4303|  17.5k|        }
 4304|       |
 4305|   178k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.12k, False: 175k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.12k|    }                                                  \
  |  |  |  | 3957|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   175k|        return ranges::next(range.begin(), n);
 4307|   178k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   607k|    {
  763|   607k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   607k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.5k|        : m_fptr([](storage fn,
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|  38.5k|              if constexpr (std::is_void_v<R>) {
  746|  38.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.5k|              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
  752|  38.5k|          m_storage(std::addressof(f))
  753|  38.5k|    {
  754|  38.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.5k|              else {
  749|  38.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.5k|              }
  751|  38.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  38.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.5k|        else if constexpr (std::is_object_v<T>) {
  688|  38.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  38.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  38.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  38.5k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3760|   121k|    {
 3761|   121k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|   121k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   121k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|   121k|        return read_source_impl(range);
 3767|   121k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3786|   607k|    {
 3787|   607k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   607k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   607k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   607k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 607k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   607k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   607k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   607k|        auto it = sign_result.first;
 3790|   607k|        m_sign = sign_result.second;
 3791|       |
 3792|   607k|        auto digits_begin = it;
 3793|   607k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|   607k|        else {
 3820|   607k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   607k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   607k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   607k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 54.1k, False: 553k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  54.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  54.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  54.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  54.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  54.1k|    }                                                  \
  |  | 3957|   607k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|   553k|                it,
 3822|   553k|                do_read_source_impl(
 3823|   553k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|   553k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|   553k|        }
 3826|       |
 3827|   607k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   607k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   607k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   553k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 548k, False: 4.52k]
  |  Branch (3829:48): [True: 545k, False: 3.01k]
  ------------------
 3830|   553k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 519k, False: 25.9k]
  ------------------
 3831|   553k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 513k, False: 6.24k]
  ------------------
 3832|   513k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   513k|        }
 3834|       |
 3835|   553k|        handle_separators();
 3836|       |
 3837|   553k|        return it;
 3838|   607k|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4072|   607k|    {
 4073|   607k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   607k|        const bool allowed_nonhex =
 4075|   607k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   607k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   607k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 599k, False: 7.53k]
  |  Branch (4078:45): [True: 0, False: 599k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   607k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 7.53k, False: 599k]
  ------------------
 4084|  7.53k|            return *r;
 4085|  7.53k|        }
 4086|       |
 4087|   599k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 567k, False: 32.1k]
  |  Branch (4087:45): [True: 1.50k, False: 566k]
  ------------------
 4088|  1.50k|            return unexpected(r.error());
 4089|  1.50k|        }
 4090|   598k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 32.1k, False: 566k]
  ------------------
 4091|  32.1k|            return *r;
 4092|  32.1k|        }
 4093|       |
 4094|   566k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 391k, False: 174k]
  |  Branch (4094:28): [True: 123k, False: 268k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|   123k|            auto it = range.begin();
 4098|       |
 4099|   123k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 7.02k, False: 116k]
  ------------------
 4100|  7.02k|                m_kind = float_kind::hex_with_prefix;
 4101|  7.02k|                it = *r;
 4102|  7.02k|            }
 4103|   116k|            else {
 4104|   116k|                m_kind = float_kind::hex_without_prefix;
 4105|   116k|            }
 4106|       |
 4107|   123k|            return read_hex(ranges::subrange{it, range.end()});
 4108|   123k|        }
 4109|   442k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 174k, False: 268k]
  |  Branch (4109:29): [True: 174k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   174k|            m_kind = float_kind::generic;
 4113|   174k|            return read_regular_float(range);
 4114|   174k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   268k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.6k, False: 251k]
  |  |  ------------------
  ------------------
 4120|  16.6k|            m_kind = float_kind::hex_with_prefix;
 4121|  16.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4122|  16.6k|        }
 4123|       |
 4124|   251k|        m_kind = float_kind::generic;
 4125|   251k|        return read_regular(range);
 4126|   268k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3880|   607k|    {
 3881|   607k|        auto it = range.begin();
 3882|   607k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 599k, False: 7.53k]
  ------------------
 3883|   599k|            return unexpected(r.error());
 3884|   599k|        }
 3885|  7.53k|        else {
 3886|  7.53k|            it = *r;
 3887|  7.53k|        }
 3888|       |
 3889|  7.53k|        if (auto r = read_matching_string_classic_nocase(
 3890|  7.53k|                ranges::subrange{it, range.end()}, "inity");
 3891|  7.53k|            !r) {
  ------------------
  |  Branch (3891:13): [True: 4.52k, False: 3.01k]
  ------------------
 3892|  4.52k|            m_kind = float_kind::inf_short;
 3893|  4.52k|            return it;
 3894|  4.52k|        }
 3895|  3.01k|        else {
 3896|  3.01k|            m_kind = float_kind::inf_long;
 3897|  3.01k|            return *r;
 3898|  3.01k|        }
 3899|  7.53k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   599k|    {
 3904|   599k|        auto it = range.begin();
 3905|   599k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 566k, False: 33.6k]
  ------------------
 3906|   566k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   566k|                scan_error::invalid_scanned_value,
 3908|   566k|                "Invalid floating-point NaN value"));
 3909|   566k|        }
 3910|  33.6k|        else {
 3911|  33.6k|            it = *r;
 3912|  33.6k|        }
 3913|       |
 3914|  33.6k|        if (auto r =
 3915|  33.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|  33.6k|            !r) {
  ------------------
  |  Branch (3916:13): [True: 25.9k, False: 7.75k]
  ------------------
 3917|  25.9k|            m_kind = float_kind::nan_simple;
 3918|  25.9k|            return it;
 3919|  25.9k|        }
 3920|  7.75k|        else {
 3921|  7.75k|            it = *r;
 3922|  7.75k|        }
 3923|       |
 3924|  7.75k|        auto payload_beg_it = it;
 3925|  7.75k|        it = read_while_code_unit(
 3926|  7.75k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|  7.75k|                return is_ascii_char(ch) &&
 3928|  7.75k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|  7.75k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|  7.75k|            });
 3931|  7.75k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|  7.75k|        m_kind = float_kind::nan_with_payload;
 3934|  7.75k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 6.24k, False: 1.50k]
  ------------------
 3935|  7.75k|                                             ')')) {
 3936|  6.24k|            return *r;
 3937|  6.24k|        }
 3938|  1.50k|        return detail::unexpected_scan_error(
 3939|  1.50k|            scan_error::invalid_scanned_value,
 3940|  1.50k|            "Invalid floating-point NaN payload");
 3941|  7.75k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  7.75k|        : m_fptr([](storage fn,
  743|  7.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.75k|              cvref<T> obj = *get<T>(fn);
  745|  7.75k|              if constexpr (std::is_void_v<R>) {
  746|  7.75k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.75k|              }
  748|  7.75k|              else {
  749|  7.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.75k|              }
  751|  7.75k|          }),
  752|  7.75k|          m_storage(std::addressof(f))
  753|  7.75k|    {
  754|  7.75k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   159k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   159k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   159k|              else {
  749|   159k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   159k|              }
  751|   159k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   159k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   159k|        else if constexpr (std::is_object_v<T>) {
  688|   159k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   159k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3926|   159k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|   159k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3927:24): [True: 159k, False: 83]
  ------------------
 3928|   159k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3928:26): [True: 153k, False: 6.65k]
  |  Branch (3928:39): [True: 144k, False: 8.39k]
  |  Branch (3928:54): [True: 2.79k, False: 12.2k]
  |  Branch (3928:67): [True: 2.70k, False: 83]
  ------------------
 3929|   159k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3929:26): [True: 5.68k, False: 6.65k]
  |  Branch (3929:39): [True: 2.88k, False: 2.80k]
  |  Branch (3929:53): [True: 2.72k, False: 6.74k]
  ------------------
 3930|   159k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  7.75k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.75k|        {
  662|  7.75k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3873|   391k|    {
 3874|   391k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   391k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3974|   140k|    {
 3975|   140k|        auto it = range.begin();
 3976|       |
 3977|   140k|        std::ptrdiff_t digits_count = 0;
 3978|   140k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|   140k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.03k, False: 133k]
  |  |  ------------------
  ------------------
 3980|  7.03k|            return r.transform_error(map_parse_error_to_scan_error(
 3981|  7.03k|                scan_error::invalid_scanned_value,
 3982|  7.03k|                "Invalid hexadecimal floating-point value"));
 3983|  7.03k|        }
 3984|   133k|        else {
 3985|   133k|            digits_count += ranges::distance(it, *r);
 3986|   133k|            it = *r;
 3987|   133k|        }
 3988|       |
 3989|   133k|        m_integral_part_length = digits_count;
 3990|   133k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 16.0k, False: 116k]
  ------------------
 3991|   133k|                                             m_locale_options.decimal_point)) {
 3992|  16.0k|            it = *r;
 3993|  16.0k|        }
 3994|       |
 3995|   133k|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 13.7k, False: 119k]
  ------------------
 3996|   133k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|  13.7k|            digits_count += ranges::distance(it, *r);
 3998|  13.7k|            it = *r;
 3999|  13.7k|        }
 4000|       |
 4001|   133k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|   133k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|   133k|        return it;
 4010|   133k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3858|   273k|    {
 3859|   273k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 273k]
  |  |  |  Branch (1039:45): [True: 0, False: 273k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|   273k|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|   273k|        return read_while1_code_unit(
 3868|   273k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|   273k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   273k|        : m_fptr([](storage fn,
  743|   273k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   273k|              cvref<T> obj = *get<T>(fn);
  745|   273k|              if constexpr (std::is_void_v<R>) {
  746|   273k|                  obj(static_cast<decltype(args)>(args)...);
  747|   273k|              }
  748|   273k|              else {
  749|   273k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   273k|              }
  751|   273k|          }),
  752|   273k|          m_storage(std::addressof(f))
  753|   273k|    {
  754|   273k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.07M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3868|  1.07M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   273k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   273k|        {
  662|   273k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3946|   464k|    {
 3947|   464k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 41.7k, False: 422k]
  ------------------
 3948|  41.7k|            auto beg_exp_it = range.begin();
 3949|  41.7k|            auto it = *r;
 3950|       |
 3951|  41.7k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 41.5k, False: 200]
  ------------------
 3952|  41.7k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  41.5k|                it = r_sign->first;
 3954|  41.5k|            }
 3955|       |
 3956|  41.7k|            if (auto r_exp = read_while1_code_unit(
 3957|  41.7k|                    ranges::subrange{it, range.end()},
 3958|  41.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  41.7k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  41.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.45k, False: 40.2k]
  |  |  ------------------
  ------------------
 3960|  1.45k|                it = beg_exp_it;
 3961|  1.45k|            }
 3962|  40.2k|            else {
 3963|  40.2k|                it = *r_exp;
 3964|  40.2k|            }
 3965|       |
 3966|  41.7k|            return it;
 3967|  41.7k|        }
 3968|   422k|        return range.begin();
 3969|   464k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  41.7k|        : m_fptr([](storage fn,
  743|  41.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.7k|              cvref<T> obj = *get<T>(fn);
  745|  41.7k|              if constexpr (std::is_void_v<R>) {
  746|  41.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.7k|              }
  748|  41.7k|              else {
  749|  41.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.7k|              }
  751|  41.7k|          }),
  752|  41.7k|          m_storage(std::addressof(f))
  753|  41.7k|    {
  754|  41.7k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   142k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   142k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   142k|              else {
  749|   142k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   142k|              }
  751|   142k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   142k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   142k|        else if constexpr (std::is_object_v<T>) {
  688|   142k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   142k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3958|   142k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  41.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  41.7k|        {
  662|  41.7k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4015|   426k|    {
 4016|   426k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   426k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 358k, False: 67.6k]
  |  Branch (4017:50): [True: 12.8k, False: 345k]
  ------------------
 4018|       |
 4019|   426k|        auto it = ranges::begin(range);
 4020|   426k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   426k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   426k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 36.7k, False: 389k]
  |  |  ------------------
  ------------------
 4024|  36.7k|            return r.transform_error(
 4025|  36.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  36.7k|                                              "Invalid floating-point value"));
 4027|  36.7k|        }
 4028|   389k|        else {
 4029|   389k|            digits_count += ranges::distance(it, *r);
 4030|   389k|            it = *r;
 4031|   389k|        }
 4032|       |
 4033|   389k|        m_integral_part_length = digits_count;
 4034|   389k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 57.3k, False: 332k]
  ------------------
 4035|   389k|                                             m_locale_options.decimal_point)) {
 4036|  57.3k|            it = *r;
 4037|  57.3k|        }
 4038|       |
 4039|   389k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 50.7k, False: 338k]
  ------------------
 4040|   389k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  50.7k|            digits_count += ranges::distance(it, *r);
 4042|  50.7k|            it = *r;
 4043|  50.7k|        }
 4044|       |
 4045|   389k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   389k|        auto beg_exp_it = it;
 4052|   389k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 331k, False: 58.3k]
  ------------------
 4053|   331k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|   331k|        }
 4055|   389k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 12.1k, False: 377k]
  |  Branch (4055:29): [True: 8.89k, False: 3.28k]
  ------------------
 4056|  8.89k|            return detail::unexpected_scan_error(
 4057|  8.89k|                scan_error::invalid_scanned_value,
 4058|  8.89k|                "No exponent given to scientific float");
 4059|  8.89k|        }
 4060|       |
 4061|   380k|        m_kind =
 4062|   380k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 341k, False: 39.6k]
  ------------------
 4063|       |
 4064|   380k|        return it;
 4065|   389k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3843|   815k|    {
 3844|   815k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   815k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 815k]
  |  |  |  Branch (1039:45): [True: 0, False: 815k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   815k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   815k|        return read_while1_code_unit(
 3853|   815k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   815k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   815k|        : m_fptr([](storage fn,
  743|   815k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   815k|              cvref<T> obj = *get<T>(fn);
  745|   815k|              if constexpr (std::is_void_v<R>) {
  746|   815k|                  obj(static_cast<decltype(args)>(args)...);
  747|   815k|              }
  748|   815k|              else {
  749|   815k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   815k|              }
  751|   815k|          }),
  752|   815k|          m_storage(std::addressof(f))
  753|   815k|    {
  754|   815k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.13M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.13M|              else {
  749|  3.13M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.13M|              }
  751|  3.13M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  3.13M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.13M|        else if constexpr (std::is_object_v<T>) {
  688|  3.13M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.13M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3853|  3.13M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   815k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   815k|        {
  662|   815k|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   521k|    {
 1676|   521k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   521k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.5k|        {
  662|  38.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|   103k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3746|   485k|    {
 3747|   485k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 485k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   485k|        return read_source_impl(range);
 3753|   485k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   131k|    {
 4264|   131k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   131k|#if !SCN_DISABLE_LOCALE
 4267|   131k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 34.9k, False: 96.1k]
  ------------------
 4268|  34.9k|            return read_impl<Range>(
 4269|  34.9k|                range, rd,
 4270|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  34.9k|                },
 4273|  34.9k|                value, loc);
 4274|  34.9k|        }
 4275|  96.1k|#endif
 4276|       |
 4277|  96.1k|        return read_impl<Range>(
 4278|  96.1k|            range, rd,
 4279|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  96.1k|                return r.read_source(SCN_FWD(args)...);
 4281|  96.1k|            },
 4282|  96.1k|            value);
 4283|   131k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   183k|    {
 4300|   183k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   183k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.68k, False: 173k]
  |  |  ------------------
  ------------------
 4302|  9.68k|            return unexpected(r.error());
 4303|  9.68k|        }
 4304|       |
 4305|   173k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.5k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.5k|    }                                                  \
  |  |  |  | 3957|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   163k|        return ranges::next(range.begin(), n);
 4307|   173k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   567k|    {
  763|   567k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   567k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   567k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  34.9k|        : m_fptr([](storage fn,
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|  34.9k|              if constexpr (std::is_void_v<R>) {
  746|  34.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.9k|              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
  752|  34.9k|          m_storage(std::addressof(f))
  753|  34.9k|    {
  754|  34.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  34.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.9k|        else if constexpr (std::is_object_v<T>) {
  688|  34.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  34.9k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|   109k|    {
 3761|   109k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|   109k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|   109k|        return read_source_impl(range);
 3767|   109k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|   567k|    {
 3787|   567k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   567k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   567k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   567k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 567k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   567k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   567k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   567k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   567k|        auto it = sign_result.first;
 3790|   567k|        m_sign = sign_result.second;
 3791|       |
 3792|   567k|        auto digits_begin = it;
 3793|   567k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|   567k|                      ranges::sized_range<Range>) {
 3796|   567k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 567k]
  |  |  |  Branch (1039:45): [True: 0, False: 567k]
  |  |  |  Branch (1039:45): [True: 0, False: 567k]
  |  |  ------------------
  ------------------
 3797|   567k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|   567k|            else {
 3806|   567k|                auto cb = [&](const auto& rr)
 3807|   567k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   567k|                    auto res = read_all(rr);
 3809|   567k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|   567k|                        return detail::unexpected_scan_error(
 3811|   567k|                            scan_error::invalid_scanned_value,
 3812|   567k|                            "Invalid float value");
 3813|   567k|                    }
 3814|   567k|                    return res;
 3815|   567k|                };
 3816|   567k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   567k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   567k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 29.6k, False: 538k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  29.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  29.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  29.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  29.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  29.6k|    }                                                  \
  |  | 3957|   567k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   567k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|   538k|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|   567k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   538k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 534k, False: 4.27k]
  |  Branch (3829:48): [True: 531k, False: 2.68k]
  ------------------
 3830|   538k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 505k, False: 25.3k]
  ------------------
 3831|   538k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 500k, False: 5.76k]
  ------------------
 3832|   500k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   500k|        }
 3834|       |
 3835|   538k|        handle_separators();
 3836|       |
 3837|   538k|        return it;
 3838|   567k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|   567k|    {
 3881|   567k|        auto it = range.begin();
 3882|   567k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 560k, False: 6.96k]
  ------------------
 3883|   560k|            return unexpected(r.error());
 3884|   560k|        }
 3885|  6.96k|        else {
 3886|  6.96k|            it = *r;
 3887|  6.96k|        }
 3888|       |
 3889|  6.96k|        if (auto r = read_matching_string_classic_nocase(
 3890|  6.96k|                ranges::subrange{it, range.end()}, "inity");
 3891|  6.96k|            !r) {
  ------------------
  |  Branch (3891:13): [True: 4.27k, False: 2.68k]
  ------------------
 3892|  4.27k|            m_kind = float_kind::inf_short;
 3893|  4.27k|            return it;
 3894|  4.27k|        }
 3895|  2.68k|        else {
 3896|  2.68k|            m_kind = float_kind::inf_long;
 3897|  2.68k|            return *r;
 3898|  2.68k|        }
 3899|  6.96k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|   560k|    {
 3904|   560k|        auto it = range.begin();
 3905|   560k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 528k, False: 32.6k]
  ------------------
 3906|   528k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   528k|                scan_error::invalid_scanned_value,
 3908|   528k|                "Invalid floating-point NaN value"));
 3909|   528k|        }
 3910|  32.6k|        else {
 3911|  32.6k|            it = *r;
 3912|  32.6k|        }
 3913|       |
 3914|  32.6k|        if (auto r =
 3915|  32.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|  32.6k|            !r) {
  ------------------
  |  Branch (3916:13): [True: 25.3k, False: 7.22k]
  ------------------
 3917|  25.3k|            m_kind = float_kind::nan_simple;
 3918|  25.3k|            return it;
 3919|  25.3k|        }
 3920|  7.22k|        else {
 3921|  7.22k|            it = *r;
 3922|  7.22k|        }
 3923|       |
 3924|  7.22k|        auto payload_beg_it = it;
 3925|  7.22k|        it = read_while_code_unit(
 3926|  7.22k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|  7.22k|                return is_ascii_char(ch) &&
 3928|  7.22k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|  7.22k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|  7.22k|            });
 3931|  7.22k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|  7.22k|        m_kind = float_kind::nan_with_payload;
 3934|  7.22k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 5.76k, False: 1.45k]
  ------------------
 3935|  7.22k|                                             ')')) {
 3936|  5.76k|            return *r;
 3937|  5.76k|        }
 3938|  1.45k|        return detail::unexpected_scan_error(
 3939|  1.45k|            scan_error::invalid_scanned_value,
 3940|  1.45k|            "Invalid floating-point NaN payload");
 3941|  7.22k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  7.22k|        : m_fptr([](storage fn,
  743|  7.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.22k|              cvref<T> obj = *get<T>(fn);
  745|  7.22k|              if constexpr (std::is_void_v<R>) {
  746|  7.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.22k|              }
  748|  7.22k|              else {
  749|  7.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.22k|              }
  751|  7.22k|          }),
  752|  7.22k|          m_storage(std::addressof(f))
  753|  7.22k|    {
  754|  7.22k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   149k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   149k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   149k|              else {
  749|   149k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   149k|              }
  751|   149k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   149k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   149k|        else if constexpr (std::is_object_v<T>) {
  688|   149k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   149k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3926|   149k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|   149k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3927:24): [True: 149k, False: 83]
  ------------------
 3928|   149k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3928:26): [True: 142k, False: 6.13k]
  |  Branch (3928:39): [True: 134k, False: 8.20k]
  |  Branch (3928:54): [True: 2.73k, False: 11.6k]
  |  Branch (3928:67): [True: 2.64k, False: 83]
  ------------------
 3929|   149k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3929:26): [True: 5.55k, False: 6.13k]
  |  Branch (3929:39): [True: 2.75k, False: 2.80k]
  |  Branch (3929:53): [True: 2.72k, False: 6.21k]
  ------------------
 3930|   149k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  7.22k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.22k|        {
  662|  7.22k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|   364k|    {
 3874|   364k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   364k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   321k|{
 2128|   321k|    auto it = read_while_code_unit(range, pred);
 2129|   321k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 146k, False: 174k]
  ------------------
 2130|   146k|        return unexpected(parse_error::error);
 2131|   146k|    }
 2132|   174k|    return it;
 2133|   321k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3946|  91.1k|    {
 3947|  91.1k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 13.0k, False: 78.1k]
  ------------------
 3948|  13.0k|            auto beg_exp_it = range.begin();
 3949|  13.0k|            auto it = *r;
 3950|       |
 3951|  13.0k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 12.9k, False: 60]
  ------------------
 3952|  13.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  12.9k|                it = r_sign->first;
 3954|  12.9k|            }
 3955|       |
 3956|  13.0k|            if (auto r_exp = read_while1_code_unit(
 3957|  13.0k|                    ranges::subrange{it, range.end()},
 3958|  13.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  13.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 536, False: 12.4k]
  |  |  ------------------
  ------------------
 3960|    536|                it = beg_exp_it;
 3961|    536|            }
 3962|  12.4k|            else {
 3963|  12.4k|                it = *r_exp;
 3964|  12.4k|            }
 3965|       |
 3966|  13.0k|            return it;
 3967|  13.0k|        }
 3968|  78.1k|        return range.begin();
 3969|  91.1k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  13.0k|        : m_fptr([](storage fn,
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
  752|  13.0k|          m_storage(std::addressof(f))
  753|  13.0k|    {
  754|  13.0k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  41.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  41.9k|              else {
  749|  41.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.9k|              }
  751|  41.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  41.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  41.9k|        else if constexpr (std::is_object_v<T>) {
  688|  41.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  41.9k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3958|  41.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  13.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  13.0k|        {
  662|  13.0k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|   163k|    {
 4016|   163k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   163k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 100k, False: 63.1k]
  |  Branch (4017:50): [True: 12.7k, False: 87.6k]
  ------------------
 4018|       |
 4019|   163k|        auto it = ranges::begin(range);
 4020|   163k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   163k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   163k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.7k, False: 144k]
  |  |  ------------------
  ------------------
 4024|  18.7k|            return r.transform_error(
 4025|  18.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  18.7k|                                              "Invalid floating-point value"));
 4027|  18.7k|        }
 4028|   144k|        else {
 4029|   144k|            digits_count += ranges::distance(it, *r);
 4030|   144k|            it = *r;
 4031|   144k|        }
 4032|       |
 4033|   144k|        m_integral_part_length = digits_count;
 4034|   144k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 20.3k, False: 124k]
  ------------------
 4035|   144k|                                             m_locale_options.decimal_point)) {
 4036|  20.3k|            it = *r;
 4037|  20.3k|        }
 4038|       |
 4039|   144k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 17.7k, False: 127k]
  ------------------
 4040|   144k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  17.7k|            digits_count += ranges::distance(it, *r);
 4042|  17.7k|            it = *r;
 4043|  17.7k|        }
 4044|       |
 4045|   144k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   144k|        auto beg_exp_it = it;
 4052|   144k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 91.1k, False: 53.6k]
  ------------------
 4053|  91.1k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|  91.1k|        }
 4055|   144k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 11.7k, False: 133k]
  |  Branch (4055:29): [True: 8.74k, False: 3.01k]
  ------------------
 4056|  8.74k|            return detail::unexpected_scan_error(
 4057|  8.74k|                scan_error::invalid_scanned_value,
 4058|  8.74k|                "No exponent given to scientific float");
 4059|  8.74k|        }
 4060|       |
 4061|   136k|        m_kind =
 4062|   136k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 123k, False: 12.4k]
  ------------------
 4063|       |
 4064|   136k|        return it;
 4065|   144k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|   308k|    {
 3844|   308k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 308k]
  |  |  |  Branch (1039:45): [True: 0, False: 308k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   308k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   308k|        return read_while1_code_unit(
 3853|   308k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   308k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   308k|        : m_fptr([](storage fn,
  743|   308k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   308k|              cvref<T> obj = *get<T>(fn);
  745|   308k|              if constexpr (std::is_void_v<R>) {
  746|   308k|                  obj(static_cast<decltype(args)>(args)...);
  747|   308k|              }
  748|   308k|              else {
  749|   308k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   308k|              }
  751|   308k|          }),
  752|   308k|          m_storage(std::addressof(f))
  753|   308k|    {
  754|   308k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.09M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.09M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.09M|              else {
  749|  1.09M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.09M|              }
  751|  1.09M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  1.09M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.09M|        else if constexpr (std::is_object_v<T>) {
  688|  1.09M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.09M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3853|  1.09M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   308k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   308k|        {
  662|   308k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|   567k|    {
 4073|   567k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   567k|        const bool allowed_nonhex =
 4075|   567k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   567k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   567k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 560k, False: 6.96k]
  |  Branch (4078:45): [True: 0, False: 560k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   567k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 6.96k, False: 560k]
  ------------------
 4084|  6.96k|            return *r;
 4085|  6.96k|        }
 4086|       |
 4087|   560k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 529k, False: 31.1k]
  |  Branch (4087:45): [True: 1.45k, False: 528k]
  ------------------
 4088|  1.45k|            return unexpected(r.error());
 4089|  1.45k|        }
 4090|   559k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 31.1k, False: 528k]
  ------------------
 4091|  31.1k|            return *r;
 4092|  31.1k|        }
 4093|       |
 4094|   528k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 364k, False: 163k]
  |  Branch (4094:28): [True: 110k, False: 254k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|   110k|            auto it = range.begin();
 4098|       |
 4099|   110k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 5.22k, False: 105k]
  ------------------
 4100|  5.22k|                m_kind = float_kind::hex_with_prefix;
 4101|  5.22k|                it = *r;
 4102|  5.22k|            }
 4103|   105k|            else {
 4104|   105k|                m_kind = float_kind::hex_without_prefix;
 4105|   105k|            }
 4106|       |
 4107|   110k|            return read_hex(ranges::subrange{it, range.end()});
 4108|   110k|        }
 4109|   417k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 163k, False: 254k]
  |  Branch (4109:29): [True: 163k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   163k|            m_kind = float_kind::generic;
 4113|   163k|            return read_regular_float(range);
 4114|   163k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   254k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.9k, False: 241k]
  |  |  ------------------
  ------------------
 4120|  12.9k|            m_kind = float_kind::hex_with_prefix;
 4121|  12.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4122|  12.9k|        }
 4123|       |
 4124|   241k|        m_kind = float_kind::generic;
 4125|   241k|        return read_regular(range);
 4126|   254k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|   364k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   364k|                    auto res = read_all(rr);
 3809|   364k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   364k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 708, False: 364k]
  |  |  ------------------
  ------------------
 3810|    708|                        return detail::unexpected_scan_error(
 3811|    708|                            scan_error::invalid_scanned_value,
 3812|    708|                            "Invalid float value");
 3813|    708|                    }
 3814|   364k|                    return res;
 3815|   364k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   364k|{
 1938|   364k|    return ranges::next(range.begin(), range.end());
 1939|   364k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   364k|    {
  313|   364k|        ranges::advance(x, bound);
  314|   364k|        return x;
  315|   364k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   364k|    {
  275|   364k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   364k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   364k|    {
  190|   364k|        i = std::move(bound);
  191|   364k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   507k|    {
 1676|   507k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   507k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   507k|    {
 1720|   507k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   507k|                      ranges::sized_range<Range>) {
 1725|   507k|            m_storage.reset();
 1726|   507k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   507k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  34.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.9k|        {
  662|  34.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  96.1k|        : m_fptr([](storage fn,
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|  96.1k|              if constexpr (std::is_void_v<R>) {
  746|  96.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.1k|              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
  752|  96.1k|          m_storage(std::addressof(f))
  753|  96.1k|    {
  754|  96.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  96.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.1k|        else if constexpr (std::is_object_v<T>) {
  688|  96.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  96.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  96.1k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|   458k|    {
 3747|   458k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 458k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   458k|        return read_source_impl(range);
 3753|   458k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.1k|        {
  662|  96.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   150k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   150k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   150k|            auto rd = make_reader<T, char_type>();
 6306|   150k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   150k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 150k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   150k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 150k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   150k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   150k|                return impl(rd, range, value);
 6311|   150k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   150k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   150k|    {
 6231|   150k|        const bool need_skipped_width =
 6232|   150k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 150k]
  |  Branch (6232:33): [True: 0, False: 150k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   150k|        auto it = rng.begin();
 6236|   150k|        std::ptrdiff_t prefix_width = 0;
 6237|   150k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 150k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   150k|        else {
 6245|   150k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.55k, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.55k|    }                                                  \
  |  |  |  | 3957|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   148k|            std::tie(it, prefix_width) = prefix_result;
 6247|   148k|        }
 6248|   148k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   148k|        std::ptrdiff_t value_width = 0;
 6252|   148k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 148k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   148k|        else {
 6268|   148k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.7k, False: 133k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.7k|    }                                                  \
  |  | 3957|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   133k|                                             specs, value, loc));
 6270|       |
 6271|   133k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 133k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   133k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   133k|        std::ptrdiff_t postfix_width = 0;
 6280|   133k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 131k, False: 1.82k]
  ------------------
 6281|   131k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   131k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   131k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   131k|                                 value_width));
 6285|   131k|            std::tie(it, postfix_width) = postfix_result;
 6286|   131k|        }
 6287|       |
 6288|   133k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   133k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   133k|            specs, prefix_width, value_width, postfix_width));
 6290|   133k|        return it;
 6291|   133k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|   366k|    {
 3773|   366k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   366k|        const std::ptrdiff_t sign_len =
 3776|   366k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 87.3k, False: 278k]
  ------------------
 3777|       |
 3778|   366k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.2k, False: 355k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.2k|    }                                                  \
  |  |  |  | 3957|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   355k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   366k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   148k|    {
 4264|   148k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   148k|#if !SCN_DISABLE_LOCALE
 4267|   148k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 40.8k, False: 107k]
  ------------------
 4268|  40.8k|            return read_impl<Range>(
 4269|  40.8k|                range, rd,
 4270|  40.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  40.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  40.8k|                },
 4273|  40.8k|                value, loc);
 4274|  40.8k|        }
 4275|   107k|#endif
 4276|       |
 4277|   107k|        return read_impl<Range>(
 4278|   107k|            range, rd,
 4279|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   107k|                return r.read_source(SCN_FWD(args)...);
 4281|   107k|            },
 4282|   107k|            value);
 4283|   148k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   204k|    {
 4300|   204k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   204k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.0k, False: 185k]
  |  |  ------------------
  ------------------
 4302|  18.0k|            return unexpected(r.error());
 4303|  18.0k|        }
 4304|       |
 4305|   185k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.22k, False: 184k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.22k|    }                                                  \
  |  |  |  | 3957|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   184k|        return ranges::next(range.begin(), n);
 4307|   185k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.8k|        : m_fptr([](storage fn,
  743|  40.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.8k|              cvref<T> obj = *get<T>(fn);
  745|  40.8k|              if constexpr (std::is_void_v<R>) {
  746|  40.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.8k|              }
  748|  40.8k|              else {
  749|  40.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.8k|              }
  751|  40.8k|          }),
  752|  40.8k|          m_storage(std::addressof(f))
  753|  40.8k|    {
  754|  40.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.8k|              else {
  749|  40.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.8k|              }
  751|  40.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  40.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.8k|        else if constexpr (std::is_object_v<T>) {
  688|  40.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  40.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  40.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  40.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.8k|        {
  662|  40.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|   107k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   135k|    {
 4264|   135k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   135k|#if !SCN_DISABLE_LOCALE
 4267|   135k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 36.6k, False: 98.5k]
  ------------------
 4268|  36.6k|            return read_impl<Range>(
 4269|  36.6k|                range, rd,
 4270|  36.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  36.6k|                },
 4273|  36.6k|                value, loc);
 4274|  36.6k|        }
 4275|  98.5k|#endif
 4276|       |
 4277|  98.5k|        return read_impl<Range>(
 4278|  98.5k|            range, rd,
 4279|  98.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  98.5k|                return r.read_source(SCN_FWD(args)...);
 4281|  98.5k|            },
 4282|  98.5k|            value);
 4283|   135k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   190k|    {
 4300|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.84k, False: 180k]
  |  |  ------------------
  ------------------
 4302|  9.84k|            return unexpected(r.error());
 4303|  9.84k|        }
 4304|       |
 4305|   180k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.0k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.0k|    }                                                  \
  |  |  |  | 3957|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   170k|        return ranges::next(range.begin(), n);
 4307|   180k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  36.6k|        : m_fptr([](storage fn,
  743|  36.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.6k|              cvref<T> obj = *get<T>(fn);
  745|  36.6k|              if constexpr (std::is_void_v<R>) {
  746|  36.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.6k|              }
  748|  36.6k|              else {
  749|  36.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.6k|              }
  751|  36.6k|          }),
  752|  36.6k|          m_storage(std::addressof(f))
  753|  36.6k|    {
  754|  36.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  36.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.6k|              else {
  749|  36.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.6k|              }
  751|  36.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  36.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.6k|        else if constexpr (std::is_object_v<T>) {
  688|  36.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  36.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  36.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  36.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.6k|        {
  662|  36.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  98.5k|        : m_fptr([](storage fn,
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|  98.5k|              if constexpr (std::is_void_v<R>) {
  746|  98.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.5k|              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
  752|  98.5k|          m_storage(std::addressof(f))
  753|  98.5k|    {
  754|  98.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  98.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.5k|        else if constexpr (std::is_object_v<T>) {
  688|  98.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  98.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  98.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  98.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.5k|        {
  662|  98.5k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   153k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   153k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   153k|            auto rd = make_reader<T, char_type>();
 6306|   153k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   153k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 153k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   153k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 153k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   153k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   153k|                return impl(rd, range, value);
 6311|   153k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   153k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   153k|    {
 6231|   153k|        const bool need_skipped_width =
 6232|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 153k]
  |  Branch (6232:33): [True: 0, False: 153k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   153k|        auto it = rng.begin();
 6236|   153k|        std::ptrdiff_t prefix_width = 0;
 6237|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 153k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   153k|        else {
 6245|   153k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.76k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.76k|    }                                                  \
  |  |  |  | 3957|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   151k|            std::tie(it, prefix_width) = prefix_result;
 6247|   151k|        }
 6248|   151k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   151k|        std::ptrdiff_t value_width = 0;
 6252|   151k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 151k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   151k|        else {
 6268|   151k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.5k, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.5k|    }                                                  \
  |  | 3957|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   136k|                                             specs, value, loc));
 6270|       |
 6271|   136k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 136k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   136k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   136k|        std::ptrdiff_t postfix_width = 0;
 6280|   136k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 134k, False: 1.99k]
  ------------------
 6281|   134k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   134k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   134k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   134k|                                 value_width));
 6285|   134k|            std::tie(it, postfix_width) = postfix_result;
 6286|   134k|        }
 6287|       |
 6288|   136k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   136k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   136k|            specs, prefix_width, value_width, postfix_width));
 6290|   136k|        return it;
 6291|   136k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3772|   373k|    {
 3773|   373k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   373k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   373k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   373k|        const std::ptrdiff_t sign_len =
 3776|   373k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 91.5k, False: 281k]
  ------------------
 3777|       |
 3778|   373k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   373k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   373k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   373k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.86k, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.86k|    }                                                  \
  |  |  |  | 3957|   373k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   363k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   373k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   151k|    {
 4264|   151k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   151k|#if !SCN_DISABLE_LOCALE
 4267|   151k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 42.1k, False: 108k]
  ------------------
 4268|  42.1k|            return read_impl<Range>(
 4269|  42.1k|                range, rd,
 4270|  42.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  42.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  42.1k|                },
 4273|  42.1k|                value, loc);
 4274|  42.1k|        }
 4275|   108k|#endif
 4276|       |
 4277|   108k|        return read_impl<Range>(
 4278|   108k|            range, rd,
 4279|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   108k|                return r.read_source(SCN_FWD(args)...);
 4281|   108k|            },
 4282|   108k|            value);
 4283|   151k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   207k|    {
 4300|   207k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   207k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.6k, False: 189k]
  |  |  ------------------
  ------------------
 4302|  18.6k|            return unexpected(r.error());
 4303|  18.6k|        }
 4304|       |
 4305|   189k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 326, False: 189k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    326|    }                                                  \
  |  |  |  | 3957|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   189k|        return ranges::next(range.begin(), n);
 4307|   189k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  42.1k|        : m_fptr([](storage fn,
  743|  42.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.1k|              cvref<T> obj = *get<T>(fn);
  745|  42.1k|              if constexpr (std::is_void_v<R>) {
  746|  42.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.1k|              }
  748|  42.1k|              else {
  749|  42.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.1k|              }
  751|  42.1k|          }),
  752|  42.1k|          m_storage(std::addressof(f))
  753|  42.1k|    {
  754|  42.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  42.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.1k|              else {
  749|  42.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.1k|              }
  751|  42.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  42.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.1k|        else if constexpr (std::is_object_v<T>) {
  688|  42.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  42.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  42.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  42.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  42.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  42.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.1k|        {
  662|  42.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|   108k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   137k|    {
 4264|   137k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   137k|#if !SCN_DISABLE_LOCALE
 4267|   137k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 37.8k, False: 99.7k]
  ------------------
 4268|  37.8k|            return read_impl<Range>(
 4269|  37.8k|                range, rd,
 4270|  37.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  37.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  37.8k|                },
 4273|  37.8k|                value, loc);
 4274|  37.8k|        }
 4275|  99.7k|#endif
 4276|       |
 4277|  99.7k|        return read_impl<Range>(
 4278|  99.7k|            range, rd,
 4279|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  99.7k|                return r.read_source(SCN_FWD(args)...);
 4281|  99.7k|            },
 4282|  99.7k|            value);
 4283|   137k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   194k|    {
 4300|   194k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   194k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.0k, False: 184k]
  |  |  ------------------
  ------------------
 4302|  10.0k|            return unexpected(r.error());
 4303|  10.0k|        }
 4304|       |
 4305|   184k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.53k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.53k|    }                                                  \
  |  |  |  | 3957|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   174k|        return ranges::next(range.begin(), n);
 4307|   184k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  37.8k|        : m_fptr([](storage fn,
  743|  37.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.8k|              cvref<T> obj = *get<T>(fn);
  745|  37.8k|              if constexpr (std::is_void_v<R>) {
  746|  37.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.8k|              }
  748|  37.8k|              else {
  749|  37.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.8k|              }
  751|  37.8k|          }),
  752|  37.8k|          m_storage(std::addressof(f))
  753|  37.8k|    {
  754|  37.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  37.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.8k|              else {
  749|  37.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.8k|              }
  751|  37.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  37.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.8k|        else if constexpr (std::is_object_v<T>) {
  688|  37.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  37.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  37.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  37.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  37.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.8k|        {
  662|  37.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  99.7k|        : m_fptr([](storage fn,
  743|  99.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.7k|              cvref<T> obj = *get<T>(fn);
  745|  99.7k|              if constexpr (std::is_void_v<R>) {
  746|  99.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.7k|              }
  748|  99.7k|              else {
  749|  99.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.7k|              }
  751|  99.7k|          }),
  752|  99.7k|          m_storage(std::addressof(f))
  753|  99.7k|    {
  754|  99.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  99.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.7k|              else {
  749|  99.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.7k|              }
  751|  99.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.7k|        else if constexpr (std::is_object_v<T>) {
  688|  99.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  99.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  99.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  99.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  99.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  99.7k|        {
  662|  99.7k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   615k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   615k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   615k|        else {
 1055|   615k|            return r.begin().contiguous_segment();
 1056|   615k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   615k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   538k|{
 2193|   538k|    auto it = range.begin();
 2194|   947k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 939k, False: 7.96k]
  ------------------
 2195|   939k|        const auto val =
 2196|   939k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   939k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   939k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 933k, False: 6.88k]
  |  |  ------------------
  ------------------
 2198|   933k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   933k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   933k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 530k, False: 402k]
  ------------------
 2201|   530k|                return it;
 2202|   530k|            }
 2203|   933k|        }
 2204|   409k|        it = val.iterator;
 2205|   409k|    }
 2206|       |
 2207|  7.96k|    return it;
 2208|   538k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   939k|{
 1998|   939k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   939k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   939k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   939k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   939k|    auto it = range.begin();
 2002|   939k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   939k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   939k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.88k, False: 933k]
  |  |  ------------------
  ------------------
 2005|  6.88k|        ++it;
 2006|  6.88k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  6.88k|        return {it, {}};
 2008|  6.88k|    }
 2009|       |
 2010|   933k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 920k, False: 12.3k]
  ------------------
 2011|   920k|        ++it;
 2012|   920k|        return {it, string_type(1, *range.begin())};
 2013|   920k|    }
 2014|       |
 2015|  12.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  12.3k|    return {it, string_type{range.begin(), it}};
 2017|   933k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  6.88k|{
 1265|  6.88k|    auto it = input.begin();
 1266|  37.9k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 36.8k, False: 1.08k]
  ------------------
 1267|  36.8k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.80k, False: 31.0k]
  ------------------
 1268|  5.80k|            break;
 1269|  5.80k|        }
 1270|  36.8k|    }
 1271|  6.88k|    return it;
 1272|  6.88k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  12.3k|    {
  283|  12.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  12.3k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  12.3k|    {
  252|  12.3k|        constexpr iter_difference_t<I> zero{0};
  253|  12.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|  37.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 26.2k, False: 11.5k]
  |  Branch (255:30): [True: 25.4k, False: 782]
  ------------------
  256|  25.4k|            ++i;
  257|  25.4k|            ++counter;
  258|  25.4k|        }
  259|       |
  260|  12.3k|        return counter;
  261|  12.3k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   939k|    {
 1989|   939k|        return !codepoint.empty();
 1990|   939k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   538k|{
 2214|   538k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   538k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   615k|{
 3098|   615k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 615k, False: 0]
  ------------------
 3099|   615k|        auto it = read_while_classic_space(range);
 3100|   615k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   615k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.96k, False: 607k]
  |  |  ------------------
  ------------------
 3102|  7.96k|            return unexpected(e);
 3103|  7.96k|        }
 3104|       |
 3105|   607k|        return it;
 3106|   615k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   615k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   615k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   615k|    else {
 2258|   615k|        auto it = range.begin();
 2259|       |
 2260|   615k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   615k|            auto seg = get_contiguous_beginning(range);
 2262|   615k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   615k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 76.9k, False: 538k]
  ------------------
 2264|  76.9k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  76.9k|            }
 2266|   538k|            ranges::advance(it, seg.size());
 2267|   538k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   615k|            return detail::is_cp_space(cp);
 2271|   615k|        });
 2272|   615k|    }
 2273|   615k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   538k|        : m_fptr([](storage fn,
  743|   538k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   538k|              cvref<T> obj = *get<T>(fn);
  745|   538k|              if constexpr (std::is_void_v<R>) {
  746|   538k|                  obj(static_cast<decltype(args)>(args)...);
  747|   538k|              }
  748|   538k|              else {
  749|   538k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   538k|              }
  751|   538k|          }),
  752|   538k|          m_storage(std::addressof(f))
  753|   538k|    {
  754|   538k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   933k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   933k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   933k|              else {
  749|   933k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   933k|              }
  751|   933k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   933k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   933k|        else if constexpr (std::is_object_v<T>) {
  688|   933k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   933k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   933k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   933k|            return detail::is_cp_space(cp);
 2271|   933k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   538k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   538k|        {
  662|   538k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   510k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   510k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   510k|        auto beg = r.begin();
  991|   510k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 510k, False: 0]
  ------------------
  992|   510k|            return false;
  993|   510k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   510k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.34M|{
 1956|  1.34M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.34M|    else {
 1967|  1.34M|        auto it = range.begin();
 1968|  1.34M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 803k, False: 537k]
  ------------------
 1969|   803k|            return ranges::next(it, count);
 1970|   803k|        }
 1971|       |
 1972|  2.06M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.57M, False: 483k]
  ------------------
 1973|  1.57M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 54.0k, False: 1.52M]
  ------------------
 1974|  54.0k|                return unexpected(eof_error::eof);
 1975|  54.0k|            }
 1976|  1.57M|        }
 1977|       |
 1978|   483k|        return it;
 1979|   537k|    }
 1980|  1.34M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.34M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.34M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.34M|        else {
 1107|  1.34M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.34M, False: 0]
  ------------------
 1108|  1.34M|                return static_cast<size_t>(
 1109|  1.34M|                    r.begin().parent()->chars_available() -
 1110|  1.34M|                    r.begin().position());
 1111|  1.34M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.34M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.34M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  3.74M|    {
  763|  3.74M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  3.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.74M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.20M|        : m_fptr([](storage fn,
  743|  1.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.20M|              cvref<T> obj = *get<T>(fn);
  745|  1.20M|              if constexpr (std::is_void_v<R>) {
  746|  1.20M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.20M|              }
  748|  1.20M|              else {
  749|  1.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.20M|              }
  751|  1.20M|          }),
  752|  1.20M|          m_storage(std::addressof(f))
  753|  1.20M|    {
  754|  1.20M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.87M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.87M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.87M|              else {
  749|  1.87M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.87M|              }
  751|  1.87M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.87M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.87M|        else if constexpr (std::is_object_v<T>) {
  688|  1.87M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.87M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.20M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.20M|        {
  662|  1.20M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   372k|    {
 6144|   372k|        const bool need_skipped_width =
 6145|   372k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 372k]
  |  Branch (6145:33): [True: 0, False: 372k]
  ------------------
 6146|   372k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   372k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 372k]
  ------------------
 6150|   372k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 372k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   372k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 372k, False: 0]
  |  Branch (6154:56): [True: 372k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   372k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 372k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   742k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.94k, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.94k|    }                                                  \
  |  |  |  | 3957|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   742k|                            make_eof_scan_error));
 6165|       |
 6166|   742k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 369k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   369k|            return result_type{it, 0};
 6174|   742k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   372k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|   902k|{
 2108|   902k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   902k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   902k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|   902k|    else {
 2079|   902k|        auto first = range.begin();
 2080|  1.40M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.40M, False: 3.36k]
  ------------------
 2081|  1.40M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 898k, False: 504k]
  ------------------
 2082|   898k|                return first;
 2083|   898k|            }
 2084|  1.40M|        }
 2085|  3.36k|        return first;
 2086|   902k|    }
 2087|   902k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   655k|    {
  108|   655k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   655k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   655k|    {
   94|   655k|        iter_difference_t<I> counter{0};
   95|  1.76M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.10M, False: 655k]
  ------------------
   96|  1.10M|            ++i;
   97|  1.10M|            ++counter;
   98|  1.10M|        }
   99|   655k|        return counter;
  100|   655k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   182k|    {
 1879|   182k|        auto stdloc = loc.get<std::locale>();
 1880|   182k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   182k|        grouping = numpunct.grouping();
 1882|   182k|        thousands_sep =
 1883|   182k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 182k]
  ------------------
 1884|   182k|        decimal_point = numpunct.decimal_point();
 1885|   182k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   182k|{
 1816|   182k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 182k, False: 0]
  ------------------
 1817|   182k|        return std::use_facet<Facet>(stdloc);
 1818|   182k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   182k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.23M|{
 1945|  1.23M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.17k, False: 1.22M]
  |  |  ------------------
  ------------------
 1946|  2.17k|        return unexpected(e);
 1947|  2.17k|    }
 1948|       |
 1949|  1.22M|    return ranges::next(range.begin());
 1950|  1.23M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.87M|{
  951|  1.87M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.13k, False: 1.87M]
  |  |  ------------------
  ------------------
  952|  6.13k|        return eof_error::eof;
  953|  6.13k|    }
  954|  1.87M|    return eof_error::good;
  955|  1.87M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  2.77M|{
  945|  2.77M|    return is_range_eof(r.begin(), r.end());
  946|  2.77M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  2.77M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.77M|    {
  938|  2.77M|        return begin == end;
  939|  2.77M|    }
  940|  2.77M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.22M|    {
  296|  1.22M|        ++x;
  297|  1.22M|        return x;
  298|  1.22M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   520k|{
 3290|   520k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   520k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 515k, False: 5.82k]
  ------------------
 3292|   515k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 515k, False: 72]
  ------------------
 3293|   515k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   515k|        }
 3295|     72|        return unexpected(eof_error::eof);
 3296|   515k|    }
 3297|       |
 3298|  5.82k|    auto& it = *r;
 3299|  5.82k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 4.46k, False: 1.36k]
  ------------------
 3300|  4.46k|        return std::pair{it, sign_type::minus_sign};
 3301|  4.46k|    }
 3302|  1.36k|    return std::pair{it, sign_type::plus_sign};
 3303|  5.82k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|   849k|{
 2405|   849k|    auto it = read_code_unit(range);
 2406|   849k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.26k, False: 848k]
  |  |  ------------------
  ------------------
 2407|  1.26k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.26k|    }
 2409|       |
 2410|  1.69M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.69M, False: 828k]
  ------------------
 2411|  1.69M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 20.2k, False: 1.67M]
  ------------------
 2412|  20.2k|            return *it;
 2413|  20.2k|        }
 2414|  1.69M|    }
 2415|       |
 2416|   828k|    return unexpected(parse_error::error);
 2417|   848k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.34M|{
 2364|  1.34M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.34M|    else {
 2377|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.34M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.34M|                return ch;
 2380|  1.34M|            }
 2381|  1.34M|            return static_cast<char_type>(ch +
 2382|  1.34M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.34M|        };
 2384|       |
 2385|  1.34M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.0k, False: 1.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.0k|    }                                                  \
  |  |  |  | 3957|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.28M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.28M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.28M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.28M, False: 674]
  |  |  ------------------
  ------------------
 2390|  1.28M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.28M|                    return ascii_tolower(a) ==
 2392|  1.28M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.28M|                }))) {
 2394|  1.28M|            return unexpected(parse_error::error);
 2395|  1.28M|        }
 2396|       |
 2397|    674|        return it;
 2398|  1.28M|    }
 2399|  1.34M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.51M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.51M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.21M, False: 295k]
  |  Branch (2378:29): [True: 282k, False: 13.7k]
  ------------------
 2379|  1.49M|                return ch;
 2380|  1.49M|            }
 2381|  13.7k|            return static_cast<char_type>(ch +
 2382|  13.7k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.51M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   381k|{
 2279|   381k|    auto it = read_code_unit(range);
 2280|   381k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 912, False: 380k]
  |  |  ------------------
  ------------------
 2281|    912|        return unexpected(make_eof_parse_error(it.error()));
 2282|    912|    }
 2283|       |
 2284|   380k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 373k, False: 6.66k]
  |  |  ------------------
  ------------------
 2285|   380k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   373k|        return unexpected(parse_error::error);
 2287|   373k|    }
 2288|       |
 2289|  6.66k|    return *it;
 2290|   380k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|   902k|{
 2128|   902k|    auto it = read_while_code_unit(range, pred);
 2129|   902k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 502k, False: 399k]
  ------------------
 2130|   502k|        return unexpected(parse_error::error);
 2131|   502k|    }
 2132|   399k|    return it;
 2133|   902k|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   377k|    {
 1720|   377k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   377k|                           ranges::common_range<Range>) {
 1737|   377k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   377k|            auto end_seg = range.end().contiguous_segment();
 1739|   377k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   377k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.9k, False: 359k]
  |  |  ------------------
  ------------------
 1740|   377k|                             detail::to_address(end_seg.end()))) {
 1741|  17.9k|                auto& str = m_storage.emplace();
 1742|  17.9k|                str.reserve(range.end().position() - range.begin().position());
 1743|  17.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  17.9k|                m_view = string_view_type{str};
 1745|  17.9k|                return;
 1746|  17.9k|            }
 1747|       |
 1748|   359k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   359k|                                                            end_seg.data());
 1750|   359k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   377k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.28M|    {
 1681|  3.28M|        return m_view;
 1682|  3.28M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.02M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   267k|    {
 6186|   267k|        const bool need_skipped_width =
 6187|   267k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 267k]
  |  Branch (6187:33): [True: 0, False: 267k]
  ------------------
 6188|   267k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   267k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 267k]
  ------------------
 6191|   267k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 267k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   267k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 267k, False: 0]
  ------------------
 6200|   267k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 267k]
  ------------------
 6201|   267k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   267k|        return result_type{rng.begin(), 0};
 6225|   267k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.34M|{
 1956|  1.34M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.34M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.34M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.34M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 54.1k, False: 1.28M]
  ------------------
 1961|  54.1k|            return unexpected(eof_error::eof);
 1962|  54.1k|        }
 1963|       |
 1964|  1.28M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.34M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  2.19M|{
 1998|  2.19M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.19M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.19M|    auto it = range.begin();
 2002|  2.19M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.19M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.19M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.19M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.19M, False: 0]
  ------------------
 2011|  2.19M|        ++it;
 2012|  2.19M|        return {it, string_type(1, *range.begin())};
 2013|  2.19M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.19M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.54M|{
  945|  3.54M|    return is_range_eof(r.begin(), r.end());
  946|  3.54M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.54M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.54M|    {
  938|  3.54M|        return begin == end;
  939|  3.54M|    }
  940|  3.54M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   327k|    {
  190|   327k|        i = std::move(bound);
  191|   327k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  2.19M|    {
 1989|  2.19M|        return !codepoint.empty();
 1990|  2.19M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.35M|{
  951|  1.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.46k, False: 1.34M]
  |  |  ------------------
  ------------------
  952|  4.46k|        return eof_error::eof;
  953|  4.46k|    }
  954|  1.34M|    return eof_error::good;
  955|  1.35M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   703k|{
 1945|   703k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 512, False: 702k]
  |  |  ------------------
  ------------------
 1946|    512|        return unexpected(e);
 1947|    512|    }
 1948|       |
 1949|   702k|    return ranges::next(range.begin());
 1950|   703k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   702k|    {
  296|   702k|        ++x;
  297|   702k|        return x;
  298|   702k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   511k|{
 3290|   511k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   511k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 508k, False: 3.86k]
  ------------------
 3292|   508k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 508k, False: 24]
  ------------------
 3293|   508k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   508k|        }
 3295|     24|        return unexpected(eof_error::eof);
 3296|   508k|    }
 3297|       |
 3298|  3.86k|    auto& it = *r;
 3299|  3.86k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 2.68k, False: 1.17k]
  ------------------
 3300|  2.68k|        return std::pair{it, sign_type::minus_sign};
 3301|  2.68k|    }
 3302|  1.17k|    return std::pair{it, sign_type::plus_sign};
 3303|  3.86k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   581k|{
 2405|   581k|    auto it = read_code_unit(range);
 2406|   581k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   581k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 278, False: 581k]
  |  |  ------------------
  ------------------
 2407|    278|        return unexpected(make_eof_parse_error(it.error()));
 2408|    278|    }
 2409|       |
 2410|  1.16M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.16M, False: 572k]
  ------------------
 2411|  1.16M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 9.11k, False: 1.15M]
  ------------------
 2412|  9.11k|            return *it;
 2413|  9.11k|        }
 2414|  1.16M|    }
 2415|       |
 2416|   572k|    return unexpected(parse_error::error);
 2417|   581k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.34M|{
 2364|  1.34M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.34M|    else {
 2377|  1.34M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.34M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.34M|                return ch;
 2380|  1.34M|            }
 2381|  1.34M|            return static_cast<char_type>(ch +
 2382|  1.34M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.34M|        };
 2384|       |
 2385|  1.34M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.1k, False: 1.28M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.1k|    }                                                  \
  |  |  |  | 3957|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.28M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.28M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.28M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.28M, False: 674]
  |  |  ------------------
  ------------------
 2390|  1.28M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.28M|                    return ascii_tolower(a) ==
 2392|  1.28M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.28M|                }))) {
 2394|  1.28M|            return unexpected(parse_error::error);
 2395|  1.28M|        }
 2396|       |
 2397|    674|        return it;
 2398|  1.28M|    }
 2399|  1.34M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.51M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.51M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.21M, False: 296k]
  |  Branch (2378:29): [True: 282k, False: 13.7k]
  ------------------
 2379|  1.49M|                return ch;
 2380|  1.49M|            }
 2381|  13.7k|            return static_cast<char_type>(ch +
 2382|  13.7k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.51M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   121k|{
 2279|   121k|    auto it = read_code_unit(range);
 2280|   121k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 234, False: 121k]
  |  |  ------------------
  ------------------
 2281|    234|        return unexpected(make_eof_parse_error(it.error()));
 2282|    234|    }
 2283|       |
 2284|   121k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 119k, False: 2.49k]
  |  |  ------------------
  ------------------
 2285|   121k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   119k|        return unexpected(parse_error::error);
 2287|   119k|    }
 2288|       |
 2289|  2.49k|    return *it;
 2290|   121k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   305k|{
 2108|   305k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   305k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   305k|{
 2075|   305k|    if constexpr (ranges::common_range<Range>) {
 2076|   305k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   305k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   510k|{
 3098|   510k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 510k, False: 0]
  ------------------
 3099|   510k|        auto it = read_while_classic_space(range);
 3100|   510k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   510k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.45k, False: 506k]
  |  |  ------------------
  ------------------
 3102|  3.45k|            return unexpected(e);
 3103|  3.45k|        }
 3104|       |
 3105|   506k|        return it;
 3106|   510k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   510k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   510k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   510k|    else {
 2258|   510k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   510k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   510k|            return detail::is_cp_space(cp);
 2271|   510k|        });
 2272|   510k|    }
 2273|   510k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|   510k|{
 2214|   510k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   510k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  1.24M|{
 2193|  1.24M|    auto it = range.begin();
 2194|  2.68M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.19M, False: 489k]
  ------------------
 2195|  2.19M|        const auto val =
 2196|  2.19M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.19M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.19M, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.19M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.19M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.19M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 758k, False: 1.43M]
  ------------------
 2201|   758k|                return it;
 2202|   758k|            }
 2203|  2.19M|        }
 2204|  1.43M|        it = val.iterator;
 2205|  1.43M|    }
 2206|       |
 2207|   489k|    return it;
 2208|  1.24M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   510k|        : m_fptr([](storage fn,
  743|   510k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   510k|              cvref<T> obj = *get<T>(fn);
  745|   510k|              if constexpr (std::is_void_v<R>) {
  746|   510k|                  obj(static_cast<decltype(args)>(args)...);
  747|   510k|              }
  748|   510k|              else {
  749|   510k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   510k|              }
  751|   510k|          }),
  752|   510k|          m_storage(std::addressof(f))
  753|   510k|    {
  754|   510k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   895k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   895k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   895k|              else {
  749|   895k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   895k|              }
  751|   895k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   895k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   895k|        else if constexpr (std::is_object_v<T>) {
  688|   895k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   895k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   895k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   895k|            return detail::is_cp_space(cp);
 2271|   895k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   510k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   510k|        {
  662|   510k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.17M|    {
  304|  1.17M|        ranges::advance(x, n);
  305|  1.17M|        return x;
  306|  1.17M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.17M|    {
  268|  1.17M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.17M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.17M|    {
  181|  3.77M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.59M, False: 1.17M]
  ------------------
  182|  2.59M|            ++i;
  183|  2.59M|        }
  184|  1.17M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   117k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   117k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   117k|            auto rd = make_reader<T, char_type>();
 6306|   117k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   117k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   117k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 117k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   117k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   117k|                return impl(rd, range, value);
 6311|   117k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   117k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   745k|    {
 3188|   745k|        reader_error_handler eh{};
 3189|   745k|        get_derived().check_specs_impl(specs, eh);
 3190|   745k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   745k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 745k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   745k|        return {};
 3195|   745k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|   745k|    {
 3200|   745k|        return static_cast<Derived&>(*this);
 3201|   745k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|   745k|    {
 4239|   745k|        detail::check_float_type_specs(specs, eh);
 4240|   745k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   117k|    {
 6231|   117k|        const bool need_skipped_width =
 6232|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 117k]
  |  Branch (6232:33): [True: 0, False: 117k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   117k|        auto it = rng.begin();
 6236|   117k|        std::ptrdiff_t prefix_width = 0;
 6237|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 117k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   117k|        else {
 6245|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 910, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    910|    }                                                  \
  |  |  |  | 3957|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   116k|            std::tie(it, prefix_width) = prefix_result;
 6247|   116k|        }
 6248|   116k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   116k|        std::ptrdiff_t value_width = 0;
 6252|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 116k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   116k|        else {
 6268|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.7k, False: 82.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.7k|    }                                                  \
  |  | 3957|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  82.6k|                                             specs, value, loc));
 6270|       |
 6271|  82.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 82.6k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  82.6k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  82.6k|        std::ptrdiff_t postfix_width = 0;
 6280|  82.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 82.2k, False: 406]
  ------------------
 6281|  82.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  82.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  82.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  82.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 82.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  82.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  82.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  82.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  82.2k|                                 value_width));
 6285|  82.2k|            std::tie(it, postfix_width) = postfix_result;
 6286|  82.2k|        }
 6287|       |
 6288|  82.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  82.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 82.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  82.6k|            specs, prefix_width, value_width, postfix_width));
 6290|  82.6k|        return it;
 6291|  82.6k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.55M|    {
 3183|  1.55M|        return true;
 3184|  1.55M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4310|   739k|    {
 4311|   739k|        unsigned options{};
 4312|   739k|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 182k, False: 557k]
  ------------------
 4313|   182k|            options |= float_reader_base::allow_thsep;
 4314|   182k|        }
 4315|       |
 4316|   739k|        SCN_GCC_COMPAT_PUSH
 4317|   739k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|   739k|        switch (specs.type) {
 4320|   145k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 145k, False: 594k]
  ------------------
 4321|   145k|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|  43.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 43.9k, False: 695k]
  ------------------
 4324|  43.9k|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|   199k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 199k, False: 539k]
  ------------------
 4327|   199k|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|   168k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 168k, False: 571k]
  ------------------
 4330|   168k|                return options | float_reader_base::allow_scientific |
 4331|   168k|                       float_reader_base::allow_fixed;
 4332|       |
 4333|   182k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 182k, False: 557k]
  ------------------
 4334|   182k|                return options | float_reader_base::allow_scientific |
 4335|   182k|                       float_reader_base::allow_fixed |
 4336|   182k|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 739k]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|   739k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|   739k|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|   739k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3741|   739k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.01M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.02M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3772|   251k|    {
 3773|   251k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   251k|        const std::ptrdiff_t sign_len =
 3776|   251k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.74k, False: 249k]
  ------------------
 3777|       |
 3778|   251k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 25.6k, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  25.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  25.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  25.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  25.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  25.6k|    }                                                  \
  |  |  |  | 3957|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   226k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   251k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4129|   823k|    {
 4130|   823k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 823k, False: 0]
  ------------------
 4131|   823k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 823k, False: 0]
  ------------------
 4132|   823k|            return;
 4133|   823k|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.67M|    {
 1686|  1.67M|        return m_storage.has_value();
 1687|  1.67M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   915k|    {
 1691|   915k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   915k|        return *m_storage;
 1693|   915k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   116k|    {
 4264|   116k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   116k|#if !SCN_DISABLE_LOCALE
 4267|   116k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 26.9k, False: 89.4k]
  ------------------
 4268|  26.9k|            return read_impl<Range>(
 4269|  26.9k|                range, rd,
 4270|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  26.9k|                },
 4273|  26.9k|                value, loc);
 4274|  26.9k|        }
 4275|  89.4k|#endif
 4276|       |
 4277|  89.4k|        return read_impl<Range>(
 4278|  89.4k|            range, rd,
 4279|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  89.4k|                return r.read_source(SCN_FWD(args)...);
 4281|  89.4k|            },
 4282|  89.4k|            value);
 4283|   116k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   156k|    {
 4300|   156k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42.2k, False: 114k]
  |  |  ------------------
  ------------------
 4302|  42.2k|            return unexpected(r.error());
 4303|  42.2k|        }
 4304|       |
 4305|   114k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.70k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.70k|    }                                                  \
  |  |  |  | 3957|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   112k|        return ranges::next(range.begin(), n);
 4307|   114k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   506k|    {
  763|   506k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   506k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  26.9k|        : m_fptr([](storage fn,
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|  26.9k|              if constexpr (std::is_void_v<R>) {
  746|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.9k|              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
  752|  26.9k|          m_storage(std::addressof(f))
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  26.9k|        else if constexpr (std::is_object_v<T>) {
  688|  26.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  26.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  26.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3760|  91.1k|    {
 3761|  91.1k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|  91.1k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  91.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|  91.1k|        return read_source_impl(range);
 3767|  91.1k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3786|   506k|    {
 3787|   506k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   506k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   506k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   506k|        auto it = sign_result.first;
 3790|   506k|        m_sign = sign_result.second;
 3791|       |
 3792|   506k|        auto digits_begin = it;
 3793|   506k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|   506k|        else {
 3820|   506k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 128k, False: 377k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|   128k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|   128k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   128k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   128k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|   128k|    }                                                  \
  |  | 3957|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|   377k|                it,
 3822|   377k|                do_read_source_impl(
 3823|   377k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|   377k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|   377k|        }
 3826|       |
 3827|   506k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   377k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 377k, False: 0]
  |  Branch (3829:48): [True: 377k, False: 0]
  ------------------
 3830|   377k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 377k, False: 0]
  ------------------
 3831|   377k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 377k, False: 0]
  ------------------
 3832|   377k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   377k|        }
 3834|       |
 3835|   377k|        handle_separators();
 3836|       |
 3837|   377k|        return it;
 3838|   506k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4072|   506k|    {
 4073|   506k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   506k|        const bool allowed_nonhex =
 4075|   506k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   506k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   506k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 506k, False: 0]
  |  Branch (4078:45): [True: 0, False: 506k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   506k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 506k]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|   506k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 506k, False: 0]
  |  Branch (4087:45): [True: 0, False: 506k]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|   506k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 506k]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|   506k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 327k, False: 178k]
  |  Branch (4094:28): [True: 99.8k, False: 227k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|  99.8k|            auto it = range.begin();
 4098|       |
 4099|  99.8k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 204, False: 99.6k]
  ------------------
 4100|    204|                m_kind = float_kind::hex_with_prefix;
 4101|    204|                it = *r;
 4102|    204|            }
 4103|  99.6k|            else {
 4104|  99.6k|                m_kind = float_kind::hex_without_prefix;
 4105|  99.6k|            }
 4106|       |
 4107|  99.8k|            return read_hex(ranges::subrange{it, range.end()});
 4108|  99.8k|        }
 4109|   406k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 178k, False: 227k]
  |  Branch (4109:29): [True: 178k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   178k|            m_kind = float_kind::generic;
 4113|   178k|            return read_regular_float(range);
 4114|   178k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   227k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 470, False: 227k]
  |  |  ------------------
  ------------------
 4120|    470|            m_kind = float_kind::hex_with_prefix;
 4121|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4122|    470|        }
 4123|       |
 4124|   227k|        m_kind = float_kind::generic;
 4125|   227k|        return read_regular(range);
 4126|   227k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3880|   506k|    {
 3881|   506k|        auto it = range.begin();
 3882|   506k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 506k, False: 0]
  ------------------
 3883|   506k|            return unexpected(r.error());
 3884|   506k|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   506k|    {
 3904|   506k|        auto it = range.begin();
 3905|   506k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 506k, False: 0]
  ------------------
 3906|   506k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   506k|                scan_error::invalid_scanned_value,
 3908|   506k|                "Invalid floating-point NaN value"));
 3909|   506k|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3873|   327k|    {
 3874|   327k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   327k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3974|   100k|    {
 3975|   100k|        auto it = range.begin();
 3976|       |
 3977|   100k|        std::ptrdiff_t digits_count = 0;
 3978|   100k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|   100k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.8k, False: 80.4k]
  |  |  ------------------
  ------------------
 3980|  19.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3981|  19.8k|                scan_error::invalid_scanned_value,
 3982|  19.8k|                "Invalid hexadecimal floating-point value"));
 3983|  19.8k|        }
 3984|  80.4k|        else {
 3985|  80.4k|            digits_count += ranges::distance(it, *r);
 3986|  80.4k|            it = *r;
 3987|  80.4k|        }
 3988|       |
 3989|  80.4k|        m_integral_part_length = digits_count;
 3990|  80.4k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 1.22k, False: 79.2k]
  ------------------
 3991|  80.4k|                                             m_locale_options.decimal_point)) {
 3992|  1.22k|            it = *r;
 3993|  1.22k|        }
 3994|       |
 3995|  80.4k|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 1.02k, False: 79.4k]
  ------------------
 3996|  80.4k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|  1.02k|            digits_count += ranges::distance(it, *r);
 3998|  1.02k|            it = *r;
 3999|  1.02k|        }
 4000|       |
 4001|  80.4k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|  80.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 80.4k]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|  80.4k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|  80.4k|        return it;
 4010|  80.4k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3858|   180k|    {
 3859|   180k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 180k]
  |  |  |  Branch (1039:45): [True: 0, False: 180k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|   180k|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|   180k|        return read_while1_code_unit(
 3868|   180k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|   180k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   180k|        : m_fptr([](storage fn,
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|   180k|              if constexpr (std::is_void_v<R>) {
  746|   180k|                  obj(static_cast<decltype(args)>(args)...);
  747|   180k|              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
  752|   180k|          m_storage(std::addressof(f))
  753|   180k|    {
  754|   180k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   287k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   287k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   287k|              else {
  749|   287k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   287k|              }
  751|   287k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   287k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   287k|        else if constexpr (std::is_object_v<T>) {
  688|   287k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   287k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3868|   287k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   180k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   180k|        {
  662|   180k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3946|   328k|    {
 3947|   328k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 14.4k, False: 314k]
  ------------------
 3948|  14.4k|            auto beg_exp_it = range.begin();
 3949|  14.4k|            auto it = *r;
 3950|       |
 3951|  14.4k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 14.4k, False: 72]
  ------------------
 3952|  14.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  14.4k|                it = r_sign->first;
 3954|  14.4k|            }
 3955|       |
 3956|  14.4k|            if (auto r_exp = read_while1_code_unit(
 3957|  14.4k|                    ranges::subrange{it, range.end()},
 3958|  14.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  14.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.25k, False: 13.2k]
  |  |  ------------------
  ------------------
 3960|  1.25k|                it = beg_exp_it;
 3961|  1.25k|            }
 3962|  13.2k|            else {
 3963|  13.2k|                it = *r_exp;
 3964|  13.2k|            }
 3965|       |
 3966|  14.4k|            return it;
 3967|  14.4k|        }
 3968|   314k|        return range.begin();
 3969|   328k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  14.4k|        : m_fptr([](storage fn,
  743|  14.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.4k|              cvref<T> obj = *get<T>(fn);
  745|  14.4k|              if constexpr (std::is_void_v<R>) {
  746|  14.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.4k|              }
  748|  14.4k|              else {
  749|  14.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.4k|              }
  751|  14.4k|          }),
  752|  14.4k|          m_storage(std::addressof(f))
  753|  14.4k|    {
  754|  14.4k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  43.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.1k|              else {
  749|  43.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1k|              }
  751|  43.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  43.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.1k|        else if constexpr (std::is_object_v<T>) {
  688|  43.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.1k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3958|  43.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  14.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  14.4k|        {
  662|  14.4k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4015|   406k|    {
 4016|   406k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   406k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 333k, False: 72.5k]
  |  Branch (4017:50): [True: 21.9k, False: 311k]
  ------------------
 4018|       |
 4019|   406k|        auto it = ranges::begin(range);
 4020|   406k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   406k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   406k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 300k]
  |  |  ------------------
  ------------------
 4024|   105k|            return r.transform_error(
 4025|   105k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|   105k|                                              "Invalid floating-point value"));
 4027|   105k|        }
 4028|   300k|        else {
 4029|   300k|            digits_count += ranges::distance(it, *r);
 4030|   300k|            it = *r;
 4031|   300k|        }
 4032|       |
 4033|   300k|        m_integral_part_length = digits_count;
 4034|   300k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 5.44k, False: 295k]
  ------------------
 4035|   300k|                                             m_locale_options.decimal_point)) {
 4036|  5.44k|            it = *r;
 4037|  5.44k|        }
 4038|       |
 4039|   300k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 4.55k, False: 296k]
  ------------------
 4040|   300k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  4.55k|            digits_count += ranges::distance(it, *r);
 4042|  4.55k|            it = *r;
 4043|  4.55k|        }
 4044|       |
 4045|   300k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 300k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   300k|        auto beg_exp_it = it;
 4052|   300k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 248k, False: 52.2k]
  ------------------
 4053|   248k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|   248k|        }
 4055|   300k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 4.91k, False: 295k]
  |  Branch (4055:29): [True: 3.42k, False: 1.48k]
  ------------------
 4056|  3.42k|            return detail::unexpected_scan_error(
 4057|  3.42k|                scan_error::invalid_scanned_value,
 4058|  3.42k|                "No exponent given to scientific float");
 4059|  3.42k|        }
 4060|       |
 4061|   297k|        m_kind =
 4062|   297k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 284k, False: 13.0k]
  ------------------
 4063|       |
 4064|   297k|        return it;
 4065|   300k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3843|   706k|    {
 3844|   706k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 706k]
  |  |  |  Branch (1039:45): [True: 0, False: 706k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   706k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   706k|        return read_while1_code_unit(
 3853|   706k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   706k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   706k|        : m_fptr([](storage fn,
  743|   706k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   706k|              cvref<T> obj = *get<T>(fn);
  745|   706k|              if constexpr (std::is_void_v<R>) {
  746|   706k|                  obj(static_cast<decltype(args)>(args)...);
  747|   706k|              }
  748|   706k|              else {
  749|   706k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   706k|              }
  751|   706k|          }),
  752|   706k|          m_storage(std::addressof(f))
  753|   706k|    {
  754|   706k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.07M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3853|  1.07M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   706k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   706k|        {
  662|   706k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   377k|    {
 1676|   377k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   377k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  26.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  89.4k|        : m_fptr([](storage fn,
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|  89.4k|              if constexpr (std::is_void_v<R>) {
  746|  89.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.4k|              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
  752|  89.4k|          m_storage(std::addressof(f))
  753|  89.4k|    {
  754|  89.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.4k|        else if constexpr (std::is_object_v<T>) {
  688|  89.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  89.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  89.4k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3746|   415k|    {
 3747|   415k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 415k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   415k|        return read_source_impl(range);
 3753|   415k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  89.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.4k|        {
  662|  89.4k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   116k|    {
 4264|   116k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   116k|#if !SCN_DISABLE_LOCALE
 4267|   116k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 27.0k, False: 89.4k]
  ------------------
 4268|  27.0k|            return read_impl<Range>(
 4269|  27.0k|                range, rd,
 4270|  27.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  27.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  27.0k|                },
 4273|  27.0k|                value, loc);
 4274|  27.0k|        }
 4275|  89.4k|#endif
 4276|       |
 4277|  89.4k|        return read_impl<Range>(
 4278|  89.4k|            range, rd,
 4279|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  89.4k|                return r.read_source(SCN_FWD(args)...);
 4281|  89.4k|            },
 4282|  89.4k|            value);
 4283|   116k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   156k|    {
 4300|   156k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.9k, False: 137k]
  |  |  ------------------
  ------------------
 4302|  19.9k|            return unexpected(r.error());
 4303|  19.9k|        }
 4304|       |
 4305|   137k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   113k|        return ranges::next(range.begin(), n);
 4307|   137k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   506k|    {
  763|   506k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   506k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  27.0k|        : m_fptr([](storage fn,
  743|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.0k|              cvref<T> obj = *get<T>(fn);
  745|  27.0k|              if constexpr (std::is_void_v<R>) {
  746|  27.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.0k|              }
  748|  27.0k|              else {
  749|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.0k|              }
  751|  27.0k|          }),
  752|  27.0k|          m_storage(std::addressof(f))
  753|  27.0k|    {
  754|  27.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  27.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  27.0k|              else {
  749|  27.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.0k|              }
  751|  27.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  27.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  27.0k|        else if constexpr (std::is_object_v<T>) {
  688|  27.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  27.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  27.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  27.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  27.0k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|  91.2k|    {
 3761|  91.2k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|  91.2k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  91.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|  91.2k|        return read_source_impl(range);
 3767|  91.2k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|   506k|    {
 3787|   506k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   506k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 506k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   506k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   506k|        auto it = sign_result.first;
 3790|   506k|        m_sign = sign_result.second;
 3791|       |
 3792|   506k|        auto digits_begin = it;
 3793|   506k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|   506k|                      ranges::sized_range<Range>) {
 3796|   506k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 506k]
  |  |  |  Branch (1039:45): [True: 0, False: 506k]
  |  |  |  Branch (1039:45): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
 3797|   506k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|   506k|            else {
 3806|   506k|                auto cb = [&](const auto& rr)
 3807|   506k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   506k|                    auto res = read_all(rr);
 3809|   506k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|   506k|                        return detail::unexpected_scan_error(
 3811|   506k|                            scan_error::invalid_scanned_value,
 3812|   506k|                            "Invalid float value");
 3813|   506k|                    }
 3814|   506k|                    return res;
 3815|   506k|                };
 3816|   506k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   506k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   506k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 60.4k, False: 446k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  60.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  60.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  60.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  60.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  60.4k|    }                                                  \
  |  | 3957|   506k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|   446k|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|   506k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   446k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 446k, False: 0]
  |  Branch (3829:48): [True: 446k, False: 0]
  ------------------
 3830|   446k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 446k, False: 0]
  ------------------
 3831|   446k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 446k, False: 0]
  ------------------
 3832|   446k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   446k|        }
 3834|       |
 3835|   446k|        handle_separators();
 3836|       |
 3837|   446k|        return it;
 3838|   506k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|   506k|    {
 3881|   506k|        auto it = range.begin();
 3882|   506k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 506k, False: 0]
  ------------------
 3883|   506k|            return unexpected(r.error());
 3884|   506k|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|   506k|    {
 3904|   506k|        auto it = range.begin();
 3905|   506k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 506k, False: 0]
  ------------------
 3906|   506k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   506k|                scan_error::invalid_scanned_value,
 3908|   506k|                "Invalid floating-point NaN value"));
 3909|   506k|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|   327k|    {
 3874|   327k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   327k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   305k|{
 2128|   305k|    auto it = read_while_code_unit(range, pred);
 2129|   305k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 177k, False: 128k]
  ------------------
 2130|   177k|        return unexpected(parse_error::error);
 2131|   177k|    }
 2132|   128k|    return it;
 2133|   305k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3946|  69.6k|    {
 3947|  69.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 5.25k, False: 64.3k]
  ------------------
 3948|  5.25k|            auto beg_exp_it = range.begin();
 3949|  5.25k|            auto it = *r;
 3950|       |
 3951|  5.25k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 5.23k, False: 24]
  ------------------
 3952|  5.25k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  5.23k|                it = r_sign->first;
 3954|  5.23k|            }
 3955|       |
 3956|  5.25k|            if (auto r_exp = read_while1_code_unit(
 3957|  5.25k|                    ranges::subrange{it, range.end()},
 3958|  5.25k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  5.25k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 476, False: 4.77k]
  |  |  ------------------
  ------------------
 3960|    476|                it = beg_exp_it;
 3961|    476|            }
 3962|  4.77k|            else {
 3963|  4.77k|                it = *r_exp;
 3964|  4.77k|            }
 3965|       |
 3966|  5.25k|            return it;
 3967|  5.25k|        }
 3968|  64.3k|        return range.begin();
 3969|  69.6k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.25k|        : m_fptr([](storage fn,
  743|  5.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.25k|              cvref<T> obj = *get<T>(fn);
  745|  5.25k|              if constexpr (std::is_void_v<R>) {
  746|  5.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.25k|              }
  748|  5.25k|              else {
  749|  5.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.25k|              }
  751|  5.25k|          }),
  752|  5.25k|          m_storage(std::addressof(f))
  753|  5.25k|    {
  754|  5.25k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.2k|        else if constexpr (std::is_object_v<T>) {
  688|  15.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.2k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3958|  15.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.25k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.25k|        {
  662|  5.25k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|   178k|    {
 4016|   178k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   178k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 106k, False: 72.5k]
  |  Branch (4017:50): [True: 21.9k, False: 84.1k]
  ------------------
 4018|       |
 4019|   178k|        auto it = ranges::begin(range);
 4020|   178k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   178k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 56.9k, False: 121k]
  |  |  ------------------
  ------------------
 4024|  56.9k|            return r.transform_error(
 4025|  56.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  56.9k|                                              "Invalid floating-point value"));
 4027|  56.9k|        }
 4028|   121k|        else {
 4029|   121k|            digits_count += ranges::distance(it, *r);
 4030|   121k|            it = *r;
 4031|   121k|        }
 4032|       |
 4033|   121k|        m_integral_part_length = digits_count;
 4034|   121k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 2.49k, False: 119k]
  ------------------
 4035|   121k|                                             m_locale_options.decimal_point)) {
 4036|  2.49k|            it = *r;
 4037|  2.49k|        }
 4038|       |
 4039|   121k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 2.07k, False: 119k]
  ------------------
 4040|   121k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  2.07k|            digits_count += ranges::distance(it, *r);
 4042|  2.07k|            it = *r;
 4043|  2.07k|        }
 4044|       |
 4045|   121k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   121k|        auto beg_exp_it = it;
 4052|   121k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 69.6k, False: 52.2k]
  ------------------
 4053|  69.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|  69.6k|        }
 4055|   121k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 4.91k, False: 116k]
  |  Branch (4055:29): [True: 3.42k, False: 1.48k]
  ------------------
 4056|  3.42k|            return detail::unexpected_scan_error(
 4057|  3.42k|                scan_error::invalid_scanned_value,
 4058|  3.42k|                "No exponent given to scientific float");
 4059|  3.42k|        }
 4060|       |
 4061|   118k|        m_kind =
 4062|   118k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 113k, False: 4.77k]
  ------------------
 4063|       |
 4064|   118k|        return it;
 4065|   121k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|   300k|    {
 3844|   300k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 300k]
  |  |  |  Branch (1039:45): [True: 0, False: 300k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   300k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   300k|        return read_while1_code_unit(
 3853|   300k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   300k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   300k|        : m_fptr([](storage fn,
  743|   300k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   300k|              cvref<T> obj = *get<T>(fn);
  745|   300k|              if constexpr (std::is_void_v<R>) {
  746|   300k|                  obj(static_cast<decltype(args)>(args)...);
  747|   300k|              }
  748|   300k|              else {
  749|   300k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   300k|              }
  751|   300k|          }),
  752|   300k|          m_storage(std::addressof(f))
  753|   300k|    {
  754|   300k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   452k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   452k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   452k|              else {
  749|   452k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   452k|              }
  751|   452k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   452k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   452k|        else if constexpr (std::is_object_v<T>) {
  688|   452k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   452k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3853|   452k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   300k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   300k|        {
  662|   300k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|   506k|    {
 4073|   506k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   506k|        const bool allowed_nonhex =
 4075|   506k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   506k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   506k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 506k, False: 0]
  |  Branch (4078:45): [True: 0, False: 506k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   506k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 506k]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|   506k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 506k, False: 0]
  |  Branch (4087:45): [True: 0, False: 506k]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|   506k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 506k]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|   506k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 327k, False: 178k]
  |  Branch (4094:28): [True: 99.9k, False: 228k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|  99.9k|            auto it = range.begin();
 4098|       |
 4099|  99.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 204, False: 99.7k]
  ------------------
 4100|    204|                m_kind = float_kind::hex_with_prefix;
 4101|    204|                it = *r;
 4102|    204|            }
 4103|  99.7k|            else {
 4104|  99.7k|                m_kind = float_kind::hex_without_prefix;
 4105|  99.7k|            }
 4106|       |
 4107|  99.9k|            return read_hex(ranges::subrange{it, range.end()});
 4108|  99.9k|        }
 4109|   406k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 178k, False: 228k]
  |  Branch (4109:29): [True: 178k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   178k|            m_kind = float_kind::generic;
 4113|   178k|            return read_regular_float(range);
 4114|   178k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   228k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 470, False: 227k]
  |  |  ------------------
  ------------------
 4120|    470|            m_kind = float_kind::hex_with_prefix;
 4121|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4122|    470|        }
 4123|       |
 4124|   227k|        m_kind = float_kind::generic;
 4125|   227k|        return read_regular(range);
 4126|   228k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|   327k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   327k|                    auto res = read_all(rr);
 3809|   327k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 155, False: 327k]
  |  |  ------------------
  ------------------
 3810|    155|                        return detail::unexpected_scan_error(
 3811|    155|                            scan_error::invalid_scanned_value,
 3812|    155|                            "Invalid float value");
 3813|    155|                    }
 3814|   327k|                    return res;
 3815|   327k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   327k|{
 1938|   327k|    return ranges::next(range.begin(), range.end());
 1939|   327k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   327k|    {
  313|   327k|        ranges::advance(x, bound);
  314|   327k|        return x;
  315|   327k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   327k|    {
  275|   327k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   327k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   446k|    {
 1676|   446k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   446k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   446k|    {
 1720|   446k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   446k|                      ranges::sized_range<Range>) {
 1725|   446k|            m_storage.reset();
 1726|   446k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   446k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  27.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  27.0k|        {
  662|  27.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  89.4k|        : m_fptr([](storage fn,
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|  89.4k|              if constexpr (std::is_void_v<R>) {
  746|  89.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.4k|              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
  752|  89.4k|          m_storage(std::addressof(f))
  753|  89.4k|    {
  754|  89.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  89.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.4k|              else {
  749|  89.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.4k|              }
  751|  89.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.4k|        else if constexpr (std::is_object_v<T>) {
  688|  89.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  89.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  89.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  89.4k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|   415k|    {
 3747|   415k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 415k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   415k|        return read_source_impl(range);
 3753|   415k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.4k|        {
  662|  89.4k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   126k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   126k|            auto rd = make_reader<T, char_type>();
 6306|   126k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   126k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   126k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 126k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   126k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   126k|                return impl(rd, range, value);
 6311|   126k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   126k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   126k|    {
 6231|   126k|        const bool need_skipped_width =
 6232|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 126k]
  |  Branch (6232:33): [True: 0, False: 126k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   126k|        auto it = rng.begin();
 6236|   126k|        std::ptrdiff_t prefix_width = 0;
 6237|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 126k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   126k|        else {
 6245|   126k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 988, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    988|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   125k|            std::tie(it, prefix_width) = prefix_result;
 6247|   125k|        }
 6248|   125k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   125k|        std::ptrdiff_t value_width = 0;
 6252|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 125k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   125k|        else {
 6268|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.7k, False: 91.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.7k|    }                                                  \
  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  91.7k|                                             specs, value, loc));
 6270|       |
 6271|  91.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 91.7k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  91.7k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  91.7k|        std::ptrdiff_t postfix_width = 0;
 6280|  91.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 91.2k, False: 452]
  ------------------
 6281|  91.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  91.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  91.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  91.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  91.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  91.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  91.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  91.2k|                                 value_width));
 6285|  91.2k|            std::tie(it, postfix_width) = postfix_result;
 6286|  91.2k|        }
 6287|       |
 6288|  91.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  91.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 91.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  91.7k|            specs, prefix_width, value_width, postfix_width));
 6290|  91.7k|        return it;
 6291|  91.7k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|   282k|    {
 3773|   282k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   282k|        const std::ptrdiff_t sign_len =
 3776|   282k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.79k, False: 280k]
  ------------------
 3777|       |
 3778|   282k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.4k, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.4k|    }                                                  \
  |  |  |  | 3957|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   257k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   282k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   125k|    {
 4264|   125k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   125k|#if !SCN_DISABLE_LOCALE
 4267|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 31.4k, False: 93.9k]
  ------------------
 4268|  31.4k|            return read_impl<Range>(
 4269|  31.4k|                range, rd,
 4270|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  31.4k|                },
 4273|  31.4k|                value, loc);
 4274|  31.4k|        }
 4275|  93.9k|#endif
 4276|       |
 4277|  93.9k|        return read_impl<Range>(
 4278|  93.9k|            range, rd,
 4279|  93.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.9k|                return r.read_source(SCN_FWD(args)...);
 4281|  93.9k|            },
 4282|  93.9k|            value);
 4283|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   172k|    {
 4300|   172k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42.9k, False: 129k]
  |  |  ------------------
  ------------------
 4302|  42.9k|            return unexpected(r.error());
 4303|  42.9k|        }
 4304|       |
 4305|   129k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 867, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    867|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    867|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    867|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    867|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    867|    }                                                  \
  |  |  |  | 3957|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   128k|        return ranges::next(range.begin(), n);
 4307|   129k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.4k|        : m_fptr([](storage fn,
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|  31.4k|              if constexpr (std::is_void_v<R>) {
  746|  31.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.4k|              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
  752|  31.4k|          m_storage(std::addressof(f))
  753|  31.4k|    {
  754|  31.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.4k|              else {
  749|  31.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.4k|              }
  751|  31.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.4k|        else if constexpr (std::is_object_v<T>) {
  688|  31.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  31.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  31.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  31.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.4k|        {
  662|  31.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  93.9k|        : m_fptr([](storage fn,
  743|  93.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.9k|              cvref<T> obj = *get<T>(fn);
  745|  93.9k|              if constexpr (std::is_void_v<R>) {
  746|  93.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.9k|              }
  748|  93.9k|              else {
  749|  93.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.9k|              }
  751|  93.9k|          }),
  752|  93.9k|          m_storage(std::addressof(f))
  753|  93.9k|    {
  754|  93.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  93.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.9k|              else {
  749|  93.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.9k|              }
  751|  93.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.9k|        else if constexpr (std::is_object_v<T>) {
  688|  93.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  93.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  93.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  93.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.9k|        {
  662|  93.9k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   125k|    {
 4264|   125k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   125k|#if !SCN_DISABLE_LOCALE
 4267|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 31.5k, False: 93.9k]
  ------------------
 4268|  31.5k|            return read_impl<Range>(
 4269|  31.5k|                range, rd,
 4270|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  31.5k|                },
 4273|  31.5k|                value, loc);
 4274|  31.5k|        }
 4275|  93.9k|#endif
 4276|       |
 4277|  93.9k|        return read_impl<Range>(
 4278|  93.9k|            range, rd,
 4279|  93.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.9k|                return r.read_source(SCN_FWD(args)...);
 4281|  93.9k|            },
 4282|  93.9k|            value);
 4283|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   172k|    {
 4300|   172k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   172k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.1k, False: 152k]
  |  |  ------------------
  ------------------
 4302|  20.1k|            return unexpected(r.error());
 4303|  20.1k|        }
 4304|       |
 4305|   152k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.6k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.6k|    }                                                  \
  |  |  |  | 3957|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   128k|        return ranges::next(range.begin(), n);
 4307|   152k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.5k|        : m_fptr([](storage fn,
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|  31.5k|              if constexpr (std::is_void_v<R>) {
  746|  31.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.5k|              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
  752|  31.5k|          m_storage(std::addressof(f))
  753|  31.5k|    {
  754|  31.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.5k|              else {
  749|  31.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.5k|              }
  751|  31.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.5k|        else if constexpr (std::is_object_v<T>) {
  688|  31.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  31.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  31.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  31.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.5k|        {
  662|  31.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  93.9k|        : m_fptr([](storage fn,
  743|  93.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.9k|              cvref<T> obj = *get<T>(fn);
  745|  93.9k|              if constexpr (std::is_void_v<R>) {
  746|  93.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.9k|              }
  748|  93.9k|              else {
  749|  93.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.9k|              }
  751|  93.9k|          }),
  752|  93.9k|          m_storage(std::addressof(f))
  753|  93.9k|    {
  754|  93.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  93.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.9k|              else {
  749|  93.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.9k|              }
  751|  93.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.9k|        else if constexpr (std::is_object_v<T>) {
  688|  93.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  93.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  93.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.9k|        {
  662|  93.9k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   128k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   128k|            auto rd = make_reader<T, char_type>();
 6306|   128k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   128k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 128k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   128k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   128k|                return impl(rd, range, value);
 6311|   128k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   128k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   128k|    {
 6231|   128k|        const bool need_skipped_width =
 6232|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 128k]
  |  Branch (6232:33): [True: 0, False: 128k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   128k|        auto it = rng.begin();
 6236|   128k|        std::ptrdiff_t prefix_width = 0;
 6237|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 128k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   128k|        else {
 6245|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.04k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.04k|    }                                                  \
  |  |  |  | 3957|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   127k|            std::tie(it, prefix_width) = prefix_result;
 6247|   127k|        }
 6248|   127k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   127k|        std::ptrdiff_t value_width = 0;
 6252|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 127k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   127k|        else {
 6268|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.6k, False: 94.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.6k|    }                                                  \
  |  | 3957|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  94.2k|                                             specs, value, loc));
 6270|       |
 6271|  94.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 94.2k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  94.2k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  94.2k|        std::ptrdiff_t postfix_width = 0;
 6280|  94.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 93.7k, False: 484]
  ------------------
 6281|  93.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  93.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  93.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  93.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 93.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  93.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  93.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  93.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  93.7k|                                 value_width));
 6285|  93.7k|            std::tie(it, postfix_width) = postfix_result;
 6286|  93.7k|        }
 6287|       |
 6288|  94.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  94.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  94.2k|            specs, prefix_width, value_width, postfix_width));
 6290|  94.2k|        return it;
 6291|  94.2k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3772|   289k|    {
 3773|   289k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   289k|        const std::ptrdiff_t sign_len =
 3776|   289k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.83k, False: 288k]
  ------------------
 3777|       |
 3778|   289k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   289k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.4k, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.4k|    }                                                  \
  |  |  |  | 3957|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   266k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   289k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   127k|    {
 4264|   127k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   127k|#if !SCN_DISABLE_LOCALE
 4267|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 32.6k, False: 95.2k]
  ------------------
 4268|  32.6k|            return read_impl<Range>(
 4269|  32.6k|                range, rd,
 4270|  32.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  32.6k|                },
 4273|  32.6k|                value, loc);
 4274|  32.6k|        }
 4275|  95.2k|#endif
 4276|       |
 4277|  95.2k|        return read_impl<Range>(
 4278|  95.2k|            range, rd,
 4279|  95.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  95.2k|                return r.read_source(SCN_FWD(args)...);
 4281|  95.2k|            },
 4282|  95.2k|            value);
 4283|   127k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   176k|    {
 4300|   176k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   176k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.5k, False: 133k]
  |  |  ------------------
  ------------------
 4302|  43.5k|            return unexpected(r.error());
 4303|  43.5k|        }
 4304|       |
 4305|   133k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   133k|        return ranges::next(range.begin(), n);
 4307|   133k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  32.6k|        : m_fptr([](storage fn,
  743|  32.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.6k|              cvref<T> obj = *get<T>(fn);
  745|  32.6k|              if constexpr (std::is_void_v<R>) {
  746|  32.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.6k|              }
  748|  32.6k|              else {
  749|  32.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.6k|              }
  751|  32.6k|          }),
  752|  32.6k|          m_storage(std::addressof(f))
  753|  32.6k|    {
  754|  32.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  32.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.6k|              else {
  749|  32.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.6k|              }
  751|  32.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.6k|        else if constexpr (std::is_object_v<T>) {
  688|  32.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  32.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  32.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  32.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.6k|        {
  662|  32.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  95.2k|        : m_fptr([](storage fn,
  743|  95.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.2k|              cvref<T> obj = *get<T>(fn);
  745|  95.2k|              if constexpr (std::is_void_v<R>) {
  746|  95.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.2k|              }
  748|  95.2k|              else {
  749|  95.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.2k|              }
  751|  95.2k|          }),
  752|  95.2k|          m_storage(std::addressof(f))
  753|  95.2k|    {
  754|  95.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  95.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  95.2k|              else {
  749|  95.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.2k|              }
  751|  95.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  95.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  95.2k|        else if constexpr (std::is_object_v<T>) {
  688|  95.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  95.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  95.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  95.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  95.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  95.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.2k|        {
  662|  95.2k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   127k|    {
 4264|   127k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   127k|#if !SCN_DISABLE_LOCALE
 4267|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 32.6k, False: 95.2k]
  ------------------
 4268|  32.6k|            return read_impl<Range>(
 4269|  32.6k|                range, rd,
 4270|  32.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  32.6k|                },
 4273|  32.6k|                value, loc);
 4274|  32.6k|        }
 4275|  95.2k|#endif
 4276|       |
 4277|  95.2k|        return read_impl<Range>(
 4278|  95.2k|            range, rd,
 4279|  95.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  95.2k|                return r.read_source(SCN_FWD(args)...);
 4281|  95.2k|            },
 4282|  95.2k|            value);
 4283|   127k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   176k|    {
 4300|   176k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   176k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.3k, False: 156k]
  |  |  ------------------
  ------------------
 4302|  20.3k|            return unexpected(r.error());
 4303|  20.3k|        }
 4304|       |
 4305|   156k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.3k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.3k|    }                                                  \
  |  |  |  | 3957|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   133k|        return ranges::next(range.begin(), n);
 4307|   156k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  32.6k|        : m_fptr([](storage fn,
  743|  32.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.6k|              cvref<T> obj = *get<T>(fn);
  745|  32.6k|              if constexpr (std::is_void_v<R>) {
  746|  32.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.6k|              }
  748|  32.6k|              else {
  749|  32.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.6k|              }
  751|  32.6k|          }),
  752|  32.6k|          m_storage(std::addressof(f))
  753|  32.6k|    {
  754|  32.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  32.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.6k|              else {
  749|  32.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.6k|              }
  751|  32.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.6k|        else if constexpr (std::is_object_v<T>) {
  688|  32.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  32.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  32.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  32.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.6k|        {
  662|  32.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  95.2k|        : m_fptr([](storage fn,
  743|  95.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.2k|              cvref<T> obj = *get<T>(fn);
  745|  95.2k|              if constexpr (std::is_void_v<R>) {
  746|  95.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.2k|              }
  748|  95.2k|              else {
  749|  95.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.2k|              }
  751|  95.2k|          }),
  752|  95.2k|          m_storage(std::addressof(f))
  753|  95.2k|    {
  754|  95.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  95.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  95.2k|              else {
  749|  95.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.2k|              }
  751|  95.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  95.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  95.2k|        else if constexpr (std::is_object_v<T>) {
  688|  95.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  95.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  95.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  95.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  95.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  95.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.2k|        {
  662|  95.2k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   509k|{
 2193|   509k|    auto it = range.begin();
 2194|   898k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 894k, False: 3.45k]
  ------------------
 2195|   894k|        const auto val =
 2196|   894k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   894k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   894k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 894k, False: 0]
  |  |  ------------------
  ------------------
 2198|   894k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   894k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   894k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 506k, False: 388k]
  ------------------
 2201|   506k|                return it;
 2202|   506k|            }
 2203|   894k|        }
 2204|   388k|        it = val.iterator;
 2205|   388k|    }
 2206|       |
 2207|  3.45k|    return it;
 2208|   509k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   894k|{
 1998|   894k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   894k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   894k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   894k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   894k|    auto it = range.begin();
 2002|   894k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   894k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   894k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 894k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   894k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 894k, False: 0]
  ------------------
 2011|   894k|        ++it;
 2012|   894k|        return {it, string_type(1, *range.begin())};
 2013|   894k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   894k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   894k|    {
 1989|   894k|        return !codepoint.empty();
 1990|   894k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   509k|{
 2214|   509k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   509k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   509k|{
 3098|   509k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 509k, False: 0]
  ------------------
 3099|   509k|        auto it = read_while_classic_space(range);
 3100|   509k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   509k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.45k, False: 506k]
  |  |  ------------------
  ------------------
 3102|  3.45k|            return unexpected(e);
 3103|  3.45k|        }
 3104|       |
 3105|   506k|        return it;
 3106|   509k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   509k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   509k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   509k|    else {
 2258|   509k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   509k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   509k|            return detail::is_cp_space(cp);
 2271|   509k|        });
 2272|   509k|    }
 2273|   509k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   509k|        : m_fptr([](storage fn,
  743|   509k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   509k|              cvref<T> obj = *get<T>(fn);
  745|   509k|              if constexpr (std::is_void_v<R>) {
  746|   509k|                  obj(static_cast<decltype(args)>(args)...);
  747|   509k|              }
  748|   509k|              else {
  749|   509k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   509k|              }
  751|   509k|          }),
  752|   509k|          m_storage(std::addressof(f))
  753|   509k|    {
  754|   509k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   894k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   894k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   894k|              else {
  749|   894k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   894k|              }
  751|   894k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   894k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   894k|        else if constexpr (std::is_object_v<T>) {
  688|   894k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   894k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   894k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   894k|            return detail::is_cp_space(cp);
 2271|   894k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   509k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   509k|        {
  662|   509k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3618|  12.0k|    {
 3619|  12.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  12.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  12.0k|        return read_default_with_base(range, value, 10);
 3621|  12.0k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3582|  12.0k|    {
 3583|  12.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.73k, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.73k|    }                                                  \
  |  |  |  | 3957|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  10.2k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  10.2k|        if constexpr (!std::is_signed_v<T>) {
 3587|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 0, False: 10.2k]
  ------------------
 3588|      0|                return detail::unexpected_scan_error(
 3589|      0|                    scan_error::invalid_scanned_value,
 3590|      0|                    "Unexpected '-' sign when parsing an "
 3591|      0|                    "unsigned value");
 3592|      0|            }
 3593|  10.2k|        }
 3594|       |
 3595|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 10.2k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  20.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  20.5k|                parse_integer_digits_without_thsep(
 3602|  20.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  20.5k|                    prefix_result.parsed_base));
 3604|       |
 3605|  20.5k|        auto buf = make_contiguous_buffer(
 3606|  20.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  20.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.16k, False: 9.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.16k|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  9.11k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  9.11k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  9.11k|        return ranges::next(prefix_result.iterator,
 3612|  9.11k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  20.5k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3408|  12.0k|{
 3409|  12.0k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.73k, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.73k|    }                                                  \
  |  |  |  | 3957|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  10.2k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  10.2k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  10.2k|        parse_integer_base_prefix(
 3414|  10.2k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  10.2k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 10.2k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  10.2k|    else {
 3426|  10.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 10.2k]
  ------------------
 3427|  10.2k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 96, False: 10.1k]
  ------------------
 3428|     96|            digits_begin_it = base_prefix_begin_it;
 3429|     96|        }
 3430|  10.2k|    }
 3431|       |
 3432|  10.2k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 10.2k, False: 0]
  ------------------
 3433|  10.2k|        sign = sign_type::plus_sign;
 3434|  10.2k|    }
 3435|  10.2k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  10.2k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  12.0k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3289|  12.0k|{
 3290|  12.0k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  12.0k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 12.0k, False: 0]
  ------------------
 3292|  12.0k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 10.2k, False: 1.73k]
  ------------------
 3293|  10.2k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  10.2k|        }
 3295|  1.73k|        return unexpected(eof_error::eof);
 3296|  12.0k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2404|  12.0k|{
 2405|  12.0k|    auto it = read_code_unit(range);
 2406|  12.0k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.73k, False: 10.2k]
  |  |  ------------------
  ------------------
 2407|  1.73k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.73k|    }
 2409|       |
 2410|  20.5k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 20.5k, False: 10.2k]
  ------------------
 2411|  20.5k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 20.5k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  20.5k|    }
 2415|       |
 2416|  10.2k|    return unexpected(parse_error::error);
 2417|  10.2k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  12.0k|{
 1945|  12.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.73k, False: 10.2k]
  |  |  ------------------
  ------------------
 1946|  1.73k|        return unexpected(e);
 1947|  1.73k|    }
 1948|       |
 1949|  10.2k|    return ranges::next(range.begin());
 1950|  12.0k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  12.0k|{
  951|  12.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.73k, False: 10.2k]
  |  |  ------------------
  ------------------
  952|  1.73k|        return eof_error::eof;
  953|  1.73k|    }
  954|  10.2k|    return eof_error::good;
  955|  12.0k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  12.0k|{
  945|  12.0k|    return is_range_eof(r.begin(), r.end());
  946|  12.0k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   931k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|   931k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|   931k|        auto buf = make_contiguous_buffer(range);
 2224|   931k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|   931k|        return ranges::next(range.begin(),
 2226|   931k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|   931k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   931k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   931k|                  ranges::sized_range<Range>) {
 1785|   931k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   931k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   931k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   931k|    {
 1589|   931k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   931k|    {
 1676|   931k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   931k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   931k|    {
 1720|   931k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   931k|                                          std::basic_string<CharT>>) {
 1730|   931k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   931k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   931k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   931k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4172|   339k|    {
 4173|   339k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 36.9k, False: 302k]
  ------------------
 4174|  36.9k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  36.9k|        }
 4176|   302k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   339k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   737k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   737k|    else {
 2229|   737k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   737k|        return read_until_code_point(
 2241|   737k|            ranges::subrange{it, range.end()},
 2242|   737k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   737k|    }
 2244|   737k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   737k|        : m_fptr([](storage fn,
  743|   737k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   737k|              cvref<T> obj = *get<T>(fn);
  745|   737k|              if constexpr (std::is_void_v<R>) {
  746|   737k|                  obj(static_cast<decltype(args)>(args)...);
  747|   737k|              }
  748|   737k|              else {
  749|   737k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   737k|              }
  751|   737k|          }),
  752|   737k|          m_storage(std::addressof(f))
  753|   737k|    {
  754|   737k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.29M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.29M|        else if constexpr (std::is_object_v<T>) {
  688|  1.29M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.29M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  1.29M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   737k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   737k|        {
  662|   737k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   737k|    {
 1676|   737k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   737k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   737k|    {
 1720|   737k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   737k|                                          std::basic_string<CharT>>) {
 1730|   737k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   737k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   737k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4172|   226k|    {
 4173|   226k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 960, False: 225k]
  ------------------
 4174|    960|            return std::copysign(value, static_cast<T>(-1.0));
 4175|    960|        }
 4176|   225k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   226k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4172|   355k|    {
 4173|   355k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 39.5k, False: 315k]
  ------------------
 4174|  39.5k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  39.5k|        }
 4176|   315k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   355k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4172|   257k|    {
 4173|   257k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 1.00k, False: 256k]
  ------------------
 4174|  1.00k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  1.00k|        }
 4176|   256k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   257k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4172|   363k|    {
 4173|   363k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 42.1k, False: 321k]
  ------------------
 4174|  42.1k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  42.1k|        }
 4176|   321k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   363k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4172|   266k|    {
 4173|   266k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 1.10k, False: 265k]
  ------------------
 4174|  1.10k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  1.10k|        }
 4176|   265k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   266k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   166k|{
 5892|   166k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.81k, False: 164k]
  |  |  ------------------
  ------------------
 5893|  1.81k|        return unexpected(e);
 5894|  1.81k|    }
 5895|       |
 5896|   164k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 164k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   164k|    return skip_classic_whitespace(range);
 5901|   164k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5979|  53.0k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  53.0k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  53.0k|            auto rd = make_reader<T, char_type>();
 5985|  53.0k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  53.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  53.0k|    {
 5972|  53.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 615, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    615|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    615|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    615|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    615|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    615|    }                                                  \
  |  |  |  | 3957|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  52.3k|                        .transform_error(make_eof_scan_error));
 5974|  52.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  53.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  52.3k|    {
 4246|  52.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  52.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  52.3k|        float_reader<CharT> rd{};
 4249|  52.3k|        return read_impl<Range>(
 4250|  52.3k|            range, rd,
 4251|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  52.3k|                return r.read_source(SCN_FWD(args)...);
 4253|  52.3k|            },
 4254|  52.3k|            value);
 4255|  52.3k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3739|   330k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3725|   603k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  52.3k|        : m_fptr([](storage fn,
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|  52.3k|              if constexpr (std::is_void_v<R>) {
  746|  52.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.3k|              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
  752|  52.3k|          m_storage(std::addressof(f))
  753|  52.3k|    {
  754|  52.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  52.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.3k|              else {
  749|  52.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.3k|              }
  751|  52.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  52.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.3k|        else if constexpr (std::is_object_v<T>) {
  688|  52.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  52.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  52.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  52.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  52.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.3k|        {
  662|  52.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|  55.6k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  55.6k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  55.6k|            auto rd = make_reader<T, char_type>();
 5985|  55.6k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  55.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  55.6k|    {
 5972|  55.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 726, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    726|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    726|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    726|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    726|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    726|    }                                                  \
  |  |  |  | 3957|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  54.9k|                        .transform_error(make_eof_scan_error));
 5974|  54.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  55.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  54.9k|    {
 4246|  54.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  54.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  54.9k|        float_reader<CharT> rd{};
 4249|  54.9k|        return read_impl<Range>(
 4250|  54.9k|            range, rd,
 4251|  54.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  54.9k|                return r.read_source(SCN_FWD(args)...);
 4253|  54.9k|            },
 4254|  54.9k|            value);
 4255|  54.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  54.9k|        : m_fptr([](storage fn,
  743|  54.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.9k|              cvref<T> obj = *get<T>(fn);
  745|  54.9k|              if constexpr (std::is_void_v<R>) {
  746|  54.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.9k|              }
  748|  54.9k|              else {
  749|  54.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.9k|              }
  751|  54.9k|          }),
  752|  54.9k|          m_storage(std::addressof(f))
  753|  54.9k|    {
  754|  54.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  54.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.9k|              else {
  749|  54.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.9k|              }
  751|  54.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  54.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.9k|        else if constexpr (std::is_object_v<T>) {
  688|  54.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  54.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  54.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  54.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  54.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.9k|        {
  662|  54.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5979|  57.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  57.5k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  57.5k|            auto rd = make_reader<T, char_type>();
 5985|  57.5k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  57.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  57.5k|    {
 5972|  57.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 825, False: 56.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    825|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    825|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    825|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    825|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    825|    }                                                  \
  |  |  |  | 3957|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  56.7k|                        .transform_error(make_eof_scan_error));
 5974|  56.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  57.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  56.7k|    {
 4246|  56.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  56.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  56.7k|        float_reader<CharT> rd{};
 4249|  56.7k|        return read_impl<Range>(
 4250|  56.7k|            range, rd,
 4251|  56.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  56.7k|                return r.read_source(SCN_FWD(args)...);
 4253|  56.7k|            },
 4254|  56.7k|            value);
 4255|  56.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  56.7k|        : m_fptr([](storage fn,
  743|  56.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.7k|              cvref<T> obj = *get<T>(fn);
  745|  56.7k|              if constexpr (std::is_void_v<R>) {
  746|  56.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.7k|              }
  748|  56.7k|              else {
  749|  56.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.7k|              }
  751|  56.7k|          }),
  752|  56.7k|          m_storage(std::addressof(f))
  753|  56.7k|    {
  754|  56.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  56.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  56.7k|              else {
  749|  56.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.7k|              }
  751|  56.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  56.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  56.7k|        else if constexpr (std::is_object_v<T>) {
  688|  56.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  56.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  56.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  56.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  56.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  56.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  56.7k|        {
  662|  56.7k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|   168k|{
 5892|   168k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.87k, False: 166k]
  |  |  ------------------
  ------------------
 5893|  1.87k|        return unexpected(e);
 5894|  1.87k|    }
 5895|       |
 5896|   166k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 166k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   166k|    return skip_classic_whitespace(range);
 5901|   166k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  53.9k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  53.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  53.9k|            auto rd = make_reader<T, char_type>();
 5989|  53.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 53.9k, False: 0]
  ------------------
 5990|  53.9k|                return impl(rd, range, value);
 5991|  53.9k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  53.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  53.9k|    {
 5972|  53.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  53.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 651, False: 53.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    651|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    651|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    651|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    651|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    651|    }                                                  \
  |  |  |  | 3957|  53.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  53.3k|                        .transform_error(make_eof_scan_error));
 5974|  53.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  53.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  53.3k|    {
 4246|  53.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  53.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  53.3k|        float_reader<CharT> rd{};
 4249|  53.3k|        return read_impl<Range>(
 4250|  53.3k|            range, rd,
 4251|  53.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.3k|                return r.read_source(SCN_FWD(args)...);
 4253|  53.3k|            },
 4254|  53.3k|            value);
 4255|  53.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  53.3k|        : m_fptr([](storage fn,
  743|  53.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.3k|              cvref<T> obj = *get<T>(fn);
  745|  53.3k|              if constexpr (std::is_void_v<R>) {
  746|  53.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.3k|              }
  748|  53.3k|              else {
  749|  53.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.3k|              }
  751|  53.3k|          }),
  752|  53.3k|          m_storage(std::addressof(f))
  753|  53.3k|    {
  754|  53.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  53.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.3k|              else {
  749|  53.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.3k|              }
  751|  53.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  53.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.3k|        else if constexpr (std::is_object_v<T>) {
  688|  53.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  53.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  53.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.3k|        {
  662|  53.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  56.4k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  56.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  56.4k|            auto rd = make_reader<T, char_type>();
 5989|  56.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 56.4k, False: 0]
  ------------------
 5990|  56.4k|                return impl(rd, range, value);
 5991|  56.4k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  56.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  56.4k|    {
 5972|  56.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  56.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  56.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  56.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 759, False: 55.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    759|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    759|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    759|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    759|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    759|    }                                                  \
  |  |  |  | 3957|  56.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  55.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  55.7k|                        .transform_error(make_eof_scan_error));
 5974|  55.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  56.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  55.7k|    {
 4246|  55.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  55.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  55.7k|        float_reader<CharT> rd{};
 4249|  55.7k|        return read_impl<Range>(
 4250|  55.7k|            range, rd,
 4251|  55.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  55.7k|                return r.read_source(SCN_FWD(args)...);
 4253|  55.7k|            },
 4254|  55.7k|            value);
 4255|  55.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  55.7k|        : m_fptr([](storage fn,
  743|  55.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.7k|              cvref<T> obj = *get<T>(fn);
  745|  55.7k|              if constexpr (std::is_void_v<R>) {
  746|  55.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.7k|              }
  748|  55.7k|              else {
  749|  55.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.7k|              }
  751|  55.7k|          }),
  752|  55.7k|          m_storage(std::addressof(f))
  753|  55.7k|    {
  754|  55.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  55.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.7k|              else {
  749|  55.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.7k|              }
  751|  55.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  55.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.7k|        else if constexpr (std::is_object_v<T>) {
  688|  55.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  55.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  55.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  55.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  55.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.7k|        {
  662|  55.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  57.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  57.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  57.7k|            auto rd = make_reader<T, char_type>();
 5989|  57.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 57.7k, False: 0]
  ------------------
 5990|  57.7k|                return impl(rd, range, value);
 5991|  57.7k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  57.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  57.7k|    {
 5972|  57.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  57.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 849, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    849|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    849|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    849|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    849|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    849|    }                                                  \
  |  |  |  | 3957|  57.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  56.9k|                        .transform_error(make_eof_scan_error));
 5974|  56.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  57.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  56.9k|    {
 4246|  56.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  56.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  56.9k|        float_reader<CharT> rd{};
 4249|  56.9k|        return read_impl<Range>(
 4250|  56.9k|            range, rd,
 4251|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  56.9k|                return r.read_source(SCN_FWD(args)...);
 4253|  56.9k|            },
 4254|  56.9k|            value);
 4255|  56.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  56.9k|        : m_fptr([](storage fn,
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|  56.9k|              if constexpr (std::is_void_v<R>) {
  746|  56.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.9k|              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
  752|  56.9k|          m_storage(std::addressof(f))
  753|  56.9k|    {
  754|  56.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  56.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  56.9k|        else if constexpr (std::is_object_v<T>) {
  688|  56.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  56.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  56.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  56.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  56.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  56.9k|        {
  662|  56.9k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|   409k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   409k|    static_cast<    \
  |  | 1109|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   409k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   409k|          m_current(m_range.begin())
 3020|   409k|    {
 3021|   409k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   767k|    {
 3030|   767k|        return m_range.end();
 3031|   767k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|   357k|    {
 3045|   357k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   357k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   357k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 357k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   357k|        }
 3051|   357k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   357k|    static_cast<    \
  |  | 1109|   357k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   357k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   409k|    {
 3035|   409k|        return ranges::subrange{begin(), end()};
 3036|   409k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   409k|    {
 6144|   409k|        const bool need_skipped_width =
 6145|   409k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 409k]
  |  Branch (6145:33): [True: 0, False: 409k]
  ------------------
 6146|   409k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   409k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 409k]
  ------------------
 6150|   409k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 409k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   409k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 409k, False: 0]
  |  Branch (6154:56): [True: 409k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   409k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 409k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   813k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   409k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   409k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   409k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.77k, False: 403k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.77k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.77k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.77k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.77k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.77k|    }                                                  \
  |  |  |  | 3957|   409k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   813k|                            make_eof_scan_error));
 6165|       |
 6166|   813k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 403k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   403k|            return result_type{it, 0};
 6174|   813k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   409k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   352k|    {
 6186|   352k|        const bool need_skipped_width =
 6187|   352k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 352k]
  |  Branch (6187:33): [True: 0, False: 352k]
  ------------------
 6188|   352k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   352k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 352k]
  ------------------
 6191|   352k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 352k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   352k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 352k, False: 0]
  ------------------
 6200|   352k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 352k]
  ------------------
 6201|   352k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   352k|        return result_type{rng.begin(), 0};
 6225|   352k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6295|   132k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   132k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   132k|            auto rd = make_reader<T, char_type>();
 6301|   132k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   132k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 132k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   132k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   132k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   132k|    {
 6231|   132k|        const bool need_skipped_width =
 6232|   132k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 132k]
  |  Branch (6232:33): [True: 0, False: 132k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   132k|        auto it = rng.begin();
 6236|   132k|        std::ptrdiff_t prefix_width = 0;
 6237|   132k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 132k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   132k|        else {
 6245|   132k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.73k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.73k|    }                                                  \
  |  |  |  | 3957|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   131k|            std::tie(it, prefix_width) = prefix_result;
 6247|   131k|        }
 6248|   131k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   131k|        std::ptrdiff_t value_width = 0;
 6252|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 131k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   131k|        else {
 6268|   131k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.6k, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.6k|    }                                                  \
  |  | 3957|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   115k|                                             specs, value, loc));
 6270|       |
 6271|   115k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 115k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   115k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   115k|        std::ptrdiff_t postfix_width = 0;
 6280|   115k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 114k, False: 1.42k]
  ------------------
 6281|   114k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   114k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   114k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   114k|                                 value_width));
 6285|   114k|            std::tie(it, postfix_width) = postfix_result;
 6286|   114k|        }
 6287|       |
 6288|   115k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   115k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   115k|            specs, prefix_width, value_width, postfix_width));
 6290|   115k|        return it;
 6291|   115k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|   137k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   137k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   137k|            auto rd = make_reader<T, char_type>();
 6301|   137k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   137k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 137k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   137k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   137k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   137k|    {
 6231|   137k|        const bool need_skipped_width =
 6232|   137k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 137k]
  |  Branch (6232:33): [True: 0, False: 137k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   137k|        auto it = rng.begin();
 6236|   137k|        std::ptrdiff_t prefix_width = 0;
 6237|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 137k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   137k|        else {
 6245|   137k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.93k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.93k|    }                                                  \
  |  |  |  | 3957|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   135k|            std::tie(it, prefix_width) = prefix_result;
 6247|   135k|        }
 6248|   135k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   135k|        std::ptrdiff_t value_width = 0;
 6252|   135k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 135k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   135k|        else {
 6268|   135k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.4k, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.4k|    }                                                  \
  |  | 3957|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   119k|                                             specs, value, loc));
 6270|       |
 6271|   119k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 119k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   119k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   119k|        std::ptrdiff_t postfix_width = 0;
 6280|   119k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 118k, False: 1.59k]
  ------------------
 6281|   118k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   118k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   118k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   118k|                                 value_width));
 6285|   118k|            std::tie(it, postfix_width) = postfix_result;
 6286|   118k|        }
 6287|       |
 6288|   119k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   119k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   119k|            specs, prefix_width, value_width, postfix_width));
 6290|   119k|        return it;
 6291|   119k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6295|   139k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   139k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   139k|            auto rd = make_reader<T, char_type>();
 6301|   139k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   139k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 139k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   139k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   139k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   139k|    {
 6231|   139k|        const bool need_skipped_width =
 6232|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 139k]
  |  Branch (6232:33): [True: 0, False: 139k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   139k|        auto it = rng.begin();
 6236|   139k|        std::ptrdiff_t prefix_width = 0;
 6237|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 139k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   139k|        else {
 6245|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.10k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.10k|    }                                                  \
  |  |  |  | 3957|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   137k|            std::tie(it, prefix_width) = prefix_result;
 6247|   137k|        }
 6248|   137k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   137k|        std::ptrdiff_t value_width = 0;
 6252|   137k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 137k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   137k|        else {
 6268|   137k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.2k, False: 122k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.2k|    }                                                  \
  |  | 3957|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   122k|                                             specs, value, loc));
 6270|       |
 6271|   122k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 122k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   122k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   122k|        std::ptrdiff_t postfix_width = 0;
 6280|   122k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 120k, False: 1.73k]
  ------------------
 6281|   120k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   120k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   120k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   120k|                                 value_width));
 6285|   120k|            std::tie(it, postfix_width) = postfix_result;
 6286|   120k|        }
 6287|       |
 6288|   122k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   122k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 122k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   122k|            specs, prefix_width, value_width, postfix_width));
 6290|   122k|        return it;
 6291|   122k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   137k|{
 5892|   137k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 495, False: 137k]
  |  |  ------------------
  ------------------
 5893|    495|        return unexpected(e);
 5894|    495|    }
 5895|       |
 5896|   137k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 137k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   137k|    return skip_classic_whitespace(range);
 5901|   137k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5979|  40.8k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  40.8k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  40.8k|            auto rd = make_reader<T, char_type>();
 5985|  40.8k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  40.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  40.8k|    {
 5972|  40.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 294, False: 40.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    294|    }                                                  \
  |  |  |  | 3957|  40.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  40.5k|                        .transform_error(make_eof_scan_error));
 5974|  40.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  40.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  40.5k|    {
 4246|  40.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  40.5k|        float_reader<CharT> rd{};
 4249|  40.5k|        return read_impl<Range>(
 4250|  40.5k|            range, rd,
 4251|  40.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.5k|                return r.read_source(SCN_FWD(args)...);
 4253|  40.5k|            },
 4254|  40.5k|            value);
 4255|  40.5k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3739|   273k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  40.5k|        : m_fptr([](storage fn,
  743|  40.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.5k|              cvref<T> obj = *get<T>(fn);
  745|  40.5k|              if constexpr (std::is_void_v<R>) {
  746|  40.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.5k|              }
  748|  40.5k|              else {
  749|  40.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.5k|              }
  751|  40.5k|          }),
  752|  40.5k|          m_storage(std::addressof(f))
  753|  40.5k|    {
  754|  40.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  40.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.5k|              else {
  749|  40.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.5k|              }
  751|  40.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.5k|        else if constexpr (std::is_object_v<T>) {
  688|  40.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  40.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  40.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.5k|        {
  662|  40.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|  47.6k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  47.6k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  47.6k|            auto rd = make_reader<T, char_type>();
 5985|  47.6k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  47.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  47.6k|    {
 5972|  47.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  47.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  47.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  47.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  47.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 342, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    342|    }                                                  \
  |  |  |  | 3957|  47.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  47.2k|                        .transform_error(make_eof_scan_error));
 5974|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  47.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  47.2k|    {
 4246|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  47.2k|        float_reader<CharT> rd{};
 4249|  47.2k|        return read_impl<Range>(
 4250|  47.2k|            range, rd,
 4251|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4253|  47.2k|            },
 4254|  47.2k|            value);
 4255|  47.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5979|  49.4k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  49.4k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  49.4k|            auto rd = make_reader<T, char_type>();
 5985|  49.4k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  49.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  49.4k|    {
 5972|  49.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  49.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  49.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  49.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  49.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 375, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    375|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    375|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    375|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    375|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    375|    }                                                  \
  |  |  |  | 3957|  49.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  49.0k|                        .transform_error(make_eof_scan_error));
 5974|  49.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  49.4k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  49.0k|    {
 4246|  49.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  49.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  49.0k|        float_reader<CharT> rd{};
 4249|  49.0k|        return read_impl<Range>(
 4250|  49.0k|            range, rd,
 4251|  49.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  49.0k|                return r.read_source(SCN_FWD(args)...);
 4253|  49.0k|            },
 4254|  49.0k|            value);
 4255|  49.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  49.0k|        : m_fptr([](storage fn,
  743|  49.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.0k|              cvref<T> obj = *get<T>(fn);
  745|  49.0k|              if constexpr (std::is_void_v<R>) {
  746|  49.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.0k|              }
  748|  49.0k|              else {
  749|  49.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.0k|              }
  751|  49.0k|          }),
  752|  49.0k|          m_storage(std::addressof(f))
  753|  49.0k|    {
  754|  49.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  49.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  49.0k|              else {
  749|  49.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.0k|              }
  751|  49.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  49.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  49.0k|        else if constexpr (std::is_object_v<T>) {
  688|  49.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  49.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  49.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  49.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  49.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  49.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  49.0k|        {
  662|  49.0k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   372k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   372k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   372k|          m_current(m_range.begin())
 3020|   372k|    {
 3021|   372k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   641k|    {
 3030|   641k|        return m_range.end();
 3031|   641k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   268k|    {
 3045|   268k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   268k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   268k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 268k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   268k|        }
 3051|   268k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   268k|    static_cast<    \
  |  | 1109|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   268k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   372k|    {
 3035|   372k|        return ranges::subrange{begin(), end()};
 3036|   372k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   372k|    {
 6144|   372k|        const bool need_skipped_width =
 6145|   372k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 372k]
  |  Branch (6145:33): [True: 0, False: 372k]
  ------------------
 6146|   372k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   372k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 372k]
  ------------------
 6150|   372k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 372k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   372k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 372k, False: 0]
  |  Branch (6154:56): [True: 372k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   372k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 372k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   742k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.94k, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.94k|    }                                                  \
  |  |  |  | 3957|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   742k|                            make_eof_scan_error));
 6165|       |
 6166|   742k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 369k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   369k|            return result_type{it, 0};
 6174|   742k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   372k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   267k|    {
 6186|   267k|        const bool need_skipped_width =
 6187|   267k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 267k]
  |  Branch (6187:33): [True: 0, False: 267k]
  ------------------
 6188|   267k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   267k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 267k]
  ------------------
 6191|   267k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 267k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   267k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 267k, False: 0]
  ------------------
 6200|   267k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 267k]
  ------------------
 6201|   267k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   267k|        return result_type{rng.begin(), 0};
 6225|   267k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6295|   117k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   117k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   117k|            auto rd = make_reader<T, char_type>();
 6301|   117k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   117k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 117k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   117k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   117k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   117k|    {
 6231|   117k|        const bool need_skipped_width =
 6232|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 117k]
  |  Branch (6232:33): [True: 0, False: 117k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   117k|        auto it = rng.begin();
 6236|   117k|        std::ptrdiff_t prefix_width = 0;
 6237|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 117k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   117k|        else {
 6245|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 910, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    910|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    910|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    910|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    910|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    910|    }                                                  \
  |  |  |  | 3957|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   116k|            std::tie(it, prefix_width) = prefix_result;
 6247|   116k|        }
 6248|   116k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   116k|        std::ptrdiff_t value_width = 0;
 6252|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 116k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   116k|        else {
 6268|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.7k, False: 82.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.7k|    }                                                  \
  |  | 3957|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  82.6k|                                             specs, value, loc));
 6270|       |
 6271|  82.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 82.6k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  82.6k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  82.6k|        std::ptrdiff_t postfix_width = 0;
 6280|  82.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 82.2k, False: 406]
  ------------------
 6281|  82.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  82.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  82.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  82.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  82.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 82.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  82.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  82.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  82.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  82.2k|                                 value_width));
 6285|  82.2k|            std::tie(it, postfix_width) = postfix_result;
 6286|  82.2k|        }
 6287|       |
 6288|  82.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  82.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 82.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  82.6k|            specs, prefix_width, value_width, postfix_width));
 6290|  82.6k|        return it;
 6291|  82.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|   126k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   126k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   126k|            auto rd = make_reader<T, char_type>();
 6301|   126k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   126k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   126k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   126k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   126k|    {
 6231|   126k|        const bool need_skipped_width =
 6232|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 126k]
  |  Branch (6232:33): [True: 0, False: 126k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   126k|        auto it = rng.begin();
 6236|   126k|        std::ptrdiff_t prefix_width = 0;
 6237|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 126k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   126k|        else {
 6245|   126k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 988, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    988|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   125k|            std::tie(it, prefix_width) = prefix_result;
 6247|   125k|        }
 6248|   125k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   125k|        std::ptrdiff_t value_width = 0;
 6252|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 125k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   125k|        else {
 6268|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.7k, False: 91.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.7k|    }                                                  \
  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  91.7k|                                             specs, value, loc));
 6270|       |
 6271|  91.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 91.7k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  91.7k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  91.7k|        std::ptrdiff_t postfix_width = 0;
 6280|  91.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 91.3k, False: 452]
  ------------------
 6281|  91.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  91.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  91.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  91.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  91.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  91.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  91.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  91.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  91.3k|                                 value_width));
 6285|  91.3k|            std::tie(it, postfix_width) = postfix_result;
 6286|  91.3k|        }
 6287|       |
 6288|  91.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  91.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  91.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 91.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  91.7k|            specs, prefix_width, value_width, postfix_width));
 6290|  91.7k|        return it;
 6291|  91.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6295|   128k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   128k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   128k|            auto rd = make_reader<T, char_type>();
 6301|   128k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   128k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   128k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   128k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   128k|    {
 6231|   128k|        const bool need_skipped_width =
 6232|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 128k]
  |  Branch (6232:33): [True: 0, False: 128k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   128k|        auto it = rng.begin();
 6236|   128k|        std::ptrdiff_t prefix_width = 0;
 6237|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 128k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   128k|        else {
 6245|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.04k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.04k|    }                                                  \
  |  |  |  | 3957|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   127k|            std::tie(it, prefix_width) = prefix_result;
 6247|   127k|        }
 6248|   127k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   127k|        std::ptrdiff_t value_width = 0;
 6252|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 127k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   127k|        else {
 6268|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.6k, False: 94.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.6k|    }                                                  \
  |  | 3957|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  94.2k|                                             specs, value, loc));
 6270|       |
 6271|  94.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 94.2k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  94.2k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  94.2k|        std::ptrdiff_t postfix_width = 0;
 6280|  94.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 93.8k, False: 484]
  ------------------
 6281|  93.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  93.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  93.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  93.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 93.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  93.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  93.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  93.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  93.8k|                                 value_width));
 6285|  93.8k|            std::tie(it, postfix_width) = postfix_result;
 6286|  93.8k|        }
 6287|       |
 6288|  94.2k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  94.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  94.2k|            specs, prefix_width, value_width, postfix_width));
 6290|  94.2k|        return it;
 6291|  94.2k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|   137k|{
 5892|   137k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 495, False: 137k]
  |  |  ------------------
  ------------------
 5893|    495|        return unexpected(e);
 5894|    495|    }
 5895|       |
 5896|   137k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 137k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   137k|    return skip_classic_whitespace(range);
 5901|   137k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  40.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  40.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  40.7k|            auto rd = make_reader<T, char_type>();
 5989|  40.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 40.7k, False: 0]
  ------------------
 5990|  40.7k|                return impl(rd, range, value);
 5991|  40.7k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  40.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  40.7k|    {
 5972|  40.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 294, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    294|    }                                                  \
  |  |  |  | 3957|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  40.4k|                        .transform_error(make_eof_scan_error));
 5974|  40.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  40.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  40.4k|    {
 4246|  40.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  40.4k|        float_reader<CharT> rd{};
 4249|  40.4k|        return read_impl<Range>(
 4250|  40.4k|            range, rd,
 4251|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.4k|                return r.read_source(SCN_FWD(args)...);
 4253|  40.4k|            },
 4254|  40.4k|            value);
 4255|  40.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  40.4k|        : m_fptr([](storage fn,
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|  40.4k|              if constexpr (std::is_void_v<R>) {
  746|  40.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.4k|              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
  752|  40.4k|          m_storage(std::addressof(f))
  753|  40.4k|    {
  754|  40.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.4k|        else if constexpr (std::is_object_v<T>) {
  688|  40.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  40.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.4k|        {
  662|  40.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  47.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  47.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  47.5k|            auto rd = make_reader<T, char_type>();
 5989|  47.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 47.5k, False: 0]
  ------------------
 5990|  47.5k|                return impl(rd, range, value);
 5991|  47.5k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  47.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  47.5k|    {
 5972|  47.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  47.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  47.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  47.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  47.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 342, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    342|    }                                                  \
  |  |  |  | 3957|  47.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  47.2k|                        .transform_error(make_eof_scan_error));
 5974|  47.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  47.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  47.2k|    {
 4246|  47.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  47.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  47.2k|        float_reader<CharT> rd{};
 4249|  47.2k|        return read_impl<Range>(
 4250|  47.2k|            range, rd,
 4251|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  47.2k|                return r.read_source(SCN_FWD(args)...);
 4253|  47.2k|            },
 4254|  47.2k|            value);
 4255|  47.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  47.2k|        : m_fptr([](storage fn,
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|  47.2k|              if constexpr (std::is_void_v<R>) {
  746|  47.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.2k|              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
  752|  47.2k|          m_storage(std::addressof(f))
  753|  47.2k|    {
  754|  47.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  47.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  47.2k|              else {
  749|  47.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.2k|              }
  751|  47.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  47.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  47.2k|        else if constexpr (std::is_object_v<T>) {
  688|  47.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  47.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  47.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  47.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  47.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  47.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  47.2k|        {
  662|  47.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  49.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  49.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  49.3k|            auto rd = make_reader<T, char_type>();
 5989|  49.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 49.3k, False: 0]
  ------------------
 5990|  49.3k|                return impl(rd, range, value);
 5991|  49.3k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  49.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  49.3k|    {
 5972|  49.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  49.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  49.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  49.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 375, False: 49.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    375|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    375|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    375|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    375|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    375|    }                                                  \
  |  |  |  | 3957|  49.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  49.0k|                        .transform_error(make_eof_scan_error));
 5974|  49.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  49.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  49.0k|    {
 4246|  49.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  49.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  49.0k|        float_reader<CharT> rd{};
 4249|  49.0k|        return read_impl<Range>(
 4250|  49.0k|            range, rd,
 4251|  49.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  49.0k|                return r.read_source(SCN_FWD(args)...);
 4253|  49.0k|            },
 4254|  49.0k|            value);
 4255|  49.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  49.0k|        : m_fptr([](storage fn,
  743|  49.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.0k|              cvref<T> obj = *get<T>(fn);
  745|  49.0k|              if constexpr (std::is_void_v<R>) {
  746|  49.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  49.0k|              }
  748|  49.0k|              else {
  749|  49.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.0k|              }
  751|  49.0k|          }),
  752|  49.0k|          m_storage(std::addressof(f))
  753|  49.0k|    {
  754|  49.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  49.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  49.0k|              else {
  749|  49.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.0k|              }
  751|  49.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  49.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  49.0k|        else if constexpr (std::is_object_v<T>) {
  688|  49.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  49.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  49.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  49.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  49.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  49.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  49.0k|        {
  662|  49.0k|        }

LLVMFuzzerTestOneInput:
   54|  1.73k|{
   55|  1.73k|    scn::fuzz::run(data, size);
   56|  1.73k|    return 0;
   57|  1.73k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  1.73k|{
   33|  1.73k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 1.73k]
  |  Branch (33:35): [True: 0, False: 1.73k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  1.73k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  1.73k|    const auto& f =
   40|  1.73k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  1.73k|    do_basic_run(sv, f);
   42|       |
   43|  1.73k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  1.73k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  1.73k|    do_basic_run(wsv_reinterpret, wf);
   46|  1.73k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.73k, False: 0]
  ------------------
   47|  1.73k|        do_basic_run(wsv_transcode, wf);
   48|  1.73k|    }
   49|  1.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.73k|{
   25|  1.73k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.73k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.73k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.73k|{
   25|  1.73k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.73k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.73k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.47k|{
   25|  3.47k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.47k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.47k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.47k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.47k|{
   25|  3.47k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.47k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.47k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.47k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.73k|{
   53|  1.73k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.73k|    string_buffer.resize(size);
   57|  1.73k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.73k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.73k|    const auto wsv_reinterpret_size =
   62|  1.73k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 65, False: 1.67k]
  ------------------
   63|  1.73k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.73k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.73k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.73k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.73k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.73k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.73k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.73k|{
  123|  1.73k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.73k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.73k|    buf.resize(sizeof...(Args));
  126|  1.73k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.73k|    return buf;
  128|  1.73k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.73k|{
  109|  1.73k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.73k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.73k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.73k|{
  186|  1.73k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.73k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.73k|                                   format_strings);
  189|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  84.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  84.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  84.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  84.0k|            auto result = scn::scan<T>(
  140|  84.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  84.0k|                scn::runtime_format(f));
  142|  84.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 73.6k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  73.6k|            it = result->begin();
  146|  73.6k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  84.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  84.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  84.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  84.0k|            auto result = scn::scan<T>(
  155|  84.0k|                global_locale,
  156|  84.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  84.0k|                scn::runtime_format(f));
  158|  84.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 73.6k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  73.6k|            it = result->begin();
  162|  73.6k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  17.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.6k|            auto result = scn::scan_value<T>(
  171|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 15.9k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  15.9k|            it = result->begin();
  176|  15.9k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  87.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  87.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  87.1k|            auto result = scn::scan<T>(
  140|  87.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  87.1k|                scn::runtime_format(f));
  142|  87.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 76.7k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  76.7k|            it = result->begin();
  146|  76.7k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  87.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  87.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  87.1k|            auto result = scn::scan<T>(
  155|  87.1k|                global_locale,
  156|  87.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.1k|                scn::runtime_format(f));
  158|  87.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 76.7k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  76.7k|            it = result->begin();
  162|  76.7k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  18.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.5k|            auto result = scn::scan_value<T>(
  171|  18.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 16.8k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  16.8k|            it = result->begin();
  176|  16.8k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  89.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  89.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  89.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  89.0k|            auto result = scn::scan<T>(
  140|  89.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  89.0k|                scn::runtime_format(f));
  142|  89.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 78.6k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  78.6k|            it = result->begin();
  146|  78.6k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  89.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  89.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  89.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  89.0k|            auto result = scn::scan<T>(
  155|  89.0k|                global_locale,
  156|  89.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  89.0k|                scn::runtime_format(f));
  158|  89.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 78.6k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  78.6k|            it = result->begin();
  162|  78.6k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  19.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.1k|            auto result = scn::scan_value<T>(
  171|  19.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 17.4k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  17.4k|            it = result->begin();
  176|  17.4k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  90.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  90.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  90.2k|            auto result = scn::scan<T>(
  140|  90.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  90.2k|                scn::runtime_format(f));
  142|  90.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 79.8k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  79.8k|            it = result->begin();
  146|  79.8k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  90.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  90.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  90.2k|            auto result = scn::scan<T>(
  155|  90.2k|                global_locale,
  156|  90.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  90.2k|                scn::runtime_format(f));
  158|  90.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 79.8k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  79.8k|            it = result->begin();
  162|  79.8k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  17.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.9k|            auto result = scn::scan_value<T>(
  171|  17.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 16.2k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  16.2k|            it = result->begin();
  176|  16.2k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  94.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  94.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  94.2k|            auto result = scn::scan<T>(
  140|  94.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  94.2k|                scn::runtime_format(f));
  142|  94.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 83.8k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  83.8k|            it = result->begin();
  146|  83.8k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  94.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  94.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  94.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  94.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  94.2k|            auto result = scn::scan<T>(
  155|  94.2k|                global_locale,
  156|  94.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  94.2k|                scn::runtime_format(f));
  158|  94.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 83.8k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  83.8k|            it = result->begin();
  162|  83.8k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  18.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.8k|            auto result = scn::scan_value<T>(
  171|  18.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 17.0k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  17.0k|            it = result->begin();
  176|  17.0k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.73k|{
  134|       |    // Regular scan
  135|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.4k, False: 1.73k]
  ------------------
  136|  10.4k|        auto it = scn::ranges::begin(source);
  137|  96.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  96.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  96.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  96.1k|            auto result = scn::scan<T>(
  140|  96.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  96.1k|                scn::runtime_format(f));
  142|  96.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.4k, False: 85.7k]
  ------------------
  143|  10.4k|                break;
  144|  10.4k|            }
  145|  85.7k|            it = result->begin();
  146|  85.7k|        }
  147|  10.4k|    }
  148|       |
  149|       |    // scan localized
  150|  10.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.4k, False: 1.73k]
  ------------------
  151|  10.4k|        auto it = scn::ranges::begin(source);
  152|  96.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  96.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  96.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  96.1k|            auto result = scn::scan<T>(
  155|  96.1k|                global_locale,
  156|  96.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  96.1k|                scn::runtime_format(f));
  158|  96.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.4k, False: 85.7k]
  ------------------
  159|  10.4k|                break;
  160|  10.4k|            }
  161|  85.7k|            it = result->begin();
  162|  85.7k|        }
  163|  10.4k|    }
  164|       |
  165|       |    // scan_value
  166|  1.73k|    {
  167|  1.73k|        auto it = scn::ranges::begin(source);
  168|  19.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.2k|            auto result = scn::scan_value<T>(
  171|  19.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.73k, False: 17.5k]
  ------------------
  173|  1.73k|                break;
  174|  1.73k|            }
  175|  17.5k|            it = result->begin();
  176|  17.5k|        }
  177|  1.73k|    }
  178|  1.73k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.73k|{
   91|  1.73k|    using char_type = ranges::range_value_t<Source>;
   92|  1.73k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.73k|    deque.clear();
   94|  1.73k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.73k|              std::back_inserter(deque));
   96|  1.73k|    return deque;
   97|  1.73k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.73k|{
   80|  1.73k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.73k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.73k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.73k|{
  123|  1.73k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.73k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.73k|    buf.resize(sizeof...(Args));
  126|  1.73k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.73k|    return buf;
  128|  1.73k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.73k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.73k|    else {
  113|  1.73k|        return wformat_string_view_buffer;
  114|  1.73k|    }
  115|  1.73k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  3.47k|{
  186|  3.47k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  3.47k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  3.47k|                                   format_strings);
  189|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  72.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.2k|            auto result = scn::scan<T>(
  140|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.2k|                scn::runtime_format(f));
  142|  72.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 51.4k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  51.4k|            it = result->begin();
  146|  51.4k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  72.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.2k|            auto result = scn::scan<T>(
  155|  72.2k|                global_locale,
  156|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.2k|                scn::runtime_format(f));
  158|  72.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 51.4k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  51.4k|            it = result->begin();
  162|  51.4k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  13.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.6k|            auto result = scn::scan_value<T>(
  171|  13.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 10.1k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  10.1k|            it = result->begin();
  176|  10.1k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  79.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.1k|            auto result = scn::scan<T>(
  140|  79.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.1k|                scn::runtime_format(f));
  142|  79.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 58.2k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  58.2k|            it = result->begin();
  146|  58.2k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  79.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.1k|            auto result = scn::scan<T>(
  155|  79.1k|                global_locale,
  156|  79.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.1k|                scn::runtime_format(f));
  158|  79.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 58.2k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  58.2k|            it = result->begin();
  162|  58.2k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 12.3k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  12.3k|            it = result->begin();
  176|  12.3k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  80.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.9k|            auto result = scn::scan<T>(
  140|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.9k|                scn::runtime_format(f));
  142|  80.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 60.1k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  60.1k|            it = result->begin();
  146|  60.1k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  80.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.9k|            auto result = scn::scan<T>(
  155|  80.9k|                global_locale,
  156|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.9k|                scn::runtime_format(f));
  158|  80.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 60.1k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  60.1k|            it = result->begin();
  162|  60.1k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  16.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.4k|            auto result = scn::scan_value<T>(
  171|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 13.0k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  13.0k|            it = result->begin();
  176|  13.0k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  72.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.2k|            auto result = scn::scan<T>(
  140|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.2k|                scn::runtime_format(f));
  142|  72.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 51.4k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  51.4k|            it = result->begin();
  146|  51.4k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  72.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.2k|            auto result = scn::scan<T>(
  155|  72.2k|                global_locale,
  156|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.2k|                scn::runtime_format(f));
  158|  72.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 51.4k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  51.4k|            it = result->begin();
  162|  51.4k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  13.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.5k|            auto result = scn::scan_value<T>(
  171|  13.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 10.1k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  10.1k|            it = result->begin();
  176|  10.1k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  79.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.0k|            auto result = scn::scan<T>(
  140|  79.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.0k|                scn::runtime_format(f));
  142|  79.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 58.2k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  58.2k|            it = result->begin();
  146|  58.2k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  79.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.0k|            auto result = scn::scan<T>(
  155|  79.0k|                global_locale,
  156|  79.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.0k|                scn::runtime_format(f));
  158|  79.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 58.2k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  58.2k|            it = result->begin();
  162|  58.2k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  15.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.8k|            auto result = scn::scan_value<T>(
  171|  15.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 12.3k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  12.3k|            it = result->begin();
  176|  12.3k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.47k|{
  134|       |    // Regular scan
  135|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.8k, False: 3.47k]
  ------------------
  136|  20.8k|        auto it = scn::ranges::begin(source);
  137|  80.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.9k|            auto result = scn::scan<T>(
  140|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.9k|                scn::runtime_format(f));
  142|  80.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.8k, False: 60.1k]
  ------------------
  143|  20.8k|                break;
  144|  20.8k|            }
  145|  60.1k|            it = result->begin();
  146|  60.1k|        }
  147|  20.8k|    }
  148|       |
  149|       |    // scan localized
  150|  20.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.8k, False: 3.47k]
  ------------------
  151|  20.8k|        auto it = scn::ranges::begin(source);
  152|  80.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.9k|            auto result = scn::scan<T>(
  155|  80.9k|                global_locale,
  156|  80.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.9k|                scn::runtime_format(f));
  158|  80.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.8k, False: 60.1k]
  ------------------
  159|  20.8k|                break;
  160|  20.8k|            }
  161|  60.1k|            it = result->begin();
  162|  60.1k|        }
  163|  20.8k|    }
  164|       |
  165|       |    // scan_value
  166|  3.47k|    {
  167|  3.47k|        auto it = scn::ranges::begin(source);
  168|  16.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.4k|            auto result = scn::scan_value<T>(
  171|  16.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.47k, False: 12.9k]
  ------------------
  173|  3.47k|                break;
  174|  3.47k|            }
  175|  12.9k|            it = result->begin();
  176|  12.9k|        }
  177|  3.47k|    }
  178|  3.47k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  3.47k|{
   91|  3.47k|    using char_type = ranges::range_value_t<Source>;
   92|  3.47k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  3.47k|    deque.clear();
   94|  3.47k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  3.47k|              std::back_inserter(deque));
   96|  3.47k|    return deque;
   97|  3.47k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  3.47k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  3.47k|    else {
   84|  3.47k|        return wnoncontiguous_buffer;
   85|  3.47k|    }
   86|  3.47k|}

