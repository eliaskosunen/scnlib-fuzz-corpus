_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1039|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1039|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  1.70M|{
 4086|  1.70M|    if constexpr (sizeof(U) == 1) {
 4087|  1.70M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  1.70M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  1.70M|{
 4050|  1.70M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  1.70M|    SCN_GCC_COMPAT_PUSH
 4053|  1.70M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  1.70M|    constexpr char lengths[] =
 4055|  1.70M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  1.70M|        "\1\1\1\1\1\1\1\1"
 4057|  1.70M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  1.70M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  1.70M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  1.70M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  1.70M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  1.70M|    SCN_GCC_COMPAT_POP
 4064|  1.70M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  1.53M|{
 4292|  1.53M|    if constexpr (sizeof(CharT) == 1) {
 4293|  1.53M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  1.53M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  1.53M|{
 4105|  1.53M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  1.53M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  1.53M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  1.53M|    };
 4110|       |
 4111|  1.53M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 1.48M, False: 50.5k]
  ------------------
 4112|  1.48M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 436, False: 1.48M]
  ------------------
 4113|    436|            SCN_UNLIKELY_ATTR
 4114|    436|            return invalid_code_point;
 4115|    436|        }
 4116|  1.48M|        return static_cast<char32_t>(input[0]);
 4117|  1.48M|    }
 4118|       |
 4119|  50.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 44.5k, False: 6.04k]
  ------------------
 4120|  44.5k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 144, False: 44.3k]
  ------------------
 4121|    144|            SCN_UNLIKELY_ATTR
 4122|    144|            return invalid_code_point;
 4123|    144|        }
 4124|  44.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 8.36k, False: 36.0k]
  ------------------
 4125|  8.36k|            SCN_UNLIKELY_ATTR
 4126|  8.36k|            return invalid_code_point;
 4127|  8.36k|        }
 4128|       |
 4129|  36.0k|        char32_t cp{};
 4130|  36.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  36.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  36.0k|        return cp;
 4133|  44.3k|    }
 4134|       |
 4135|  6.04k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 3.00k, False: 3.03k]
  ------------------
 4136|  3.00k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 137, False: 2.87k]
  ------------------
 4137|    137|            SCN_UNLIKELY_ATTR
 4138|    137|            return invalid_code_point;
 4139|    137|        }
 4140|  2.87k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 495, False: 2.37k]
  ------------------
 4141|  2.87k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 1.56k, False: 810]
  ------------------
 4142|  2.06k|            SCN_UNLIKELY_ATTR
 4143|  2.06k|            return invalid_code_point;
 4144|  2.06k|        }
 4145|       |
 4146|    810|        char32_t cp{};
 4147|    810|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    810|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    810|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    810|        return cp;
 4151|  2.87k|    }
 4152|       |
 4153|  3.03k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 3.03k, False: 0]
  ------------------
 4154|  3.03k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 3.03k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  3.03k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 534, False: 2.50k]
  ------------------
 4159|    534|            SCN_UNLIKELY_ATTR
 4160|    534|            return invalid_code_point;
 4161|    534|        }
 4162|  2.50k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 497, False: 2.00k]
  ------------------
 4163|  2.50k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 862, False: 1.14k]
  ------------------
 4164|  2.50k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 820, False: 323]
  ------------------
 4165|  2.17k|            SCN_UNLIKELY_ATTR
 4166|  2.17k|            return invalid_code_point;
 4167|  2.17k|        }
 4168|       |
 4169|    323|        char32_t cp{};
 4170|    323|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    323|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    323|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    323|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    323|        return cp;
 4175|  2.50k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  55.2k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  55.2k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  55.2k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  3.53M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  3.53M|    else {
 3984|  3.53M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  3.53M|                                       to_address(first), to_address(last)))};
 3986|  3.53M|    }
 3987|  3.53M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  10.7M|{
  331|  10.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  10.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  10.7M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  15.6M|{
  309|  15.6M|    return p;
  310|  15.6M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  5.32M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  5.32M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  5.32M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  5.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  5.32M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  5.32M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  68.8k|    {
 2883|  68.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  68.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  68.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  68.8k|    {
 2864|  68.8k|        return decay_copy(t.begin());
 2865|  68.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  6.66M|{
 2108|  6.66M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  6.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  6.66M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.12M|    {
 2940|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.12M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.12M|    {
 2922|  1.12M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.12M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  81.6k|{
 9893|  81.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  81.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  81.6k|                                   make_scan_args(result->values())));
 9896|  81.6k|    return result;
 9897|  81.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9848|   180k|{
 9849|   180k|    return scan_result_type<Source, Args...>();
 9850|   180k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   180k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   180k|        : m_value(T{}), m_has_value(true)
  442|   180k|    {
  443|   180k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6692|   180k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   559k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   559k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6466|   683k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   180k|{
 9834|   180k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 158k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   158k|    else {
 9838|   158k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   158k|    static_cast<    \
  |  | 1109|   158k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   158k|    }
 9840|   180k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   559k|    {
 1754|   559k|        return has_value();
 1755|   559k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.11M|    {
  505|  1.11M|        return m_has_value;
  506|  1.11M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  67.0k|    {
 1760|  67.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  67.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  67.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  67.0k|        return this->get_unexpected().error();
 1762|  67.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  67.0k|    {
  488|  67.0k|        return m_unexpected;
  489|  67.0k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  10.1M|    {
  380|  10.1M|        return m_unexpected;
  381|  10.1M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  2.62M|        : m_unexpected(std::forward<Err>(e))
  365|  2.62M|    {
  366|  2.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.62M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  7.38M|        : m_unexpected(std::forward<Args>(args)...)
  374|  7.38M|    {
  375|  7.38M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  7.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  7.38M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   721k|    {
  505|   721k|        return m_has_value;
  506|   721k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   496k|    {
  471|   496k|        return m_value;
  472|   496k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   402k|{
  411|   402k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   402k|        T(std::forward<Args>(args)...);
  413|   402k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   492k|    {
 6567|   492k|        m_range = std::forward<Other>(r);
 6568|   492k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   492k|    {
 1809|   492k|        return value();
 1810|   492k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   492k|    {
 1783|   492k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   492k|        return this->get_value();
 1785|   492k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   492k|    {
  471|   492k|        return m_value;
  472|   492k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|   252k|{
 9655|   252k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   252k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   252k|{
 9592|   252k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   252k|    auto result = vscan_impl(buffer, format, args);
 9595|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.9k, False: 221k]
  |  |  ------------------
  ------------------
 9596|  30.9k|        return unexpected(result.error());
 9597|  30.9k|    }
 9598|   221k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   252k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   559k|{
 5399|   559k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   559k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   559k|                  "\n"
 5403|   559k|                  "Unsupported range type given as input to a scanning "
 5404|   559k|                  "function.\n"
 5405|   559k|                  "A range needs to have a character type (value type) "
 5406|   559k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   559k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   559k|                  "to be included.\n"
 5409|   559k|                  "See the scnlib documentation for more details.");
 5410|   559k|    static_assert(
 5411|   559k|        !std::is_same_v<T, custom_char_traits>,
 5412|   559k|        "\n"
 5413|   559k|        "Unsupported range type given as input to a scanning "
 5414|   559k|        "function.\n"
 5415|   559k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   559k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   559k|        "not supported.");
 5418|   559k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   559k|                  "\n"
 5420|   559k|                  "Unsupported range type given as input to a scanning "
 5421|   559k|                  "function.\n"
 5422|   559k|                  "file_marker_found cannot be used as an "
 5423|   559k|                  "source range type to scn::scan.\n"
 5424|   559k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   559k|                  "and do not provide an explicit source range, "
 5426|   559k|                  "or use scn::scan with a FILE* directly.");
 5427|   559k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   559k|                  "\n"
 5429|   559k|                  "Unsupported range type given as input to a scanning "
 5430|   559k|                  "function.\n"
 5431|   559k|                  "In order to be scannable, a range needs to satisfy "
 5432|   559k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   559k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   559k|                  "\n"
 5435|   559k|                  "Unsupported range type given as input to a scanning "
 5436|   559k|                  "function.\n"
 5437|   559k|                  "A range needs to model forward_range and have a valid "
 5438|   559k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   559k|                  "Examples of scannable ranges are std::string, "
 5440|   559k|                  "std::string_view, "
 5441|   559k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   559k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   559k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   559k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   559k|{
 5338|   559k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   559k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   559k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   559k|    {
 3014|   559k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   559k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   559k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   559k|    {
 2995|   559k|        return t.data();
 2996|   559k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   559k|    {
 3397|   559k|        return detail::to_address(ranges::begin(derived()));
 3398|   559k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  4.84M|{
  331|  4.84M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  4.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  4.84M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.05M|    {
 2883|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.05M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.05M|    {
 2864|  1.05M|        return decay_copy(t.begin());
 2865|  1.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  14.2M|    {
 3494|  14.2M|        return m_iterator;
 3495|  14.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   559k|    {
 3353|   559k|        return static_cast<const D&>(*this);
 3354|   559k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   559k|    {
 3089|   559k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   559k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   559k|    {
 3055|   559k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   559k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   559k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  3.58M|{
 2108|  3.58M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  3.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  3.58M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.47M|    {
 3510|  3.47M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.47M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  8.85M|    {
 1754|  8.85M|        return has_value();
 1755|  8.85M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  15.8M|    {
  505|  15.8M|        return m_has_value;
  506|  15.8M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   828k|    {
 1760|   828k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   828k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   828k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   828k|        return this->get_unexpected().error();
 1762|   828k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   828k|    {
  488|   828k|        return m_unexpected;
  489|   828k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  67.0k|        : base(unexpect, std::move(e.error())),
 1630|  67.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  67.0k|    {
 1632|  67.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  67.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  67.0k|          m_has_value(false)
  466|  67.0k|    {
  467|  67.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   559k|    {
 1330|   559k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   492k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   492k|                      ranges::iterator_t<SourceRange>>) {
 6799|   492k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   492k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  3.93M|    {
 2883|  3.93M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  3.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  3.93M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  3.93M|    {
 2864|  3.93M|        return decay_copy(t.begin());
 2865|  3.93M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   492k|{
 6784|   492k|    return ranges::end(source);
 6785|   492k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   492k|    {
 2940|   492k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   492k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   492k|    {
 2922|   492k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   492k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  6.56M|    {
 3498|  6.56M|        return m_sentinel;
 3499|  6.56M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  2.65M|    {
 1809|  2.65M|        return value();
 1810|  2.65M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  6.17M|    {
 1783|  6.17M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.17M|        return this->get_value();
 1785|  6.17M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  6.17M|    {
  471|  6.17M|        return m_value;
  472|  6.17M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   492k|        : base(std::in_place, std::forward<U>(val)),
 1584|   492k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   492k|    {
 1586|   492k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   492k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   492k|    {
  457|   492k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   163k|    {
 8855|   163k|        return m_str;
 8856|   163k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   337k|{
 6196|   337k|    detail::check_scan_arg_types<Args...>();
 6197|   337k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   337k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5910|   683k|{
 5911|   683k|    constexpr bool default_constructible_constraint =
 5912|   683k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   683k|    static_assert(default_constructible_constraint,
 5914|   683k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   683k|    constexpr bool destructible_constraint =
 5917|   683k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   683k|    static_assert(destructible_constraint,
 5919|   683k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   683k|    constexpr bool non_reference_constraint =
 5922|   683k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   683k|    static_assert(non_reference_constraint,
 5924|   683k|                  "Scan argument types must not be references");
 5925|       |
 5926|   683k|    constexpr bool movable_constraint =
 5927|   683k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   683k|    static_assert(movable_constraint,
 5929|   683k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   683k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   683k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   683k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   337k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   337k|    {
 6173|   337k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   337k|    {
 6181|   337k|        return {detail::make_arg<
 6182|   337k|            kind, Context,
 6183|   337k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   337k|                                 typename Context::char_type>::value>(args)...};
 6185|   337k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   337k|{
 5961|   337k|    return make_value<Context>(value).ref_value;
 5962|   337k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5895|   371k|{
 5896|   371k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   371k|                                  needs_context_tag>) {
 5900|   371k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   371k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5702|   371k|    {                                                                        \
 5703|   371k|        return val;                                                          \
 5704|   371k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5864|   683k|{
 5865|   683k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   683k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   683k|    constexpr bool scannable_char =
 5869|   683k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   683k|    static_assert(scannable_char,
 5871|   683k|                  "Cannot scan an argument of an unsupported character "
 5872|   683k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   683k|    constexpr bool scannable_const =
 5875|   683k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   683k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   683k|    constexpr bool scannable_disabled =
 5879|   683k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   683k|    static_assert(scannable_disabled,
 5881|   683k|                  "Cannot scan an argument that has been disabled by "
 5882|   683k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   683k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   683k|    static_assert(
 5886|   683k|        scannable,
 5887|   683k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   683k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   683k|    return arg_value{arg};
 5891|   683k|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5645|   683k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   683k|    {
 5647|   683k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6475|   622k|    {
 6476|   622k|        return m_values;
 6477|   622k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   337k|        : basic_scan_args(store.desc, store.args.data())
 6222|   337k|    {
 6223|   337k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  1.04M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.04M|    {
 6275|  1.04M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  5.66M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.66M|    static_cast<    \
  |  | 1109|  5.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.66M|    static_cast<    \
  |  | 1109|  5.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.66M|    {
 3480|  5.66M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  1.04M|{
 8532|  1.04M|    return s;
 8533|  1.04M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  1.04M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   163k|        : m_str(r.str)
 8850|   163k|    {
 8851|   163k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   180k|    {
 1754|   180k|        return has_value();
 1755|   180k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   496k|    {
 1829|   496k|        return &value();
 1830|   496k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   496k|    {
 1783|   496k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   496k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   496k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   496k|        return this->get_value();
 1785|   496k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   492k|    {
 6556|   492k|        return ranges::begin(m_range);
 6557|   492k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  81.6k|{
 9962|  81.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  81.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  81.6k|                                   make_scan_args(result->values())));
 9965|  81.6k|    return result;
 9966|  81.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|   252k|{
 9673|   252k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   252k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   252k|{
 9608|   252k|#if !SCN_DISABLE_LOCALE
 9609|   252k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   252k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   252k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   252k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   252k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.9k, False: 221k]
  |  |  ------------------
  ------------------
 9616|  30.9k|        return unexpected(result.error());
 9617|  30.9k|    }
 9618|   221k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   252k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  17.0k|{
10003|  17.0k|    auto result = make_scan_result<Source, T>();
10004|  17.0k|    fill_scan_result(
10005|  17.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  17.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  17.0k|    return result;
10008|  17.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  53.5k|{
 9686|  53.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  53.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  53.5k|{
 9632|  53.5k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  53.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  53.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.16k, False: 48.4k]
  |  |  ------------------
  ------------------
 9636|  5.16k|        return unexpected(result.error());
 9637|  5.16k|    }
 9638|  48.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  53.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  34.4k|{
 5946|  34.4k|    check_scan_arg_types<T>();
 5947|       |
 5948|  34.4k|    basic_scan_arg<Context> arg;
 5949|  34.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  34.4k|    arg.m_value = make_value<Context>(value);
 5951|  34.4k|    return arg;
 5952|  34.4k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  1.15M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  2.16M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  61.3k|    {
 6498|  61.3k|        return std::get<0>(m_values);
 6499|  61.3k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  84.6k|{
 9893|  84.6k|    auto result = make_scan_result<Source, Args...>();
 9894|  84.6k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  84.6k|                                   make_scan_args(result->values())));
 9896|  84.6k|    return result;
 9897|  84.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9848|   187k|{
 9849|   187k|    return scan_result_type<Source, Args...>();
 9850|   187k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   187k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   187k|        : m_value(T{}), m_has_value(true)
  442|   187k|    {
  443|   187k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|   187k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|   729k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   187k|{
 9834|   187k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 164k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   164k|    else {
 9838|   164k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   164k|    static_cast<    \
  |  | 1109|   164k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   164k|    }
 9840|   187k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   748k|    {
  505|   748k|        return m_has_value;
  506|   748k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   516k|    {
  471|   516k|        return m_value;
  472|   516k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   169k|    {
 8855|   169k|        return m_str;
 8856|   169k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   351k|{
 6196|   351k|    detail::check_scan_arg_types<Args...>();
 6197|   351k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   351k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|   729k|{
 5911|   729k|    constexpr bool default_constructible_constraint =
 5912|   729k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   729k|    static_assert(default_constructible_constraint,
 5914|   729k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   729k|    constexpr bool destructible_constraint =
 5917|   729k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   729k|    static_assert(destructible_constraint,
 5919|   729k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   729k|    constexpr bool non_reference_constraint =
 5922|   729k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   729k|    static_assert(non_reference_constraint,
 5924|   729k|                  "Scan argument types must not be references");
 5925|       |
 5926|   729k|    constexpr bool movable_constraint =
 5927|   729k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   729k|    static_assert(movable_constraint,
 5929|   729k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   729k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   729k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   729k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   351k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   351k|    {
 6173|   351k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   351k|    {
 6181|   351k|        return {detail::make_arg<
 6182|   351k|            kind, Context,
 6183|   351k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   351k|                                 typename Context::char_type>::value>(args)...};
 6185|   351k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   351k|{
 5961|   351k|    return make_value<Context>(value).ref_value;
 5962|   351k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|   387k|{
 5896|   387k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   387k|                                  needs_context_tag>) {
 5900|   387k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   387k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|   387k|    {                                                                        \
 5703|   387k|        return val;                                                          \
 5704|   387k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|   729k|{
 5865|   729k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   729k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   729k|    constexpr bool scannable_char =
 5869|   729k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   729k|    static_assert(scannable_char,
 5871|   729k|                  "Cannot scan an argument of an unsupported character "
 5872|   729k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   729k|    constexpr bool scannable_const =
 5875|   729k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   729k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   729k|    constexpr bool scannable_disabled =
 5879|   729k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   729k|    static_assert(scannable_disabled,
 5881|   729k|                  "Cannot scan an argument that has been disabled by "
 5882|   729k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   729k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   729k|    static_assert(
 5886|   729k|        scannable,
 5887|   729k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   729k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   729k|    return arg_value{arg};
 5891|   729k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|   729k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   729k|    {
 5647|   729k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|   662k|    {
 6476|   662k|        return m_values;
 6477|   662k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   351k|        : basic_scan_args(store.desc, store.args.data())
 6222|   351k|    {
 6223|   351k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   169k|        : m_str(r.str)
 8850|   169k|    {
 8851|   169k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   187k|    {
 1754|   187k|        return has_value();
 1755|   187k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   516k|    {
 1829|   516k|        return &value();
 1830|   516k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   516k|    {
 1783|   516k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   516k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   516k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   516k|        return this->get_value();
 1785|   516k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  84.6k|{
 9962|  84.6k|    auto result = make_scan_result<Source, Args...>();
 9963|  84.6k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  84.6k|                                   make_scan_args(result->values())));
 9965|  84.6k|    return result;
 9966|  84.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  17.9k|{
10003|  17.9k|    auto result = make_scan_result<Source, T>();
10004|  17.9k|    fill_scan_result(
10005|  17.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  17.9k|                            detail::make_arg<scan_context>(result->value())));
10007|  17.9k|    return result;
10008|  17.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  36.1k|{
 5946|  36.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  36.1k|    basic_scan_arg<Context> arg;
 5949|  36.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  36.1k|    arg.m_value = make_value<Context>(value);
 5951|  36.1k|    return arg;
 5952|  36.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  67.3k|    {
 6498|  67.3k|        return std::get<0>(m_values);
 6499|  67.3k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  86.5k|{
 9893|  86.5k|    auto result = make_scan_result<Source, Args...>();
 9894|  86.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  86.5k|                                   make_scan_args(result->values())));
 9896|  86.5k|    return result;
 9897|  86.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9848|   191k|{
 9849|   191k|    return scan_result_type<Source, Args...>();
 9850|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   191k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   191k|        : m_value(T{}), m_has_value(true)
  442|   191k|    {
  443|   191k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6692|   191k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6466|   746k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   191k|{
 9834|   191k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 169k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   169k|    else {
 9838|   169k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   169k|    static_cast<    \
  |  | 1109|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   169k|    }
 9840|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   767k|    {
  505|   767k|        return m_has_value;
  506|   767k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   530k|    {
  471|   530k|        return m_value;
  472|   530k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   173k|    {
 8855|   173k|        return m_str;
 8856|   173k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   358k|{
 6196|   358k|    detail::check_scan_arg_types<Args...>();
 6197|   358k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   358k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5910|   746k|{
 5911|   746k|    constexpr bool default_constructible_constraint =
 5912|   746k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   746k|    static_assert(default_constructible_constraint,
 5914|   746k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   746k|    constexpr bool destructible_constraint =
 5917|   746k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   746k|    static_assert(destructible_constraint,
 5919|   746k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   746k|    constexpr bool non_reference_constraint =
 5922|   746k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   746k|    static_assert(non_reference_constraint,
 5924|   746k|                  "Scan argument types must not be references");
 5925|       |
 5926|   746k|    constexpr bool movable_constraint =
 5927|   746k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   746k|    static_assert(movable_constraint,
 5929|   746k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   746k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   746k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   746k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   358k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   358k|    {
 6173|   358k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   358k|    {
 6181|   358k|        return {detail::make_arg<
 6182|   358k|            kind, Context,
 6183|   358k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   358k|                                 typename Context::char_type>::value>(args)...};
 6185|   358k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   358k|{
 5961|   358k|    return make_value<Context>(value).ref_value;
 5962|   358k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5895|   396k|{
 5896|   396k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   396k|                                  needs_context_tag>) {
 5900|   396k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   396k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5702|   396k|    {                                                                        \
 5703|   396k|        return val;                                                          \
 5704|   396k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5864|   746k|{
 5865|   746k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   746k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   746k|    constexpr bool scannable_char =
 5869|   746k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   746k|    static_assert(scannable_char,
 5871|   746k|                  "Cannot scan an argument of an unsupported character "
 5872|   746k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   746k|    constexpr bool scannable_const =
 5875|   746k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   746k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   746k|    constexpr bool scannable_disabled =
 5879|   746k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   746k|    static_assert(scannable_disabled,
 5881|   746k|                  "Cannot scan an argument that has been disabled by "
 5882|   746k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   746k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   746k|    static_assert(
 5886|   746k|        scannable,
 5887|   746k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   746k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   746k|    return arg_value{arg};
 5891|   746k|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5645|   746k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   746k|    {
 5647|   746k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6475|   677k|    {
 6476|   677k|        return m_values;
 6477|   677k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   358k|        : basic_scan_args(store.desc, store.args.data())
 6222|   358k|    {
 6223|   358k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   173k|        : m_str(r.str)
 8850|   173k|    {
 8851|   173k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   530k|    {
 1829|   530k|        return &value();
 1830|   530k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   530k|    {
 1783|   530k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   530k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   530k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   530k|        return this->get_value();
 1785|   530k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  86.5k|{
 9962|  86.5k|    auto result = make_scan_result<Source, Args...>();
 9963|  86.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  86.5k|                                   make_scan_args(result->values())));
 9965|  86.5k|    return result;
 9966|  86.5k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  18.5k|{
10003|  18.5k|    auto result = make_scan_result<Source, T>();
10004|  18.5k|    fill_scan_result(
10005|  18.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.5k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.5k|    return result;
10008|  18.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  37.2k|{
 5946|  37.2k|    check_scan_arg_types<T>();
 5947|       |
 5948|  37.2k|    basic_scan_arg<Context> arg;
 5949|  37.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  37.2k|    arg.m_value = make_value<Context>(value);
 5951|  37.2k|    return arg;
 5952|  37.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  69.6k|    {
 6498|  69.6k|        return std::get<0>(m_values);
 6499|  69.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  67.0k|    {
 2883|  67.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  67.0k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  67.0k|    {
 2864|  67.0k|        return decay_copy(t.begin());
 2865|  67.0k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  20.3M|{
 2108|  20.3M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  20.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  20.3M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.19M|    {
 2940|  1.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.19M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.19M|    {
 2922|  1.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.19M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  86.9k|{
 9893|  86.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  86.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  86.9k|                                   make_scan_args(result->values())));
 9896|  86.9k|    return result;
 9897|  86.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9848|   191k|{
 9849|   191k|    return scan_result_type<Source, Args...>();
 9850|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   191k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   191k|        : m_value(T{}), m_has_value(true)
  442|   191k|    {
  443|   191k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6692|   191k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   595k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   595k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   191k|{
 9834|   191k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 168k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   168k|    else {
 9838|   168k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   168k|    static_cast<    \
  |  | 1109|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   168k|    }
 9840|   191k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   595k|    {
 1754|   595k|        return has_value();
 1755|   595k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.19M|    {
  505|  1.19M|        return m_has_value;
  506|  1.19M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  67.0k|    {
 1760|  67.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  67.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  67.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  67.0k|        return this->get_unexpected().error();
 1762|  67.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  67.0k|    {
  488|  67.0k|        return m_unexpected;
  489|  67.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   764k|    {
  505|   764k|        return m_has_value;
  506|   764k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   528k|    {
  471|   528k|        return m_value;
  472|   528k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   528k|    {
 6567|   528k|        m_range = std::forward<Other>(r);
 6568|   528k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   528k|    {
 1809|   528k|        return value();
 1810|   528k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   528k|    {
 1783|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   528k|        return this->get_value();
 1785|   528k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   528k|    {
  471|   528k|        return m_value;
  472|   528k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|   270k|{
 9655|   270k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   270k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   270k|{
 9592|   270k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   270k|    auto result = vscan_impl(buffer, format, args);
 9595|   270k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.9k, False: 239k]
  |  |  ------------------
  ------------------
 9596|  30.9k|        return unexpected(result.error());
 9597|  30.9k|    }
 9598|   239k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   270k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   595k|{
 5399|   595k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   595k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   595k|                  "\n"
 5403|   595k|                  "Unsupported range type given as input to a scanning "
 5404|   595k|                  "function.\n"
 5405|   595k|                  "A range needs to have a character type (value type) "
 5406|   595k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   595k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   595k|                  "to be included.\n"
 5409|   595k|                  "See the scnlib documentation for more details.");
 5410|   595k|    static_assert(
 5411|   595k|        !std::is_same_v<T, custom_char_traits>,
 5412|   595k|        "\n"
 5413|   595k|        "Unsupported range type given as input to a scanning "
 5414|   595k|        "function.\n"
 5415|   595k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   595k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   595k|        "not supported.");
 5418|   595k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   595k|                  "\n"
 5420|   595k|                  "Unsupported range type given as input to a scanning "
 5421|   595k|                  "function.\n"
 5422|   595k|                  "file_marker_found cannot be used as an "
 5423|   595k|                  "source range type to scn::scan.\n"
 5424|   595k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   595k|                  "and do not provide an explicit source range, "
 5426|   595k|                  "or use scn::scan with a FILE* directly.");
 5427|   595k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   595k|                  "\n"
 5429|   595k|                  "Unsupported range type given as input to a scanning "
 5430|   595k|                  "function.\n"
 5431|   595k|                  "In order to be scannable, a range needs to satisfy "
 5432|   595k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   595k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   595k|                  "\n"
 5435|   595k|                  "Unsupported range type given as input to a scanning "
 5436|   595k|                  "function.\n"
 5437|   595k|                  "A range needs to model forward_range and have a valid "
 5438|   595k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   595k|                  "Examples of scannable ranges are std::string, "
 5440|   595k|                  "std::string_view, "
 5441|   595k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   595k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   595k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   595k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   595k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   595k|    else {
 5384|   595k|        return make_forward_scan_buffer(r);
 5385|   595k|    }
 5386|   595k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   595k|{
 5203|   595k|    return basic_scan_forward_buffer_impl(range);
 5204|   595k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   595k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   595k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   595k|          m_cursor(ranges::begin(*m_range))
 4784|   595k|    {
 4785|   595k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   595k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   595k|    {
 4756|   595k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   595k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   595k|    {
 4447|   595k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   595k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.12M|    {
 2883|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.12M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.12M|    {
 2864|  1.12M|        return decay_copy(t.begin());
 2865|  1.12M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|  1.65M|    {
 3494|  1.65M|        return m_iterator;
 3495|  1.65M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  5.75M|    {
 4789|  5.75M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 174k, False: 5.58M]
  ------------------
 4790|   174k|            return false;
 4791|   174k|        }
 4792|  5.58M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  5.58M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  5.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  5.58M|        }
 4795|  5.58M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 4.99M, False: 588k]
  ------------------
 4796|  4.99M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  4.99M|                                          this->m_current_view.begin(),
 4798|  4.99M|                                          this->m_current_view.end());
 4799|  4.99M|        }
 4800|  5.58M|        m_latest = *m_cursor;
 4801|  5.58M|        ++m_cursor;
 4802|  5.58M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  5.58M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  5.58M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  5.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  5.58M|        }
 4806|  5.58M|        return true;
 4807|  5.75M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  16.9M|    {
 2940|  16.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  16.9M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  16.9M|    {
 2922|  16.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  16.9M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  17.4M|    {
 3498|  17.4M|        return m_sentinel;
 3499|  17.4M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   595k|    {
 4364|   595k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   595k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   595k|        return true;
 4366|   595k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  67.0k|        : base(unexpect, std::move(e.error())),
 1630|  67.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  67.0k|    {
 1632|  67.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  67.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  67.0k|          m_has_value(false)
  466|  67.0k|    {
  467|  67.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   595k|    {
 1330|   595k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   528k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   528k|                      ranges::iterator_t<SourceRange>>) {
 6799|   528k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   528k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   528k|    {
 2883|   528k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   528k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   528k|    {
 2864|   528k|        return decay_copy(t.begin());
 2865|   528k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   528k|{
 6784|   528k|    return ranges::end(source);
 6785|   528k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   528k|    {
 2940|   528k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   528k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   528k|    {
 2922|   528k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   528k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   528k|        : base(std::in_place, std::forward<U>(val)),
 1584|   528k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   528k|    {
 1586|   528k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   528k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   528k|    {
  457|   528k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   173k|    {
 8855|   173k|        return m_str;
 8856|   173k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.12M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.12M|    static_cast<    \
  |  | 1109|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.12M|    static_cast<    \
  |  | 1109|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.12M|    {
 3480|  1.12M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   173k|        : m_str(r.str)
 8850|   173k|    {
 8851|   173k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   528k|    {
 1829|   528k|        return &value();
 1830|   528k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   528k|    {
 1783|   528k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   528k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   528k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   528k|        return this->get_value();
 1785|   528k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   528k|    {
 6556|   528k|        return ranges::begin(m_range);
 6557|   528k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  86.9k|{
 9962|  86.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  86.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  86.9k|                                   make_scan_args(result->values())));
 9965|  86.9k|    return result;
 9966|  86.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|   270k|{
 9673|   270k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   270k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   270k|{
 9608|   270k|#if !SCN_DISABLE_LOCALE
 9609|   270k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   270k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   270k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   270k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   270k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.9k, False: 239k]
  |  |  ------------------
  ------------------
 9616|  30.9k|        return unexpected(result.error());
 9617|  30.9k|    }
 9618|   239k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   270k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  17.4k|{
10003|  17.4k|    auto result = make_scan_result<Source, T>();
10004|  17.4k|    fill_scan_result(
10005|  17.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  17.4k|                            detail::make_arg<scan_context>(result->value())));
10007|  17.4k|    return result;
10008|  17.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  54.3k|{
 9686|  54.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  54.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  54.3k|{
 9632|  54.3k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  54.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  54.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.16k, False: 49.1k]
  |  |  ------------------
  ------------------
 9636|  5.16k|        return unexpected(result.error());
 9637|  5.16k|    }
 9638|  49.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  54.3k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  90.8k|{
 9893|  90.8k|    auto result = make_scan_result<Source, Args...>();
 9894|  90.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  90.8k|                                   make_scan_args(result->values())));
 9896|  90.8k|    return result;
 9897|  90.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9848|   200k|{
 9849|   200k|    return scan_result_type<Source, Args...>();
 9850|   200k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   200k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   200k|        : m_value(T{}), m_has_value(true)
  442|   200k|    {
  443|   200k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6692|   200k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   200k|{
 9834|   200k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 177k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   177k|    else {
 9838|   177k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   177k|    static_cast<    \
  |  | 1109|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   177k|    }
 9840|   200k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   800k|    {
  505|   800k|        return m_has_value;
  506|   800k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   555k|    {
  471|   555k|        return m_value;
  472|   555k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   181k|    {
 8855|   181k|        return m_str;
 8856|   181k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   181k|        : m_str(r.str)
 8850|   181k|    {
 8851|   181k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   200k|    {
 1754|   200k|        return has_value();
 1755|   200k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   555k|    {
 1829|   555k|        return &value();
 1830|   555k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   555k|    {
 1783|   555k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   555k|        return this->get_value();
 1785|   555k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  90.8k|{
 9962|  90.8k|    auto result = make_scan_result<Source, Args...>();
 9963|  90.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  90.8k|                                   make_scan_args(result->values())));
 9965|  90.8k|    return result;
 9966|  90.8k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  18.2k|{
10003|  18.2k|    auto result = make_scan_result<Source, T>();
10004|  18.2k|    fill_scan_result(
10005|  18.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.2k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.2k|    return result;
10008|  18.2k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  92.8k|{
 9893|  92.8k|    auto result = make_scan_result<Source, Args...>();
 9894|  92.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  92.8k|                                   make_scan_args(result->values())));
 9896|  92.8k|    return result;
 9897|  92.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9848|   204k|{
 9849|   204k|    return scan_result_type<Source, Args...>();
 9850|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   204k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   204k|        : m_value(T{}), m_has_value(true)
  442|   204k|    {
  443|   204k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6692|   204k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   204k|{
 9834|   204k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.3k, False: 181k]
  |  |  ------------------
  ------------------
 9835|  22.3k|        out = unexpected(in.error());
 9836|  22.3k|    }
 9837|   181k|    else {
 9838|   181k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   181k|    static_cast<    \
  |  | 1109|   181k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   181k|    }
 9840|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.3k|        : base(unexpect, std::move(e.error())),
 1630|  22.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.3k|    {
 1632|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.3k|          m_has_value(false)
  466|  22.3k|    {
  467|  22.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.3k|    {
 1330|  22.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.3k|    {
  917|  22.3k|        assign_common(std::move(other));
  918|  22.3k|        return *this;
  919|  22.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.3k|    {
  964|  22.3k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.3k, False: 0]
  ------------------
  965|  22.3k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.3k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.3k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   817k|    {
  505|   817k|        return m_has_value;
  506|   817k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   568k|    {
  471|   568k|        return m_value;
  472|   568k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.3k|    {
 1060|  22.3k|        this->destroy_value();
 1061|  22.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.3k|    {
  519|  22.3k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.3k|                                  std::forward<Args>(args)...);
  521|  22.3k|        m_has_value = false;
  522|  22.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.3k|    {
  488|  22.3k|        return m_unexpected;
  489|  22.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.3k|    {
  496|  22.3k|        return std::move(m_unexpected);
  497|  22.3k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   185k|    {
 8855|   185k|        return m_str;
 8856|   185k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   185k|        : m_str(r.str)
 8850|   185k|    {
 8851|   185k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   204k|    {
 1754|   204k|        return has_value();
 1755|   204k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   568k|    {
 1829|   568k|        return &value();
 1830|   568k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   568k|    {
 1783|   568k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   568k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   568k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   568k|        return this->get_value();
 1785|   568k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  92.8k|{
 9962|  92.8k|    auto result = make_scan_result<Source, Args...>();
 9963|  92.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  92.8k|                                   make_scan_args(result->values())));
 9965|  92.8k|    return result;
 9966|  92.8k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  18.6k|{
10003|  18.6k|    auto result = make_scan_result<Source, T>();
10004|  18.6k|    fill_scan_result(
10005|  18.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.6k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.6k|    return result;
10008|  18.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   137k|    {
 2883|   137k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   137k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   137k|    {
 2864|   137k|        return decay_copy(t.begin());
 2865|   137k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  4.10M|{
 2108|  4.10M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  4.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  4.10M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.00M|    {
 2940|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.00M|    {
 2922|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.00M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9848|   156k|{
 9849|   156k|    return scan_result_type<Source, Args...>();
 9850|   156k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   156k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   156k|        : m_value(T{}), m_has_value(true)
  442|   156k|    {
  443|   156k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6692|   156k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   502k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   502k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   156k|{
 9834|   156k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 111k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   111k|    else {
 9838|   111k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   111k|    static_cast<    \
  |  | 1109|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   111k|    }
 9840|   156k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   502k|    {
 1754|   502k|        return has_value();
 1755|   502k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.00M|    {
  505|  1.00M|        return m_has_value;
  506|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   134k|    {
 1760|   134k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   134k|        return this->get_unexpected().error();
 1762|   134k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   134k|    {
  488|   134k|        return m_unexpected;
  489|   134k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   624k|    {
  505|   624k|        return m_has_value;
  506|   624k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   378k|    {
  471|   378k|        return m_value;
  472|   378k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|   368k|    {
 6567|   368k|        m_range = std::forward<Other>(r);
 6568|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   368k|    {
 1809|   368k|        return value();
 1810|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   368k|    {
 1783|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   368k|        return this->get_value();
 1785|   368k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   368k|    {
  471|   368k|        return m_value;
  472|   368k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   228k|{
 9592|   228k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   228k|    auto result = vscan_impl(buffer, format, args);
 9595|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.9k, False: 166k]
  |  |  ------------------
  ------------------
 9596|  61.9k|        return unexpected(result.error());
 9597|  61.9k|    }
 9598|   166k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   228k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|   502k|{
 5399|   502k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   502k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   502k|                  "\n"
 5403|   502k|                  "Unsupported range type given as input to a scanning "
 5404|   502k|                  "function.\n"
 5405|   502k|                  "A range needs to have a character type (value type) "
 5406|   502k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   502k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   502k|                  "to be included.\n"
 5409|   502k|                  "See the scnlib documentation for more details.");
 5410|   502k|    static_assert(
 5411|   502k|        !std::is_same_v<T, custom_char_traits>,
 5412|   502k|        "\n"
 5413|   502k|        "Unsupported range type given as input to a scanning "
 5414|   502k|        "function.\n"
 5415|   502k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   502k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   502k|        "not supported.");
 5418|   502k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   502k|                  "\n"
 5420|   502k|                  "Unsupported range type given as input to a scanning "
 5421|   502k|                  "function.\n"
 5422|   502k|                  "file_marker_found cannot be used as an "
 5423|   502k|                  "source range type to scn::scan.\n"
 5424|   502k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   502k|                  "and do not provide an explicit source range, "
 5426|   502k|                  "or use scn::scan with a FILE* directly.");
 5427|   502k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   502k|                  "\n"
 5429|   502k|                  "Unsupported range type given as input to a scanning "
 5430|   502k|                  "function.\n"
 5431|   502k|                  "In order to be scannable, a range needs to satisfy "
 5432|   502k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   502k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   502k|                  "\n"
 5435|   502k|                  "Unsupported range type given as input to a scanning "
 5436|   502k|                  "function.\n"
 5437|   502k|                  "A range needs to model forward_range and have a valid "
 5438|   502k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   502k|                  "Examples of scannable ranges are std::string, "
 5440|   502k|                  "std::string_view, "
 5441|   502k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   502k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   502k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   502k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   502k|{
 5338|   502k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   502k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   502k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   502k|    {
 3014|   502k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   502k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   502k|    {
 2995|   502k|        return t.data();
 2996|   502k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|   502k|    {
 3397|   502k|        return detail::to_address(ranges::begin(derived()));
 3398|   502k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  2.41M|{
  331|  2.41M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  2.41M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  2.41M|{
  309|  2.41M|    return p;
  310|  2.41M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   871k|    {
 2883|   871k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   871k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   871k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   871k|    {
 2864|   871k|        return decay_copy(t.begin());
 2865|   871k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  20.8M|    {
 3494|  20.8M|        return m_iterator;
 3495|  20.8M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|   502k|    {
 3353|   502k|        return static_cast<const D&>(*this);
 3354|   502k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   502k|    {
 3089|   502k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   502k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   502k|    {
 3055|   502k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   502k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  2.62M|    {
 3510|  2.62M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  2.62M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   134k|        : base(unexpect, std::move(e.error())),
 1630|   134k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   134k|    {
 1632|   134k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   134k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   134k|          m_has_value(false)
  466|   134k|    {
  467|   134k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   502k|    {
 1330|   502k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   368k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   368k|                      ranges::iterator_t<SourceRange>>) {
 6799|   368k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   368k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.71M|    {
 2883|  1.71M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.71M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.71M|    {
 2864|  1.71M|        return decay_copy(t.begin());
 2865|  1.71M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|   368k|{
 6784|   368k|    return ranges::end(source);
 6785|   368k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   368k|    {
 2940|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   368k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   368k|    {
 2922|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   368k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  12.5M|    {
 3498|  12.5M|        return m_sentinel;
 3499|  12.5M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   368k|        : base(std::in_place, std::forward<U>(val)),
 1584|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   368k|    {
 1586|   368k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   368k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   368k|    {
  457|   368k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   142k|    {
 8855|   142k|        return m_str;
 8856|   142k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   285k|{
 6196|   285k|    detail::check_scan_arg_types<Args...>();
 6197|   285k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   285k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   285k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   285k|    {
 6173|   285k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   285k|    {
 6181|   285k|        return {detail::make_arg<
 6182|   285k|            kind, Context,
 6183|   285k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   285k|                                 typename Context::char_type>::value>(args)...};
 6185|   285k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   285k|{
 5961|   285k|    return make_value<Context>(value).ref_value;
 5962|   285k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5895|   312k|{
 5896|   312k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   312k|                                  needs_context_tag>) {
 5900|   312k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   312k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5702|   312k|    {                                                                        \
 5703|   312k|        return val;                                                          \
 5704|   312k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   285k|        : basic_scan_args(store.desc, store.args.data())
 6222|   285k|    {
 6223|   285k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   914k|        : m_desc(desc), m_builtin_values(data)
 6274|   914k|    {
 6275|   914k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  7.78M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.78M|    static_cast<    \
  |  | 1109|  7.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.78M|    static_cast<    \
  |  | 1109|  7.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  7.78M|    {
 3480|  7.78M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   914k|{
 8537|   914k|    return s;
 8538|   914k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   914k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   142k|        : m_str(r.str)
 8850|   142k|    {
 8851|   142k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   156k|    {
 1754|   156k|        return has_value();
 1755|   156k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   378k|    {
 1829|   378k|        return &value();
 1830|   378k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   378k|    {
 1783|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   378k|        return this->get_value();
 1785|   378k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|   368k|    {
 6556|   368k|        return ranges::begin(m_range);
 6557|   368k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   228k|{
 9608|   228k|#if !SCN_DISABLE_LOCALE
 9609|   228k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   228k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   228k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   228k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.9k, False: 166k]
  |  |  ------------------
  ------------------
 9616|  61.9k|        return unexpected(result.error());
 9617|  61.9k|    }
 9618|   166k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   228k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.2k|{
 9632|  45.2k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.3k, False: 34.9k]
  |  |  ------------------
  ------------------
 9636|  10.3k|        return unexpected(result.error());
 9637|  10.3k|    }
 9638|  34.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  26.8k|{
 5946|  26.8k|    check_scan_arg_types<T>();
 5947|       |
 5948|  26.8k|    basic_scan_arg<Context> arg;
 5949|  26.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  26.8k|    arg.m_value = make_value<Context>(value);
 5951|  26.8k|    return arg;
 5952|  26.8k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  1.00M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9848|   171k|{
 9849|   171k|    return scan_result_type<Source, Args...>();
 9850|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   171k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   171k|        : m_value(T{}), m_has_value(true)
  442|   171k|    {
  443|   171k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|   171k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   171k|{
 9834|   171k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 126k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   126k|    else {
 9838|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   126k|    }
 9840|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   684k|    {
  505|   684k|        return m_has_value;
  506|   684k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   424k|    {
  471|   424k|        return m_value;
  472|   424k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   155k|    {
 8855|   155k|        return m_str;
 8856|   155k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   311k|{
 6196|   311k|    detail::check_scan_arg_types<Args...>();
 6197|   311k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   311k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   311k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   311k|    {
 6173|   311k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   311k|    {
 6181|   311k|        return {detail::make_arg<
 6182|   311k|            kind, Context,
 6183|   311k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   311k|                                 typename Context::char_type>::value>(args)...};
 6185|   311k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   311k|{
 5961|   311k|    return make_value<Context>(value).ref_value;
 5962|   311k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|   342k|{
 5896|   342k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   342k|                                  needs_context_tag>) {
 5900|   342k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   342k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|   342k|    {                                                                        \
 5703|   342k|        return val;                                                          \
 5704|   342k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   311k|        : basic_scan_args(store.desc, store.args.data())
 6222|   311k|    {
 6223|   311k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   155k|        : m_str(r.str)
 8850|   155k|    {
 8851|   155k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   171k|    {
 1754|   171k|        return has_value();
 1755|   171k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   424k|    {
 1829|   424k|        return &value();
 1830|   424k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   424k|    {
 1783|   424k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   424k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   424k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   424k|        return this->get_value();
 1785|   424k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  31.1k|{
 5946|  31.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  31.1k|    basic_scan_arg<Context> arg;
 5949|  31.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  31.1k|    arg.m_value = make_value<Context>(value);
 5951|  31.1k|    return arg;
 5952|  31.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9848|   175k|{
 9849|   175k|    return scan_result_type<Source, Args...>();
 9850|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   175k|        : m_value(T{}), m_has_value(true)
  442|   175k|    {
  443|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6692|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   175k|{
 9834|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 130k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   130k|    else {
 9838|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   130k|    static_cast<    \
  |  | 1109|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   130k|    }
 9840|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   701k|    {
  505|   701k|        return m_has_value;
  506|   701k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   437k|    {
  471|   437k|        return m_value;
  472|   437k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   159k|    {
 8855|   159k|        return m_str;
 8856|   159k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   318k|{
 6196|   318k|    detail::check_scan_arg_types<Args...>();
 6197|   318k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   318k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   318k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   318k|    {
 6173|   318k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   318k|    {
 6181|   318k|        return {detail::make_arg<
 6182|   318k|            kind, Context,
 6183|   318k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   318k|                                 typename Context::char_type>::value>(args)...};
 6185|   318k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   318k|{
 5961|   318k|    return make_value<Context>(value).ref_value;
 5962|   318k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5895|   350k|{
 5896|   350k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   350k|                                  needs_context_tag>) {
 5900|   350k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   350k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5702|   350k|    {                                                                        \
 5703|   350k|        return val;                                                          \
 5704|   350k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   318k|        : basic_scan_args(store.desc, store.args.data())
 6222|   318k|    {
 6223|   318k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   159k|        : m_str(r.str)
 8850|   159k|    {
 8851|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   175k|    {
 1754|   175k|        return has_value();
 1755|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   437k|    {
 1829|   437k|        return &value();
 1830|   437k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   437k|    {
 1783|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   437k|        return this->get_value();
 1785|   437k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  32.3k|{
 5946|  32.3k|    check_scan_arg_types<T>();
 5947|       |
 5948|  32.3k|    basic_scan_arg<Context> arg;
 5949|  32.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  32.3k|    arg.m_value = make_value<Context>(value);
 5951|  32.3k|    return arg;
 5952|  32.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   134k|    {
 2883|   134k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   134k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   134k|    {
 2864|   134k|        return decay_copy(t.begin());
 2865|   134k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  10.0M|{
 2108|  10.0M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  10.0M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.00M|    {
 2940|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.00M|    {
 2922|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.00M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9848|   156k|{
 9849|   156k|    return scan_result_type<Source, Args...>();
 9850|   156k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   156k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   156k|        : m_value(T{}), m_has_value(true)
  442|   156k|    {
  443|   156k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6692|   156k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   502k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   502k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   156k|{
 9834|   156k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 111k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   111k|    else {
 9838|   111k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   111k|    static_cast<    \
  |  | 1109|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   111k|    }
 9840|   156k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   502k|    {
 1754|   502k|        return has_value();
 1755|   502k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.00M|    {
  505|  1.00M|        return m_has_value;
  506|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|   134k|    {
 1760|   134k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   134k|        return this->get_unexpected().error();
 1762|   134k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   134k|    {
  488|   134k|        return m_unexpected;
  489|   134k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   624k|    {
  505|   624k|        return m_has_value;
  506|   624k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   378k|    {
  471|   378k|        return m_value;
  472|   378k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   368k|    {
 6567|   368k|        m_range = std::forward<Other>(r);
 6568|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   368k|    {
 1809|   368k|        return value();
 1810|   368k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   368k|    {
 1783|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   368k|        return this->get_value();
 1785|   368k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   368k|    {
  471|   368k|        return m_value;
  472|   368k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   228k|{
 9592|   228k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   228k|    auto result = vscan_impl(buffer, format, args);
 9595|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.9k, False: 166k]
  |  |  ------------------
  ------------------
 9596|  61.9k|        return unexpected(result.error());
 9597|  61.9k|    }
 9598|   166k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   228k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   502k|{
 5399|   502k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   502k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   502k|                  "\n"
 5403|   502k|                  "Unsupported range type given as input to a scanning "
 5404|   502k|                  "function.\n"
 5405|   502k|                  "A range needs to have a character type (value type) "
 5406|   502k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   502k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   502k|                  "to be included.\n"
 5409|   502k|                  "See the scnlib documentation for more details.");
 5410|   502k|    static_assert(
 5411|   502k|        !std::is_same_v<T, custom_char_traits>,
 5412|   502k|        "\n"
 5413|   502k|        "Unsupported range type given as input to a scanning "
 5414|   502k|        "function.\n"
 5415|   502k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   502k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   502k|        "not supported.");
 5418|   502k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   502k|                  "\n"
 5420|   502k|                  "Unsupported range type given as input to a scanning "
 5421|   502k|                  "function.\n"
 5422|   502k|                  "file_marker_found cannot be used as an "
 5423|   502k|                  "source range type to scn::scan.\n"
 5424|   502k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   502k|                  "and do not provide an explicit source range, "
 5426|   502k|                  "or use scn::scan with a FILE* directly.");
 5427|   502k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   502k|                  "\n"
 5429|   502k|                  "Unsupported range type given as input to a scanning "
 5430|   502k|                  "function.\n"
 5431|   502k|                  "In order to be scannable, a range needs to satisfy "
 5432|   502k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   502k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   502k|                  "\n"
 5435|   502k|                  "Unsupported range type given as input to a scanning "
 5436|   502k|                  "function.\n"
 5437|   502k|                  "A range needs to model forward_range and have a valid "
 5438|   502k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   502k|                  "Examples of scannable ranges are std::string, "
 5440|   502k|                  "std::string_view, "
 5441|   502k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   502k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   502k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   502k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   502k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   502k|    else {
 5384|   502k|        return make_forward_scan_buffer(r);
 5385|   502k|    }
 5386|   502k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   502k|{
 5203|   502k|    return basic_scan_forward_buffer_impl(range);
 5204|   502k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   502k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   502k|          m_cursor(ranges::begin(*m_range))
 4784|   502k|    {
 4785|   502k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   502k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   502k|    {
 4756|   502k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   502k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   502k|    {
 4447|   502k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   502k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   870k|    {
 2883|   870k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   870k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   870k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   870k|    {
 2864|   870k|        return decay_copy(t.begin());
 2865|   870k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  1.23M|    {
 3494|  1.23M|        return m_iterator;
 3495|  1.23M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  2.57M|    {
 4789|  2.57M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 182k, False: 2.38M]
  ------------------
 4790|   182k|            return false;
 4791|   182k|        }
 4792|  2.38M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  2.38M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  2.38M|        }
 4795|  2.38M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.88M, False: 500k]
  ------------------
 4796|  1.88M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.88M|                                          this->m_current_view.begin(),
 4798|  1.88M|                                          this->m_current_view.end());
 4799|  1.88M|        }
 4800|  2.38M|        m_latest = *m_cursor;
 4801|  2.38M|        ++m_cursor;
 4802|  2.38M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  2.38M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  2.38M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  2.38M|        }
 4806|  2.38M|        return true;
 4807|  2.57M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  7.34M|    {
 2940|  7.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  7.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  7.34M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  7.34M|    {
 2922|  7.34M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  7.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  7.34M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  7.71M|    {
 3498|  7.71M|        return m_sentinel;
 3499|  7.71M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   502k|    {
 4364|   502k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   502k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   502k|        return true;
 4366|   502k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|   134k|        : base(unexpect, std::move(e.error())),
 1630|   134k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   134k|    {
 1632|   134k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|   134k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   134k|          m_has_value(false)
  466|   134k|    {
  467|   134k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   502k|    {
 1330|   502k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   368k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   368k|                      ranges::iterator_t<SourceRange>>) {
 6799|   368k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   368k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   368k|    {
 2883|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   368k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   368k|    {
 2864|   368k|        return decay_copy(t.begin());
 2865|   368k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   368k|{
 6784|   368k|    return ranges::end(source);
 6785|   368k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   368k|    {
 2940|   368k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   368k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   368k|    {
 2922|   368k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   368k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   368k|        : base(std::in_place, std::forward<U>(val)),
 1584|   368k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   368k|    {
 1586|   368k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   368k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   368k|    {
  457|   368k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   142k|    {
 8855|   142k|        return m_str;
 8856|   142k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   870k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   870k|    static_cast<    \
  |  | 1109|   870k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   870k|    static_cast<    \
  |  | 1109|   870k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   870k|    {
 3480|   870k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   142k|        : m_str(r.str)
 8850|   142k|    {
 8851|   142k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   156k|    {
 1754|   156k|        return has_value();
 1755|   156k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   378k|    {
 1829|   378k|        return &value();
 1830|   378k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   378k|    {
 1783|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   378k|        return this->get_value();
 1785|   378k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   368k|    {
 6556|   368k|        return ranges::begin(m_range);
 6557|   368k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   228k|{
 9608|   228k|#if !SCN_DISABLE_LOCALE
 9609|   228k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   228k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   228k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   228k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   228k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.9k, False: 166k]
  |  |  ------------------
  ------------------
 9616|  61.9k|        return unexpected(result.error());
 9617|  61.9k|    }
 9618|   166k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   228k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.1k|{
 9632|  45.1k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.3k, False: 34.8k]
  |  |  ------------------
  ------------------
 9636|  10.3k|        return unexpected(result.error());
 9637|  10.3k|    }
 9638|  34.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  34.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9848|   171k|{
 9849|   171k|    return scan_result_type<Source, Args...>();
 9850|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   171k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   171k|        : m_value(T{}), m_has_value(true)
  442|   171k|    {
  443|   171k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6692|   171k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   171k|{
 9834|   171k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 126k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   126k|    else {
 9838|   126k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   126k|    }
 9840|   171k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   684k|    {
  505|   684k|        return m_has_value;
  506|   684k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   423k|    {
  471|   423k|        return m_value;
  472|   423k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   155k|    {
 8855|   155k|        return m_str;
 8856|   155k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   155k|        : m_str(r.str)
 8850|   155k|    {
 8851|   155k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   171k|    {
 1754|   171k|        return has_value();
 1755|   171k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   423k|    {
 1829|   423k|        return &value();
 1830|   423k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   423k|    {
 1783|   423k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   423k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   423k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   423k|        return this->get_value();
 1785|   423k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9848|   175k|{
 9849|   175k|    return scan_result_type<Source, Args...>();
 9850|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   175k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   175k|        : m_value(T{}), m_has_value(true)
  442|   175k|    {
  443|   175k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6692|   175k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   175k|{
 9834|   175k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.7k, False: 130k]
  |  |  ------------------
  ------------------
 9835|  44.7k|        out = unexpected(in.error());
 9836|  44.7k|    }
 9837|   130k|    else {
 9838|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   130k|    static_cast<    \
  |  | 1109|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   130k|    }
 9840|   175k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  44.7k|        : base(unexpect, std::move(e.error())),
 1630|  44.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  44.7k|    {
 1632|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  44.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  44.7k|          m_has_value(false)
  466|  44.7k|    {
  467|  44.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  44.7k|    {
 1330|  44.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  44.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  44.7k|    {
  917|  44.7k|        assign_common(std::move(other));
  918|  44.7k|        return *this;
  919|  44.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  44.7k|    {
  964|  44.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 44.7k, False: 0]
  ------------------
  965|  44.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 44.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  44.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  44.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   701k|    {
  505|   701k|        return m_has_value;
  506|   701k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   436k|    {
  471|   436k|        return m_value;
  472|   436k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  44.7k|    {
 1060|  44.7k|        this->destroy_value();
 1061|  44.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  44.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  44.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  44.7k|    {
  519|  44.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  44.7k|                                  std::forward<Args>(args)...);
  521|  44.7k|        m_has_value = false;
  522|  44.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  44.7k|    {
  488|  44.7k|        return m_unexpected;
  489|  44.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  44.7k|    {
  496|  44.7k|        return std::move(m_unexpected);
  497|  44.7k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   159k|    {
 8855|   159k|        return m_str;
 8856|   159k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   159k|        : m_str(r.str)
 8850|   159k|    {
 8851|   159k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   175k|    {
 1754|   175k|        return has_value();
 1755|   175k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   436k|    {
 1829|   436k|        return &value();
 1830|   436k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   436k|    {
 1783|   436k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   436k|        return this->get_value();
 1785|   436k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|  2.46M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|  2.46M|    {
 3760|  2.46M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  2.46M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|  2.46M|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|   214k|    {
 3771|   214k|        return m_code;
 3772|   214k|    }
_ZNK3scn2v410scan_error3msgEv:
 3775|  2.12k|    {
 3776|  2.12k|        return m_msg;
 3777|  2.12k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   448k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   448k|    else {
 3999|   448k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   448k|    }
 4001|   448k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  26.0M|    {
 3494|  26.0M|        return m_iterator;
 3495|  26.0M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  21.3M|    {
 3494|  21.3M|        return m_iterator;
 3495|  21.3M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  13.3M|    {
  587|  13.3M|        return m_has_value;
  588|  13.3M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  2.61M|    {
  570|  2.61M|        return m_unexpected;
  571|  2.61M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   321k|    {
 1760|   321k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   321k|        return this->get_unexpected().error();
 1762|   321k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.56M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.15M|    {
 7141|  1.15M|        m_specs.type = type;
 7142|  1.15M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  1.56M|    {
 7214|  1.56M|        return m_error;
 7215|  1.56M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|  2.43M|{
 3936|  2.43M|    return unexpected(scan_error{c, m});
 3937|  2.43M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  4.18M|{
 4326|       |    // Pattern_White_Space property
 4327|  4.18M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 4.02M, False: 164k]
  |  Branch (4327:27): [True: 376k, False: 3.64M]
  ------------------
 4328|  4.18M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 28.8k, False: 3.78M]
  ------------------
 4329|  4.18M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 39.1k, False: 3.74M]
  ------------------
 4330|  4.18M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 3.81k, False: 3.73M]
  ------------------
 4331|  4.18M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 22.8k, False: 3.71M]
  ------------------
 4332|  4.18M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 968k, False: 2.74M]
  ------------------
 4333|  4.18M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 348, False: 2.74M]
  ------------------
 4334|  4.18M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|   406k|{
 7897|   406k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 406k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 406k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 406k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 406k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 406k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 406k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 406k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 406k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 406k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 406k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 406k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 406k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 406k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 406k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 406k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 406k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 406k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 406k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|   125k|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 125k, False: 280k]
  ------------------
 7927|   263k|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 137k, False: 268k]
  ------------------
 7928|   406k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 143k, False: 263k]
  ------------------
 7929|   406k|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 406k]
  ------------------
 7930|   406k|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 406k]
  ------------------
 7931|   406k|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 406k]
  ------------------
 7932|   406k|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 406k]
  ------------------
 7933|   406k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 406k]
  ------------------
 7934|   406k|            return arg_type_category::floating;
 7935|       |
 7936|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 0, False: 406k]
  ------------------
 7937|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 0, False: 406k]
  ------------------
 7938|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 0, False: 406k]
  ------------------
 7939|      0|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 406k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 406k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|   406k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|   406k|            SCN_CLANG_POP
 7950|   406k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|   406k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  2.29M|    {
 1770|  2.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.29M|        return std::move(this->get_unexpected().error());
 1772|  2.29M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  1.75M|    {
 3055|  1.75M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  1.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  1.75M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|  1.75M|    {
 3089|  1.75M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  1.75M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|  1.75M|    {
 3112|  1.75M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|  1.75M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|  1.75M|    {
 3121|  1.75M|        return fn::impl(std::forward<T>(t));
 3122|  1.75M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  1.56M|{
 8033|  1.56M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 1.15M, False: 406k]
  ------------------
 8034|  1.56M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 0, False: 1.15M]
  ------------------
 8035|  1.15M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 0, False: 1.15M]
  ------------------
 8036|      0|        SCN_UNLIKELY_ATTR
 8037|      0|        return handler.on_error("Invalid type specifier for float type");
 8038|      0|    }
 8039|  1.56M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  10.7M|    {
 1754|  10.7M|        return has_value();
 1755|  10.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|   133M|    {
 4491|   133M|        assert(m_begin);
 4492|   133M|        return m_end == nullptr;
 4493|   133M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|  2.19M|    {
 4508|  2.19M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 2.19M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  2.19M|        return parent()->get_segment_starting_at(position());
 4514|  2.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  73.8M|    {
 4502|  73.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  73.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  73.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  73.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  73.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  2.19M|    {
 4395|  2.19M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 932k, False: 1.25M]
  |  |  ------------------
  ------------------
 4396|  2.19M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   932k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   932k|        }
 4399|  1.25M|        const auto start = pos - m_putback_buffer.size();
 4400|  1.25M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  1.25M|        return m_current_view.substr(start);
 4402|  1.25M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4496|  1.54M|    {
 4497|  1.54M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.54M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.54M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|  4.00M|    {
 4486|  4.00M|        return m_position;
 4487|  4.00M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|  1.78M|    {
 4417|  1.78M|        return m_is_contiguous;
 4418|  1.78M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  69.4M|    {
 4491|  69.4M|        assert(m_begin);
 4492|  69.4M|        return m_end == nullptr;
 4493|  69.4M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   352k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   352k|    else {
 3999|   352k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   352k|    }
 4001|   352k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  1.24M|    {
 4508|  1.24M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 1.24M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  1.24M|        return parent()->get_segment_starting_at(position());
 4514|  1.24M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  37.1M|    {
 4502|  37.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  37.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  37.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  37.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  1.24M|    {
 4395|  1.24M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 722k, False: 522k]
  |  |  ------------------
  ------------------
 4396|  1.24M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   722k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   722k|        }
 4399|   522k|        const auto start = pos - m_putback_buffer.size();
 4400|   522k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   522k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   522k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   522k|        return m_current_view.substr(start);
 4402|   522k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4496|  1.31M|    {
 4497|  1.31M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.31M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  2.70M|    {
 4486|  2.70M|        return m_position;
 4487|  2.70M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  1.50M|    {
 4417|  1.50M|        return m_is_contiguous;
 4418|  1.50M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|  3.28M|    {
 3348|  3.28M|        return static_cast<D&>(*this);
 3349|  3.28M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|  3.28M|    {
 3389|  3.28M|        return detail::to_address(ranges::begin(derived()));
 3390|  3.28M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  1.17M|    {
 3348|  1.17M|        return static_cast<D&>(*this);
 3349|  1.17M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  1.17M|    {
 3389|  1.17M|        return detail::to_address(ranges::begin(derived()));
 3390|  1.17M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   432k|    {
 9052|   432k|        return ranges::subrange{begin(), end()};
 9053|   432k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   432k|    {
 9044|   432k|        return ranges::default_sentinel;
 9045|   432k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  6.33M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.33M|    static_cast<    \
  |  | 1109|  6.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.33M|    static_cast<    \
  |  | 1109|  6.33M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  6.33M|    {
 3480|  6.33M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  3.32M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   595k|    {
 1993|   595k|        return detail::transform_error_impl(std::move(*this),
 1994|   595k|                                            std::forward<F>(f));
 1995|   595k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   595k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   595k|    else {
 1486|   595k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   595k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   595k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 585k, False: 9.65k]
  |  |  ------------------
  ------------------
 1488|   595k|                   ? result(*std::forward<Exp>(exp))
 1489|   595k|                   : result(unexpect,
 1490|  9.65k|                            trivial_invoke(std::forward<F>(f),
 1491|  9.65k|                                           std::forward<Exp>(exp).error()));
 1492|   595k|    }
 1493|   595k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  6.18M|    {
  505|  6.18M|        return m_has_value;
  506|  6.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.10M|    {
 1819|  2.10M|        return std::move(value());
 1820|  2.10M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.37M|    {
 1783|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.37M|        return this->get_value();
 1785|  2.37M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  2.37M|    {
  471|  2.37M|        return m_value;
  472|  2.37M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  2.54M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.54M|    {
 1586|  2.54M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.54M|    {
  457|  2.54M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.36M|    {
 1330|  3.36M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  26.9k|{
 1364|  26.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  26.9k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  36.9k|    {
 1770|  36.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  36.9k|        return std::move(this->get_unexpected().error());
 1772|  36.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  47.3k|    {
  488|  47.3k|        return m_unexpected;
  489|  47.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|   364k|    {
  380|   364k|        return m_unexpected;
  381|   364k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   598k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   598k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   598k|    {
 1642|   598k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   774k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   774k|          m_has_value(false)
  466|   774k|    {
  467|   774k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   366k|    {
 9052|   366k|        return ranges::subrange{begin(), end()};
 9053|   366k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   366k|    {
 9044|   366k|        return ranges::default_sentinel;
 9045|   366k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  5.21M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.21M|    static_cast<    \
  |  | 1109|  5.21M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.21M|    static_cast<    \
  |  | 1109|  5.21M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.21M|    {
 3480|  5.21M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   502k|    {
 1993|   502k|        return detail::transform_error_impl(std::move(*this),
 1994|   502k|                                            std::forward<F>(f));
 1995|   502k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   502k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   502k|    else {
 1486|   502k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   502k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 498k, False: 3.90k]
  |  |  ------------------
  ------------------
 1488|   502k|                   ? result(*std::forward<Exp>(exp))
 1489|   502k|                   : result(unexpect,
 1490|  3.90k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.90k|                                           std::forward<Exp>(exp).error()));
 1492|   502k|    }
 1493|   502k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.88M|    {
  505|  4.88M|        return m_has_value;
  506|  4.88M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.76M|    {
 1819|  1.76M|        return std::move(value());
 1820|  1.76M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  1.79M|    {
 1783|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.79M|        return this->get_value();
 1785|  1.79M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.79M|    {
  471|  1.79M|        return m_value;
  472|  1.79M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.87M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.87M|    {
 1586|  1.87M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.87M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.87M|    {
  457|  1.87M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.86M|    {
 1330|  2.86M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  57.9k|    {
 1770|  57.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  57.9k|        return std::move(this->get_unexpected().error());
 1772|  57.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  60.0k|    {
  488|  60.0k|        return m_unexpected;
  489|  60.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   626k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   626k|    {
 1642|   626k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   992k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   992k|          m_has_value(false)
  466|   992k|    {
  467|   992k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  2.43M|        : m_unexpected(std::forward<Err>(e))
  365|  2.43M|    {
  366|  2.43M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.43M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   617k|        : base(unexpect, std::move(e.error())),
 1630|   617k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   617k|    {
 1632|   617k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   617k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   617k|          m_has_value(false)
  466|   617k|    {
  467|   617k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.89M|    {
 1330|  5.89M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   159k|        : base(unexpect, std::move(e.error())),
 1630|   159k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   159k|    {
 1632|   159k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   697k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   697k|          m_has_value(false)
  466|   697k|    {
  467|   697k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.20M|    {
 1330|  3.20M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.45M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.45M|    {
 1586|  2.45M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.45M|    {
  457|  2.45M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  3.74M|    {
 1754|  3.74M|        return has_value();
 1755|  3.74M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|  5.90M|    {
  505|  5.90M|        return m_has_value;
  506|  5.90M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|   185k|    {
 1760|   185k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   185k|        return this->get_unexpected().error();
 1762|   185k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   185k|    {
  488|   185k|        return m_unexpected;
  489|   185k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.59M|    {
 1819|  1.59M|        return std::move(value());
 1820|  1.59M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  1.97M|    {
 1783|  1.97M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.97M|        return this->get_value();
 1785|  1.97M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.97M|    {
  471|  1.97M|        return m_value;
  472|  1.97M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   298k|        : base(unexpect, std::move(e.error())),
 1630|   298k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   298k|    {
 1632|   298k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   857k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   857k|          m_has_value(false)
  466|   857k|    {
  467|   857k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.86M|    {
 1330|  2.86M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.00M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.00M|    {
 1586|  2.00M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.00M|    {
  457|  2.00M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  3.36M|    {
 1754|  3.36M|        return has_value();
 1755|  3.36M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  5.29M|    {
  505|  5.29M|        return m_has_value;
  506|  5.29M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|   358k|    {
 1760|   358k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   358k|        return this->get_unexpected().error();
 1762|   358k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   358k|    {
  488|   358k|        return m_unexpected;
  489|   358k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.30M|    {
 1819|  1.30M|        return std::move(value());
 1820|  1.30M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  1.57M|    {
 1783|  1.57M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.57M|        return this->get_value();
 1785|  1.57M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.57M|    {
  471|  1.57M|        return m_value;
  472|  1.57M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   559k|    {
 1993|   559k|        return detail::transform_error_impl(std::move(*this),
 1994|   559k|                                            std::forward<F>(f));
 1995|   559k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   559k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   559k|    else {
 1486|   559k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   559k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   559k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 551k, False: 7.85k]
  |  |  ------------------
  ------------------
 1488|   559k|                   ? result(*std::forward<Exp>(exp))
 1489|   559k|                   : result(unexpect,
 1490|  7.85k|                            trivial_invoke(std::forward<F>(f),
 1491|  7.85k|                                           std::forward<Exp>(exp).error()));
 1492|   559k|    }
 1493|   559k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  2.14M|    {
  505|  2.14M|        return m_has_value;
  506|  2.14M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   551k|    {
 1819|   551k|        return std::move(value());
 1820|   551k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   728k|    {
 1783|   728k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   728k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   728k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   728k|        return this->get_value();
 1785|   728k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   728k|    {
  471|   728k|        return m_value;
  472|   728k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  7.85k|    {
 1770|  7.85k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  7.85k|        return std::move(this->get_unexpected().error());
 1772|  7.85k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  12.5k|    {
  488|  12.5k|        return m_unexpected;
  489|  12.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   538k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   538k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   538k|    {
 1642|   538k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|  1.24M|    {
 9036|  1.24M|        return m_current;
 9037|  1.24M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   831k|    {
 8929|   831k|        return m_locale;
 8930|   831k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   831k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   831k|    static_cast<    \
  |  | 1109|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   831k|    static_cast<    \
  |  | 1109|   831k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   831k|    {
 8936|   831k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   895k|    {
 3014|   895k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   895k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   895k|    {
 2995|   895k|        return t.data();
 2996|   895k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   176k|        : base(unexpect, std::move(e.error())),
 1630|   176k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   176k|    {
 1632|   176k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  45.7k|        : base(std::in_place, std::forward<U>(val)),
 1584|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  45.7k|    {
 1586|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  45.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  45.7k|    {
  457|  45.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   997k|    {
 9036|   997k|        return m_current;
 9037|   997k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   734k|    {
 8929|   734k|        return m_locale;
 8930|   734k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   734k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   734k|    static_cast<    \
  |  | 1109|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   734k|    static_cast<    \
  |  | 1109|   734k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   734k|    {
 8936|   734k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   365k|        : base(unexpect, std::move(e.error())),
 1630|   365k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   365k|    {
 1632|   365k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|  2.61M|        : base(unexpect, std::move(e.error())),
 1630|  2.61M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.61M|    {
 1632|  2.61M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|  2.61M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|  2.61M|          m_has_value(false)
  565|  2.61M|    {
  566|  2.61M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.61M|    {
 1330|  2.61M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  9.19M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  9.19M|        : m_deferred_init(), m_has_value(true)
  544|  9.19M|    {
  545|  9.19M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  5.08M|    {
 4577|  5.08M|        return x.is_at_end();
 4578|  5.08M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  10.8M|    {
 4621|  10.8M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 10.8M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  10.8M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 10.8M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  10.8M|        return !read_at_position();
 4628|  10.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  43.0M|    {
 4601|  43.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  43.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  43.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 43.0M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  43.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  43.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 37.2M, False: 5.75M]
  |  |  ------------------
  ------------------
 4608|  37.2M|            return true;
 4609|  37.2M|        }
 4610|       |
 4611|  11.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 5.75M, False: 5.58M]
  ------------------
 4612|  5.75M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 174k, False: 5.58M]
  ------------------
 4613|   174k|                return false;
 4614|   174k|            }
 4615|  5.75M|        }
 4616|  5.58M|        return true;
 4617|  5.75M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  11.5M|    {
 4536|  11.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  11.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  11.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 11.5M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  11.5M|        auto res = read_at_position();
 4545|  11.5M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  11.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  11.5M|        return parent()->get_character_at(m_position);
 4547|  11.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  11.5M|    {
 4406|  11.5M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  11.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.92M, False: 3.57M]
  |  |  ------------------
  ------------------
 4407|  11.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  7.92M|            return m_putback_buffer[pos];
 4409|  7.92M|        }
 4410|  3.57M|        const auto start = pos - m_putback_buffer.size();
 4411|  3.57M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  3.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  3.57M|        return m_current_view[start];
 4413|  3.57M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  3.71M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.71M|    {
 1586|  3.71M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  3.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.71M|    {
  457|  3.71M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.75M|    {
 1330|  3.75M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|   137k|        : m_unexpected(std::forward<Err>(e))
  365|   137k|    {
  366|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   137k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  47.3k|        : base(unexpect, std::move(e.error())),
 1630|  47.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  47.3k|    {
 1632|  47.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  47.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  47.3k|          m_has_value(false)
  466|  47.3k|    {
  467|  47.3k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|   182k|        : m_unexpected(std::forward<Args>(args)...)
  374|   182k|    {
  375|   182k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   182k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   182k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  20.7M|    {
 4522|  20.7M|        ++m_position;
 4523|  20.7M|        (void)read_at_position();
 4524|  20.7M|        return *this;
 4525|  20.7M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.61M|    {
 1754|  1.61M|        return has_value();
 1755|  1.61M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   270k|    {
 1809|   270k|        return value();
 1810|   270k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  9.58M|    {
 4571|  9.58M|        return !(lhs == rhs);
 4572|  9.58M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  11.0M|    {
 4566|  11.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 11.0M, False: 0]
  |  Branch (4566:46): [True: 1.91M, False: 9.13M]
  ------------------
 4567|  11.0M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  44.7k|        : m_unexpected(std::forward<Err>(e))
  365|  44.7k|    {
  366|  44.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  44.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  44.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  7.44k|        : base(unexpect, std::move(e.error())),
 1630|  7.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.44k|    {
 1632|  7.44k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  7.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.44k|          m_has_value(false)
  466|  7.44k|    {
  467|  7.44k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   808k|    {
 1330|   808k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   800k|        : base(std::in_place, std::forward<U>(val)),
 1584|   800k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   800k|    {
 1586|   800k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   800k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   800k|    {
  457|   800k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   808k|    {
 1754|   808k|        return has_value();
 1755|   808k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.61M|    {
  505|  1.61M|        return m_has_value;
  506|  1.61M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  7.44k|    {
 1760|  7.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  7.44k|        return this->get_unexpected().error();
 1762|  7.44k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.44k|    {
  488|  7.44k|        return m_unexpected;
  489|  7.44k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   800k|    {
 1819|   800k|        return std::move(value());
 1820|   800k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   800k|    {
 1783|   800k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   800k|        return this->get_value();
 1785|   800k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   800k|    {
  471|   800k|        return m_value;
  472|   800k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  16.1M|    {
 3498|  16.1M|        return m_sentinel;
 3499|  16.1M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|  46.0k|        : m_unexpected(std::forward<Err>(e))
  365|  46.0k|    {
  366|  46.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  46.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  46.0k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  8.79M|    {
  380|  8.79M|        return m_unexpected;
  381|  8.79M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  2.43M|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.43M|    {
  375|  2.43M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.43M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.43M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  10.5M|        : m_unexpected(std::forward<Err>(e))
  365|  10.5M|    {
  366|  10.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  10.5M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  10.5M|    {
  380|  10.5M|        return m_unexpected;
  381|  10.5M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  10.5M|        : m_unexpected(std::forward<Args>(args)...)
  374|  10.5M|    {
  375|  10.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  10.5M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|   135k|{
 1364|   135k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|   135k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  2.25M|        : m_unexpected(std::forward<Err>(e))
  365|  2.25M|    {
  366|  2.25M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.25M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  10.4k|    {
 1760|  10.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  10.4k|        return this->get_unexpected().error();
 1762|  10.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   616k|        : base(unexpect, std::move(e.error())),
 1630|   616k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   616k|    {
 1632|   616k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   643k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   643k|          m_has_value(false)
  466|   643k|    {
  467|   643k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.38M|    {
 1330|  6.38M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|   273k|        : base(std::in_place, std::forward<U>(val)),
 1584|   273k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   273k|    {
 1586|   273k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|   273k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   273k|    {
  457|   273k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  3.27M|        : base(unexpect, std::move(e.error())),
 1630|  3.27M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.27M|    {
 1632|  3.27M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.27M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.27M|          m_has_value(false)
  466|  3.27M|    {
  467|  3.27M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  6.97M|    {
 1754|  6.97M|        return has_value();
 1755|  6.97M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  12.2M|    {
  505|  12.2M|        return m_has_value;
  506|  12.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.67M|    {
 1760|  1.67M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.67M|        return this->get_unexpected().error();
 1762|  1.67M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.67M|    {
  488|  1.67M|        return m_unexpected;
  489|  1.67M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   626k|        : base(std::in_place, std::forward<U>(val)),
 1584|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   626k|    {
 1586|   626k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   626k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   626k|    {
  457|   626k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   626k|    {
 1330|   626k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    200|        : base(unexpect, std::move(e.error())),
 1630|    200|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    200|    {
 1632|    200|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|    200|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    200|          m_has_value(false)
  466|    200|    {
  467|    200|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  1.51M|    {
 1809|  1.51M|        return value();
 1810|  1.51M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.03M|    {
 1783|  3.03M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.03M|        return this->get_value();
 1785|  3.03M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  3.03M|    {
  471|  3.03M|        return m_value;
  472|  3.03M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  40.8k|    {
 1754|  40.8k|        return has_value();
 1755|  40.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   585k|    {
 1819|   585k|        return std::move(value());
 1820|   585k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   626k|    {
 1783|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   626k|        return this->get_value();
 1785|   626k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   626k|    {
  471|   626k|        return m_value;
  472|   626k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.54M|    {
 1993|  1.54M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.54M|                                            std::forward<F>(f));
 1995|  1.54M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.54M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.54M|    else {
 1486|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.52M, False: 27.2k]
  |  |  ------------------
  ------------------
 1488|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.54M|                   : result(unexpect,
 1490|  27.2k|                            trivial_invoke(std::forward<F>(f),
 1491|  27.2k|                                           std::forward<Exp>(exp).error()));
 1492|  1.54M|    }
 1493|  1.54M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  2.19M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.19M|    {
 1586|  2.19M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.19M|    {
  457|  2.19M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  27.2k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  27.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  27.2k|    {
 1642|  27.2k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.52M|    {
 1819|  1.52M|        return std::move(value());
 1820|  1.52M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  3.94M|    {
 1754|  3.94M|        return has_value();
 1755|  3.94M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.23M|    {
  505|  6.23M|        return m_has_value;
  506|  6.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   229k|    {
 1760|   229k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   229k|        return this->get_unexpected().error();
 1762|   229k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   229k|    {
  488|   229k|        return m_unexpected;
  489|   229k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.64M|    {
 1819|  1.64M|        return std::move(value());
 1820|  1.64M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  2.05M|    {
 1783|  2.05M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.05M|        return this->get_value();
 1785|  2.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.05M|    {
  471|  2.05M|        return m_value;
  472|  2.05M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   622k|    {
 3494|   622k|        return m_iterator;
 3495|   622k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   622k|    {
 3498|   622k|        return m_sentinel;
 3499|   622k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   500k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   500k|    static_cast<    \
  |  | 1109|   500k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   500k|    static_cast<    \
  |  | 1109|   500k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   500k|    {
 3480|   500k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  5.72M|    {
 4588|  5.72M|        return !x.is_at_end();
 4589|  5.72M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  12.5k|        : base(unexpect, std::move(e.error())),
 1630|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.5k|    {
 1632|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  12.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.5k|          m_has_value(false)
  466|  12.5k|    {
  467|  12.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.40M|    {
 1330|  1.40M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  1.39M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.39M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.39M|    {
 1586|  1.39M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.39M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.39M|    {
  457|  1.39M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|   846k|    {
 1754|   846k|        return has_value();
 1755|   846k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   177k|    {
 1809|   177k|        return value();
 1810|   177k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  5.71k|        : base(unexpect, std::move(e.error())),
 1630|  5.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  5.71k|    {
 1632|  5.71k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  5.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  5.71k|          m_has_value(false)
  466|  5.71k|    {
  467|  5.71k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   741k|    {
 1330|   741k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   735k|        : base(std::in_place, std::forward<U>(val)),
 1584|   735k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   735k|    {
 1586|   735k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   735k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   735k|    {
  457|   735k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   741k|    {
 1754|   741k|        return has_value();
 1755|   741k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.48M|    {
  505|  1.48M|        return m_has_value;
  506|  1.48M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  5.71k|    {
 1760|  5.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  5.71k|        return this->get_unexpected().error();
 1762|  5.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  5.71k|    {
  488|  5.71k|        return m_unexpected;
  489|  5.71k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   735k|    {
 1819|   735k|        return std::move(value());
 1820|   735k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   735k|    {
 1783|   735k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   735k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   735k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   735k|        return this->get_value();
 1785|   735k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   735k|    {
  471|   735k|        return m_value;
  472|   735k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1759|  4.65k|    {
 1760|  4.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  4.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  4.65k|        return this->get_unexpected().error();
 1762|  4.65k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   577k|        : base(unexpect, std::move(e.error())),
 1630|   577k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   577k|    {
 1632|   577k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   577k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   577k|          m_has_value(false)
  466|   577k|    {
  467|   577k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.16M|    {
 1330|  3.16M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|   179k|        : base(std::in_place, std::forward<U>(val)),
 1584|   179k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   179k|    {
 1586|   179k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|   179k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   179k|    {
  457|   179k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.17M|        : base(unexpect, std::move(e.error())),
 1630|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.17M|    {
 1632|  2.17M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.17M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.17M|          m_has_value(false)
  466|  2.17M|    {
  467|  2.17M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  3.71M|    {
 1754|  3.71M|        return has_value();
 1755|  3.71M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  6.34M|    {
  505|  6.34M|        return m_has_value;
  506|  6.34M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  1.52M|    {
 1760|  1.52M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.52M|        return this->get_unexpected().error();
 1762|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.52M|    {
  488|  1.52M|        return m_unexpected;
  489|  1.52M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   574k|        : base(std::in_place, std::forward<U>(val)),
 1584|   574k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   574k|    {
 1586|   574k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   574k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   574k|    {
  457|   574k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   576k|    {
 1330|   576k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  1.75k|        : base(unexpect, std::move(e.error())),
 1630|  1.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.75k|    {
 1632|  1.75k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  1.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.75k|          m_has_value(false)
  466|  1.75k|    {
  467|  1.75k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   572k|    {
 1809|   572k|        return value();
 1810|   572k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   572k|    {
 1783|   572k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   572k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   572k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   572k|        return this->get_value();
 1785|   572k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   572k|    {
  471|   572k|        return m_value;
  472|   572k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  24.7k|    {
 1754|  24.7k|        return has_value();
 1755|  24.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.15M|    {
  505|  1.15M|        return m_has_value;
  506|  1.15M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.69k|        : base(unexpect, std::move(e.error())),
 1630|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.69k|    {
 1632|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.9k|    {
 1330|  11.9k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   561k|    {
 1819|   561k|        return std::move(value());
 1820|   561k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   574k|    {
 1783|   574k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   574k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   574k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   574k|        return this->get_value();
 1785|   574k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   574k|    {
  471|   574k|        return m_value;
  472|   574k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|   234k|        : base(std::in_place, std::forward<U>(val)),
 1584|   234k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   234k|    {
 1586|   234k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   234k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   234k|    {
  457|   234k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  10.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.2k|    {
 1586|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.2k|    {
  457|  10.2k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  11.9k|    {
 1993|  11.9k|        return detail::transform_error_impl(std::move(*this),
 1994|  11.9k|                                            std::forward<F>(f));
 1995|  11.9k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  11.9k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  11.9k|    else {
 1486|  11.9k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  11.9k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  11.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 10.2k, False: 1.69k]
  |  |  ------------------
  ------------------
 1488|  11.9k|                   ? result(*std::forward<Exp>(exp))
 1489|  11.9k|                   : result(unexpect,
 1490|  1.69k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.69k|                                           std::forward<Exp>(exp).error()));
 1492|  11.9k|    }
 1493|  11.9k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  23.9k|    {
  505|  23.9k|        return m_has_value;
  506|  23.9k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.2k|    {
 1819|  10.2k|        return std::move(value());
 1820|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.2k|    {
 1783|  10.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.2k|        return this->get_value();
 1785|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  10.2k|    {
  471|  10.2k|        return m_value;
  472|  10.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  10.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.2k|    {
 1586|  10.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.2k|    {
  457|  10.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.9k|    {
 1330|  11.9k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1769|  1.69k|    {
 1770|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.69k|        return std::move(this->get_unexpected().error());
 1772|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.69k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.69k|    {
 1642|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  11.9k|    {
 1754|  11.9k|        return has_value();
 1755|  11.9k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  23.9k|    {
  505|  23.9k|        return m_has_value;
  506|  23.9k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.2k|    {
 1819|  10.2k|        return std::move(value());
 1820|  10.2k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.2k|    {
 1783|  10.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.2k|        return this->get_value();
 1785|  10.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  10.2k|    {
  471|  10.2k|        return m_value;
  472|  10.2k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.85M|    {
 3014|  1.85M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.85M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.85M|    {
 2995|  1.85M|        return t.data();
 2996|  1.85M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  5.20M|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.20M|    {
 1586|  5.20M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  5.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.20M|    {
  457|  5.20M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|  3.51M|    {
 1819|  3.51M|        return std::move(value());
 1820|  3.51M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  2.29M|{
 1364|  2.29M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  2.29M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   585k|    {
 1993|   585k|        return detail::transform_error_impl(std::move(*this),
 1994|   585k|                                            std::forward<F>(f));
 1995|   585k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   585k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   585k|    else {
 1486|   585k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   585k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   585k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 585k, False: 0]
  |  |  ------------------
  ------------------
 1488|   585k|                   ? result(*std::forward<Exp>(exp))
 1489|   585k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   585k|    }
 1493|   585k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   585k|        : base(std::in_place, std::forward<U>(val)),
 1584|   585k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   585k|    {
 1586|   585k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   585k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   585k|    {
  457|   585k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   585k|    {
 1330|   585k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   585k|    {
 1754|   585k|        return has_value();
 1755|   585k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.17M|    {
  505|  1.17M|        return m_has_value;
  506|  1.17M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   585k|    {
 1819|   585k|        return std::move(value());
 1820|   585k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   585k|    {
 1783|   585k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   585k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   585k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   585k|        return this->get_value();
 1785|   585k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   585k|    {
  471|   585k|        return m_value;
  472|   585k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   588k|    {
 1979|   588k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   588k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   588k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   588k|    else {
 1486|   588k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   588k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   588k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 588k]
  |  |  ------------------
  ------------------
 1488|   588k|                   ? result(*std::forward<Exp>(exp))
 1489|   588k|                   : result(unexpect,
 1490|   588k|                            trivial_invoke(std::forward<F>(f),
 1491|   588k|                                           std::forward<Exp>(exp).error()));
 1492|   588k|    }
 1493|   588k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   413k|    {
 1809|   413k|        return value();
 1810|   413k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  40.6k|    {
 1829|  40.6k|        return &value();
 1830|  40.6k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   410k|    {
 2883|   410k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   410k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   410k|    {
 2864|   410k|        return decay_copy(t.begin());
 2865|   410k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   410k|{
 2108|   410k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   410k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   242k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   551k|    {
 1993|   551k|        return detail::transform_error_impl(std::move(*this),
 1994|   551k|                                            std::forward<F>(f));
 1995|   551k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   551k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   551k|    else {
 1486|   551k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   551k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   551k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 551k, False: 0]
  |  |  ------------------
  ------------------
 1488|   551k|                   ? result(*std::forward<Exp>(exp))
 1489|   551k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   551k|    }
 1493|   551k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   551k|        : base(std::in_place, std::forward<U>(val)),
 1584|   551k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   551k|    {
 1586|   551k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   551k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   551k|    {
  457|   551k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   551k|    {
 1330|   551k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   551k|    {
 1754|   551k|        return has_value();
 1755|   551k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.10M|    {
  505|  1.10M|        return m_has_value;
  506|  1.10M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   551k|    {
 1819|   551k|        return std::move(value());
 1820|   551k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   551k|    {
 1783|   551k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   551k|        return this->get_value();
 1785|   551k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   551k|    {
  471|   551k|        return m_value;
  472|   551k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   530k|    {
 1979|   530k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   530k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   530k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   530k|    else {
 1486|   530k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   530k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   530k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 530k]
  |  |  ------------------
  ------------------
 1488|   530k|                   ? result(*std::forward<Exp>(exp))
 1489|   530k|                   : result(unexpect,
 1490|   530k|                            trivial_invoke(std::forward<F>(f),
 1491|   530k|                                           std::forward<Exp>(exp).error()));
 1492|   530k|    }
 1493|   530k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|  43.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  43.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  43.8k|    {
 1586|  43.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  43.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  43.8k|    {
  457|  43.8k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   530k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   530k|    static_cast<    \
  |  | 1109|   530k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   530k|    {
 3930|   530k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   378k|    {
 1809|   378k|        return value();
 1810|   378k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  12.6k|    {
 1829|  12.6k|        return &value();
 1830|  12.6k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   588k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   588k|    static_cast<    \
  |  | 1109|   588k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   588k|    {
 3930|   588k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  4.28M|    {
 4577|  4.28M|        return x.is_at_end();
 4578|  4.28M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  6.81M|    {
 4621|  6.81M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 6.81M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  6.81M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 6.81M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  6.81M|        return !read_at_position();
 4628|  6.81M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  21.6M|    {
 4601|  21.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  21.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  21.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 21.6M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  21.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  21.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 19.0M, False: 2.57M]
  |  |  ------------------
  ------------------
 4608|  19.0M|            return true;
 4609|  19.0M|        }
 4610|       |
 4611|  4.95M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 2.57M, False: 2.38M]
  ------------------
 4612|  2.57M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 182k, False: 2.38M]
  ------------------
 4613|   182k|                return false;
 4614|   182k|            }
 4615|  2.57M|        }
 4616|  2.38M|        return true;
 4617|  2.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  27.8M|    {
 4375|  27.8M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  27.8M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  6.76M|    {
 4536|  6.76M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  6.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  6.76M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 6.76M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  6.76M|        auto res = read_at_position();
 4545|  6.76M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  6.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  6.76M|        return parent()->get_character_at(m_position);
 4547|  6.76M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  6.76M|    {
 4406|  6.76M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  6.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.72M, False: 1.04M]
  |  |  ------------------
  ------------------
 4407|  6.76M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  5.72M|            return m_putback_buffer[pos];
 4409|  5.72M|        }
 4410|  1.04M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.04M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.04M|        return m_current_view[start];
 4413|  1.04M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  2.97M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.97M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.97M|    {
 1586|  2.97M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.97M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.97M|    {
  457|  2.97M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.03M|    {
 1330|  3.03M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  60.0k|        : base(unexpect, std::move(e.error())),
 1630|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  60.0k|    {
 1632|  60.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  60.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  60.0k|          m_has_value(false)
  466|  60.0k|    {
  467|  60.0k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  8.03M|    {
 4522|  8.03M|        ++m_position;
 4523|  8.03M|        (void)read_at_position();
 4524|  8.03M|        return *this;
 4525|  8.03M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.21M|    {
 1754|  1.21M|        return has_value();
 1755|  1.21M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  26.7k|    {
 1809|  26.7k|        return value();
 1810|  26.7k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  3.32M|    {
 4571|  3.32M|        return !(lhs == rhs);
 4572|  3.32M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  4.51M|    {
 4566|  4.51M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 4.51M, False: 0]
  |  Branch (4566:46): [True: 1.43M, False: 3.07M]
  ------------------
 4567|  4.51M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|  3.03M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|  3.03M|    else {
 4093|       |        // utf-32
 4094|  3.03M|        static_assert(sizeof(U) == 4);
 4095|  3.03M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|  3.03M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|  3.03M|        return 1;
 4097|  3.03M|    }
 4098|  3.03M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.03M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|  3.03M|    else {
 4299|  3.03M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|  3.03M|        auto cp = static_cast<char32_t>(input.front());
 4301|  3.03M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 151k, False: 2.88M]
  |  |  ------------------
  ------------------
 4302|   151k|            return invalid_code_point;
 4303|   151k|        }
 4304|  2.88M|        return cp;
 4305|  3.03M|    }
 4306|  3.03M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.90k|        : base(unexpect, std::move(e.error())),
 1630|  2.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.90k|    {
 1632|  2.90k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  2.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.90k|          m_has_value(false)
  466|  2.90k|    {
  467|  2.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   629k|    {
 1330|   629k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   626k|        : base(std::in_place, std::forward<U>(val)),
 1584|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   626k|    {
 1586|   626k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   626k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   626k|    {
  457|   626k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   629k|    {
 1754|   629k|        return has_value();
 1755|   629k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  2.90k|    {
 1760|  2.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.90k|        return this->get_unexpected().error();
 1762|  2.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.90k|    {
  488|  2.90k|        return m_unexpected;
  489|  2.90k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   626k|    {
 1819|   626k|        return std::move(value());
 1820|   626k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   626k|    {
 1783|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   626k|        return this->get_value();
 1785|   626k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   626k|    {
  471|   626k|        return m_value;
  472|   626k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  11.1M|    {
 3498|  11.1M|        return m_sentinel;
 3499|  11.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  2.13k|    {
 1760|  2.13k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.13k|        return this->get_unexpected().error();
 1762|  2.13k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   554k|        : base(unexpect, std::move(e.error())),
 1630|   554k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   554k|    {
 1632|   554k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   608k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   608k|          m_has_value(false)
  466|   608k|    {
  467|   608k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.23M|    {
 1330|  5.23M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|  26.7k|        : base(std::in_place, std::forward<U>(val)),
 1584|  26.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  26.7k|    {
 1586|  26.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  26.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  26.7k|    {
  457|  26.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.94M|        : base(unexpect, std::move(e.error())),
 1630|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.94M|    {
 1632|  2.94M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.94M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.94M|          m_has_value(false)
  466|  2.94M|    {
  467|  2.94M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  5.73M|    {
 1754|  5.73M|        return has_value();
 1755|  5.73M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  10.1M|    {
  505|  10.1M|        return m_has_value;
  506|  10.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.68M|    {
 1760|  1.68M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.68M|        return this->get_unexpected().error();
 1762|  1.68M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.68M|    {
  488|  1.68M|        return m_unexpected;
  489|  1.68M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   513k|        : base(std::in_place, std::forward<U>(val)),
 1584|   513k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   513k|    {
 1586|   513k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   513k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   513k|    {
  457|   513k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   513k|    {
 1330|   513k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|     72|        : base(unexpect, std::move(e.error())),
 1630|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     72|    {
 1632|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     72|          m_has_value(false)
  466|     72|    {
  467|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   799k|    {
 1809|   799k|        return value();
 1810|   799k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.06M|    {
 1783|  2.06M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.06M|        return this->get_value();
 1785|  2.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  2.06M|    {
  471|  2.06M|        return m_value;
  472|  2.06M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  15.1k|    {
 1754|  15.1k|        return has_value();
 1755|  15.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.02M|    {
  505|  1.02M|        return m_has_value;
  506|  1.02M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   498k|    {
 1819|   498k|        return std::move(value());
 1820|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   513k|    {
 1783|   513k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   513k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   513k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   513k|        return this->get_value();
 1785|   513k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   513k|    {
  471|   513k|        return m_value;
  472|   513k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.31M|    {
 1993|  1.31M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.31M|                                            std::forward<F>(f));
 1995|  1.31M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.31M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.31M|    else {
 1486|  1.31M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.31M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.26M, False: 54.0k]
  |  |  ------------------
  ------------------
 1488|  1.31M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.31M|                   : result(unexpect,
 1490|  54.0k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.0k|                                           std::forward<Exp>(exp).error()));
 1492|  1.31M|    }
 1493|  1.31M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  1.65M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.65M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.65M|    {
 1586|  1.65M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.65M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.65M|    {
  457|  1.65M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.0k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.0k|    {
 1642|  54.0k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.26M|    {
 1819|  1.26M|        return std::move(value());
 1820|  1.26M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  3.36M|    {
 1754|  3.36M|        return has_value();
 1755|  3.36M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.35M|    {
  505|  5.35M|        return m_has_value;
  506|  5.35M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   493k|    {
 1760|   493k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   493k|        return this->get_unexpected().error();
 1762|   493k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   493k|    {
  488|   493k|        return m_unexpected;
  489|   493k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.23M|    {
 1819|  1.23M|        return std::move(value());
 1820|  1.23M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.50M|    {
 1783|  1.50M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.50M|        return this->get_value();
 1785|  1.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.50M|    {
  471|  1.50M|        return m_value;
  472|  1.50M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   407k|    {
 3494|   407k|        return m_iterator;
 3495|   407k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   407k|    {
 3498|   407k|        return m_sentinel;
 3499|   407k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   371k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   371k|    static_cast<    \
  |  | 1109|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   371k|    static_cast<    \
  |  | 1109|   371k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   371k|    {
 3480|   371k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  2.53M|    {
 4588|  2.53M|        return !x.is_at_end();
 4589|  2.53M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  58.5k|        : base(unexpect, std::move(e.error())),
 1630|  58.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  58.5k|    {
 1632|  58.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  58.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  58.5k|          m_has_value(false)
  466|  58.5k|    {
  467|  58.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.51M|    {
 1330|  2.51M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  2.45M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.45M|    {
 1586|  2.45M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.45M|    {
  457|  2.45M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|   692k|    {
 1754|   692k|        return has_value();
 1755|   692k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.35M|    {
  505|  4.35M|        return m_has_value;
  506|  4.35M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  11.6k|    {
 1809|  11.6k|        return value();
 1810|  11.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.77M|    {
 1783|  1.77M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.77M|        return this->get_value();
 1785|  1.77M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.77M|    {
  471|  1.77M|        return m_value;
  472|  1.77M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.90k|        : base(unexpect, std::move(e.error())),
 1630|  2.90k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.90k|    {
 1632|  2.90k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  2.90k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.90k|          m_has_value(false)
  466|  2.90k|    {
  467|  2.90k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   629k|    {
 1330|   629k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   626k|        : base(std::in_place, std::forward<U>(val)),
 1584|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   626k|    {
 1586|   626k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   626k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   626k|    {
  457|   626k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   502k|    {
 1993|   502k|        return detail::transform_error_impl(std::move(*this),
 1994|   502k|                                            std::forward<F>(f));
 1995|   502k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   502k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   502k|    else {
 1486|   502k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   502k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 498k, False: 3.90k]
  |  |  ------------------
  ------------------
 1488|   502k|                   ? result(*std::forward<Exp>(exp))
 1489|   502k|                   : result(unexpect,
 1490|  3.90k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.90k|                                           std::forward<Exp>(exp).error()));
 1492|   502k|    }
 1493|   502k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.76M|    {
 1819|  1.76M|        return std::move(value());
 1820|  1.76M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  58.0k|    {
 1770|  58.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  58.0k|        return std::move(this->get_unexpected().error());
 1772|  58.0k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  58.5k|    {
  488|  58.5k|        return m_unexpected;
  489|  58.5k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   559k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   559k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   559k|    {
 1642|   559k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|   629k|    {
 1754|   629k|        return has_value();
 1755|   629k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  2.90k|    {
 1760|  2.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.90k|        return this->get_unexpected().error();
 1762|  2.90k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.90k|    {
  488|  2.90k|        return m_unexpected;
  489|  2.90k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   626k|    {
 1819|   626k|        return std::move(value());
 1820|   626k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   626k|    {
 1783|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   626k|        return this->get_value();
 1785|   626k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|   626k|    {
  471|   626k|        return m_value;
  472|   626k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1759|    500|    {
 1760|    500|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    500|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    500|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    500|        return this->get_unexpected().error();
 1762|    500|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   553k|        : base(unexpect, std::move(e.error())),
 1630|   553k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   553k|    {
 1632|   553k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   607k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   607k|          m_has_value(false)
  466|   607k|    {
  467|   607k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  4.13M|    {
 1330|  4.13M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|  11.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.6k|    {
 1586|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  11.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.6k|    {
  457|  11.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.12M|        : base(unexpect, std::move(e.error())),
 1630|  2.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.12M|    {
 1632|  2.12M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.12M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.12M|          m_has_value(false)
  466|  2.12M|    {
  467|  2.12M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  4.63M|    {
 1754|  4.63M|        return has_value();
 1755|  4.63M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  8.32M|    {
  505|  8.32M|        return m_has_value;
  506|  8.32M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  1.60M|    {
 1760|  1.60M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.60M|        return this->get_unexpected().error();
 1762|  1.60M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.60M|    {
  488|  1.60M|        return m_unexpected;
  489|  1.60M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   504k|        : base(std::in_place, std::forward<U>(val)),
 1584|   504k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   504k|    {
 1586|   504k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   504k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   504k|    {
  457|   504k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   504k|    {
 1330|   504k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     24|          m_has_value(false)
  466|     24|    {
  467|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   260k|    {
 1809|   260k|        return value();
 1810|   260k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.52M|    {
 1783|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.52M|        return this->get_value();
 1785|  1.52M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  1.52M|    {
  471|  1.52M|        return m_value;
  472|  1.52M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  5.57k|    {
 1754|  5.57k|        return has_value();
 1755|  5.57k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.00M|    {
  505|  1.00M|        return m_has_value;
  506|  1.00M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   498k|    {
 1819|   498k|        return std::move(value());
 1820|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   504k|    {
 1783|   504k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   504k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   504k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   504k|        return this->get_value();
 1785|   504k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   504k|    {
  471|   504k|        return m_value;
  472|   504k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.32M|    {
 1993|  1.32M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.32M|                                            std::forward<F>(f));
 1995|  1.32M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.32M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.32M|    else {
 1486|  1.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.26M, False: 54.1k]
  |  |  ------------------
  ------------------
 1488|  1.32M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.32M|                   : result(unexpect,
 1490|  54.1k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.1k|                                           std::forward<Exp>(exp).error()));
 1492|  1.32M|    }
 1493|  1.32M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  1.39M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.39M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.39M|    {
 1586|  1.39M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.39M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.39M|    {
  457|  1.39M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.1k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.1k|    {
 1642|  54.1k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.26M|    {
 1819|  1.26M|        return std::move(value());
 1820|  1.26M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.17M|    {
 3014|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.17M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.17M|    {
 2995|  1.17M|        return t.data();
 2996|  1.17M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   498k|    {
 1993|   498k|        return detail::transform_error_impl(std::move(*this),
 1994|   498k|                                            std::forward<F>(f));
 1995|   498k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   498k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   498k|    else {
 1486|   498k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   498k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   498k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 498k, False: 0]
  |  |  ------------------
  ------------------
 1488|   498k|                   ? result(*std::forward<Exp>(exp))
 1489|   498k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   498k|    }
 1493|   498k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   498k|        : base(std::in_place, std::forward<U>(val)),
 1584|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   498k|    {
 1586|   498k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   498k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   498k|    {
  457|   498k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   498k|    {
 1330|   498k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   498k|    {
 1754|   498k|        return has_value();
 1755|   498k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   997k|    {
  505|   997k|        return m_has_value;
  506|   997k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   498k|    {
 1819|   498k|        return std::move(value());
 1820|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   498k|    {
 1783|   498k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   498k|        return this->get_value();
 1785|   498k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   498k|    {
  471|   498k|        return m_value;
  472|   498k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   622k|    {
 1979|   622k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   622k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   622k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   622k|    else {
 1486|   622k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   622k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   622k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 622k]
  |  |  ------------------
  ------------------
 1488|   622k|                   ? result(*std::forward<Exp>(exp))
 1489|   622k|                   : result(unexpect,
 1490|   622k|                            trivial_invoke(std::forward<F>(f),
 1491|   622k|                                           std::forward<Exp>(exp).error()));
 1492|   622k|    }
 1493|   622k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   263k|    {
 1809|   263k|        return value();
 1810|   263k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|  98.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  15.1k|    {
 1829|  15.1k|        return &value();
 1830|  15.1k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   399k|    {
 2883|   399k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   399k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   399k|    {
 2864|   399k|        return decay_copy(t.begin());
 2865|   399k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   399k|{
 2108|   399k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   399k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   223k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   498k|    {
 1993|   498k|        return detail::transform_error_impl(std::move(*this),
 1994|   498k|                                            std::forward<F>(f));
 1995|   498k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   498k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   498k|    else {
 1486|   498k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   498k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   498k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 498k, False: 0]
  |  |  ------------------
  ------------------
 1488|   498k|                   ? result(*std::forward<Exp>(exp))
 1489|   498k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   498k|    }
 1493|   498k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   498k|        : base(std::in_place, std::forward<U>(val)),
 1584|   498k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   498k|    {
 1586|   498k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   498k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   498k|    {
  457|   498k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   498k|    {
 1330|   498k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   498k|    {
 1754|   498k|        return has_value();
 1755|   498k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   997k|    {
  505|   997k|        return m_has_value;
  506|   997k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   498k|    {
 1819|   498k|        return std::move(value());
 1820|   498k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   498k|    {
 1783|   498k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   498k|        return this->get_value();
 1785|   498k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   498k|    {
  471|   498k|        return m_value;
  472|   498k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   555k|    {
 1979|   555k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   555k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   555k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   555k|    else {
 1486|   555k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   555k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   555k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
 1488|   555k|                   ? result(*std::forward<Exp>(exp))
 1489|   555k|                   : result(unexpect,
 1490|   555k|                            trivial_invoke(std::forward<F>(f),
 1491|   555k|                                           std::forward<Exp>(exp).error()));
 1492|   555k|    }
 1493|   555k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   555k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   555k|    static_cast<    \
  |  | 1109|   555k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   555k|    {
 3930|   555k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   263k|    {
 1809|   263k|        return value();
 1810|   263k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  5.55k|    {
 1829|  5.55k|        return &value();
 1830|  5.55k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   622k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   622k|    static_cast<    \
  |  | 1109|   622k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   622k|    {
 3930|   622k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  55.9M|    {
 4375|  55.9M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  55.9M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1583|  65.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  65.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  65.6k|    {
 1586|  65.6k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  455|  65.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  65.6k|    {
  457|  65.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  1.04M|    {
 6263|  1.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.04M|        return static_cast<std::size_t>(m_desc &
 6268|  1.04M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.04M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|  2.09M|    {
 6289|  2.09M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  2.09M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  1.04M|    {
 6231|  1.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.04M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.04M|        const auto t = type(id);
 6243|  1.04M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.04M|        basic_scan_arg<Context> arg;
 6248|  1.04M|        arg.m_type = t;
 6249|  1.04M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.04M, False: 0]
  ------------------
 6250|  1.04M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.04M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.04M|        return arg;
 6256|  1.04M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  1.04M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.04M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.04M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.04M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.04M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  1.04M|    {
 6293|  1.04M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.04M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  1.98M|    {
 6047|  1.98M|        return m_type != detail::arg_type::none_type;
 6048|  1.98M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   160k|{
 9494|   160k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   160k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   160k|{
 9353|   160k|#define SCN_VISIT(Type)                                                \
 9354|   160k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   160k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   160k|    }                                                                  \
 9357|   160k|    else {                                                             \
 9358|   160k|        return vis(monostate_val);                                     \
 9359|   160k|    }
 9360|       |
 9361|   160k|    monostate monostate_val{};
 9362|       |
 9363|   160k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 160k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 160k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 160k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 160k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 160k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 160k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 160k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 160k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 160k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 160k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 160k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 160k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 160k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 160k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 160k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 160k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 160k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  51.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 51.2k, False: 109k]
  ------------------
 9407|  51.2k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  51.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  51.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  51.2k|    }                                                                  \
  |  | 9357|  51.2k|    else {                                                             \
  |  | 9358|  51.2k|        return vis(monostate_val);                                     \
  |  | 9359|  51.2k|    }
  ------------------
 9408|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 53.7k, False: 106k]
  ------------------
 9409|   105k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   105k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   105k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   105k|    }                                                                  \
  |  | 9357|   105k|    else {                                                             \
  |  | 9358|   105k|        return vis(monostate_val);                                     \
  |  | 9359|   105k|    }
  ------------------
 9410|   160k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 55.7k, False: 105k]
  ------------------
 9411|   160k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   160k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   160k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   160k|    }                                                                  \
  |  | 9357|   160k|    else {                                                             \
  |  | 9358|   160k|        return vis(monostate_val);                                     \
  |  | 9359|   160k|    }
  ------------------
 9412|   160k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 160k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   160k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 160k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 160k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 160k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 160k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 160k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 160k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 160k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 160k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 160k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 160k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   160k|            SCN_CLANG_POP
 9473|   160k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.81M|{
 6092|  2.81M|    return arg.m_type;
 6093|  2.81M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.15M|{
 6104|  1.15M|    return arg.m_value;
 6105|  1.15M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   432k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   432k|    {
 9021|   432k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   595k|{
 4709|   595k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 595k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   595k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   595k|                            ranges::default_sentinel};
 4715|   595k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   595k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   595k|    {
 4473|   595k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   595k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   595k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   162k|{
 9494|   162k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   162k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   162k|{
 9353|   162k|#define SCN_VISIT(Type)                                                \
 9354|   162k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   162k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   162k|    }                                                                  \
 9357|   162k|    else {                                                             \
 9358|   162k|        return vis(monostate_val);                                     \
 9359|   162k|    }
 9360|       |
 9361|   162k|    monostate monostate_val{};
 9362|       |
 9363|   162k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 162k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 162k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 162k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 162k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 162k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 162k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 162k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 162k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 162k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 162k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 162k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 162k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 162k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 162k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 162k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 162k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 162k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  52.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 52.2k, False: 110k]
  ------------------
 9407|  52.2k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  52.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  52.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  52.2k|    }                                                                  \
  |  | 9357|  52.2k|    else {                                                             \
  |  | 9358|  52.2k|        return vis(monostate_val);                                     \
  |  | 9359|  52.2k|    }
  ------------------
 9408|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 54.7k, False: 108k]
  ------------------
 9409|   106k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   106k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   106k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   106k|    }                                                                  \
  |  | 9357|   106k|    else {                                                             \
  |  | 9358|   106k|        return vis(monostate_val);                                     \
  |  | 9359|   106k|    }
  ------------------
 9410|   162k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 56.0k, False: 106k]
  ------------------
 9411|   162k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   162k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   162k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   162k|    }                                                                  \
  |  | 9357|   162k|    else {                                                             \
  |  | 9358|   162k|        return vis(monostate_val);                                     \
  |  | 9359|   162k|    }
  ------------------
 9412|   162k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 162k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   162k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 162k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 162k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 162k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 162k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 162k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 162k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 162k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 162k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 162k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 162k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   162k|            SCN_CLANG_POP
 9473|   162k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|   398k|        : m_format{format},
 6362|   398k|          m_next_arg_id{next_arg_id},
 6363|   398k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   398k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   398k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   398k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   398k|    {
 6369|   398k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   398k|    {
 3089|   398k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   398k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   398k|    {
 3055|   398k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   398k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   398k|{
 7878|   398k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   398k|    handler.check_args_exhausted();
 7880|   398k|    return handler.get_error();
 7881|   398k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   398k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   398k|    auto begin = format.data();
 7846|   398k|    auto it = begin;
 7847|   398k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   745k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 398k, False: 347k]
  ------------------
 7850|   398k|        const auto ch = *it++;
 7851|   398k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 398k, False: 0]
  ------------------
 7852|   398k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   398k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   398k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 51.6k, False: 347k]
  ------------------
 7856|  51.6k|                return;
 7857|  51.6k|            }
 7858|   398k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   398k|    }
 7869|       |
 7870|   347k|    handler.on_literal_text(begin, end);
 7871|   347k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|   398k|{
 7775|   398k|    struct id_adapter {
 7776|   398k|        constexpr void operator()()
 7777|   398k|        {
 7778|   398k|            arg_id = handler.on_arg_id();
 7779|   398k|        }
 7780|   398k|        constexpr void operator()(std::size_t id)
 7781|   398k|        {
 7782|   398k|            arg_id = handler.on_arg_id(id);
 7783|   398k|        }
 7784|       |
 7785|   398k|        constexpr void on_error(const char* msg)
 7786|   398k|        {
 7787|   398k|            SCN_UNLIKELY_ATTR
 7788|   398k|            handler.on_error(msg);
 7789|   398k|        }
 7790|       |
 7791|   398k|        Handler& handler;
 7792|   398k|        std::size_t arg_id;
 7793|   398k|    };
 7794|       |
 7795|   398k|    ++begin;
 7796|   398k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   398k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 398k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   398k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 398k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   398k|    else {
 7808|   398k|        auto adapter = id_adapter{handler, 0};
 7809|   398k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   398k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   398k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 398k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   398k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 398k, False: 0]
  ------------------
 7820|   398k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   398k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   398k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   797k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  |  Branch (1039:45): [True: 0, False: 398k]
  |  |  |  Branch (1039:45): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   398k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   398k|    }
 7836|   398k|    return begin + 1;
 7837|   398k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   831k|    {
 8919|   831k|        return m_args.get(id);
 8920|   831k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   831k|    {
 6397|   831k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   831k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   831k|        do_check_arg_id(id);
 6405|   831k|        return id;
 6406|   831k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   831k|{
 6891|   831k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   831k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   831k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   398k|{
 7276|   398k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   398k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 398k, False: 0]
  |  Branch (7277:26): [True: 0, False: 398k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   398k|    handler();
 7282|   398k|    return begin;
 7283|   398k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   398k|        {
 7778|   398k|            arg_id = handler.on_arg_id();
 7779|   398k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   831k|    {
 6392|   831k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   831k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  1.66M|    {
 6381|  1.66M|        return m_format.data();
 6382|  1.66M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   398k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   398k|    {
 7962|   398k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   398k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   398k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   398k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|   398k|{
 7691|   398k|    auto do_presentation = [&]() -> const CharT* {
 7692|   398k|        if (*begin == CharT{'['}) {
 7693|   398k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   398k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   398k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   398k|                return begin;
 7699|   398k|            }
 7700|   398k|            handler.on_character_set_string(set);
 7701|   398k|            return begin;
 7702|   398k|        }
 7703|   398k|        if (*begin == CharT{'/'}) {
 7704|   398k|            return parse_presentation_regex(begin, end, handler);
 7705|   398k|        }
 7706|   398k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   398k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   398k|            handler.on_error("Invalid type specifier in format string");
 7709|   398k|            return begin;
 7710|   398k|        }
 7711|   398k|        handler.on_type(type);
 7712|   398k|        return begin;
 7713|   398k|    };
 7714|       |
 7715|   398k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 398k, False: 0]
  |  Branch (7715:28): [True: 398k, False: 0]
  ------------------
 7716|   398k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 398k, False: 0]
  |  Branch (7716:36): [True: 291k, False: 107k]
  ------------------
 7717|   291k|        return do_presentation();
 7718|   291k|    }
 7719|       |
 7720|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   107k|    begin = parse_align(begin, end, handler);
 7726|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   107k|    begin = parse_width(begin, end, handler);
 7732|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   107k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 107k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   107k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 107k, False: 0]
  ------------------
 7751|   107k|        handler.on_localized();
 7752|   107k|        ++begin;
 7753|   107k|    }
 7754|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   107k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 107k, False: 0]
  |  Branch (7759:25): [True: 0, False: 107k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   107k|    return begin;
 7768|   107k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   831k|{
 7340|   831k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 605k, False: 225k]
  |  Branch (7340:33): [True: 605k, False: 0]
  ------------------
 7341|   831k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 225k, False: 0]
  |  Branch (7341:33): [True: 225k, False: 0]
  ------------------
 7342|   831k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   291k|    auto do_presentation = [&]() -> const CharT* {
 7692|   291k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 291k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   291k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 291k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   291k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   291k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 291k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   291k|        handler.on_type(type);
 7712|   291k|        return begin;
 7713|   291k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   605k|{
 7288|   605k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 605k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 605k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 605k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 605k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 605k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 605k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 605k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 605k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 605k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 605k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   247k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 247k, False: 358k]
  ------------------
 7307|   247k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 605k]
  ------------------
 7308|   247k|            return presentation_type::float_hex;
 7309|  28.5k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 28.5k, False: 577k]
  ------------------
 7310|  28.5k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 605k]
  ------------------
 7311|  28.5k|            return presentation_type::float_scientific;
 7312|   135k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 135k, False: 470k]
  ------------------
 7313|   135k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 605k]
  ------------------
 7314|   135k|            return presentation_type::float_fixed;
 7315|   194k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 194k, False: 411k]
  ------------------
 7316|   194k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 605k]
  ------------------
 7317|   194k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 605k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 605k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 605k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 605k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 605k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 605k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 605k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   605k|    }
 7335|   605k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|   107k|{
 7365|   107k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   107k|    auto check_align = [](wchar_t ch) {
 7368|   107k|        switch (ch) {
 7369|   107k|            case L'<':
 7370|   107k|                return align_type::left;
 7371|   107k|            case L'>':
 7372|   107k|                return align_type::right;
 7373|   107k|            case L'^':
 7374|   107k|                return align_type::center;
 7375|   107k|            default:
 7376|   107k|                return align_type::none;
 7377|   107k|        }
 7378|   107k|    };
 7379|       |
 7380|   107k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   107k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  |  Branch (1039:45): [True: 0, False: 107k]
  |  |  |  Branch (1039:45): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7382|   107k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   107k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   107k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   107k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   107k|    const auto begin_before_fill = begin;
 7392|   107k|    begin += potential_fill_len;
 7393|       |
 7394|   107k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 107k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   107k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   107k|    const auto begin_after_fill = begin;
 7400|   107k|    ++begin;
 7401|       |
 7402|   107k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 107k, False: 0]
  ------------------
 7403|   107k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   107k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 107k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   107k|    }
 7411|       |
 7412|   107k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 107k, False: 0]
  ------------------
 7413|   107k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 107k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   107k|        return begin_before_fill;
 7418|   107k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   107k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|   225k|{
 7347|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|   225k|    else {
 7352|   225k|        const auto lengths =
 7353|   225k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|   225k|            "\3\4";
 7355|   225k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|   225k|        return len;
 7357|   225k|    }
 7358|   225k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   214k|    auto check_align = [](wchar_t ch) {
 7368|   214k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 214k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 214k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 214k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   214k|            default:
  ------------------
  |  Branch (7375:13): [True: 214k, False: 0]
  ------------------
 7376|   214k|                return align_type::none;
 7377|   214k|        }
 7378|   214k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|   107k|{
 7430|   107k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   107k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 107k, False: 0]
  |  Branch (7432:33): [True: 0, False: 107k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   107k|    return begin;
 7443|   107k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|   107k|    {
 7967|   107k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   107k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 107k, False: 0]
  ------------------
 7969|   107k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 107k, False: 0]
  ------------------
 7970|   107k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 107k]
  ------------------
 7971|   107k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   107k|        Handler::on_localized();
 7979|   107k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|   406k|    {
 7110|   406k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|   406k|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|   406k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   398k|{
 9494|   398k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   398k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   398k|{
 9353|   398k|#define SCN_VISIT(Type)                                                \
 9354|   398k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   398k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   398k|    }                                                                  \
 9357|   398k|    else {                                                             \
 9358|   398k|        return vis(monostate_val);                                     \
 9359|   398k|    }
 9360|       |
 9361|   398k|    monostate monostate_val{};
 9362|       |
 9363|   398k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 398k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 398k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 398k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 398k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 398k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 398k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 398k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 398k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 398k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 398k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 398k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 398k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 398k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 398k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 398k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 398k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 398k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   129k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 129k, False: 269k]
  ------------------
 9407|   129k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   129k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   129k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   129k|    }                                                                  \
  |  | 9357|   129k|    else {                                                             \
  |  | 9358|   129k|        return vis(monostate_val);                                     \
  |  | 9359|   129k|    }
  ------------------
 9408|   262k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 133k, False: 265k]
  ------------------
 9409|   262k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   262k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   262k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   262k|    }                                                                  \
  |  | 9357|   262k|    else {                                                             \
  |  | 9358|   262k|        return vis(monostate_val);                                     \
  |  | 9359|   262k|    }
  ------------------
 9410|   398k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 136k, False: 262k]
  ------------------
 9411|   398k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   398k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   398k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   398k|    }                                                                  \
  |  | 9357|   398k|    else {                                                             \
  |  | 9358|   398k|        return vis(monostate_val);                                     \
  |  | 9359|   398k|    }
  ------------------
 9412|   398k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 398k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   398k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 398k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 398k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 398k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 398k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 398k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 398k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 398k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 398k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 398k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 398k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   398k|            SCN_CLANG_POP
 9473|   398k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|   432k|        : m_format{format},
 6362|   432k|          m_next_arg_id{next_arg_id},
 6363|   432k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   432k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   432k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   432k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   432k|    {
 6369|   432k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   432k|{
 7878|   432k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   432k|    handler.check_args_exhausted();
 7880|   432k|    return handler.get_error();
 7881|   432k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   432k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   432k|    auto begin = format.data();
 7846|   432k|    auto it = begin;
 7847|   432k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   813k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 432k, False: 380k]
  ------------------
 7850|   432k|        const auto ch = *it++;
 7851|   432k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 432k, False: 0]
  ------------------
 7852|   432k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   432k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   432k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 51.6k, False: 380k]
  ------------------
 7856|  51.6k|                return;
 7857|  51.6k|            }
 7858|   432k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   432k|    }
 7869|       |
 7870|   380k|    handler.on_literal_text(begin, end);
 7871|   380k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   380k|    {
 9058|   380k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   380k|    static_cast<    \
  |  | 1109|   380k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   380k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|   432k|{
 7775|   432k|    struct id_adapter {
 7776|   432k|        constexpr void operator()()
 7777|   432k|        {
 7778|   432k|            arg_id = handler.on_arg_id();
 7779|   432k|        }
 7780|   432k|        constexpr void operator()(std::size_t id)
 7781|   432k|        {
 7782|   432k|            arg_id = handler.on_arg_id(id);
 7783|   432k|        }
 7784|       |
 7785|   432k|        constexpr void on_error(const char* msg)
 7786|   432k|        {
 7787|   432k|            SCN_UNLIKELY_ATTR
 7788|   432k|            handler.on_error(msg);
 7789|   432k|        }
 7790|       |
 7791|   432k|        Handler& handler;
 7792|   432k|        std::size_t arg_id;
 7793|   432k|    };
 7794|       |
 7795|   432k|    ++begin;
 7796|   432k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   432k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 432k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   432k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 432k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   432k|    else {
 7808|   432k|        auto adapter = id_adapter{handler, 0};
 7809|   432k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   432k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   432k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 432k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   432k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 432k, False: 0]
  ------------------
 7820|   432k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   432k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   432k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   865k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  |  Branch (1039:45): [True: 0, False: 432k]
  |  |  |  Branch (1039:45): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   432k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   432k|    }
 7836|   432k|    return begin + 1;
 7837|   432k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   432k|{
 7276|   432k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   432k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 432k, False: 0]
  |  Branch (7277:26): [True: 0, False: 432k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   432k|    handler();
 7282|   432k|    return begin;
 7283|   432k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   432k|        {
 7778|   432k|            arg_id = handler.on_arg_id();
 7779|   432k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   432k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   432k|    {
 7962|   432k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   432k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   432k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   432k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|   432k|{
 7691|   432k|    auto do_presentation = [&]() -> const CharT* {
 7692|   432k|        if (*begin == CharT{'['}) {
 7693|   432k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   432k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   432k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   432k|                return begin;
 7699|   432k|            }
 7700|   432k|            handler.on_character_set_string(set);
 7701|   432k|            return begin;
 7702|   432k|        }
 7703|   432k|        if (*begin == CharT{'/'}) {
 7704|   432k|            return parse_presentation_regex(begin, end, handler);
 7705|   432k|        }
 7706|   432k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   432k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   432k|            handler.on_error("Invalid type specifier in format string");
 7709|   432k|            return begin;
 7710|   432k|        }
 7711|   432k|        handler.on_type(type);
 7712|   432k|        return begin;
 7713|   432k|    };
 7714|       |
 7715|   432k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 432k, False: 0]
  |  Branch (7715:28): [True: 432k, False: 0]
  ------------------
 7716|   432k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 432k, False: 0]
  |  Branch (7716:36): [True: 314k, False: 118k]
  ------------------
 7717|   314k|        return do_presentation();
 7718|   314k|    }
 7719|       |
 7720|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   118k|    begin = parse_align(begin, end, handler);
 7726|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   118k|    begin = parse_width(begin, end, handler);
 7732|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   118k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 118k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   118k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 118k, False: 0]
  ------------------
 7751|   118k|        handler.on_localized();
 7752|   118k|        ++begin;
 7753|   118k|    }
 7754|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   118k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 118k, False: 0]
  |  Branch (7759:25): [True: 0, False: 118k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   118k|    return begin;
 7768|   118k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   314k|    auto do_presentation = [&]() -> const CharT* {
 7692|   314k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 314k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   314k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 314k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   314k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   314k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   314k|        handler.on_type(type);
 7712|   314k|        return begin;
 7713|   314k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|   118k|{
 7365|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   118k|    auto check_align = [](wchar_t ch) {
 7368|   118k|        switch (ch) {
 7369|   118k|            case L'<':
 7370|   118k|                return align_type::left;
 7371|   118k|            case L'>':
 7372|   118k|                return align_type::right;
 7373|   118k|            case L'^':
 7374|   118k|                return align_type::center;
 7375|   118k|            default:
 7376|   118k|                return align_type::none;
 7377|   118k|        }
 7378|   118k|    };
 7379|       |
 7380|   118k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   118k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  |  Branch (1039:45): [True: 0, False: 118k]
  |  |  |  Branch (1039:45): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7382|   118k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   118k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   118k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   118k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   118k|    const auto begin_before_fill = begin;
 7392|   118k|    begin += potential_fill_len;
 7393|       |
 7394|   118k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 118k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   118k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   118k|    const auto begin_after_fill = begin;
 7400|   118k|    ++begin;
 7401|       |
 7402|   118k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 118k, False: 0]
  ------------------
 7403|   118k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   118k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 118k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   118k|    }
 7411|       |
 7412|   118k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 118k, False: 0]
  ------------------
 7413|   118k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 118k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   118k|        return begin_before_fill;
 7418|   118k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   118k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   236k|    auto check_align = [](wchar_t ch) {
 7368|   236k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 236k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 236k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 236k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   236k|            default:
  ------------------
  |  Branch (7375:13): [True: 236k, False: 0]
  ------------------
 7376|   236k|                return align_type::none;
 7377|   236k|        }
 7378|   236k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|   118k|{
 7430|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   118k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 118k, False: 0]
  |  Branch (7432:33): [True: 0, False: 118k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   118k|    return begin;
 7443|   118k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|   118k|    {
 7967|   118k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   118k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 118k, False: 0]
  ------------------
 7969|   118k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 118k, False: 0]
  ------------------
 7970|   118k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 118k]
  ------------------
 7971|   118k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   118k|        Handler::on_localized();
 7979|   118k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   432k|{
 9494|   432k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   432k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   432k|{
 9353|   432k|#define SCN_VISIT(Type)                                                \
 9354|   432k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   432k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   432k|    }                                                                  \
 9357|   432k|    else {                                                             \
 9358|   432k|        return vis(monostate_val);                                     \
 9359|   432k|    }
 9360|       |
 9361|   432k|    monostate monostate_val{};
 9362|       |
 9363|   432k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 432k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 432k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 432k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 432k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 432k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 432k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 432k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 432k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 432k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 432k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 432k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 432k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 432k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 432k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 432k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 432k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 432k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   138k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 138k, False: 293k]
  ------------------
 9407|   138k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   138k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   138k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   138k|    }                                                                  \
  |  | 9357|   138k|    else {                                                             \
  |  | 9358|   138k|        return vis(monostate_val);                                     \
  |  | 9359|   138k|    }
  ------------------
 9408|   284k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 145k, False: 287k]
  ------------------
 9409|   284k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   284k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   284k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   284k|    }                                                                  \
  |  | 9357|   284k|    else {                                                             \
  |  | 9358|   284k|        return vis(monostate_val);                                     \
  |  | 9359|   284k|    }
  ------------------
 9410|   432k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 148k, False: 284k]
  ------------------
 9411|   432k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   432k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   432k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   432k|    }                                                                  \
  |  | 9357|   432k|    else {                                                             \
  |  | 9358|   432k|        return vis(monostate_val);                                     \
  |  | 9359|   432k|    }
  ------------------
 9412|   432k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 432k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   432k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 432k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 432k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 432k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 432k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 432k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 432k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 432k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 432k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 432k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 432k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   432k|            SCN_CLANG_POP
 9473|   432k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  67.0k|    {
 4370|  67.0k|        return sync(0);
 4371|  67.0k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   914k|    {
 6263|   914k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   914k|        return static_cast<std::size_t>(m_desc &
 6268|   914k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   914k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  1.82M|    {
 6289|  1.82M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  1.82M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   914k|    {
 6231|   914k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   914k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   914k|        const auto t = type(id);
 6243|   914k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   914k|        basic_scan_arg<Context> arg;
 6248|   914k|        arg.m_type = t;
 6249|   914k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 914k, False: 0]
  ------------------
 6250|   914k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   914k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   914k|        return arg;
 6256|   914k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   914k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   914k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   914k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   914k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   914k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   914k|    {
 6293|   914k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   914k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  1.73M|    {
 6047|  1.73M|        return m_type != detail::arg_type::none_type;
 6048|  1.73M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   135k|{
 9494|   135k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   135k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   135k|{
 9353|   135k|#define SCN_VISIT(Type)                                                \
 9354|   135k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   135k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   135k|    }                                                                  \
 9357|   135k|    else {                                                             \
 9358|   135k|        return vis(monostate_val);                                     \
 9359|   135k|    }
 9360|       |
 9361|   135k|    monostate monostate_val{};
 9362|       |
 9363|   135k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 135k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 135k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 135k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 135k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 135k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 135k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 135k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 135k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 135k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 135k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 135k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 135k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 135k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 135k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 135k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 135k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 135k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.3k, False: 95.3k]
  ------------------
 9407|  40.3k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.3k|    }                                                                  \
  |  | 9357|  40.3k|    else {                                                             \
  |  | 9358|  40.3k|        return vis(monostate_val);                                     \
  |  | 9359|  40.3k|    }
  ------------------
 9408|  87.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 46.7k, False: 88.9k]
  ------------------
 9409|  87.1k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  87.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  87.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  87.1k|    }                                                                  \
  |  | 9357|  87.1k|    else {                                                             \
  |  | 9358|  87.1k|        return vis(monostate_val);                                     \
  |  | 9359|  87.1k|    }
  ------------------
 9410|   135k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 48.5k, False: 87.1k]
  ------------------
 9411|   135k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   135k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   135k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   135k|    }                                                                  \
  |  | 9357|   135k|    else {                                                             \
  |  | 9358|   135k|        return vis(monostate_val);                                     \
  |  | 9359|   135k|    }
  ------------------
 9412|   135k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 135k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   135k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 135k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 135k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 135k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 135k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 135k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 135k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 135k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 135k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 135k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 135k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   135k|            SCN_CLANG_POP
 9473|   135k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.47M|{
 6092|  2.47M|    return arg.m_type;
 6093|  2.47M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.00M|{
 6104|  1.00M|    return arg.m_value;
 6105|  1.00M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   366k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   366k|    {
 9021|   366k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   367k|        : m_format{format},
 6362|   367k|          m_next_arg_id{next_arg_id},
 6363|   367k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   367k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   367k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   367k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   367k|    {
 6369|   367k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   367k|    {
 3089|   367k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   367k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   367k|    {
 3055|   367k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   367k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   367k|{
 7878|   367k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   367k|    handler.check_args_exhausted();
 7880|   367k|    return handler.get_error();
 7881|   367k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   367k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   367k|    auto begin = format.data();
 7846|   367k|    auto it = begin;
 7847|   367k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   630k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 367k, False: 263k]
  ------------------
 7850|   367k|        const auto ch = *it++;
 7851|   367k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 367k, False: 0]
  ------------------
 7852|   367k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   367k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   367k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 103k, False: 263k]
  ------------------
 7856|   103k|                return;
 7857|   103k|            }
 7858|   367k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   367k|    }
 7869|       |
 7870|   263k|    handler.on_literal_text(begin, end);
 7871|   263k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   367k|{
 7775|   367k|    struct id_adapter {
 7776|   367k|        constexpr void operator()()
 7777|   367k|        {
 7778|   367k|            arg_id = handler.on_arg_id();
 7779|   367k|        }
 7780|   367k|        constexpr void operator()(std::size_t id)
 7781|   367k|        {
 7782|   367k|            arg_id = handler.on_arg_id(id);
 7783|   367k|        }
 7784|       |
 7785|   367k|        constexpr void on_error(const char* msg)
 7786|   367k|        {
 7787|   367k|            SCN_UNLIKELY_ATTR
 7788|   367k|            handler.on_error(msg);
 7789|   367k|        }
 7790|       |
 7791|   367k|        Handler& handler;
 7792|   367k|        std::size_t arg_id;
 7793|   367k|    };
 7794|       |
 7795|   367k|    ++begin;
 7796|   367k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   367k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 367k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   367k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 367k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   367k|    else {
 7808|   367k|        auto adapter = id_adapter{handler, 0};
 7809|   367k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   367k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   367k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 367k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   367k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 367k, False: 0]
  ------------------
 7820|   367k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   367k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   367k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  |  Branch (1039:45): [True: 0, False: 367k]
  |  |  |  Branch (1039:45): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   367k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   367k|    }
 7836|   367k|    return begin + 1;
 7837|   367k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   734k|    {
 8919|   734k|        return m_args.get(id);
 8920|   734k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   734k|    {
 6397|   734k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   734k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   734k|        do_check_arg_id(id);
 6405|   734k|        return id;
 6406|   734k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   734k|{
 6891|   734k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   734k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   734k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   367k|{
 7276|   367k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   367k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 367k, False: 0]
  |  Branch (7277:26): [True: 0, False: 367k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   367k|    handler();
 7282|   367k|    return begin;
 7283|   367k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   367k|        {
 7778|   367k|            arg_id = handler.on_arg_id();
 7779|   367k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   734k|    {
 6392|   734k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   734k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   502k|{
 4709|   502k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 502k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   502k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   502k|                            ranges::default_sentinel};
 4715|   502k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   502k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   502k|    {
 4473|   502k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   502k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   502k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.46M|    {
 6381|  1.46M|        return m_format.data();
 6382|  1.46M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   367k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   367k|    {
 7962|   367k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   367k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   367k|{
 7691|   367k|    auto do_presentation = [&]() -> const CharT* {
 7692|   367k|        if (*begin == CharT{'['}) {
 7693|   367k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   367k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   367k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   367k|                return begin;
 7699|   367k|            }
 7700|   367k|            handler.on_character_set_string(set);
 7701|   367k|            return begin;
 7702|   367k|        }
 7703|   367k|        if (*begin == CharT{'/'}) {
 7704|   367k|            return parse_presentation_regex(begin, end, handler);
 7705|   367k|        }
 7706|   367k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   367k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   367k|            handler.on_error("Invalid type specifier in format string");
 7709|   367k|            return begin;
 7710|   367k|        }
 7711|   367k|        handler.on_type(type);
 7712|   367k|        return begin;
 7713|   367k|    };
 7714|       |
 7715|   367k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 367k, False: 0]
  |  Branch (7715:28): [True: 367k, False: 0]
  ------------------
 7716|   367k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 367k, False: 0]
  |  Branch (7716:36): [True: 276k, False: 90.4k]
  ------------------
 7717|   276k|        return do_presentation();
 7718|   276k|    }
 7719|       |
 7720|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  90.4k|    begin = parse_align(begin, end, handler);
 7726|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  90.4k|    begin = parse_width(begin, end, handler);
 7732|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  90.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 90.4k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  90.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 90.4k, False: 0]
  ------------------
 7751|  90.4k|        handler.on_localized();
 7752|  90.4k|        ++begin;
 7753|  90.4k|    }
 7754|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  90.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 90.4k, False: 0]
  |  Branch (7759:25): [True: 0, False: 90.4k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  90.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  90.4k|    return begin;
 7768|  90.4k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   734k|{
 7340|   734k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 553k, False: 180k]
  |  Branch (7340:33): [True: 553k, False: 0]
  ------------------
 7341|   734k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 180k, False: 0]
  |  Branch (7341:33): [True: 180k, False: 0]
  ------------------
 7342|   734k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   276k|    auto do_presentation = [&]() -> const CharT* {
 7692|   276k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 276k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   276k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 276k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   276k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   276k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   276k|        handler.on_type(type);
 7712|   276k|        return begin;
 7713|   276k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   553k|{
 7288|   553k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 553k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 553k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 553k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 553k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 553k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 553k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 553k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 553k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 553k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 553k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   198k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 198k, False: 354k]
  ------------------
 7307|   198k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 553k]
  ------------------
 7308|   198k|            return presentation_type::float_hex;
 7309|  44.2k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 44.2k, False: 508k]
  ------------------
 7310|  44.2k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 553k]
  ------------------
 7311|  44.2k|            return presentation_type::float_scientific;
 7312|   143k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 143k, False: 409k]
  ------------------
 7313|   143k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 553k]
  ------------------
 7314|   143k|            return presentation_type::float_fixed;
 7315|   166k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 166k, False: 386k]
  ------------------
 7316|   166k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 553k]
  ------------------
 7317|   166k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 553k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 553k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 553k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 553k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 553k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 553k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 553k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   553k|    }
 7335|   553k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  90.4k|{
 7365|  90.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  90.4k|    auto check_align = [](wchar_t ch) {
 7368|  90.4k|        switch (ch) {
 7369|  90.4k|            case L'<':
 7370|  90.4k|                return align_type::left;
 7371|  90.4k|            case L'>':
 7372|  90.4k|                return align_type::right;
 7373|  90.4k|            case L'^':
 7374|  90.4k|                return align_type::center;
 7375|  90.4k|            default:
 7376|  90.4k|                return align_type::none;
 7377|  90.4k|        }
 7378|  90.4k|    };
 7379|       |
 7380|  90.4k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  90.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 90.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7382|  90.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  90.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  90.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  90.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  90.4k|    const auto begin_before_fill = begin;
 7392|  90.4k|    begin += potential_fill_len;
 7393|       |
 7394|  90.4k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 90.4k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  90.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  90.4k|    const auto begin_after_fill = begin;
 7400|  90.4k|    ++begin;
 7401|       |
 7402|  90.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 90.4k, False: 0]
  ------------------
 7403|  90.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  90.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 90.4k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  90.4k|    }
 7411|       |
 7412|  90.4k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 90.4k, False: 0]
  ------------------
 7413|  90.4k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 90.4k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  90.4k|        return begin_before_fill;
 7418|  90.4k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  90.4k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|   180k|{
 7347|   180k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|   180k|    if constexpr (sizeof(CharT) != 1) {
 7349|   180k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|   180k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   180k|    auto check_align = [](wchar_t ch) {
 7368|   180k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 180k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 180k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 180k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   180k|            default:
  ------------------
  |  Branch (7375:13): [True: 180k, False: 0]
  ------------------
 7376|   180k|                return align_type::none;
 7377|   180k|        }
 7378|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  90.4k|{
 7430|  90.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  90.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  90.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 90.4k, False: 0]
  |  Branch (7432:33): [True: 0, False: 90.4k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  90.4k|    return begin;
 7443|  90.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  90.4k|    {
 7967|  90.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  90.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 90.4k, False: 0]
  ------------------
 7969|  90.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 90.4k, False: 0]
  ------------------
 7970|  90.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 90.4k]
  ------------------
 7971|  90.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  90.4k|        Handler::on_localized();
 7979|  90.4k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   367k|{
 9494|   367k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   367k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   367k|{
 9353|   367k|#define SCN_VISIT(Type)                                                \
 9354|   367k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   367k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   367k|    }                                                                  \
 9357|   367k|    else {                                                             \
 9358|   367k|        return vis(monostate_val);                                     \
 9359|   367k|    }
 9360|       |
 9361|   367k|    monostate monostate_val{};
 9362|       |
 9363|   367k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 367k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 367k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 367k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 367k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 367k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 367k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 367k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 367k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 367k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 367k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 367k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 367k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 367k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 367k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 367k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 367k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 367k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   115k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 115k, False: 251k]
  ------------------
 9407|   115k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   115k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   115k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   115k|    }                                                                  \
  |  | 9357|   115k|    else {                                                             \
  |  | 9358|   115k|        return vis(monostate_val);                                     \
  |  | 9359|   115k|    }
  ------------------
 9408|   240k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 124k, False: 242k]
  ------------------
 9409|   240k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   240k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   240k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   240k|    }                                                                  \
  |  | 9357|   240k|    else {                                                             \
  |  | 9358|   240k|        return vis(monostate_val);                                     \
  |  | 9359|   240k|    }
  ------------------
 9410|   367k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 126k, False: 240k]
  ------------------
 9411|   367k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   367k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   367k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   367k|    }                                                                  \
  |  | 9357|   367k|    else {                                                             \
  |  | 9358|   367k|        return vis(monostate_val);                                     \
  |  | 9359|   367k|    }
  ------------------
 9412|   367k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 367k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   367k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 367k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 367k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 367k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 367k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 367k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 367k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 367k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 367k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 367k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 367k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   367k|            SCN_CLANG_POP
 9473|   367k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   135k|{
 9494|   135k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   135k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   135k|{
 9353|   135k|#define SCN_VISIT(Type)                                                \
 9354|   135k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   135k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   135k|    }                                                                  \
 9357|   135k|    else {                                                             \
 9358|   135k|        return vis(monostate_val);                                     \
 9359|   135k|    }
 9360|       |
 9361|   135k|    monostate monostate_val{};
 9362|       |
 9363|   135k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 135k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 135k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 135k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 135k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 135k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 135k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 135k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 135k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 135k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 135k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 135k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 135k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 135k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 135k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 135k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 135k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 135k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.3k, False: 95.2k]
  ------------------
 9407|  40.3k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.3k|    }                                                                  \
  |  | 9357|  40.3k|    else {                                                             \
  |  | 9358|  40.3k|        return vis(monostate_val);                                     \
  |  | 9359|  40.3k|    }
  ------------------
 9408|  87.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 46.7k, False: 88.8k]
  ------------------
 9409|  87.0k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  87.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  87.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  87.0k|    }                                                                  \
  |  | 9357|  87.0k|    else {                                                             \
  |  | 9358|  87.0k|        return vis(monostate_val);                                     \
  |  | 9359|  87.0k|    }
  ------------------
 9410|   135k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 48.5k, False: 87.0k]
  ------------------
 9411|   135k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   135k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   135k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   135k|    }                                                                  \
  |  | 9357|   135k|    else {                                                             \
  |  | 9358|   135k|        return vis(monostate_val);                                     \
  |  | 9359|   135k|    }
  ------------------
 9412|   135k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 135k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   135k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 135k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 135k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 135k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 135k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 135k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 135k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 135k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 135k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 135k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 135k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   135k|            SCN_CLANG_POP
 9473|   135k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   366k|        : m_format{format},
 6362|   366k|          m_next_arg_id{next_arg_id},
 6363|   366k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   366k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   366k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   366k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   366k|    {
 6369|   366k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   366k|{
 7878|   366k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   366k|    handler.check_args_exhausted();
 7880|   366k|    return handler.get_error();
 7881|   366k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   366k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   366k|    auto begin = format.data();
 7846|   366k|    auto it = begin;
 7847|   366k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   630k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 366k, False: 263k]
  ------------------
 7850|   366k|        const auto ch = *it++;
 7851|   366k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 366k, False: 0]
  ------------------
 7852|   366k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   366k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   366k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 103k, False: 263k]
  ------------------
 7856|   103k|                return;
 7857|   103k|            }
 7858|   366k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   366k|    }
 7869|       |
 7870|   263k|    handler.on_literal_text(begin, end);
 7871|   263k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   263k|    {
 9058|   263k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   263k|    static_cast<    \
  |  | 1109|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   263k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   366k|{
 7775|   366k|    struct id_adapter {
 7776|   366k|        constexpr void operator()()
 7777|   366k|        {
 7778|   366k|            arg_id = handler.on_arg_id();
 7779|   366k|        }
 7780|   366k|        constexpr void operator()(std::size_t id)
 7781|   366k|        {
 7782|   366k|            arg_id = handler.on_arg_id(id);
 7783|   366k|        }
 7784|       |
 7785|   366k|        constexpr void on_error(const char* msg)
 7786|   366k|        {
 7787|   366k|            SCN_UNLIKELY_ATTR
 7788|   366k|            handler.on_error(msg);
 7789|   366k|        }
 7790|       |
 7791|   366k|        Handler& handler;
 7792|   366k|        std::size_t arg_id;
 7793|   366k|    };
 7794|       |
 7795|   366k|    ++begin;
 7796|   366k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   366k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 366k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   366k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 366k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   366k|    else {
 7808|   366k|        auto adapter = id_adapter{handler, 0};
 7809|   366k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   366k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   366k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 366k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   366k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 366k, False: 0]
  ------------------
 7820|   366k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   366k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   366k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  |  Branch (1039:45): [True: 0, False: 366k]
  |  |  |  Branch (1039:45): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   366k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   366k|    }
 7836|   366k|    return begin + 1;
 7837|   366k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   366k|{
 7276|   366k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   366k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 366k, False: 0]
  |  Branch (7277:26): [True: 0, False: 366k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   366k|    handler();
 7282|   366k|    return begin;
 7283|   366k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   366k|        {
 7778|   366k|            arg_id = handler.on_arg_id();
 7779|   366k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   366k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   366k|    {
 7962|   366k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   366k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   366k|{
 7691|   366k|    auto do_presentation = [&]() -> const CharT* {
 7692|   366k|        if (*begin == CharT{'['}) {
 7693|   366k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   366k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   366k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   366k|                return begin;
 7699|   366k|            }
 7700|   366k|            handler.on_character_set_string(set);
 7701|   366k|            return begin;
 7702|   366k|        }
 7703|   366k|        if (*begin == CharT{'/'}) {
 7704|   366k|            return parse_presentation_regex(begin, end, handler);
 7705|   366k|        }
 7706|   366k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   366k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   366k|            handler.on_error("Invalid type specifier in format string");
 7709|   366k|            return begin;
 7710|   366k|        }
 7711|   366k|        handler.on_type(type);
 7712|   366k|        return begin;
 7713|   366k|    };
 7714|       |
 7715|   366k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 366k, False: 0]
  |  Branch (7715:28): [True: 366k, False: 0]
  ------------------
 7716|   366k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 366k, False: 0]
  |  Branch (7716:36): [True: 276k, False: 90.3k]
  ------------------
 7717|   276k|        return do_presentation();
 7718|   276k|    }
 7719|       |
 7720|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  90.3k|    begin = parse_align(begin, end, handler);
 7726|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  90.3k|    begin = parse_width(begin, end, handler);
 7732|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  90.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 90.3k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  90.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 90.3k, False: 0]
  ------------------
 7751|  90.3k|        handler.on_localized();
 7752|  90.3k|        ++begin;
 7753|  90.3k|    }
 7754|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  90.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 90.3k, False: 0]
  |  Branch (7759:25): [True: 0, False: 90.3k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  90.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  90.3k|    return begin;
 7768|  90.3k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   276k|    auto do_presentation = [&]() -> const CharT* {
 7692|   276k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 276k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   276k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 276k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   276k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   276k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   276k|        handler.on_type(type);
 7712|   276k|        return begin;
 7713|   276k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  90.3k|{
 7365|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  90.3k|    auto check_align = [](wchar_t ch) {
 7368|  90.3k|        switch (ch) {
 7369|  90.3k|            case L'<':
 7370|  90.3k|                return align_type::left;
 7371|  90.3k|            case L'>':
 7372|  90.3k|                return align_type::right;
 7373|  90.3k|            case L'^':
 7374|  90.3k|                return align_type::center;
 7375|  90.3k|            default:
 7376|  90.3k|                return align_type::none;
 7377|  90.3k|        }
 7378|  90.3k|    };
 7379|       |
 7380|  90.3k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  90.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 90.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7382|  90.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  90.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  90.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  90.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  90.3k|    const auto begin_before_fill = begin;
 7392|  90.3k|    begin += potential_fill_len;
 7393|       |
 7394|  90.3k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 90.3k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  90.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  90.3k|    const auto begin_after_fill = begin;
 7400|  90.3k|    ++begin;
 7401|       |
 7402|  90.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 90.3k, False: 0]
  ------------------
 7403|  90.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 90.3k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  90.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 90.3k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  90.3k|    }
 7411|       |
 7412|  90.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 90.3k, False: 0]
  ------------------
 7413|  90.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 90.3k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  90.3k|        return begin_before_fill;
 7418|  90.3k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  90.3k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   180k|    auto check_align = [](wchar_t ch) {
 7368|   180k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 180k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 180k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 180k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   180k|            default:
  ------------------
  |  Branch (7375:13): [True: 180k, False: 0]
  ------------------
 7376|   180k|                return align_type::none;
 7377|   180k|        }
 7378|   180k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  90.3k|{
 7430|  90.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  90.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  90.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 90.3k, False: 0]
  |  Branch (7432:33): [True: 0, False: 90.3k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  90.3k|    return begin;
 7443|  90.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  90.3k|    {
 7967|  90.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  90.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 90.3k, False: 0]
  ------------------
 7969|  90.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 90.3k, False: 0]
  ------------------
 7970|  90.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 90.3k]
  ------------------
 7971|  90.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  90.3k|        Handler::on_localized();
 7979|  90.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   366k|{
 9494|   366k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   366k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   366k|{
 9353|   366k|#define SCN_VISIT(Type)                                                \
 9354|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   366k|    }                                                                  \
 9357|   366k|    else {                                                             \
 9358|   366k|        return vis(monostate_val);                                     \
 9359|   366k|    }
 9360|       |
 9361|   366k|    monostate monostate_val{};
 9362|       |
 9363|   366k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 366k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 366k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 366k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 366k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 366k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 366k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 366k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 366k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 366k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 366k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 366k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 366k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 366k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 366k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 366k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 366k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 366k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   115k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 115k, False: 251k]
  ------------------
 9407|   115k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   115k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   115k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   115k|    }                                                                  \
  |  | 9357|   115k|    else {                                                             \
  |  | 9358|   115k|        return vis(monostate_val);                                     \
  |  | 9359|   115k|    }
  ------------------
 9408|   240k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 124k, False: 242k]
  ------------------
 9409|   240k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   240k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   240k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   240k|    }                                                                  \
  |  | 9357|   240k|    else {                                                             \
  |  | 9358|   240k|        return vis(monostate_val);                                     \
  |  | 9359|   240k|    }
  ------------------
 9410|   366k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 126k, False: 240k]
  ------------------
 9411|   366k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   366k|    }                                                                  \
  |  | 9357|   366k|    else {                                                             \
  |  | 9358|   366k|        return vis(monostate_val);                                     \
  |  | 9359|   366k|    }
  ------------------
 9412|   366k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 366k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   366k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 366k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 366k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 366k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 366k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 366k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 366k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 366k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 366k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 366k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 366k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   366k|            SCN_CLANG_POP
 9473|   366k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|   134k|    {
 4370|   134k|        return sync(0);
 4371|   134k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|   107k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  90.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  71.3k|{
   89|  71.3k|    auto result = make_scan_result<Source, Args...>();
   90|  71.3k|    fill_scan_result(result,
   91|  71.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  71.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  71.3k|    return result;
   94|  71.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   228k|{
   44|   228k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   228k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  71.3k|{
  131|  71.3k|    auto result = make_scan_result<Source, Args...>();
  132|  71.3k|    fill_scan_result(result,
  133|  71.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  71.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  71.3k|    return result;
  136|  71.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   228k|{
   60|   228k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   228k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  13.4k|{
  171|  13.4k|    auto result = make_scan_result<Source, T>();
  172|  13.4k|    fill_scan_result(
  173|  13.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.4k|    return result;
  176|  13.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  45.2k|{
   72|  45.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.2k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  77.7k|{
   89|  77.7k|    auto result = make_scan_result<Source, Args...>();
   90|  77.7k|    fill_scan_result(result,
   91|  77.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  77.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  77.7k|    return result;
   94|  77.7k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  77.7k|{
  131|  77.7k|    auto result = make_scan_result<Source, Args...>();
  132|  77.7k|    fill_scan_result(result,
  133|  77.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  77.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  77.7k|    return result;
  136|  77.7k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.5k|{
  171|  15.5k|    auto result = make_scan_result<Source, T>();
  172|  15.5k|    fill_scan_result(
  173|  15.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.5k|    return result;
  176|  15.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  79.6k|{
   89|  79.6k|    auto result = make_scan_result<Source, Args...>();
   90|  79.6k|    fill_scan_result(result,
   91|  79.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.6k|    return result;
   94|  79.6k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  79.6k|{
  131|  79.6k|    auto result = make_scan_result<Source, Args...>();
  132|  79.6k|    fill_scan_result(result,
  133|  79.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.6k|    return result;
  136|  79.6k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.1k|{
  171|  16.1k|    auto result = make_scan_result<Source, T>();
  172|  16.1k|    fill_scan_result(
  173|  16.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.1k|    return result;
  176|  16.1k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  71.3k|{
   89|  71.3k|    auto result = make_scan_result<Source, Args...>();
   90|  71.3k|    fill_scan_result(result,
   91|  71.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  71.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  71.3k|    return result;
   94|  71.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   228k|{
   44|   228k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   228k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  71.3k|{
  131|  71.3k|    auto result = make_scan_result<Source, Args...>();
  132|  71.3k|    fill_scan_result(result,
  133|  71.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  71.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  71.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  71.3k|    return result;
  136|  71.3k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   228k|{
   60|   228k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   228k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  13.4k|{
  171|  13.4k|    auto result = make_scan_result<Source, T>();
  172|  13.4k|    fill_scan_result(
  173|  13.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.4k|    return result;
  176|  13.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  45.1k|{
   72|  45.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.1k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  77.7k|{
   89|  77.7k|    auto result = make_scan_result<Source, Args...>();
   90|  77.7k|    fill_scan_result(result,
   91|  77.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  77.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  77.7k|    return result;
   94|  77.7k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  77.7k|{
  131|  77.7k|    auto result = make_scan_result<Source, Args...>();
  132|  77.7k|    fill_scan_result(result,
  133|  77.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  77.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  77.7k|    return result;
  136|  77.7k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.5k|{
  171|  15.5k|    auto result = make_scan_result<Source, T>();
  172|  15.5k|    fill_scan_result(
  173|  15.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.5k|    return result;
  176|  15.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  79.6k|{
   89|  79.6k|    auto result = make_scan_result<Source, Args...>();
   90|  79.6k|    fill_scan_result(result,
   91|  79.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  79.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  79.6k|    return result;
   94|  79.6k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  79.6k|{
  131|  79.6k|    auto result = make_scan_result<Source, Args...>();
  132|  79.6k|    fill_scan_result(result,
  133|  79.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  79.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  79.6k|    return result;
  136|  79.6k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.1k|{
  171|  16.1k|    auto result = make_scan_result<Source, T>();
  172|  16.1k|    fill_scan_result(
  173|  16.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.1k|    return result;
  176|  16.1k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   980k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   980k|{
  309|   980k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   980k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   401k|{
  315|   401k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   401k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 200k, False: 200k]
  ------------------
  317|   401k|                    : std::locale{};
  318|   401k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   339k|{
 1829|   339k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   339k|                                      m_nan_payload_buffer, value);
 1831|   339k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 326k, False: 12.5k]
  |  |  ------------------
  ------------------
 1832|   326k|        value = this->setsign(value);
 1833|   326k|        return n;
 1834|   326k|    }
 1835|       |
 1836|  12.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 3.41k, False: 9.15k]
  ------------------
 1837|  12.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 876, False: 2.54k]
  ------------------
 1838|    876|        return detail::unexpected_scan_error(
 1839|    876|            scan_error::value_negative_overflow, n.error().msg());
 1840|    876|    }
 1841|  11.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 542, False: 11.1k]
  ------------------
 1842|  11.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 94, False: 448]
  ------------------
 1843|     94|        return detail::unexpected_scan_error(
 1844|     94|            scan_error::value_negative_underflow, n.error().msg());
 1845|     94|    }
 1846|  11.5k|    return n;
 1847|  11.6k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   248k|{
 1829|   248k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   248k|                                      m_nan_payload_buffer, value);
 1831|   248k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 222k, False: 25.4k]
  |  |  ------------------
  ------------------
 1832|   222k|        value = this->setsign(value);
 1833|   222k|        return n;
 1834|   222k|    }
 1835|       |
 1836|  25.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.54k, False: 22.8k]
  ------------------
 1837|  25.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 2.44k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  25.3k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 760, False: 24.5k]
  ------------------
 1842|  25.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 50, False: 710]
  ------------------
 1843|     50|        return detail::unexpected_scan_error(
 1844|     50|            scan_error::value_negative_underflow, n.error().msg());
 1845|     50|    }
 1846|  25.2k|    return n;
 1847|  25.3k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   353k|{
 1829|   353k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   353k|                                      m_nan_payload_buffer, value);
 1831|   353k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   353k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 342k, False: 11.2k]
  |  |  ------------------
  ------------------
 1832|   342k|        value = this->setsign(value);
 1833|   342k|        return n;
 1834|   342k|    }
 1835|       |
 1836|  11.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.06k, False: 9.14k]
  ------------------
 1837|  11.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 511, False: 1.54k]
  ------------------
 1838|    511|        return detail::unexpected_scan_error(
 1839|    511|            scan_error::value_negative_overflow, n.error().msg());
 1840|    511|    }
 1841|  10.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 233, False: 10.4k]
  ------------------
 1842|  10.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 91, False: 142]
  ------------------
 1843|     91|        return detail::unexpected_scan_error(
 1844|     91|            scan_error::value_negative_underflow, n.error().msg());
 1845|     91|    }
 1846|  10.6k|    return n;
 1847|  10.6k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   277k|{
 1829|   277k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   277k|                                      m_nan_payload_buffer, value);
 1831|   277k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   277k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 252k, False: 24.2k]
  |  |  ------------------
  ------------------
 1832|   252k|        value = this->setsign(value);
 1833|   252k|        return n;
 1834|   252k|    }
 1835|       |
 1836|  24.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 1.52k, False: 22.7k]
  ------------------
 1837|  24.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 1.42k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  24.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 178, False: 24.0k]
  ------------------
 1842|  24.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 160]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  24.1k|    return n;
 1847|  24.1k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   361k|{
 1829|   361k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   361k|                                      m_nan_payload_buffer, value);
 1831|   361k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   361k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 351k, False: 9.79k]
  |  |  ------------------
  ------------------
 1832|   351k|        value = this->setsign(value);
 1833|   351k|        return n;
 1834|   351k|    }
 1835|       |
 1836|  9.79k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 438, False: 9.35k]
  ------------------
 1837|  9.79k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 176, False: 262]
  ------------------
 1838|    176|        return detail::unexpected_scan_error(
 1839|    176|            scan_error::value_negative_overflow, n.error().msg());
 1840|    176|    }
 1841|  9.61k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 108, False: 9.50k]
  ------------------
 1842|  9.61k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 52, False: 56]
  ------------------
 1843|     52|        return detail::unexpected_scan_error(
 1844|     52|            scan_error::value_negative_underflow, n.error().msg());
 1845|     52|    }
 1846|  9.56k|    return n;
 1847|  9.61k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   284k|{
 1829|   284k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   284k|                                      m_nan_payload_buffer, value);
 1831|   284k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   284k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 261k, False: 23.2k]
  |  |  ------------------
  ------------------
 1832|   261k|        value = this->setsign(value);
 1833|   261k|        return n;
 1834|   261k|    }
 1835|       |
 1836|  23.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 132, False: 23.1k]
  ------------------
 1837|  23.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 32, False: 100]
  ------------------
 1838|     32|        return detail::unexpected_scan_error(
 1839|     32|            scan_error::value_negative_overflow, n.error().msg());
 1840|     32|    }
 1841|  23.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 68, False: 23.1k]
  ------------------
 1842|  23.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 50]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  23.1k|    return n;
 1847|  23.2k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  10.2k|{
 2185|  10.2k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  10.2k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  10.2k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  10.2k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  10.2k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 96, False: 10.1k]
  ------------------
 2191|     96|        SCN_UNLIKELY_ATTR
 2192|     96|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     96|                                             "Invalid integer value");
 2194|     96|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  10.1k|    auto start = source.data();
 2198|  10.1k|    const auto end = source.data() + source.size();
 2199|  10.1k|    {
 2200|   153k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 152k, False: 528]
  ------------------
 2201|   152k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 9.63k, False: 143k]
  ------------------
 2202|  9.63k|                break;
 2203|  9.63k|            }
 2204|   152k|        }
 2205|  10.1k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 606, False: 9.56k]
  |  |  |  Branch (1039:45): [True: 528, False: 9.63k]
  |  |  |  Branch (1039:45): [True: 78, False: 9.56k]
  |  |  ------------------
  ------------------
 2206|    606|            value = 0;
 2207|    606|            return ranges::next(source.begin(),
 2208|    606|                                ranges::distance(source.data(), start));
 2209|    606|        }
 2210|  10.1k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  9.56k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  9.56k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 9.56k, False: 0]
  ------------------
 2215|  9.56k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  9.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 998, False: 8.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    998|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    998|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    998|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    998|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    998|    }                                                  \
  |  |  |  | 3957|  9.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  8.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  8.56k|                             detail::make_string_view_from_pointers(start, end),
 2217|  8.56k|                             value, sign == sign_type::minus_sign));
 2218|  8.56k|            return ranges::next(source.begin(),
 2219|  8.56k|                                ranges::distance(source.data(), ptr));
 2220|  9.56k|        }
 2221|  9.56k|    }
 2222|       |
 2223|  9.56k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  9.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 9.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  9.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  9.56k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  9.56k|                     base, sign == sign_type::minus_sign));
 2226|  9.56k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  9.56k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|   252k|{
 2952|   252k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|   252k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2959|   270k|{
 2960|   270k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2961|   270k|    return sync_after_vscan(source, n);
 2962|   270k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|   228k|{
 2970|   228k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|   228k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2977|   228k|{
 2978|   228k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2979|   228k|    return sync_after_vscan(source, n);
 2980|   228k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   895k|{
  207|   895k|    return find_classic_impl(
  208|   895k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   895k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   895k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  1.15M|{
  215|  1.15M|    return find_classic_impl(
  216|  1.15M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  1.15M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  1.15M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|   252k|{
 2921|   252k|    return vscan_internal(source, format, args);
 2922|   252k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2926|   270k|{
 2927|   270k|    auto n = vscan_internal(source, format, args);
 2928|   270k|    return sync_after_vscan(source, n);
 2929|   270k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|   228k|{
 2935|   228k|    return vscan_internal(source, format, args);
 2936|   228k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2940|   228k|{
 2941|   228k|    auto n = vscan_internal(source, format, args);
 2942|   228k|    return sync_after_vscan(source, n);
 2943|   228k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3006|  53.5k|{
 3007|  53.5k|    return vscan_value_internal(source, arg);
 3008|  53.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3011|  54.3k|{
 3012|  54.3k|    auto n = vscan_value_internal(source, arg);
 3013|  54.3k|    return sync_after_vscan(source, n);
 3014|  54.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3019|  45.2k|{
 3020|  45.2k|    return vscan_value_internal(source, arg);
 3021|  45.2k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3025|  45.1k|{
 3026|  45.1k|    auto n = vscan_value_internal(source, arg);
 3027|  45.1k|    return sync_after_vscan(source, n);
 3028|  45.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1959|  9.56k|{
 1960|  9.56k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|  9.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1961|  9.56k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1962|  9.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2003|    192|{
 2004|    192|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2005|    192|    return min_safe_u64_table[static_cast<size_t>(base)];
 2006|    192|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2013|  9.56k|{
 2014|  9.56k|    auto max_digits = maxdigits_u64(base);
 2015|  9.56k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 914, False: 8.64k]
  ------------------
 2016|    914|        return true;
 2017|    914|    }
 2018|  8.64k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 192, False: 8.45k]
  |  Branch (2018:39): [True: 84, False: 108]
  ------------------
 2019|     84|        return true;
 2020|     84|    }
 2021|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2023|       |                      static_cast<uint64_t>(is_negative)) {
 2024|       |            SCN_UNLIKELY_ATTR
 2025|       |            return true;
 2026|       |        }
 2027|       |    }
 2028|       |
 2029|  8.56k|    return false;
 2030|  8.64k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2034|  8.56k|{
 2035|  8.56k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 8.56k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  8.56k|    return static_cast<T>(acc);
 2045|  8.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1897|  16.8k|{
 1898|  16.8k|    uint64_t val{};
 1899|  16.8k|    std::memcpy(&val, input, sizeof(uint64_t));
 1900|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1901|       |        val = byteswap(val);
 1902|       |    }
 1903|  16.8k|    return val;
 1904|  16.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1907|  8.16k|{
 1908|  8.16k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1909|  8.16k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1910|  8.16k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1911|  8.16k|    word -= 0x3030303030303030;
 1912|  8.16k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1913|  8.16k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1914|  8.16k|    return static_cast<uint32_t>(word);
 1915|  8.16k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1918|  8.66k|{
 1919|  8.66k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1920|  8.66k|              0x8080808080808080));
 1921|  8.66k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   895k|{
  131|   895k|    auto it = source.begin();
  132|       |
  133|  2.76M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.14M, False: 615k]
  ------------------
  134|  2.14M|        auto sv =
  135|  2.14M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.14M|                .substr(0, 8);
  137|       |
  138|  2.14M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.07M, False: 68.4k]
  ------------------
  139|  2.07M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.07M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.07M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 256k, False: 1.82M]
  ------------------
  142|   256k|                break;
  143|   256k|            }
  144|  1.82M|            continue;
  145|  2.07M|        }
  146|       |
  147|   234k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 189k, False: 45.2k]
  ------------------
  148|   189k|            auto tmp =
  149|   189k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   189k|            auto res = get_next_code_point(tmp);
  151|   189k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 23.1k, False: 166k]
  ------------------
  152|  23.1k|                return it;
  153|  23.1k|            }
  154|   166k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   166k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   166k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   166k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   166k|        }
  158|  68.4k|    }
  159|       |
  160|   872k|    return detail::make_string_view_iterator(source, it);
  161|   895k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  2.86M|{
  118|  2.86M|    static_assert(sizeof(*source.data()) == 1);
  119|  2.86M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  2.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  2.86M|    uint64_t word{};
  121|  2.86M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  2.86M|    return has_byte_greater(word, 127) != 0;
  124|  2.86M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  12.0M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   189k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  1.15M|{
  131|  1.15M|    auto it = source.begin();
  132|       |
  133|  1.24M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 718k, False: 523k]
  ------------------
  134|   718k|        auto sv =
  135|   718k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   718k|                .substr(0, 8);
  137|       |
  138|   718k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 670k, False: 48.3k]
  ------------------
  139|   670k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   670k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   670k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 582k, False: 87.4k]
  ------------------
  142|   582k|                break;
  143|   582k|            }
  144|  87.4k|            continue;
  145|   670k|        }
  146|       |
  147|  76.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 72.7k, False: 3.45k]
  ------------------
  148|  72.7k|            auto tmp =
  149|  72.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  72.7k|            auto res = get_next_code_point(tmp);
  151|  72.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 44.9k, False: 27.8k]
  ------------------
  152|  44.9k|                return it;
  153|  44.9k|            }
  154|  27.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  27.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  27.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  27.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  27.8k|        }
  158|  48.3k|    }
  159|       |
  160|  1.10M|    return detail::make_string_view_iterator(source, it);
  161|  1.15M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   985k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  72.7k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   339k|{
 1737|   339k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 2.61k, False: 336k]
  ------------------
 1738|  2.61k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  2.61k|            value = std::numeric_limits<T>::infinity();
 1740|  2.61k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  2.61k|    }
 1748|   339k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.63k, False: 337k]
  ------------------
 1749|  1.63k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.63k|            value = std::numeric_limits<T>::infinity();
 1751|  1.63k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.63k|    }
 1759|   339k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 16.7k, False: 322k]
  ------------------
 1760|  16.7k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  16.7k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  16.7k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  16.7k|    }
 1770|   339k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 3.76k, False: 335k]
  ------------------
 1771|  3.76k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  3.76k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  3.76k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  3.76k|#if SCN_HAS_INT128
 1777|  3.76k|                using payload_type =
 1778|  3.76k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  3.76k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  3.76k|                payload_type payload{};
 1784|  3.76k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 2.90k, False: 868]
  ------------------
 1785|  3.76k|                        nan_payload.view(), payload, {})) {
 1786|  2.90k|                    apply_nan_payload(value, payload);
 1787|  2.90k|                }
 1788|    868|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 328, False: 540]
  ------------------
 1789|    868|                         scan_error::value_positive_overflow) {
 1790|    328|                    apply_nan_payload(value,
 1791|    328|                                      std::numeric_limits<payload_type>::max());
 1792|    328|                }
 1793|  3.76k|            }
 1794|       |
 1795|  3.76k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  3.76k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  3.76k|    }
 1804|       |
 1805|   339k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   314k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 67.7k, False: 246k]
  ------------------
 1807|  67.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.36k, False: 65.4k]
  |  |  ------------------
  ------------------
 1808|  2.36k|            return detail::unexpected_scan_error(
 1809|  2.36k|                scan_error::invalid_scanned_value,
 1810|  2.36k|                "Invalid floating-point digit");
 1811|  2.36k|        }
 1812|  67.7k|    }
 1813|   312k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.24k, False: 306k]
  |  |  ------------------
  ------------------
 1814|  6.24k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.24k|                                             "Invalid floating-point digit");
 1816|  6.24k|    }
 1817|       |
 1818|   306k|    return dispatch_parse_float_value<
 1819|   306k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   306k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   306k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   312k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1606|  3.22k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.22k|                                  nil_float_traits>) {
 1610|  3.22k|        using traits = float_traits<F>;
 1611|  3.22k|        typename traits::nan_repr bits{};
 1612|  3.22k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.22k|        traits::apply_nan_payload(bits, payload);
 1614|  3.22k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  376|  3.22k|    {
  377|  3.22k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  378|  3.22k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1104|  3.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  379|  3.22k|        r.mantissa = payload;
  380|  3.22k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|   306k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   306k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|   306k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   306k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   306k|    else {
 1715|   306k|        auto next =
 1716|   306k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   306k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   306k|                if (!err.has_value()) {
 1721|   306k|                    return unexpected(err.error());
 1722|   306k|                }
 1723|   306k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   306k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   306k|        };
 1727|   306k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   306k|    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   306k|{
 1686|   306k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   306k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   306k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1071|   306k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   306k|    {
 1073|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   306k|    {
 1078|   306k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   306k|                           generic_strtod);
 1080|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   306k|    {
  873|   306k|        CharT* end{};
  874|   306k|        errno = 0;
  875|   306k|        value = strtod_cb(src, &end);
  876|   306k|        const auto saved_errno = errno;
  877|   306k|        auto chars_read = end - src;
  878|       |
  879|   306k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   306k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.95k, False: 302k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.95k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.95k|    }
  ------------------
  880|       |
  881|   302k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 64.9k, False: 237k]
  ------------------
  882|   302k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 64.9k, False: 0]
  ------------------
  883|  64.9k|            chars_read -= 2;
  884|  64.9k|        }
  885|       |
  886|   302k|        return chars_read;
  887|   306k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  915|   532k|    {
  916|   532k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 280k, False: 251k]
  |  Branch (916:41): [True: 0, False: 280k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   532k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 12.2k, False: 519k]
  ------------------
  924|   532k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 12.2k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   532k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 7.38k, False: 524k]
  |  Branch (932:34): [True: 1.30k, False: 6.07k]
  ------------------
  933|  1.30k|            SCN_UNLIKELY_ATTR
  934|  1.30k|            return detail::unexpected_scan_error(
  935|  1.30k|                scan_error::value_positive_underflow,
  936|  1.30k|                "strtod failed: Value too small");
  937|  1.30k|        }
  938|   530k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 6.07k, False: 524k]
  |  Branch (938:34): [True: 0, False: 6.07k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   530k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 530k, False: 0]
  ------------------
  948|   530k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 530k, False: 0]
  ------------------
  949|   530k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 5.96k, False: 524k]
  ------------------
  950|  5.96k|            SCN_UNLIKELY_ATTR
  951|  5.96k|            return detail::unexpected_scan_error(
  952|  5.96k|                scan_error::value_positive_overflow,
  953|  5.96k|                "strtod failed: Value too large");
  954|  5.96k|        }
  955|   524k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 524k, False: 0]
  ------------------
  956|   524k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 524k, False: 0]
  ------------------
  957|   524k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 524k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   524k|        return {};
  965|   524k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  754|   532k|{
  755|   532k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 280k, False: 251k]
  |  Branch (755:44): [True: 0, False: 251k]
  ------------------
  756|   532k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  761|  7.38k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  7.38k|    return value == static_cast<T>(0.0);
  773|  7.38k|#endif
  774|  7.38k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  778|  6.07k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  6.07k|    return value == static_cast<T>(-0.0);
  791|  6.07k|#endif
  792|  6.07k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  797|   530k|{
  798|   530k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   530k|        return value == std::numeric_limits<T>::infinity();
  815|   530k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   530k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  824|   524k|{
  825|   524k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   524k|        return value == -std::numeric_limits<T>::infinity();
  843|   524k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   524k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   306k|    {
  893|   306k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 288k, False: 17.3k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   288k|            auto first_space = read_until_classic_space(input.view());
  896|   288k|            input.assign(
  897|   288k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   288k|        }
  899|       |
  900|   306k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 65.3k, False: 240k]
  ------------------
  901|  65.3k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  65.3k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  65.3k|        }
  908|       |
  909|   306k|        return input.get_allocated_string().c_str();
  910|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1084|   306k|    {
 1085|   306k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   306k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  968|   306k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   306k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|   306k|        if constexpr (std::is_same_v<T, float>) {
 1001|   306k|            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   306k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   248k|{
 1737|   248k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 248k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   248k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 248k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   248k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 248k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   248k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 248k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   248k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   248k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 58.9k, False: 189k]
  ------------------
 1807|  58.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 52.4k]
  |  |  ------------------
  ------------------
 1808|  6.46k|            return detail::unexpected_scan_error(
 1809|  6.46k|                scan_error::invalid_scanned_value,
 1810|  6.46k|                "Invalid floating-point digit");
 1811|  6.46k|        }
 1812|  58.9k|    }
 1813|   241k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.6k, False: 226k]
  |  |  ------------------
  ------------------
 1814|  15.6k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  15.6k|                                             "Invalid floating-point digit");
 1816|  15.6k|    }
 1817|       |
 1818|   226k|    return dispatch_parse_float_value<
 1819|   226k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   226k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   226k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   241k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|   226k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   226k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|   226k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   226k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   226k|    else {
 1715|   226k|        auto next =
 1716|   226k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   226k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   226k|                if (!err.has_value()) {
 1721|   226k|                    return unexpected(err.error());
 1722|   226k|                }
 1723|   226k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   226k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   226k|        };
 1727|   226k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   226k|    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   226k|{
 1686|   226k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   226k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   226k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1071|   226k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   226k|    {
 1073|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   226k|    {
 1078|   226k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   226k|                           generic_strtod);
 1080|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   226k|    {
  873|   226k|        CharT* end{};
  874|   226k|        errno = 0;
  875|   226k|        value = strtod_cb(src, &end);
  876|   226k|        const auto saved_errno = errno;
  877|   226k|        auto chars_read = end - src;
  878|       |
  879|   226k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   226k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.30k, False: 222k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.30k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.30k|    }
  ------------------
  880|       |
  881|   222k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.2k, False: 170k]
  ------------------
  882|   222k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.2k, False: 0]
  ------------------
  883|  52.2k|            chars_read -= 2;
  884|  52.2k|        }
  885|       |
  886|   222k|        return chars_read;
  887|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   226k|    {
  893|   226k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 220k, False: 5.59k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   220k|            auto first_space = read_until_classic_space(input.view());
  896|   220k|            input.assign(
  897|   220k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   220k|        }
  899|       |
  900|   226k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.3k, False: 173k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.3k|            else {
  905|  52.3k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.3k|            }
  907|  52.3k|        }
  908|       |
  909|   226k|        return input.get_allocated_string().c_str();
  910|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1084|   226k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   226k|        else {
 1089|   226k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   226k|        }
 1091|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1016|   226k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   226k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|   226k|        if constexpr (std::is_same_v<T, float>) {
 1049|   226k|            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   226k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   353k|{
 1737|   353k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.10k, False: 350k]
  ------------------
 1738|  3.10k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.10k|            value = std::numeric_limits<T>::infinity();
 1740|  3.10k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.10k|    }
 1748|   353k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.71k, False: 351k]
  ------------------
 1749|  1.71k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.71k|            value = std::numeric_limits<T>::infinity();
 1751|  1.71k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.71k|    }
 1759|   353k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.2k, False: 336k]
  ------------------
 1760|  17.2k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.2k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.2k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.2k|    }
 1770|   353k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.06k, False: 349k]
  ------------------
 1771|  4.06k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.06k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.06k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.06k|#if SCN_HAS_INT128
 1777|  4.06k|                using payload_type =
 1778|  4.06k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.06k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.06k|                payload_type payload{};
 1784|  4.06k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.11k, False: 942]
  ------------------
 1785|  4.06k|                        nan_payload.view(), payload, {})) {
 1786|  3.11k|                    apply_nan_payload(value, payload);
 1787|  3.11k|                }
 1788|    942|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 332, False: 610]
  ------------------
 1789|    942|                         scan_error::value_positive_overflow) {
 1790|    332|                    apply_nan_payload(value,
 1791|    332|                                      std::numeric_limits<payload_type>::max());
 1792|    332|                }
 1793|  4.06k|            }
 1794|       |
 1795|  4.06k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.06k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.06k|    }
 1804|       |
 1805|   353k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   327k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 69.5k, False: 258k]
  ------------------
 1807|  69.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  69.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.40k, False: 67.1k]
  |  |  ------------------
  ------------------
 1808|  2.40k|            return detail::unexpected_scan_error(
 1809|  2.40k|                scan_error::invalid_scanned_value,
 1810|  2.40k|                "Invalid floating-point digit");
 1811|  2.40k|        }
 1812|  69.5k|    }
 1813|   325k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.51k, False: 318k]
  |  |  ------------------
  ------------------
 1814|  6.51k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.51k|                                             "Invalid floating-point digit");
 1816|  6.51k|    }
 1817|       |
 1818|   318k|    return dispatch_parse_float_value<
 1819|   318k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   318k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   318k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1606|  3.45k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.45k|                                  nil_float_traits>) {
 1610|  3.45k|        using traits = float_traits<F>;
 1611|  3.45k|        typename traits::nan_repr bits{};
 1612|  3.45k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.45k|        traits::apply_nan_payload(bits, payload);
 1614|  3.45k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.45k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  429|  3.45k|    {
  430|  3.45k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  431|  3.45k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1104|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  432|  3.45k|        r.mantissa0 = payload >> 32;
  433|  3.45k|        r.mantissa1 = payload;
  434|  3.45k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|   318k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   318k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|   318k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   318k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   318k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   318k|    else {
 1715|   318k|        auto next =
 1716|   318k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   318k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   318k|                if (!err.has_value()) {
 1721|   318k|                    return unexpected(err.error());
 1722|   318k|                }
 1723|   318k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   318k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   318k|        };
 1727|   318k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   318k|    }
 1729|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   318k|{
 1686|   318k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   318k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   318k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1071|   318k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   318k|    {
 1073|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   318k|    {
 1078|   318k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   318k|                           generic_strtod);
 1080|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   318k|    {
  873|   318k|        CharT* end{};
  874|   318k|        errno = 0;
  875|   318k|        value = strtod_cb(src, &end);
  876|   318k|        const auto saved_errno = errno;
  877|   318k|        auto chars_read = end - src;
  878|       |
  879|   318k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   318k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.29k, False: 316k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.29k|    }
  ------------------
  880|       |
  881|   316k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 66.7k, False: 249k]
  ------------------
  882|   316k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 66.7k, False: 0]
  ------------------
  883|  66.7k|            chars_read -= 2;
  884|  66.7k|        }
  885|       |
  886|   316k|        return chars_read;
  887|   318k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|   573k|    {
  916|   573k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 303k, False: 270k]
  |  Branch (916:41): [True: 0, False: 303k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   573k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 13.6k, False: 559k]
  ------------------
  924|   573k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 13.6k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   573k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 4.61k, False: 568k]
  |  Branch (932:34): [True: 411, False: 4.20k]
  ------------------
  933|    411|            SCN_UNLIKELY_ATTR
  934|    411|            return detail::unexpected_scan_error(
  935|    411|                scan_error::value_positive_underflow,
  936|    411|                "strtod failed: Value too small");
  937|    411|        }
  938|   572k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 4.20k, False: 568k]
  |  Branch (938:34): [True: 0, False: 4.20k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   572k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 572k, False: 0]
  ------------------
  948|   572k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 572k, False: 0]
  ------------------
  949|   572k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 3.58k, False: 569k]
  ------------------
  950|  3.58k|            SCN_UNLIKELY_ATTR
  951|  3.58k|            return detail::unexpected_scan_error(
  952|  3.58k|                scan_error::value_positive_overflow,
  953|  3.58k|                "strtod failed: Value too large");
  954|  3.58k|        }
  955|   569k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 569k, False: 0]
  ------------------
  956|   569k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 569k, False: 0]
  ------------------
  957|   569k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 569k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   569k|        return {};
  965|   569k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|   573k|{
  755|   573k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 303k, False: 270k]
  |  Branch (755:44): [True: 0, False: 270k]
  ------------------
  756|   573k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  761|  4.61k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  4.61k|    return value == static_cast<T>(0.0);
  773|  4.61k|#endif
  774|  4.61k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  778|  4.20k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  4.20k|    return value == static_cast<T>(-0.0);
  791|  4.20k|#endif
  792|  4.20k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|   572k|{
  798|   572k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   572k|        return value == std::numeric_limits<T>::infinity();
  815|   572k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   572k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|   569k|{
  825|   569k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   569k|        return value == -std::numeric_limits<T>::infinity();
  843|   569k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   569k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   318k|    {
  893|   318k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 300k, False: 18.4k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   300k|            auto first_space = read_until_classic_space(input.view());
  896|   300k|            input.assign(
  897|   300k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   300k|        }
  899|       |
  900|   318k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 67.0k, False: 251k]
  ------------------
  901|  67.0k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  67.0k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  67.0k|        }
  908|       |
  909|   318k|        return input.get_allocated_string().c_str();
  910|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1084|   318k|    {
 1085|   318k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   318k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  968|   318k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   318k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|   318k|        else if constexpr (std::is_same_v<T, double>) {
 1004|   318k|            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   318k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   277k|{
 1737|   277k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 277k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   277k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 277k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   277k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 277k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   277k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 277k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   277k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   277k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 58.9k, False: 218k]
  ------------------
 1807|  58.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.47k, False: 52.4k]
  |  |  ------------------
  ------------------
 1808|  6.47k|            return detail::unexpected_scan_error(
 1809|  6.47k|                scan_error::invalid_scanned_value,
 1810|  6.47k|                "Invalid floating-point digit");
 1811|  6.47k|        }
 1812|  58.9k|    }
 1813|   270k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.1k, False: 254k]
  |  |  ------------------
  ------------------
 1814|  16.1k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.1k|                                             "Invalid floating-point digit");
 1816|  16.1k|    }
 1817|       |
 1818|   254k|    return dispatch_parse_float_value<
 1819|   254k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   254k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   254k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   270k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   254k|{
 1711|   254k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   254k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   254k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   254k|{
 1711|   254k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   254k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   254k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   254k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   254k|    else {
 1715|   254k|        auto next =
 1716|   254k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   254k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   254k|                if (!err.has_value()) {
 1721|   254k|                    return unexpected(err.error());
 1722|   254k|                }
 1723|   254k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   254k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   254k|        };
 1727|   254k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   254k|    }
 1729|   254k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   254k|{
 1686|   254k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   254k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   254k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   254k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|   254k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   254k|    {
 1073|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   254k|    {
 1078|   254k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   254k|                           generic_strtod);
 1080|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   254k|    {
  873|   254k|        CharT* end{};
  874|   254k|        errno = 0;
  875|   254k|        value = strtod_cb(src, &end);
  876|   254k|        const auto saved_errno = errno;
  877|   254k|        auto chars_read = end - src;
  878|       |
  879|   254k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   254k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.70k, False: 252k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.70k|    }
  ------------------
  880|       |
  881|   252k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.3k, False: 200k]
  ------------------
  882|   252k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.3k, False: 0]
  ------------------
  883|  52.3k|            chars_read -= 2;
  884|  52.3k|        }
  885|       |
  886|   252k|        return chars_read;
  887|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   254k|    {
  893|   254k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 248k, False: 6.26k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   248k|            auto first_space = read_until_classic_space(input.view());
  896|   248k|            input.assign(
  897|   248k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   248k|        }
  899|       |
  900|   254k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.3k, False: 202k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.3k|            else {
  905|  52.3k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.3k|            }
  907|  52.3k|        }
  908|       |
  909|   254k|        return input.get_allocated_string().c_str();
  910|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|   254k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   254k|        else {
 1089|   254k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   254k|        }
 1091|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|   254k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   254k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|   254k|        else if constexpr (std::is_same_v<T, double>) {
 1052|   254k|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   254k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   254k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   361k|{
 1737|   361k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.20k, False: 357k]
  ------------------
 1738|  3.20k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.20k|            value = std::numeric_limits<T>::infinity();
 1740|  3.20k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.20k|    }
 1748|   361k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.81k, False: 359k]
  ------------------
 1749|  1.81k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.81k|            value = std::numeric_limits<T>::infinity();
 1751|  1.81k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.81k|    }
 1759|   361k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.5k, False: 343k]
  ------------------
 1760|  17.5k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.5k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.5k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.5k|    }
 1770|   361k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.13k, False: 357k]
  ------------------
 1771|  4.13k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.13k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.13k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.13k|#if SCN_HAS_INT128
 1777|  4.13k|                using payload_type =
 1778|  4.13k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.13k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.13k|                payload_type payload{};
 1784|  4.13k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.15k, False: 980]
  ------------------
 1785|  4.13k|                        nan_payload.view(), payload, {})) {
 1786|  3.15k|                    apply_nan_payload(value, payload);
 1787|  3.15k|                }
 1788|    980|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 338, False: 642]
  ------------------
 1789|    980|                         scan_error::value_positive_overflow) {
 1790|    338|                    apply_nan_payload(value,
 1791|    338|                                      std::numeric_limits<payload_type>::max());
 1792|    338|                }
 1793|  4.13k|            }
 1794|       |
 1795|  4.13k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.13k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.13k|    }
 1804|       |
 1805|   361k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   334k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 69.8k, False: 264k]
  ------------------
 1807|  69.8k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  69.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.45k, False: 67.3k]
  |  |  ------------------
  ------------------
 1808|  2.45k|            return detail::unexpected_scan_error(
 1809|  2.45k|                scan_error::invalid_scanned_value,
 1810|  2.45k|                "Invalid floating-point digit");
 1811|  2.45k|        }
 1812|  69.8k|    }
 1813|   332k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.79k, False: 325k]
  |  |  ------------------
  ------------------
 1814|  6.79k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.79k|                                             "Invalid floating-point digit");
 1816|  6.79k|    }
 1817|       |
 1818|   325k|    return dispatch_parse_float_value<
 1819|   325k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   325k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   325k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   332k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1606|  3.48k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.48k|                                  nil_float_traits>) {
 1610|  3.48k|        using traits = float_traits<F>;
 1611|  3.48k|        typename traits::nan_repr bits{};
 1612|  3.48k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.48k|        traits::apply_nan_payload(bits, payload);
 1614|  3.48k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  494|  3.48k|    {
  495|  3.48k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  496|  3.48k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1104|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  497|  3.48k|        r.mantissa0 = payload >> 32;
  498|  3.48k|        r.mantissa1 = payload;
  499|  3.48k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   325k|{
 1711|   325k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   325k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   325k|{
 1711|   325k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   325k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   325k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   325k|    else {
 1715|   325k|        auto next =
 1716|   325k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   325k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   325k|                if (!err.has_value()) {
 1721|   325k|                    return unexpected(err.error());
 1722|   325k|                }
 1723|   325k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   325k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   325k|        };
 1727|   325k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   325k|    }
 1729|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   325k|{
 1686|   325k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   325k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   325k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   325k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1071|   325k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   325k|    {
 1073|   325k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   325k|    {
 1078|   325k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   325k|                           generic_strtod);
 1080|   325k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   325k|    {
  873|   325k|        CharT* end{};
  874|   325k|        errno = 0;
  875|   325k|        value = strtod_cb(src, &end);
  876|   325k|        const auto saved_errno = errno;
  877|   325k|        auto chars_read = end - src;
  878|       |
  879|   325k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   325k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 546, False: 324k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    546|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    546|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    546|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    546|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    546|    }
  ------------------
  880|       |
  881|   324k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 67.2k, False: 257k]
  ------------------
  882|   324k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 67.2k, False: 0]
  ------------------
  883|  67.2k|            chars_read -= 2;
  884|  67.2k|        }
  885|       |
  886|   324k|        return chars_read;
  887|   325k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  915|   586k|    {
  916|   586k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 309k, False: 277k]
  |  Branch (916:41): [True: 0, False: 309k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   586k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 13.6k, False: 573k]
  ------------------
  924|   586k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 13.6k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   586k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 746, False: 586k]
  |  Branch (932:34): [True: 176, False: 570]
  ------------------
  933|    176|            SCN_UNLIKELY_ATTR
  934|    176|            return detail::unexpected_scan_error(
  935|    176|                scan_error::value_positive_underflow,
  936|    176|                "strtod failed: Value too small");
  937|    176|        }
  938|   586k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 570, False: 586k]
  |  Branch (938:34): [True: 0, False: 570]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   586k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 586k, False: 0]
  ------------------
  948|   586k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 586k, False: 0]
  ------------------
  949|   586k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 570, False: 586k]
  ------------------
  950|    570|            SCN_UNLIKELY_ATTR
  951|    570|            return detail::unexpected_scan_error(
  952|    570|                scan_error::value_positive_overflow,
  953|    570|                "strtod failed: Value too large");
  954|    570|        }
  955|   586k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 586k, False: 0]
  ------------------
  956|   586k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 586k, False: 0]
  ------------------
  957|   586k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 586k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   586k|        return {};
  965|   586k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  754|   586k|{
  755|   586k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 309k, False: 277k]
  |  Branch (755:44): [True: 0, False: 277k]
  ------------------
  756|   586k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  761|    746|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|    746|    return value == static_cast<T>(0.0);
  773|    746|#endif
  774|    746|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  778|    570|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    570|    return value == static_cast<T>(-0.0);
  791|    570|#endif
  792|    570|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  797|   586k|{
  798|   586k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   586k|        return value == std::numeric_limits<T>::infinity();
  815|   586k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   586k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  824|   586k|{
  825|   586k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   586k|        return value == -std::numeric_limits<T>::infinity();
  843|   586k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   586k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   325k|    {
  893|   325k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 306k, False: 18.7k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   306k|            auto first_space = read_until_classic_space(input.view());
  896|   306k|            input.assign(
  897|   306k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   306k|        }
  899|       |
  900|   325k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 67.2k, False: 257k]
  ------------------
  901|  67.2k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  67.2k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  67.2k|        }
  908|       |
  909|   325k|        return input.get_allocated_string().c_str();
  910|   325k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1084|   325k|    {
 1085|   325k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   325k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   325k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  968|   325k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   325k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|   325k|        else if constexpr (std::is_same_v<T, long double>) {
 1007|   325k|            return std::strtold(str, str_end);
 1008|   325k|        }
 1009|      0|#endif
 1010|       |
 1011|   325k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   325k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   325k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   325k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   284k|{
 1737|   284k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 284k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   284k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 284k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   284k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 284k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   284k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 284k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   284k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   284k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 58.9k, False: 225k]
  ------------------
 1807|  58.9k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  58.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.49k, False: 52.4k]
  |  |  ------------------
  ------------------
 1808|  6.49k|            return detail::unexpected_scan_error(
 1809|  6.49k|                scan_error::invalid_scanned_value,
 1810|  6.49k|                "Invalid floating-point digit");
 1811|  6.49k|        }
 1812|  58.9k|    }
 1813|   278k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 261k]
  |  |  ------------------
  ------------------
 1814|  16.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.5k|                                             "Invalid floating-point digit");
 1816|  16.5k|    }
 1817|       |
 1818|   261k|    return dispatch_parse_float_value<
 1819|   261k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   261k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   261k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   278k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|   261k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   261k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|   261k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   261k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   261k|    else {
 1715|   261k|        auto next =
 1716|   261k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   261k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   261k|                if (!err.has_value()) {
 1721|   261k|                    return unexpected(err.error());
 1722|   261k|                }
 1723|   261k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   261k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   261k|        };
 1727|   261k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   261k|    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   261k|{
 1686|   261k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   261k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   261k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1071|   261k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   261k|    {
 1073|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   261k|    {
 1078|   261k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   261k|                           generic_strtod);
 1080|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   261k|    {
  873|   261k|        CharT* end{};
  874|   261k|        errno = 0;
  875|   261k|        value = strtod_cb(src, &end);
  876|   261k|        const auto saved_errno = errno;
  877|   261k|        auto chars_read = end - src;
  878|       |
  879|   261k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   261k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 200, False: 261k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    200|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    200|    }
  ------------------
  880|       |
  881|   261k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.4k, False: 209k]
  ------------------
  882|   261k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.4k, False: 0]
  ------------------
  883|  52.4k|            chars_read -= 2;
  884|  52.4k|        }
  885|       |
  886|   261k|        return chars_read;
  887|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   261k|    {
  893|   261k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 255k, False: 6.55k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   255k|            auto first_space = read_until_classic_space(input.view());
  896|   255k|            input.assign(
  897|   255k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   255k|        }
  899|       |
  900|   261k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.4k, False: 209k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.4k|            else {
  905|  52.4k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.4k|            }
  907|  52.4k|        }
  908|       |
  909|   261k|        return input.get_allocated_string().c_str();
  910|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1084|   261k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   261k|        else {
 1089|   261k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   261k|        }
 1091|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1016|   261k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   261k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|   261k|        else if constexpr (std::is_same_v<T, long double>) {
 1055|   261k|            return std::wcstold(str, str_end);
 1056|   261k|        }
 1057|      0|#endif
 1058|       |
 1059|   261k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1939|  9.56k|{
 1940|  9.56k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1941|       |
 1942|  35.8k|    while (begin != end) {
  ------------------
  |  Branch (1942:12): [True: 26.9k, False: 8.85k]
  ------------------
 1943|  26.9k|        const auto digit = char_to_int(*begin);
 1944|  26.9k|        if (digit >= 10) {
  ------------------
  |  Branch (1944:13): [True: 706, False: 26.2k]
  ------------------
 1945|    706|            break;
 1946|    706|        }
 1947|  26.2k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1948|  26.2k|        ++begin;
 1949|  26.2k|    }
 1950|       |
 1951|  9.56k|    return begin;
 1952|  9.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1926|  9.56k|{
 1927|  9.56k|    while (
 1928|  17.7k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1928:9): [True: 8.66k, False: 9.05k]
  ------------------
 1929|  17.7k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1929:9): [True: 8.16k, False: 508]
  ------------------
 1930|  8.16k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1931|  8.16k|                                      get_eight_digits_word(p));
 1932|  8.16k|        p += 8;
 1933|  8.16k|    }
 1934|  9.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  9.56k|{
 2052|  9.56k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  9.56k|    uint64_t u64val{};
 2055|  9.56k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  9.56k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  9.56k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  9.56k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  9.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 998, False: 8.56k]
  |  |  ------------------
  ------------------
 2060|  9.56k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|    998|        return detail::unexpected_scan_error(
 2062|    998|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 998]
  ------------------
 2063|    998|                        : scan_error::value_positive_overflow,
 2064|    998|            "Integer overflow");
 2065|    998|    }
 2066|       |
 2067|  8.56k|    val = store_result<T>(u64val, is_negative);
 2068|  8.56k|    return ptr;
 2069|  9.56k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   541k|{
 2818|   541k|    const auto argcount = args.size();
 2819|   541k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 108k, False: 432k]
  |  Branch (2819:60): [True: 108k, False: 0]
  ------------------
 2820|   108k|        auto arg = args.get(0);
 2821|   108k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   108k|    static_cast<    \
  |  | 1109|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|   108k|    }
 2823|       |
 2824|   432k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 432k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   432k|    SCN_UNLIKELY_ATTR
 2832|   432k|    {
 2833|   432k|        auto handler = format_handler<false, CharT>{
 2834|   432k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   432k|        return vscan_parse_format_string(format, handler);
 2836|   432k|    }
 2837|   432k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|  1.04M|{
 2366|  1.04M|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 831k, False: 215k]
  ------------------
 2367|   831k|        return false;
 2368|   831k|    }
 2369|   215k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 215k, False: 0]
  |  Branch (2369:39): [True: 215k, False: 0]
  ------------------
 2370|  1.04M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|   162k|{
 2399|   162k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|   162k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   162k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|   162k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|   162k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   162k|    static_cast<    \
  |  | 1109|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|   162k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.4k, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.4k|    }                                                  \
  |  |  |  | 3957|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|   147k|    return it.position();
 2416|   162k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|   398k|        : format_handler_base{argcount},
 2642|   398k|          parse_ctx{source_tag<Source&&>, format},
 2643|   398k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   398k|    static_cast<    \
  |  | 1109|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   398k|    static_cast<    \
  |  | 1109|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   398k|    {
 2645|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|  1.56M|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|  1.56M|    {
 2461|  1.56M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|  1.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|   398k|        : contiguous_ctx(source, args, loc)
 2593|   398k|    {
 2594|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   398k|{
 2783|   398k|    const auto beg = handler.get_ctx().begin();
 2784|   398k|    detail::parse_format_string<false>(format, handler);
 2785|   398k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 51.6k, False: 347k]
  |  |  ------------------
  ------------------
 2786|  51.6k|        return unexpected(err.error());
 2787|  51.6k|    }
 2788|   347k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   398k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|  2.68M|    {
 2767|  2.68M|        return ctx.get();
 2768|  2.68M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|  2.68M|    {
 2598|  2.68M|        return contiguous_ctx;
 2599|  2.68M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|   745k|    {
 2649|   745k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 745k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   745k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|   309k|    {
 2509|   309k|        error = unexpected(err);
 2510|   309k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|   398k|{
 2421|   398k|    auto arg = ctx.arg(id);
 2422|   398k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   398k|    return arg;
 2426|   398k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|  1.56M|    {
 2535|  1.56M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 2536|      0|            on_error({scan_error::invalid_format_string,
 2537|      0|                      "Argument ID out-of-range"});
 2538|      0|            return;
 2539|      0|        }
 2540|       |
 2541|  1.56M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 2542|      0|            on_error({scan_error::invalid_format_string,
 2543|      0|                      "Argument with this ID has already been scanned"});
 2544|      0|        }
 2545|       |
 2546|  1.56M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.56M, False: 0]
  |  |  ------------------
  ------------------
 2547|  1.56M|            visited_args_lower64 |= (1ull << id);
 2548|  1.56M|            return;
 2549|  1.56M|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|  1.56M|    {
 2519|  1.56M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|  1.56M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.56M, False: 0]
  |  |  ------------------
  ------------------
 2526|  1.56M|            return (visited_args_lower64 >> id) & 1ull;
 2527|  1.56M|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|  1.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|   398k|    {
 2689|   398k|        return parse_ctx.next_arg_id();
 2690|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|   398k|    {
 2729|   398k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   398k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   398k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 398k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   398k|        auto specs = detail::format_specs{};
 2742|   398k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   398k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   398k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   398k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   398k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 398k]
  |  Branch (2747:29): [True: 0, False: 398k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   398k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   398k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   398k|        on_visit_scan_arg(
 2759|   398k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   398k|                                           get_ctx().locale()},
 2761|   398k|            arg);
 2762|   398k|        return parse_ctx.begin();
 2763|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2438|   398k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   398k|    {
 2440|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|   398k|    {
 2700|   398k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 398k]
  |  Branch (2700:13): [True: 0, False: 398k]
  |  Branch (2700:29): [True: 0, False: 398k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   398k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   398k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 51.6k, False: 347k]
  |  |  ------------------
  ------------------
 2707|  51.6k|            on_error(r.error());
 2708|  51.6k|        }
 2709|   347k|        else {
 2710|   347k|            get_ctx().advance_to(*r);
 2711|   347k|        }
 2712|   398k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|  1.56M|    {
 2468|  1.56M|        {
 2469|  1.56M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 1.56M]
  ------------------
 2470|  1.56M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 1.56M]
  ------------------
 2471|  1.56M|                                      ? std::numeric_limits<uint64_t>::max()
 2472|  1.56M|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|  1.56M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 0, False: 1.56M]
  ------------------
 2475|      0|                return on_error({scan_error::invalid_format_string,
 2476|      0|                                 "Argument list not exhausted"});
 2477|      0|            }
 2478|  1.56M|        }
 2479|       |
 2480|  1.56M|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 1.56M, False: 0]
  ------------------
 2481|  1.56M|            return;
 2482|  1.56M|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|  6.26M|    {
 2514|  6.26M|        return error;
 2515|  6.26M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2641|   432k|        : format_handler_base{argcount},
 2642|   432k|          parse_ctx{source_tag<Source&&>, format},
 2643|   432k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   432k|    {
 2645|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2568|   432k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   432k|    static_cast<    \
  |  | 1109|   432k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   432k|    {
 2570|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   432k|{
 2783|   432k|    const auto beg = handler.get_ctx().begin();
 2784|   432k|    detail::parse_format_string<false>(format, handler);
 2785|   432k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 51.6k, False: 380k]
  |  |  ------------------
  ------------------
 2786|  51.6k|        return unexpected(err.error());
 2787|  51.6k|    }
 2788|   380k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   432k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2766|  2.92M|    {
 2767|  2.92M|        return ctx.get();
 2768|  2.92M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2573|  2.92M|    {
 2574|  2.92M|        return ctx;
 2575|  2.92M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2648|   813k|    {
 2649|   813k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 813k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   813k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2420|   432k|{
 2421|   432k|    auto arg = ctx.arg(id);
 2422|   432k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   432k|    return arg;
 2426|   432k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2688|   432k|    {
 2689|   432k|        return parse_ctx.next_arg_id();
 2690|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2728|   432k|    {
 2729|   432k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   432k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   432k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 432k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   432k|        auto specs = detail::format_specs{};
 2742|   432k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   432k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   432k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   432k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   432k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 432k]
  |  Branch (2747:29): [True: 0, False: 432k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   432k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 432k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   432k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   432k|        on_visit_scan_arg(
 2759|   432k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   432k|                                           get_ctx().locale()},
 2761|   432k|            arg);
 2762|   432k|        return parse_ctx.begin();
 2763|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2438|   432k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   432k|    {
 2440|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   432k|    {
 2700|   432k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 432k]
  |  Branch (2700:13): [True: 0, False: 432k]
  |  Branch (2700:29): [True: 0, False: 432k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   432k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   432k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 51.6k, False: 380k]
  |  |  ------------------
  ------------------
 2707|  51.6k|            on_error(r.error());
 2708|  51.6k|        }
 2709|   380k|        else {
 2710|   380k|            get_ctx().advance_to(*r);
 2711|   380k|        }
 2712|   432k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   505k|{
 2798|   505k|    const auto argcount = args.size();
 2799|   505k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 107k, False: 398k]
  |  Branch (2799:60): [True: 107k, False: 0]
  ------------------
 2800|   107k|        auto arg = args.get(0);
 2801|   107k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   107k|    static_cast<    \
  |  | 1109|   107k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|   107k|    }
 2803|       |
 2804|   398k|    auto handler = format_handler<true, CharT>{
 2805|   398k|        ranges::subrange<const CharT*>{source.data(),
 2806|   398k|                                       source.data() + source.size()},
 2807|   398k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   398k|    static_cast<    \
  |  | 1109|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   398k|    static_cast<    \
  |  | 1109|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   398k|    return vscan_parse_format_string(format, handler);
 2809|   505k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   160k|{
 2379|   160k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 160k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   160k|    auto reader =
 2385|   160k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   160k|            ranges::subrange<const CharT*>{source.data(),
 2387|   160k|                                           source.data() + source.size()},
 2388|   160k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   160k|    static_cast<    \
  |  | 1109|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   160k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.4k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.4k|    }                                                  \
  |  |  |  | 3957|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   145k|    return ranges::distance(source.data(), it);
 2391|   160k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   595k|{
 2898|   595k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   595k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 528k, False: 67.0k]
  |  |  ------------------
  ------------------
 2899|   528k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   528k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 528k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   528k|    }
 2905|  67.0k|    else {
 2906|  67.0k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  67.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 67.0k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  67.0k|    }
 2912|   595k|    return result;
 2913|   595k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   457k|{
 2798|   457k|    const auto argcount = args.size();
 2799|   457k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 90.4k, False: 367k]
  |  Branch (2799:60): [True: 90.4k, False: 0]
  ------------------
 2800|  90.4k|        auto arg = args.get(0);
 2801|  90.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  90.4k|    static_cast<    \
  |  | 1109|  90.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|  90.4k|    }
 2803|       |
 2804|   367k|    auto handler = format_handler<true, CharT>{
 2805|   367k|        ranges::subrange<const CharT*>{source.data(),
 2806|   367k|                                       source.data() + source.size()},
 2807|   367k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   367k|    static_cast<    \
  |  | 1109|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   367k|    static_cast<    \
  |  | 1109|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   367k|    return vscan_parse_format_string(format, handler);
 2809|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   914k|{
 2366|   914k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 734k, False: 180k]
  ------------------
 2367|   734k|        return false;
 2368|   734k|    }
 2369|   180k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 180k, False: 0]
  |  Branch (2369:39): [True: 180k, False: 0]
  ------------------
 2370|   914k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   135k|{
 2379|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   135k|    auto reader =
 2385|   135k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   135k|            ranges::subrange<const CharT*>{source.data(),
 2387|   135k|                                           source.data() + source.size()},
 2388|   135k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   135k|    static_cast<    \
  |  | 1109|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   135k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30.9k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  30.9k|    }                                                  \
  |  |  |  | 3957|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   104k|    return ranges::distance(source.data(), it);
 2391|   135k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|   367k|        : format_handler_base{argcount},
 2642|   367k|          parse_ctx{source_tag<Source&&>, format},
 2643|   367k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   367k|    static_cast<    \
  |  | 1109|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   367k|    static_cast<    \
  |  | 1109|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   367k|    {
 2645|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|   367k|        : contiguous_ctx(source, args, loc)
 2593|   367k|    {
 2594|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   367k|{
 2783|   367k|    const auto beg = handler.get_ctx().begin();
 2784|   367k|    detail::parse_format_string<false>(format, handler);
 2785|   367k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 103k, False: 263k]
  |  |  ------------------
  ------------------
 2786|   103k|        return unexpected(err.error());
 2787|   103k|    }
 2788|   263k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|  2.36M|    {
 2767|  2.36M|        return ctx.get();
 2768|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|  2.36M|    {
 2598|  2.36M|        return contiguous_ctx;
 2599|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|   630k|    {
 2649|   630k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 630k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   630k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|   367k|{
 2421|   367k|    auto arg = ctx.arg(id);
 2422|   367k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   367k|    return arg;
 2426|   367k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|   367k|    {
 2689|   367k|        return parse_ctx.next_arg_id();
 2690|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|   367k|    {
 2729|   367k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   367k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   367k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 367k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   367k|        auto specs = detail::format_specs{};
 2742|   367k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   367k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   367k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   367k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   367k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 367k]
  |  Branch (2747:29): [True: 0, False: 367k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   367k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 367k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   367k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   367k|        on_visit_scan_arg(
 2759|   367k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   367k|                                           get_ctx().locale()},
 2761|   367k|            arg);
 2762|   367k|        return parse_ctx.begin();
 2763|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2438|   367k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   367k|    {
 2440|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|   367k|    {
 2700|   367k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 367k]
  |  Branch (2700:13): [True: 0, False: 367k]
  |  Branch (2700:29): [True: 0, False: 367k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   367k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   367k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 103k, False: 263k]
  |  |  ------------------
  ------------------
 2707|   103k|            on_error(r.error());
 2708|   103k|        }
 2709|   263k|        else {
 2710|   263k|            get_ctx().advance_to(*r);
 2711|   263k|        }
 2712|   367k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   457k|{
 2818|   457k|    const auto argcount = args.size();
 2819|   457k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 90.3k, False: 366k]
  |  Branch (2819:60): [True: 90.3k, False: 0]
  ------------------
 2820|  90.3k|        auto arg = args.get(0);
 2821|  90.3k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  90.3k|    static_cast<    \
  |  | 1109|  90.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|  90.3k|    }
 2823|       |
 2824|   366k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 366k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   366k|    SCN_UNLIKELY_ATTR
 2832|   366k|    {
 2833|   366k|        auto handler = format_handler<false, CharT>{
 2834|   366k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   366k|        return vscan_parse_format_string(format, handler);
 2836|   366k|    }
 2837|   366k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|   135k|{
 2399|   135k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|   135k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   135k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 135k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|   135k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|   135k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   135k|    static_cast<    \
  |  | 1109|   135k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|   135k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30.9k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  30.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  30.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  30.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  30.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  30.9k|    }                                                  \
  |  |  |  | 3957|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|   104k|    return it.position();
 2416|   135k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2641|   366k|        : format_handler_base{argcount},
 2642|   366k|          parse_ctx{source_tag<Source&&>, format},
 2643|   366k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   366k|    {
 2645|   366k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2568|   366k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   366k|    {
 2570|   366k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   366k|{
 2783|   366k|    const auto beg = handler.get_ctx().begin();
 2784|   366k|    detail::parse_format_string<false>(format, handler);
 2785|   366k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 103k, False: 263k]
  |  |  ------------------
  ------------------
 2786|   103k|        return unexpected(err.error());
 2787|   103k|    }
 2788|   263k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   366k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2766|  2.36M|    {
 2767|  2.36M|        return ctx.get();
 2768|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2573|  2.36M|    {
 2574|  2.36M|        return ctx;
 2575|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2648|   630k|    {
 2649|   630k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 630k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   630k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2420|   366k|{
 2421|   366k|    auto arg = ctx.arg(id);
 2422|   366k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   366k|    return arg;
 2426|   366k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2688|   366k|    {
 2689|   366k|        return parse_ctx.next_arg_id();
 2690|   366k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2728|   366k|    {
 2729|   366k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   366k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   366k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 366k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   366k|        auto specs = detail::format_specs{};
 2742|   366k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   366k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   366k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   366k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   366k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 366k]
  |  Branch (2747:29): [True: 0, False: 366k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   366k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|   366k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   366k|        on_visit_scan_arg(
 2759|   366k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   366k|                                           get_ctx().locale()},
 2761|   366k|            arg);
 2762|   366k|        return parse_ctx.begin();
 2763|   366k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2438|   366k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   366k|    {
 2440|   366k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   366k|    {
 2700|   366k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 366k]
  |  Branch (2700:13): [True: 0, False: 366k]
  |  Branch (2700:29): [True: 0, False: 366k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   366k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   366k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 103k, False: 263k]
  |  |  ------------------
  ------------------
 2707|   103k|            on_error(r.error());
 2708|   103k|        }
 2709|   263k|        else {
 2710|   263k|            get_ctx().advance_to(*r);
 2711|   263k|        }
 2712|   366k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   502k|{
 2898|   502k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   502k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 368k, False: 134k]
  |  |  ------------------
  ------------------
 2899|   368k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   368k|    }
 2905|   134k|    else {
 2906|   134k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|   134k|    }
 2912|   502k|    return result;
 2913|   502k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  53.5k|{
 2844|  53.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  53.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  54.3k|{
 2844|  54.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  54.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  45.2k|{
 2844|  45.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  45.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  45.1k|{
 2844|  45.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  45.1k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  1.72k|{
 1462|  1.72k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  1.72k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  1.72k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  1.72k|            return transcode_to_string_impl_to32(src, dest);
 1473|  1.72k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  1.72k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  1.72k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  1.72k|{
 1355|  1.72k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  1.72k|    auto it = src.begin();
 1358|   408k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 406k, False: 1.72k]
  ------------------
 1359|   406k|        auto res = get_next_code_point(
 1360|   406k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   406k|                                                                 src.end()));
 1362|   406k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.78k, False: 405k]
  |  |  ------------------
  ------------------
 1363|  1.78k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.78k|        }
 1365|   405k|        else {
 1366|   405k|            dest.push_back(res.value);
 1367|   405k|        }
 1368|   406k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   406k|    }
 1370|  1.72k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   669k|{
 1279|   669k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   669k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   669k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   669k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   669k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   669k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.8k, False: 647k]
  |  |  ------------------
  ------------------
 1283|  21.8k|        return {get_start_for_next_code_point(input),
 1284|  21.8k|                detail::invalid_code_point};
 1285|  21.8k|    }
 1286|   647k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   647k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.17k, False: 644k]
  |  |  ------------------
  ------------------
 1287|  3.17k|        return {input.end(), detail::invalid_code_point};
 1288|  3.17k|    }
 1289|       |
 1290|   644k|    return {input.begin() + len,
 1291|   644k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   647k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  21.8k|{
 1265|  21.8k|    auto it = input.begin();
 1266|   113k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 107k, False: 6.99k]
  ------------------
 1267|   107k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 14.8k, False: 92.1k]
  ------------------
 1268|  14.8k|            break;
 1269|  14.8k|        }
 1270|   107k|    }
 1271|  21.8k|    return it;
 1272|  21.8k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  19.5M|    constexpr parse_error(code c) : m_code(c)
  808|  19.5M|    {
  809|  19.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  19.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  19.5M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  8.82M|    {
  823|  8.82M|        return a.m_code == b.m_code;
  824|  8.82M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  2.29M|    {
  827|  2.29M|        return !(a == b);
  828|  2.29M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.69M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.69M|    {
 1827|  1.69M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.69M|        std::strcpy(m_locbuf, loc);
 1829|  1.69M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.69M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.69M|        std::setlocale(m_category, m_locbuf);
 1834|  1.69M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.69M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.69M|    {
 1856|  1.69M|        std::setlocale(cat, "C");
 1857|  1.69M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  1.56M|    {
 3083|  1.56M|        return m_msg == nullptr;
 3084|  1.56M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3726|  1.54M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  13.0M|{
  458|  13.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  13.0M|        static_cast<unsigned char>(ch))];
  460|  13.0M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   314k|{
  469|   314k|    return static_cast<unsigned char>(ch) <= 127;
  470|   314k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  2.86M|{
  539|  2.86M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.86M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  7.12M|{
  784|  7.12M|    return e != eof_error::good;
  785|  7.12M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.9k|{
  798|  26.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.9k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  26.9k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   181k|{
  845|   181k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|   181k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   181k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   181k|    return parse_error::eof;
  847|   181k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  2.29M|{
  854|  2.29M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 2.29M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  2.29M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 69.5k, False: 2.22M]
  ------------------
  859|  69.5k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  69.5k|    }
  861|       |
  862|  2.22M|    return detail::unexpected_scan_error(code, msg);
  863|  2.29M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  2.29M|{
  868|  2.29M|    return [code, msg](parse_error err) {
  869|  2.29M|        assert(err != parse_error::good);
  870|  2.29M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.29M|    };
  872|  2.29M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  1.42M|{
 2353|  1.42M|    unsigned char running_diff{0};
 2354|  5.37M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 3.94M, False: 1.42M]
  ------------------
 2355|  3.94M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  3.94M|    }
 2357|  1.42M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 40.5k, False: 1.38M]
  |  Branch (2357:33): [True: 18.2k, False: 1.36M]
  ------------------
 2358|  1.42M|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  8.32M|{
 3272|  8.32M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  8.32M|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  2.80M|{
 3276|  2.80M|#if WCHAR_MIN < 0
 3277|  2.80M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 2.79M, False: 13.4k]
  |  Branch (3277:20): [True: 1.78M, False: 1.01M]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  1.78M|        return char_to_int(static_cast<char>(ch));
 3282|  1.78M|    }
 3283|  1.02M|    return 255;
 3284|  2.80M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6115|  1.25M|{
 6116|  1.25M|    if (specs.width != 0) {
  ------------------
  |  Branch (6116:9): [True: 0, False: 1.25M]
  ------------------
 6117|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6117:13): [True: 0, False: 0]
  ------------------
 6118|      0|            return detail::unexpected_scan_error(
 6119|      0|                scan_error::length_too_short,
 6120|      0|                "Scanned value too narrow, width did not exceed what "
 6121|      0|                "was specified in the format string");
 6122|      0|        }
 6123|      0|    }
 6124|  1.25M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6124:9): [True: 0, False: 1.25M]
  ------------------
 6125|       |        // Ensured by take_width_view
 6126|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6127|      0|                   specs.precision);
 6128|      0|    }
 6129|  1.25M|    return {};
 6130|  1.25M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.02M|    {
  304|  2.02M|        ranges::advance(x, n);
  305|  2.02M|        return x;
  306|  2.02M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.02M|    {
  268|  2.02M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.02M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.02M|    {
  151|  2.02M|        i += n;
  152|  2.02M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.39M|    {
  108|  2.39M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.39M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.39M|    {
   87|  2.39M|        return s - i;
   88|  2.39M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.63M|    {
  304|  1.63M|        ranges::advance(x, n);
  305|  1.63M|        return x;
  306|  1.63M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.63M|    {
  268|  1.63M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.63M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.63M|    {
  151|  1.63M|        i += n;
  152|  1.63M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   489k|    {
  108|   489k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   489k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   489k|    {
   87|   489k|        return s - i;
   88|   489k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|  1.14M|    {
 3025|  1.14M|        return m_current;
 3026|  1.14M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   998k|    {
 3025|   998k|        return m_current;
 3026|   998k|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   595k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   595k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   595k|        auto beg = r.begin();
  991|   595k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 595k, False: 0]
  ------------------
  992|   595k|            return false;
  993|   595k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   595k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.54M|{
 1956|  1.54M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.54M|    else {
 1967|  1.54M|        auto it = range.begin();
 1968|  1.54M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 940k, False: 607k]
  ------------------
 1969|   940k|            return ranges::next(it, count);
 1970|   940k|        }
 1971|       |
 1972|  2.39M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.81M, False: 579k]
  ------------------
 1973|  1.81M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 27.2k, False: 1.78M]
  ------------------
 1974|  27.2k|                return unexpected(eof_error::eof);
 1975|  27.2k|            }
 1976|  1.81M|        }
 1977|       |
 1978|   579k|        return it;
 1979|   607k|    }
 1980|  1.54M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.54M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.54M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.54M|        else {
 1107|  1.54M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.54M, False: 0]
  ------------------
 1108|  1.54M|                return static_cast<size_t>(
 1109|  1.54M|                    r.begin().parent()->chars_available() -
 1110|  1.54M|                    r.begin().position());
 1111|  1.54M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.54M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.54M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  11.2M|    {
  763|  11.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  11.2M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.41M|        : m_fptr([](storage fn,
  743|  1.41M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.41M|              cvref<T> obj = *get<T>(fn);
  745|  1.41M|              if constexpr (std::is_void_v<R>) {
  746|  1.41M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.41M|              }
  748|  1.41M|              else {
  749|  1.41M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.41M|              }
  751|  1.41M|          }),
  752|  1.41M|          m_storage(std::addressof(f))
  753|  1.41M|    {
  754|  1.41M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  5.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.62M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.62M|              else {
  749|  5.62M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.62M|              }
  751|  5.62M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  5.62M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.62M|        else if constexpr (std::is_object_v<T>) {
  688|  5.62M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.62M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.41M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.41M|        {
  662|  1.41M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  6.57M|    {
  763|  6.57M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  6.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.57M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.52M|        : m_fptr([](storage fn,
  743|  1.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.52M|              cvref<T> obj = *get<T>(fn);
  745|  1.52M|              if constexpr (std::is_void_v<R>) {
  746|  1.52M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.52M|              }
  748|  1.52M|              else {
  749|  1.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.52M|              }
  751|  1.52M|          }),
  752|  1.52M|          m_storage(std::addressof(f))
  753|  1.52M|    {
  754|  1.52M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  2.64M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.64M|              else {
  749|  2.64M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64M|              }
  751|  2.64M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  2.64M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.64M|        else if constexpr (std::is_object_v<T>) {
  688|  2.64M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.64M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.52M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.52M|        {
  662|  1.52M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   432k|    {
 6144|   432k|        const bool need_skipped_width =
 6145|   432k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 432k]
  |  Branch (6145:33): [True: 0, False: 432k]
  ------------------
 6146|   432k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   432k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 432k]
  ------------------
 6150|   432k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 432k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   432k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 432k, False: 0]
  |  Branch (6154:56): [True: 432k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   432k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 432k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   857k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   432k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 7.44k, False: 425k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  7.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  7.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  7.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  7.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  7.44k|    }                                                  \
  |  |  |  | 3957|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   857k|                            make_eof_scan_error));
 6165|       |
 6166|   857k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 425k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   425k|            return result_type{it, 0};
 6174|   857k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   432k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  1.09M|{
 2108|  1.09M|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.09M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.09M|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.09M|    else {
 2079|  1.09M|        auto first = range.begin();
 2080|  4.38M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 4.36M, False: 13.9k]
  ------------------
 2081|  4.36M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.08M, False: 3.28M]
  ------------------
 2082|  1.08M|                return first;
 2083|  1.08M|            }
 2084|  4.36M|        }
 2085|  13.9k|        return first;
 2086|  1.09M|    }
 2087|  1.09M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   946k|    {
  108|   946k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   946k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   946k|    {
   94|   946k|        iter_difference_t<I> counter{0};
   95|  6.80M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 5.85M, False: 946k]
  ------------------
   96|  5.85M|            ++i;
   97|  5.85M|            ++counter;
   98|  5.85M|        }
   99|   946k|        return counter;
  100|   946k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  2.29M|    return [code, msg](parse_error err) {
  869|  2.29M|        assert(err != parse_error::good);
  870|  2.29M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.29M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   222k|    {
 1879|   222k|        auto stdloc = loc.get<std::locale>();
 1880|   222k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   222k|        grouping = numpunct.grouping();
 1882|   222k|        thousands_sep =
 1883|   222k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 222k]
  ------------------
 1884|   222k|        decimal_point = numpunct.decimal_point();
 1885|   222k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   222k|{
 1816|   222k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 222k, False: 0]
  ------------------
 1817|   222k|        return std::use_facet<Facet>(stdloc);
 1818|   222k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   222k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.61M|{
 1945|  1.61M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.4k, False: 1.60M]
  |  |  ------------------
  ------------------
 1946|  10.4k|        return unexpected(e);
 1947|  10.4k|    }
 1948|       |
 1949|  1.60M|    return ranges::next(range.begin());
 1950|  1.61M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.37M|{
  951|  2.37M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.0k, False: 2.35M]
  |  |  ------------------
  ------------------
  952|  20.0k|        return eof_error::eof;
  953|  20.0k|    }
  954|  2.35M|    return eof_error::good;
  955|  2.37M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.26M|{
  945|  3.26M|    return is_range_eof(r.begin(), r.end());
  946|  3.26M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.26M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.26M|    {
  938|  3.26M|        return begin == end;
  939|  3.26M|    }
  940|  3.26M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.60M|    {
  296|  1.60M|        ++x;
  297|  1.60M|        return x;
  298|  1.60M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   626k|{
 3290|   626k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   626k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 483k, False: 143k]
  ------------------
 3292|   483k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 483k, False: 200]
  ------------------
 3293|   483k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   483k|        }
 3295|    200|        return unexpected(eof_error::eof);
 3296|   483k|    }
 3297|       |
 3298|   143k|    auto& it = *r;
 3299|   143k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 63.7k, False: 79.4k]
  ------------------
 3300|  63.7k|        return std::pair{it, sign_type::minus_sign};
 3301|  63.7k|    }
 3302|  79.4k|    return std::pair{it, sign_type::plus_sign};
 3303|   143k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|  1.07M|{
 2405|  1.07M|    auto it = read_code_unit(range);
 2406|  1.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.24k, False: 1.06M]
  |  |  ------------------
  ------------------
 2407|  5.24k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  5.24k|    }
 2409|       |
 2410|  2.02M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.02M, False: 882k]
  ------------------
 2411|  2.02M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 184k, False: 1.84M]
  ------------------
 2412|   184k|            return *it;
 2413|   184k|        }
 2414|  2.02M|    }
 2415|       |
 2416|   882k|    return unexpected(parse_error::error);
 2417|  1.06M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.54M|{
 2364|  1.54M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.54M|    else {
 2377|  1.54M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.54M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.54M|                return ch;
 2380|  1.54M|            }
 2381|  1.54M|            return static_cast<char_type>(ch +
 2382|  1.54M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.54M|        };
 2384|       |
 2385|  1.54M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 27.2k, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  27.2k|    }                                                  \
  |  |  |  | 3957|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.52M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.52M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.52M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.45M, False: 65.9k]
  |  |  ------------------
  ------------------
 2390|  1.52M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.52M|                    return ascii_tolower(a) ==
 2392|  1.52M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.52M|                }))) {
 2394|  1.45M|            return unexpected(parse_error::error);
 2395|  1.45M|        }
 2396|       |
 2397|  65.9k|        return it;
 2398|  1.52M|    }
 2399|  1.54M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  1.76M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.76M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.54M, False: 225k]
  |  Branch (2378:29): [True: 160k, False: 65.6k]
  ------------------
 2379|  1.70M|                return ch;
 2380|  1.70M|            }
 2381|  65.6k|            return static_cast<char_type>(ch +
 2382|  65.6k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.76M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   543k|{
 2279|   543k|    auto it = read_code_unit(range);
 2280|   543k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.17k, False: 537k]
  |  |  ------------------
  ------------------
 2281|  5.17k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  5.17k|    }
 2283|       |
 2284|   537k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 451k, False: 86.7k]
  |  |  ------------------
  ------------------
 2285|   537k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   451k|        return unexpected(parse_error::error);
 2287|   451k|    }
 2288|       |
 2289|  86.7k|    return *it;
 2290|   537k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|  1.08M|{
 2128|  1.08M|    auto it = read_while_code_unit(range, pred);
 2129|  1.08M|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 482k, False: 604k]
  ------------------
 2130|   482k|        return unexpected(parse_error::error);
 2131|   482k|    }
 2132|   604k|    return it;
 2133|  1.08M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   500k|    {
 1720|   500k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   500k|                           ranges::common_range<Range>) {
 1737|   500k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   500k|            auto end_seg = range.end().contiguous_segment();
 1739|   500k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 61.1k, False: 439k]
  |  |  ------------------
  ------------------
 1740|   500k|                             detail::to_address(end_seg.end()))) {
 1741|  61.1k|                auto& str = m_storage.emplace();
 1742|  61.1k|                str.reserve(range.end().position() - range.begin().position());
 1743|  61.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  61.1k|                m_view = string_view_type{str};
 1745|  61.1k|                return;
 1746|  61.1k|            }
 1747|       |
 1748|   439k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   439k|                                                            end_seg.data());
 1750|   439k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   500k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  3.96M|    {
 1681|  3.96M|        return m_view;
 1682|  3.96M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  2.27M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   375k|    {
 6186|   375k|        const bool need_skipped_width =
 6187|   375k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 375k]
  |  Branch (6187:33): [True: 0, False: 375k]
  ------------------
 6188|   375k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   375k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 375k]
  ------------------
 6191|   375k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 375k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   375k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 375k, False: 0]
  ------------------
 6200|   375k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 375k]
  ------------------
 6201|   375k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   375k|        return result_type{rng.begin(), 0};
 6225|   375k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   834k|{
 1945|   834k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   834k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.96k, False: 831k]
  |  |  ------------------
  ------------------
 1946|  2.96k|        return unexpected(e);
 1947|  2.96k|    }
 1948|       |
 1949|   831k|    return ranges::next(range.begin());
 1950|   834k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.56M|{
  951|  1.56M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.8k, False: 1.55M]
  |  |  ------------------
  ------------------
  952|  10.8k|        return eof_error::eof;
  953|  10.8k|    }
  954|  1.55M|    return eof_error::good;
  955|  1.56M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.56M|{
  945|  1.56M|    return is_range_eof(r.begin(), r.end());
  946|  1.56M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.57M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.57M|    {
  938|  1.57M|        return begin == end;
  939|  1.57M|    }
  940|  1.57M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   841k|    {
  296|   841k|        ++x;
  297|   841k|        return x;
  298|   841k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   564k|{
 3290|   564k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   564k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 433k, False: 131k]
  ------------------
 3292|   433k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 433k, False: 60]
  ------------------
 3293|   433k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   433k|        }
 3295|     60|        return unexpected(eof_error::eof);
 3296|   433k|    }
 3297|       |
 3298|   131k|    auto& it = *r;
 3299|   131k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 61.5k, False: 69.5k]
  ------------------
 3300|  61.5k|        return std::pair{it, sign_type::minus_sign};
 3301|  61.5k|    }
 3302|  69.5k|    return std::pair{it, sign_type::plus_sign};
 3303|   131k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   653k|{
 2405|   653k|    auto it = read_code_unit(range);
 2406|   653k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 922, False: 652k]
  |  |  ------------------
  ------------------
 2407|    922|        return unexpected(make_eof_parse_error(it.error()));
 2408|    922|    }
 2409|       |
 2410|  1.22M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.22M, False: 508k]
  ------------------
 2411|  1.22M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 143k, False: 1.08M]
  ------------------
 2412|   143k|            return *it;
 2413|   143k|        }
 2414|  1.22M|    }
 2415|       |
 2416|   508k|    return unexpected(parse_error::error);
 2417|   652k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  10.2k|{
 3376|  10.2k|    switch (base) {
 3377|      0|        case 2:
  ------------------
  |  Branch (3377:9): [True: 0, False: 10.2k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      0|                    false};
 3381|       |
 3382|      0|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 0, False: 10.2k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|      0|            bool zero_parsed = false;
 3385|      0|            auto it = apply_opt(
 3386|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|      0|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|      0|        case 16:
  ------------------
  |  Branch (3390:9): [True: 0, False: 10.2k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|      0|                    false};
 3394|       |
 3395|      0|        case 0:
  ------------------
  |  Branch (3395:9): [True: 0, False: 10.2k]
  ------------------
 3396|       |            // detect base
 3397|      0|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  10.2k|        default:
  ------------------
  |  Branch (3399:9): [True: 10.2k, False: 0]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  10.2k|            return {range.begin(), base, false};
 3402|  10.2k|    }
 3403|  10.2k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.45M|{
 2364|  1.45M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  1.45M|                  std::is_same_v<char_type, char>) {
 2368|  1.45M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 28.3k, False: 1.42M]
  ------------------
 2369|  28.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|  28.3k|        }
 2371|  1.42M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 1.36M, False: 58.7k]
  ------------------
 2372|  1.36M|            return unexpected(parse_error::error);
 2373|  1.36M|        }
 2374|  58.7k|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  1.45M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   181k|{
 2279|   181k|    auto it = read_code_unit(range);
 2280|   181k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.04k, False: 179k]
  |  |  ------------------
  ------------------
 2281|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  2.04k|    }
 2283|       |
 2284|   179k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 145k, False: 33.1k]
  |  |  ------------------
  ------------------
 2285|   179k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   145k|        return unexpected(parse_error::error);
 2287|   145k|    }
 2288|       |
 2289|  33.1k|    return *it;
 2290|   179k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  10.2k|{
 3443|  10.2k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  10.2k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  10.2k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.2k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  10.2k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  10.2k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  10.2k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  10.2k|                  ranges::sized_range<Range>) {
 1785|  10.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  10.2k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  10.2k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  10.2k|    {
 1589|  10.2k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  2.92M|    {
 1602|  2.92M|        return sv;
 1603|  2.92M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   320k|{
 2108|   320k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   320k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   320k|{
 2075|   320k|    if constexpr (ranges::common_range<Range>) {
 2076|   320k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   320k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   557k|{
 3098|   557k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 557k, False: 0]
  ------------------
 3099|   557k|        auto it = read_while_classic_space(range);
 3100|   557k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   557k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   557k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.06k, False: 551k]
  |  |  ------------------
  ------------------
 3102|  6.06k|            return unexpected(e);
 3103|  6.06k|        }
 3104|       |
 3105|   551k|        return it;
 3106|   557k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   557k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   557k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   557k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   557k|        auto buf = make_contiguous_buffer(range);
 2253|   557k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   557k|        return ranges::next(range.begin(),
 2255|   557k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   557k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   557k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   557k|                  ranges::sized_range<Range>) {
 1785|   557k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   557k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   557k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   557k|    {
 1589|   557k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.54M|    {
  304|  1.54M|        ranges::advance(x, n);
  305|  1.54M|        return x;
  306|  1.54M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.06M|    {
  268|  2.06M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.06M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.06M|    {
  181|  8.12M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 6.06M, False: 2.06M]
  ------------------
  182|  6.06M|            ++i;
  183|  6.06M|        }
  184|  2.06M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   138k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   138k|            auto rd = make_reader<T, char_type>();
 6306|   138k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   138k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 138k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   138k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 138k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   138k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   138k|                return impl(rd, range, value);
 6311|   138k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   138k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   831k|    {
 3188|   831k|        reader_error_handler eh{};
 3189|   831k|        get_derived().check_specs_impl(specs, eh);
 3190|   831k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   831k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 831k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   831k|        return {};
 3195|   831k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|   831k|    {
 3200|   831k|        return static_cast<Derived&>(*this);
 3201|   831k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|   831k|    {
 4239|   831k|        detail::check_float_type_specs(specs, eh);
 4240|   831k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   138k|    {
 6231|   138k|        const bool need_skipped_width =
 6232|   138k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 138k]
  |  Branch (6232:33): [True: 0, False: 138k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   138k|        auto it = rng.begin();
 6236|   138k|        std::ptrdiff_t prefix_width = 0;
 6237|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 138k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   138k|        else {
 6245|   138k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.22k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.22k|    }                                                  \
  |  |  |  | 3957|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   136k|            std::tie(it, prefix_width) = prefix_result;
 6247|   136k|        }
 6248|   136k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   136k|        std::ptrdiff_t value_width = 0;
 6252|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 136k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   136k|        else {
 6268|   136k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.9k, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.9k|    }                                                  \
  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   121k|                                             specs, value, loc));
 6270|       |
 6271|   121k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 121k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   121k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   121k|        std::ptrdiff_t postfix_width = 0;
 6280|   121k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 120k, False: 1.58k]
  ------------------
 6281|   120k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   120k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   120k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   120k|                                 value_width));
 6285|   120k|            std::tie(it, postfix_width) = postfix_result;
 6286|   120k|        }
 6287|       |
 6288|   121k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   121k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   121k|            specs, prefix_width, value_width, postfix_width));
 6290|   121k|        return it;
 6291|   121k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  1.87M|    {
 3183|  1.87M|        return true;
 3184|  1.87M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4310|   818k|    {
 4311|   818k|        unsigned options{};
 4312|   818k|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 222k, False: 595k]
  ------------------
 4313|   222k|            options |= float_reader_base::allow_thsep;
 4314|   222k|        }
 4315|       |
 4316|   818k|        SCN_GCC_COMPAT_PUSH
 4317|   818k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|   818k|        switch (specs.type) {
 4320|   134k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 134k, False: 683k]
  ------------------
 4321|   134k|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|  27.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 27.8k, False: 790k]
  ------------------
 4324|  27.8k|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|   242k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 242k, False: 575k]
  ------------------
 4327|   242k|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|   191k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 191k, False: 626k]
  ------------------
 4330|   191k|                return options | float_reader_base::allow_scientific |
 4331|   191k|                       float_reader_base::allow_fixed;
 4332|       |
 4333|   222k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 222k, False: 595k]
  ------------------
 4334|   222k|                return options | float_reader_base::allow_scientific |
 4335|   222k|                       float_reader_base::allow_fixed |
 4336|   222k|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 818k]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|   818k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|   818k|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|   818k|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3741|   818k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.13M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.27M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3772|   339k|    {
 3773|   339k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   339k|        const std::ptrdiff_t sign_len =
 3776|   339k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 80.3k, False: 259k]
  ------------------
 3777|       |
 3778|   339k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.5k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.5k|    }                                                  \
  |  |  |  | 3957|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   326k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   339k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4129|  1.05M|    {
 4130|  1.05M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 1.05M, False: 0]
  ------------------
 4131|  1.05M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 1.05M, False: 0]
  ------------------
 4132|  1.05M|            return;
 4133|  1.05M|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.09M|    {
 1686|  2.09M|        return m_storage.has_value();
 1687|  2.09M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.14M|    {
 1691|  1.14M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.14M|        return *m_storage;
 1693|  1.14M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   136k|    {
 4264|   136k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   136k|#if !SCN_DISABLE_LOCALE
 4267|   136k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 36.8k, False: 99.8k]
  ------------------
 4268|  36.8k|            return read_impl<Range>(
 4269|  36.8k|                range, rd,
 4270|  36.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  36.8k|                },
 4273|  36.8k|                value, loc);
 4274|  36.8k|        }
 4275|  99.8k|#endif
 4276|       |
 4277|  99.8k|        return read_impl<Range>(
 4278|  99.8k|            range, rd,
 4279|  99.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  99.8k|                return r.read_source(SCN_FWD(args)...);
 4281|  99.8k|            },
 4282|  99.8k|            value);
 4283|   136k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   188k|    {
 4300|   188k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   188k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.3k, False: 171k]
  |  |  ------------------
  ------------------
 4302|  17.3k|            return unexpected(r.error());
 4303|  17.3k|        }
 4304|       |
 4305|   171k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.13k, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.13k|    }                                                  \
  |  |  |  | 3957|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   168k|        return ranges::next(range.begin(), n);
 4307|   171k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   585k|    {
  763|   585k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   585k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  36.8k|        : m_fptr([](storage fn,
  743|  36.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.8k|              cvref<T> obj = *get<T>(fn);
  745|  36.8k|              if constexpr (std::is_void_v<R>) {
  746|  36.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.8k|              }
  748|  36.8k|              else {
  749|  36.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.8k|              }
  751|  36.8k|          }),
  752|  36.8k|          m_storage(std::addressof(f))
  753|  36.8k|    {
  754|  36.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  36.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.8k|              else {
  749|  36.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.8k|              }
  751|  36.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  36.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.8k|        else if constexpr (std::is_object_v<T>) {
  688|  36.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  36.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  36.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  36.8k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3760|   116k|    {
 3761|   116k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|   116k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   116k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 116k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|   116k|        return read_source_impl(range);
 3767|   116k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3786|   585k|    {
 3787|   585k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   585k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 585k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   585k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   585k|        auto it = sign_result.first;
 3790|   585k|        m_sign = sign_result.second;
 3791|       |
 3792|   585k|        auto digits_begin = it;
 3793|   585k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|   585k|        else {
 3820|   585k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 53.7k, False: 532k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  53.7k|    }                                                  \
  |  | 3957|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|   532k|                it,
 3822|   532k|                do_read_source_impl(
 3823|   532k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|   532k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|   532k|        }
 3826|       |
 3827|   585k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   585k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   585k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   532k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 527k, False: 4.53k]
  |  Branch (3829:48): [True: 524k, False: 2.67k]
  ------------------
 3830|   532k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 498k, False: 26.0k]
  ------------------
 3831|   532k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 492k, False: 6.24k]
  ------------------
 3832|   492k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   492k|        }
 3834|       |
 3835|   532k|        handle_separators();
 3836|       |
 3837|   532k|        return it;
 3838|   585k|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4072|   585k|    {
 4073|   585k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   585k|        const bool allowed_nonhex =
 4075|   585k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   585k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   585k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 578k, False: 7.21k]
  |  Branch (4078:45): [True: 0, False: 578k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   585k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 7.21k, False: 578k]
  ------------------
 4084|  7.21k|            return *r;
 4085|  7.21k|        }
 4086|       |
 4087|   578k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 546k, False: 32.2k]
  |  Branch (4087:45): [True: 1.51k, False: 544k]
  ------------------
 4088|  1.51k|            return unexpected(r.error());
 4089|  1.51k|        }
 4090|   577k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 32.2k, False: 544k]
  ------------------
 4091|  32.2k|            return *r;
 4092|  32.2k|        }
 4093|       |
 4094|   544k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 376k, False: 168k]
  |  Branch (4094:28): [True: 118k, False: 257k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|   118k|            auto it = range.begin();
 4098|       |
 4099|   118k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 6.58k, False: 111k]
  ------------------
 4100|  6.58k|                m_kind = float_kind::hex_with_prefix;
 4101|  6.58k|                it = *r;
 4102|  6.58k|            }
 4103|   111k|            else {
 4104|   111k|                m_kind = float_kind::hex_without_prefix;
 4105|   111k|            }
 4106|       |
 4107|   118k|            return read_hex(ranges::subrange{it, range.end()});
 4108|   118k|        }
 4109|   426k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 168k, False: 257k]
  |  Branch (4109:29): [True: 168k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   168k|            m_kind = float_kind::generic;
 4113|   168k|            return read_regular_float(range);
 4114|   168k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   257k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.6k, False: 242k]
  |  |  ------------------
  ------------------
 4120|  15.6k|            m_kind = float_kind::hex_with_prefix;
 4121|  15.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4122|  15.6k|        }
 4123|       |
 4124|   242k|        m_kind = float_kind::generic;
 4125|   242k|        return read_regular(range);
 4126|   257k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3880|   585k|    {
 3881|   585k|        auto it = range.begin();
 3882|   585k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 578k, False: 7.21k]
  ------------------
 3883|   578k|            return unexpected(r.error());
 3884|   578k|        }
 3885|  7.21k|        else {
 3886|  7.21k|            it = *r;
 3887|  7.21k|        }
 3888|       |
 3889|  7.21k|        if (auto r = read_matching_string_classic_nocase(
 3890|  7.21k|                ranges::subrange{it, range.end()}, "inity");
 3891|  7.21k|            !r) {
  ------------------
  |  Branch (3891:13): [True: 4.53k, False: 2.67k]
  ------------------
 3892|  4.53k|            m_kind = float_kind::inf_short;
 3893|  4.53k|            return it;
 3894|  4.53k|        }
 3895|  2.67k|        else {
 3896|  2.67k|            m_kind = float_kind::inf_long;
 3897|  2.67k|            return *r;
 3898|  2.67k|        }
 3899|  7.21k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   578k|    {
 3904|   578k|        auto it = range.begin();
 3905|   578k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 544k, False: 33.7k]
  ------------------
 3906|   544k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   544k|                scan_error::invalid_scanned_value,
 3908|   544k|                "Invalid floating-point NaN value"));
 3909|   544k|        }
 3910|  33.7k|        else {
 3911|  33.7k|            it = *r;
 3912|  33.7k|        }
 3913|       |
 3914|  33.7k|        if (auto r =
 3915|  33.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|  33.7k|            !r) {
  ------------------
  |  Branch (3916:13): [True: 26.0k, False: 7.76k]
  ------------------
 3917|  26.0k|            m_kind = float_kind::nan_simple;
 3918|  26.0k|            return it;
 3919|  26.0k|        }
 3920|  7.76k|        else {
 3921|  7.76k|            it = *r;
 3922|  7.76k|        }
 3923|       |
 3924|  7.76k|        auto payload_beg_it = it;
 3925|  7.76k|        it = read_while_code_unit(
 3926|  7.76k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|  7.76k|                return is_ascii_char(ch) &&
 3928|  7.76k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|  7.76k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|  7.76k|            });
 3931|  7.76k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|  7.76k|        m_kind = float_kind::nan_with_payload;
 3934|  7.76k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 6.24k, False: 1.51k]
  ------------------
 3935|  7.76k|                                             ')')) {
 3936|  6.24k|            return *r;
 3937|  6.24k|        }
 3938|  1.51k|        return detail::unexpected_scan_error(
 3939|  1.51k|            scan_error::invalid_scanned_value,
 3940|  1.51k|            "Invalid floating-point NaN payload");
 3941|  7.76k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  7.76k|        : m_fptr([](storage fn,
  743|  7.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.76k|              cvref<T> obj = *get<T>(fn);
  745|  7.76k|              if constexpr (std::is_void_v<R>) {
  746|  7.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.76k|              }
  748|  7.76k|              else {
  749|  7.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.76k|              }
  751|  7.76k|          }),
  752|  7.76k|          m_storage(std::addressof(f))
  753|  7.76k|    {
  754|  7.76k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   163k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  688|   163k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   163k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3926|   163k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|   163k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3927:24): [True: 163k, False: 83]
  ------------------
 3928|   163k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3928:26): [True: 157k, False: 6.62k]
  |  Branch (3928:39): [True: 148k, False: 8.41k]
  |  Branch (3928:54): [True: 2.82k, False: 12.2k]
  |  Branch (3928:67): [True: 2.74k, False: 83]
  ------------------
 3929|   163k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3929:26): [True: 5.67k, False: 6.62k]
  |  Branch (3929:39): [True: 2.87k, False: 2.80k]
  |  Branch (3929:53): [True: 2.72k, False: 6.71k]
  ------------------
 3930|   163k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  7.76k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.76k|        {
  662|  7.76k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3873|   376k|    {
 3874|   376k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   376k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3974|   133k|    {
 3975|   133k|        auto it = range.begin();
 3976|       |
 3977|   133k|        std::ptrdiff_t digits_count = 0;
 3978|   133k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|   133k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.01k, False: 126k]
  |  |  ------------------
  ------------------
 3980|  7.01k|            return r.transform_error(map_parse_error_to_scan_error(
 3981|  7.01k|                scan_error::invalid_scanned_value,
 3982|  7.01k|                "Invalid hexadecimal floating-point value"));
 3983|  7.01k|        }
 3984|   126k|        else {
 3985|   126k|            digits_count += ranges::distance(it, *r);
 3986|   126k|            it = *r;
 3987|   126k|        }
 3988|       |
 3989|   126k|        m_integral_part_length = digits_count;
 3990|   126k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 16.0k, False: 110k]
  ------------------
 3991|   126k|                                             m_locale_options.decimal_point)) {
 3992|  16.0k|            it = *r;
 3993|  16.0k|        }
 3994|       |
 3995|   126k|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 13.7k, False: 113k]
  ------------------
 3996|   126k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|  13.7k|            digits_count += ranges::distance(it, *r);
 3998|  13.7k|            it = *r;
 3999|  13.7k|        }
 4000|       |
 4001|   126k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|   126k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|   126k|        return it;
 4010|   126k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3858|   260k|    {
 3859|   260k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 260k]
  |  |  |  Branch (1039:45): [True: 0, False: 260k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|   260k|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|   260k|        return read_while1_code_unit(
 3868|   260k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|   260k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   260k|        : m_fptr([](storage fn,
  743|   260k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   260k|              cvref<T> obj = *get<T>(fn);
  745|   260k|              if constexpr (std::is_void_v<R>) {
  746|   260k|                  obj(static_cast<decltype(args)>(args)...);
  747|   260k|              }
  748|   260k|              else {
  749|   260k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   260k|              }
  751|   260k|          }),
  752|   260k|          m_storage(std::addressof(f))
  753|   260k|    {
  754|   260k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.02M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.02M|              else {
  749|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.02M|              }
  751|  1.02M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  1.02M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.02M|        else if constexpr (std::is_object_v<T>) {
  688|  1.02M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.02M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3868|  1.02M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   260k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   260k|        {
  662|   260k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3946|   445k|    {
 3947|   445k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 40.8k, False: 404k]
  ------------------
 3948|  40.8k|            auto beg_exp_it = range.begin();
 3949|  40.8k|            auto it = *r;
 3950|       |
 3951|  40.8k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 40.6k, False: 200]
  ------------------
 3952|  40.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  40.6k|                it = r_sign->first;
 3954|  40.6k|            }
 3955|       |
 3956|  40.8k|            if (auto r_exp = read_while1_code_unit(
 3957|  40.8k|                    ranges::subrange{it, range.end()},
 3958|  40.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  40.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  40.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.46k, False: 39.4k]
  |  |  ------------------
  ------------------
 3960|  1.46k|                it = beg_exp_it;
 3961|  1.46k|            }
 3962|  39.4k|            else {
 3963|  39.4k|                it = *r_exp;
 3964|  39.4k|            }
 3965|       |
 3966|  40.8k|            return it;
 3967|  40.8k|        }
 3968|   404k|        return range.begin();
 3969|   445k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  40.8k|        : m_fptr([](storage fn,
  743|  40.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.8k|              cvref<T> obj = *get<T>(fn);
  745|  40.8k|              if constexpr (std::is_void_v<R>) {
  746|  40.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.8k|              }
  748|  40.8k|              else {
  749|  40.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.8k|              }
  751|  40.8k|          }),
  752|  40.8k|          m_storage(std::addressof(f))
  753|  40.8k|    {
  754|  40.8k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   137k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   137k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   137k|              else {
  749|   137k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   137k|              }
  751|   137k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   137k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   137k|        else if constexpr (std::is_object_v<T>) {
  688|   137k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   137k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3958|   137k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  40.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.8k|        {
  662|  40.8k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4015|   410k|    {
 4016|   410k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   410k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 345k, False: 65.1k]
  |  Branch (4017:50): [True: 12.7k, False: 333k]
  ------------------
 4018|       |
 4019|   410k|        auto it = ranges::begin(range);
 4020|   410k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   410k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   410k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 36.4k, False: 374k]
  |  |  ------------------
  ------------------
 4024|  36.4k|            return r.transform_error(
 4025|  36.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  36.4k|                                              "Invalid floating-point value"));
 4027|  36.4k|        }
 4028|   374k|        else {
 4029|   374k|            digits_count += ranges::distance(it, *r);
 4030|   374k|            it = *r;
 4031|   374k|        }
 4032|       |
 4033|   374k|        m_integral_part_length = digits_count;
 4034|   374k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 56.6k, False: 317k]
  ------------------
 4035|   374k|                                             m_locale_options.decimal_point)) {
 4036|  56.6k|            it = *r;
 4037|  56.6k|        }
 4038|       |
 4039|   374k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 50.2k, False: 324k]
  ------------------
 4040|   374k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  50.2k|            digits_count += ranges::distance(it, *r);
 4042|  50.2k|            it = *r;
 4043|  50.2k|        }
 4044|       |
 4045|   374k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   374k|        auto beg_exp_it = it;
 4052|   374k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 318k, False: 55.9k]
  ------------------
 4053|   318k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|   318k|        }
 4055|   374k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 12.0k, False: 362k]
  |  Branch (4055:29): [True: 8.78k, False: 3.22k]
  ------------------
 4056|  8.78k|            return detail::unexpected_scan_error(
 4057|  8.78k|                scan_error::invalid_scanned_value,
 4058|  8.78k|                "No exponent given to scientific float");
 4059|  8.78k|        }
 4060|       |
 4061|   365k|        m_kind =
 4062|   365k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 326k, False: 38.7k]
  ------------------
 4063|       |
 4064|   365k|        return it;
 4065|   374k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3843|   785k|    {
 3844|   785k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 785k]
  |  |  |  Branch (1039:45): [True: 0, False: 785k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   785k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   785k|        return read_while1_code_unit(
 3853|   785k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   785k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   785k|        : m_fptr([](storage fn,
  743|   785k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   785k|              cvref<T> obj = *get<T>(fn);
  745|   785k|              if constexpr (std::is_void_v<R>) {
  746|   785k|                  obj(static_cast<decltype(args)>(args)...);
  747|   785k|              }
  748|   785k|              else {
  749|   785k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   785k|              }
  751|   785k|          }),
  752|   785k|          m_storage(std::addressof(f))
  753|   785k|    {
  754|   785k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.03M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.03M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.03M|              else {
  749|  3.03M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.03M|              }
  751|  3.03M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  3.03M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.03M|        else if constexpr (std::is_object_v<T>) {
  688|  3.03M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.03M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3853|  3.03M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   785k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   785k|        {
  662|   785k|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   500k|    {
 1676|   500k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   500k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  36.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.8k|        {
  662|  36.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  99.8k|        : m_fptr([](storage fn,
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|  99.8k|              if constexpr (std::is_void_v<R>) {
  746|  99.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.8k|              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
  752|  99.8k|          m_storage(std::addressof(f))
  753|  99.8k|    {
  754|  99.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  99.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.8k|              else {
  749|  99.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.8k|              }
  751|  99.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  99.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.8k|        else if constexpr (std::is_object_v<T>) {
  688|  99.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  99.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  99.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  99.8k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3746|   469k|    {
 3747|   469k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   469k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 469k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   469k|        return read_source_impl(range);
 3753|   469k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  99.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  99.8k|        {
  662|  99.8k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   127k|    {
 4264|   127k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   127k|#if !SCN_DISABLE_LOCALE
 4267|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 33.7k, False: 93.7k]
  ------------------
 4268|  33.7k|            return read_impl<Range>(
 4269|  33.7k|                range, rd,
 4270|  33.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  33.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  33.7k|                },
 4273|  33.7k|                value, loc);
 4274|  33.7k|        }
 4275|  93.7k|#endif
 4276|       |
 4277|  93.7k|        return read_impl<Range>(
 4278|  93.7k|            range, rd,
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
 4281|  93.7k|            },
 4282|  93.7k|            value);
 4283|   127k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   178k|    {
 4300|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.60k, False: 168k]
  |  |  ------------------
  ------------------
 4302|  9.60k|            return unexpected(r.error());
 4303|  9.60k|        }
 4304|       |
 4305|   168k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.4k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.4k|    }                                                  \
  |  |  |  | 3957|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   158k|        return ranges::next(range.begin(), n);
 4307|   168k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   551k|    {
  763|   551k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   551k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  33.7k|        : m_fptr([](storage fn,
  743|  33.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.7k|              cvref<T> obj = *get<T>(fn);
  745|  33.7k|              if constexpr (std::is_void_v<R>) {
  746|  33.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.7k|              }
  748|  33.7k|              else {
  749|  33.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.7k|              }
  751|  33.7k|          }),
  752|  33.7k|          m_storage(std::addressof(f))
  753|  33.7k|    {
  754|  33.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  33.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.7k|              else {
  749|  33.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.7k|              }
  751|  33.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  33.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.7k|        else if constexpr (std::is_object_v<T>) {
  688|  33.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  33.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  33.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  33.7k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|   105k|    {
 3761|   105k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|   105k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 105k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|   105k|        return read_source_impl(range);
 3767|   105k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|   551k|    {
 3787|   551k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   551k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 551k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   551k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   551k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   551k|        auto it = sign_result.first;
 3790|   551k|        m_sign = sign_result.second;
 3791|       |
 3792|   551k|        auto digits_begin = it;
 3793|   551k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|   551k|                      ranges::sized_range<Range>) {
 3796|   551k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 551k]
  |  |  |  Branch (1039:45): [True: 0, False: 551k]
  |  |  |  Branch (1039:45): [True: 0, False: 551k]
  |  |  ------------------
  ------------------
 3797|   551k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|   551k|            else {
 3806|   551k|                auto cb = [&](const auto& rr)
 3807|   551k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   551k|                    auto res = read_all(rr);
 3809|   551k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|   551k|                        return detail::unexpected_scan_error(
 3811|   551k|                            scan_error::invalid_scanned_value,
 3812|   551k|                            "Invalid float value");
 3813|   551k|                    }
 3814|   551k|                    return res;
 3815|   551k|                };
 3816|   551k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   551k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   551k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 29.3k, False: 522k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  29.3k|    }                                                  \
  |  | 3957|   551k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|   522k|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|   551k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   551k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   551k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   522k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 517k, False: 4.39k]
  |  Branch (3829:48): [True: 515k, False: 2.48k]
  ------------------
 3830|   522k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 489k, False: 25.5k]
  ------------------
 3831|   522k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 484k, False: 5.71k]
  ------------------
 3832|   484k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   484k|        }
 3834|       |
 3835|   522k|        handle_separators();
 3836|       |
 3837|   522k|        return it;
 3838|   551k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|   551k|    {
 3881|   551k|        auto it = range.begin();
 3882|   551k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 544k, False: 6.87k]
  ------------------
 3883|   544k|            return unexpected(r.error());
 3884|   544k|        }
 3885|  6.87k|        else {
 3886|  6.87k|            it = *r;
 3887|  6.87k|        }
 3888|       |
 3889|  6.87k|        if (auto r = read_matching_string_classic_nocase(
 3890|  6.87k|                ranges::subrange{it, range.end()}, "inity");
 3891|  6.87k|            !r) {
  ------------------
  |  Branch (3891:13): [True: 4.39k, False: 2.48k]
  ------------------
 3892|  4.39k|            m_kind = float_kind::inf_short;
 3893|  4.39k|            return it;
 3894|  4.39k|        }
 3895|  2.48k|        else {
 3896|  2.48k|            m_kind = float_kind::inf_long;
 3897|  2.48k|            return *r;
 3898|  2.48k|        }
 3899|  6.87k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|   544k|    {
 3904|   544k|        auto it = range.begin();
 3905|   544k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 512k, False: 32.6k]
  ------------------
 3906|   512k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   512k|                scan_error::invalid_scanned_value,
 3908|   512k|                "Invalid floating-point NaN value"));
 3909|   512k|        }
 3910|  32.6k|        else {
 3911|  32.6k|            it = *r;
 3912|  32.6k|        }
 3913|       |
 3914|  32.6k|        if (auto r =
 3915|  32.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|  32.6k|            !r) {
  ------------------
  |  Branch (3916:13): [True: 25.5k, False: 7.16k]
  ------------------
 3917|  25.5k|            m_kind = float_kind::nan_simple;
 3918|  25.5k|            return it;
 3919|  25.5k|        }
 3920|  7.16k|        else {
 3921|  7.16k|            it = *r;
 3922|  7.16k|        }
 3923|       |
 3924|  7.16k|        auto payload_beg_it = it;
 3925|  7.16k|        it = read_while_code_unit(
 3926|  7.16k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|  7.16k|                return is_ascii_char(ch) &&
 3928|  7.16k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|  7.16k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|  7.16k|            });
 3931|  7.16k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|  7.16k|        m_kind = float_kind::nan_with_payload;
 3934|  7.16k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 5.71k, False: 1.45k]
  ------------------
 3935|  7.16k|                                             ')')) {
 3936|  5.71k|            return *r;
 3937|  5.71k|        }
 3938|  1.45k|        return detail::unexpected_scan_error(
 3939|  1.45k|            scan_error::invalid_scanned_value,
 3940|  1.45k|            "Invalid floating-point NaN payload");
 3941|  7.16k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  7.16k|        : m_fptr([](storage fn,
  743|  7.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.16k|              cvref<T> obj = *get<T>(fn);
  745|  7.16k|              if constexpr (std::is_void_v<R>) {
  746|  7.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.16k|              }
  748|  7.16k|              else {
  749|  7.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.16k|              }
  751|  7.16k|          }),
  752|  7.16k|          m_storage(std::addressof(f))
  753|  7.16k|    {
  754|  7.16k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   150k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  688|   150k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   150k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3926|   150k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|   150k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3927:24): [True: 150k, False: 83]
  ------------------
 3928|   150k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3928:26): [True: 144k, False: 6.04k]
  |  Branch (3928:39): [True: 136k, False: 8.19k]
  |  Branch (3928:54): [True: 2.76k, False: 11.4k]
  |  Branch (3928:67): [True: 2.68k, False: 83]
  ------------------
 3929|   150k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3929:26): [True: 5.51k, False: 6.04k]
  |  Branch (3929:39): [True: 2.71k, False: 2.80k]
  |  Branch (3929:53): [True: 2.72k, False: 6.12k]
  ------------------
 3930|   150k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  7.16k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.16k|        {
  662|  7.16k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|   352k|    {
 3874|   352k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   352k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   313k|{
 2128|   313k|    auto it = read_while_code_unit(range, pred);
 2129|   313k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 142k, False: 171k]
  ------------------
 2130|   142k|        return unexpected(parse_error::error);
 2131|   142k|    }
 2132|   171k|    return it;
 2133|   313k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3946|  88.9k|    {
 3947|  88.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 12.7k, False: 76.1k]
  ------------------
 3948|  12.7k|            auto beg_exp_it = range.begin();
 3949|  12.7k|            auto it = *r;
 3950|       |
 3951|  12.7k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 12.6k, False: 60]
  ------------------
 3952|  12.7k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  12.6k|                it = r_sign->first;
 3954|  12.6k|            }
 3955|       |
 3956|  12.7k|            if (auto r_exp = read_while1_code_unit(
 3957|  12.7k|                    ranges::subrange{it, range.end()},
 3958|  12.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  12.7k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 560, False: 12.1k]
  |  |  ------------------
  ------------------
 3960|    560|                it = beg_exp_it;
 3961|    560|            }
 3962|  12.1k|            else {
 3963|  12.1k|                it = *r_exp;
 3964|  12.1k|            }
 3965|       |
 3966|  12.7k|            return it;
 3967|  12.7k|        }
 3968|  76.1k|        return range.begin();
 3969|  88.9k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  12.7k|        : m_fptr([](storage fn,
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|  12.7k|              if constexpr (std::is_void_v<R>) {
  746|  12.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.7k|              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
  752|  12.7k|          m_storage(std::addressof(f))
  753|  12.7k|    {
  754|  12.7k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  40.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.1k|              else {
  749|  40.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.1k|              }
  751|  40.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  40.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.1k|        else if constexpr (std::is_object_v<T>) {
  688|  40.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.1k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3958|  40.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  12.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.7k|        {
  662|  12.7k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|   159k|    {
 4016|   159k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   159k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 98.0k, False: 61.7k]
  |  Branch (4017:50): [True: 12.5k, False: 85.5k]
  ------------------
 4018|       |
 4019|   159k|        auto it = ranges::begin(range);
 4020|   159k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   159k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   159k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.5k, False: 141k]
  |  |  ------------------
  ------------------
 4024|  18.5k|            return r.transform_error(
 4025|  18.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  18.5k|                                              "Invalid floating-point value"));
 4027|  18.5k|        }
 4028|   141k|        else {
 4029|   141k|            digits_count += ranges::distance(it, *r);
 4030|   141k|            it = *r;
 4031|   141k|        }
 4032|       |
 4033|   141k|        m_integral_part_length = digits_count;
 4034|   141k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 20.3k, False: 120k]
  ------------------
 4035|   141k|                                             m_locale_options.decimal_point)) {
 4036|  20.3k|            it = *r;
 4037|  20.3k|        }
 4038|       |
 4039|   141k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 17.7k, False: 123k]
  ------------------
 4040|   141k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  17.7k|            digits_count += ranges::distance(it, *r);
 4042|  17.7k|            it = *r;
 4043|  17.7k|        }
 4044|       |
 4045|   141k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   141k|        auto beg_exp_it = it;
 4052|   141k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 88.9k, False: 52.2k]
  ------------------
 4053|  88.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|  88.9k|        }
 4055|   141k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 11.5k, False: 129k]
  |  Branch (4055:29): [True: 8.61k, False: 2.95k]
  ------------------
 4056|  8.61k|            return detail::unexpected_scan_error(
 4057|  8.61k|                scan_error::invalid_scanned_value,
 4058|  8.61k|                "No exponent given to scientific float");
 4059|  8.61k|        }
 4060|       |
 4061|   132k|        m_kind =
 4062|   132k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 120k, False: 12.1k]
  ------------------
 4063|       |
 4064|   132k|        return it;
 4065|   141k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|   301k|    {
 3844|   301k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 301k]
  |  |  |  Branch (1039:45): [True: 0, False: 301k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   301k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   301k|        return read_while1_code_unit(
 3853|   301k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   301k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   301k|        : m_fptr([](storage fn,
  743|   301k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   301k|              cvref<T> obj = *get<T>(fn);
  745|   301k|              if constexpr (std::is_void_v<R>) {
  746|   301k|                  obj(static_cast<decltype(args)>(args)...);
  747|   301k|              }
  748|   301k|              else {
  749|   301k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   301k|              }
  751|   301k|          }),
  752|   301k|          m_storage(std::addressof(f))
  753|   301k|    {
  754|   301k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3853|  1.06M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   301k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   301k|        {
  662|   301k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|   551k|    {
 4073|   551k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   551k|        const bool allowed_nonhex =
 4075|   551k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   551k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   551k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 544k, False: 6.87k]
  |  Branch (4078:45): [True: 0, False: 544k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   551k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 6.87k, False: 544k]
  ------------------
 4084|  6.87k|            return *r;
 4085|  6.87k|        }
 4086|       |
 4087|   544k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 513k, False: 31.2k]
  |  Branch (4087:45): [True: 1.45k, False: 512k]
  ------------------
 4088|  1.45k|            return unexpected(r.error());
 4089|  1.45k|        }
 4090|   543k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 31.2k, False: 512k]
  ------------------
 4091|  31.2k|            return *r;
 4092|  31.2k|        }
 4093|       |
 4094|   512k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 352k, False: 159k]
  |  Branch (4094:28): [True: 106k, False: 245k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|   106k|            auto it = range.begin();
 4098|       |
 4099|   106k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 4.81k, False: 102k]
  ------------------
 4100|  4.81k|                m_kind = float_kind::hex_with_prefix;
 4101|  4.81k|                it = *r;
 4102|  4.81k|            }
 4103|   102k|            else {
 4104|   102k|                m_kind = float_kind::hex_without_prefix;
 4105|   102k|            }
 4106|       |
 4107|   106k|            return read_hex(ranges::subrange{it, range.end()});
 4108|   106k|        }
 4109|   405k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 159k, False: 245k]
  |  Branch (4109:29): [True: 159k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   159k|            m_kind = float_kind::generic;
 4113|   159k|            return read_regular_float(range);
 4114|   159k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   245k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.9k, False: 233k]
  |  |  ------------------
  ------------------
 4120|  11.9k|            m_kind = float_kind::hex_with_prefix;
 4121|  11.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4122|  11.9k|        }
 4123|       |
 4124|   233k|        m_kind = float_kind::generic;
 4125|   233k|        return read_regular(range);
 4126|   245k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|   352k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   352k|                    auto res = read_all(rr);
 3809|   352k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 708, False: 351k]
  |  |  ------------------
  ------------------
 3810|    708|                        return detail::unexpected_scan_error(
 3811|    708|                            scan_error::invalid_scanned_value,
 3812|    708|                            "Invalid float value");
 3813|    708|                    }
 3814|   351k|                    return res;
 3815|   352k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   352k|{
 1938|   352k|    return ranges::next(range.begin(), range.end());
 1939|   352k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   352k|    {
  313|   352k|        ranges::advance(x, bound);
  314|   352k|        return x;
  315|   352k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   352k|    {
  275|   352k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   352k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   352k|    {
  190|   352k|        i = std::move(bound);
  191|   352k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   491k|    {
 1676|   491k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   491k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   491k|    {
 1720|   491k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   491k|                      ranges::sized_range<Range>) {
 1725|   491k|            m_storage.reset();
 1726|   491k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   491k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  33.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  33.7k|        {
  662|  33.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  93.7k|        : m_fptr([](storage fn,
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|  93.7k|              if constexpr (std::is_void_v<R>) {
  746|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.7k|              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
  752|  93.7k|          m_storage(std::addressof(f))
  753|  93.7k|    {
  754|  93.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.7k|        else if constexpr (std::is_object_v<T>) {
  688|  93.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  93.7k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|   445k|    {
 3747|   445k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   445k|        return read_source_impl(range);
 3753|   445k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.7k|        {
  662|  93.7k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   145k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   145k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   145k|            auto rd = make_reader<T, char_type>();
 6306|   145k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   145k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 145k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   145k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 145k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   145k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   145k|                return impl(rd, range, value);
 6311|   145k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   145k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   145k|    {
 6231|   145k|        const bool need_skipped_width =
 6232|   145k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 145k]
  |  Branch (6232:33): [True: 0, False: 145k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   145k|        auto it = rng.begin();
 6236|   145k|        std::ptrdiff_t prefix_width = 0;
 6237|   145k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 145k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   145k|        else {
 6245|   145k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.50k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.50k|    }                                                  \
  |  |  |  | 3957|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   142k|            std::tie(it, prefix_width) = prefix_result;
 6247|   142k|        }
 6248|   142k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   142k|        std::ptrdiff_t value_width = 0;
 6252|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 142k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   142k|        else {
 6268|   142k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.6k, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.6k|    }                                                  \
  |  | 3957|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   128k|                                             specs, value, loc));
 6270|       |
 6271|   128k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 128k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   128k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   128k|        std::ptrdiff_t postfix_width = 0;
 6280|   128k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 126k, False: 1.79k]
  ------------------
 6281|   126k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   126k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   126k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   126k|                                 value_width));
 6285|   126k|            std::tie(it, postfix_width) = postfix_result;
 6286|   126k|        }
 6287|       |
 6288|   128k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   128k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   128k|            specs, prefix_width, value_width, postfix_width));
 6290|   128k|        return it;
 6291|   128k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|   353k|    {
 3773|   353k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   353k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   353k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   353k|        const std::ptrdiff_t sign_len =
 3776|   353k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 85.3k, False: 268k]
  ------------------
 3777|       |
 3778|   353k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.2k, False: 342k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.2k|    }                                                  \
  |  |  |  | 3957|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   342k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   353k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   142k|    {
 4264|   142k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   142k|#if !SCN_DISABLE_LOCALE
 4267|   142k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 39.1k, False: 103k]
  ------------------
 4268|  39.1k|            return read_impl<Range>(
 4269|  39.1k|                range, rd,
 4270|  39.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  39.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  39.1k|                },
 4273|  39.1k|                value, loc);
 4274|  39.1k|        }
 4275|   103k|#endif
 4276|       |
 4277|   103k|        return read_impl<Range>(
 4278|   103k|            range, rd,
 4279|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   103k|                return r.read_source(SCN_FWD(args)...);
 4281|   103k|            },
 4282|   103k|            value);
 4283|   142k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   196k|    {
 4300|   196k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   196k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 178k]
  |  |  ------------------
  ------------------
 4302|  17.8k|            return unexpected(r.error());
 4303|  17.8k|        }
 4304|       |
 4305|   178k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.22k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.22k|    }                                                  \
  |  |  |  | 3957|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   177k|        return ranges::next(range.begin(), n);
 4307|   178k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  39.1k|        : m_fptr([](storage fn,
  743|  39.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.1k|              cvref<T> obj = *get<T>(fn);
  745|  39.1k|              if constexpr (std::is_void_v<R>) {
  746|  39.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.1k|              }
  748|  39.1k|              else {
  749|  39.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.1k|              }
  751|  39.1k|          }),
  752|  39.1k|          m_storage(std::addressof(f))
  753|  39.1k|    {
  754|  39.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  39.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.1k|              else {
  749|  39.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.1k|              }
  751|  39.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  39.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.1k|        else if constexpr (std::is_object_v<T>) {
  688|  39.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  39.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  39.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  39.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  39.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  39.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.1k|        {
  662|  39.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|   103k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   131k|    {
 4264|   131k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   131k|#if !SCN_DISABLE_LOCALE
 4267|   131k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 35.3k, False: 96.1k]
  ------------------
 4268|  35.3k|            return read_impl<Range>(
 4269|  35.3k|                range, rd,
 4270|  35.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  35.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  35.3k|                },
 4273|  35.3k|                value, loc);
 4274|  35.3k|        }
 4275|  96.1k|#endif
 4276|       |
 4277|  96.1k|        return read_impl<Range>(
 4278|  96.1k|            range, rd,
 4279|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  96.1k|                return r.read_source(SCN_FWD(args)...);
 4281|  96.1k|            },
 4282|  96.1k|            value);
 4283|   131k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   184k|    {
 4300|   184k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   184k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.75k, False: 174k]
  |  |  ------------------
  ------------------
 4302|  9.75k|            return unexpected(r.error());
 4303|  9.75k|        }
 4304|       |
 4305|   174k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.97k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.97k|    }                                                  \
  |  |  |  | 3957|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   164k|        return ranges::next(range.begin(), n);
 4307|   174k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  35.3k|        : m_fptr([](storage fn,
  743|  35.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.3k|              cvref<T> obj = *get<T>(fn);
  745|  35.3k|              if constexpr (std::is_void_v<R>) {
  746|  35.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.3k|              }
  748|  35.3k|              else {
  749|  35.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.3k|              }
  751|  35.3k|          }),
  752|  35.3k|          m_storage(std::addressof(f))
  753|  35.3k|    {
  754|  35.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  35.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.3k|              else {
  749|  35.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.3k|              }
  751|  35.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  35.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.3k|        else if constexpr (std::is_object_v<T>) {
  688|  35.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  35.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  35.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  35.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  35.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.3k|        {
  662|  35.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  96.1k|        : m_fptr([](storage fn,
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|  96.1k|              if constexpr (std::is_void_v<R>) {
  746|  96.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.1k|              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
  752|  96.1k|          m_storage(std::addressof(f))
  753|  96.1k|    {
  754|  96.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  96.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.1k|        else if constexpr (std::is_object_v<T>) {
  688|  96.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  96.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  96.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  96.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.1k|        {
  662|  96.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|   148k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   148k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   148k|            auto rd = make_reader<T, char_type>();
 6306|   148k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   148k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   148k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 148k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   148k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   148k|                return impl(rd, range, value);
 6311|   148k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   148k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   148k|    {
 6231|   148k|        const bool need_skipped_width =
 6232|   148k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 148k]
  |  Branch (6232:33): [True: 0, False: 148k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   148k|        auto it = rng.begin();
 6236|   148k|        std::ptrdiff_t prefix_width = 0;
 6237|   148k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 148k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   148k|        else {
 6245|   148k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.71k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.71k|    }                                                  \
  |  |  |  | 3957|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   145k|            std::tie(it, prefix_width) = prefix_result;
 6247|   145k|        }
 6248|   145k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   145k|        std::ptrdiff_t value_width = 0;
 6252|   145k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 145k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   145k|        else {
 6268|   145k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.4k, False: 131k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.4k|    }                                                  \
  |  | 3957|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   131k|                                             specs, value, loc));
 6270|       |
 6271|   131k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 131k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   131k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   131k|        std::ptrdiff_t postfix_width = 0;
 6280|   131k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 129k, False: 1.96k]
  ------------------
 6281|   129k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   129k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   129k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   129k|                                 value_width));
 6285|   129k|            std::tie(it, postfix_width) = postfix_result;
 6286|   129k|        }
 6287|       |
 6288|   131k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   131k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 131k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   131k|            specs, prefix_width, value_width, postfix_width));
 6290|   131k|        return it;
 6291|   131k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3772|   361k|    {
 3773|   361k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   361k|        const std::ptrdiff_t sign_len =
 3776|   361k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 89.6k, False: 271k]
  ------------------
 3777|       |
 3778|   361k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.79k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.79k|    }                                                  \
  |  |  |  | 3957|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   351k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   361k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   145k|    {
 4264|   145k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   145k|#if !SCN_DISABLE_LOCALE
 4267|   145k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 40.3k, False: 105k]
  ------------------
 4268|  40.3k|            return read_impl<Range>(
 4269|  40.3k|                range, rd,
 4270|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  40.3k|                },
 4273|  40.3k|                value, loc);
 4274|  40.3k|        }
 4275|   105k|#endif
 4276|       |
 4277|   105k|        return read_impl<Range>(
 4278|   105k|            range, rd,
 4279|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   105k|                return r.read_source(SCN_FWD(args)...);
 4281|   105k|            },
 4282|   105k|            value);
 4283|   145k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   200k|    {
 4300|   200k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   200k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.4k, False: 182k]
  |  |  ------------------
  ------------------
 4302|  18.4k|            return unexpected(r.error());
 4303|  18.4k|        }
 4304|       |
 4305|   182k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 333, False: 181k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    333|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    333|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    333|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    333|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    333|    }                                                  \
  |  |  |  | 3957|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   181k|        return ranges::next(range.begin(), n);
 4307|   182k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.3k|        : m_fptr([](storage fn,
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|  40.3k|              if constexpr (std::is_void_v<R>) {
  746|  40.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.3k|              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
  752|  40.3k|          m_storage(std::addressof(f))
  753|  40.3k|    {
  754|  40.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  40.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.3k|        else if constexpr (std::is_object_v<T>) {
  688|  40.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  40.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.3k|        {
  662|  40.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|   105k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   133k|    {
 4264|   133k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   133k|#if !SCN_DISABLE_LOCALE
 4267|   133k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 36.6k, False: 97.3k]
  ------------------
 4268|  36.6k|            return read_impl<Range>(
 4269|  36.6k|                range, rd,
 4270|  36.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  36.6k|                },
 4273|  36.6k|                value, loc);
 4274|  36.6k|        }
 4275|  97.3k|#endif
 4276|       |
 4277|  97.3k|        return read_impl<Range>(
 4278|  97.3k|            range, rd,
 4279|  97.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  97.3k|                return r.read_source(SCN_FWD(args)...);
 4281|  97.3k|            },
 4282|  97.3k|            value);
 4283|   133k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   188k|    {
 4300|   188k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   188k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.99k, False: 178k]
  |  |  ------------------
  ------------------
 4302|  9.99k|            return unexpected(r.error());
 4303|  9.99k|        }
 4304|       |
 4305|   178k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.46k, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.46k|    }                                                  \
  |  |  |  | 3957|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   169k|        return ranges::next(range.begin(), n);
 4307|   178k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  36.6k|        : m_fptr([](storage fn,
  743|  36.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.6k|              cvref<T> obj = *get<T>(fn);
  745|  36.6k|              if constexpr (std::is_void_v<R>) {
  746|  36.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.6k|              }
  748|  36.6k|              else {
  749|  36.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.6k|              }
  751|  36.6k|          }),
  752|  36.6k|          m_storage(std::addressof(f))
  753|  36.6k|    {
  754|  36.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  36.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.6k|              else {
  749|  36.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.6k|              }
  751|  36.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  36.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.6k|        else if constexpr (std::is_object_v<T>) {
  688|  36.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  36.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  36.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  36.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  36.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.6k|        {
  662|  36.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  97.3k|        : m_fptr([](storage fn,
  743|  97.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.3k|              cvref<T> obj = *get<T>(fn);
  745|  97.3k|              if constexpr (std::is_void_v<R>) {
  746|  97.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  97.3k|              }
  748|  97.3k|              else {
  749|  97.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.3k|              }
  751|  97.3k|          }),
  752|  97.3k|          m_storage(std::addressof(f))
  753|  97.3k|    {
  754|  97.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  97.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  97.3k|              else {
  749|  97.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.3k|              }
  751|  97.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  97.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  97.3k|        else if constexpr (std::is_object_v<T>) {
  688|  97.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  97.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  97.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  97.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  97.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  97.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  97.3k|        {
  662|  97.3k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   593k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   593k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   593k|        else {
 1055|   593k|            return r.begin().contiguous_segment();
 1056|   593k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   593k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   517k|{
 2193|   517k|    auto it = range.begin();
 2194|   904k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 896k, False: 7.82k]
  ------------------
 2195|   896k|        const auto val =
 2196|   896k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   896k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   896k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 890k, False: 6.69k]
  |  |  ------------------
  ------------------
 2198|   890k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   890k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   890k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 509k, False: 380k]
  ------------------
 2201|   509k|                return it;
 2202|   509k|            }
 2203|   890k|        }
 2204|   387k|        it = val.iterator;
 2205|   387k|    }
 2206|       |
 2207|  7.82k|    return it;
 2208|   517k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   896k|{
 1998|   896k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   896k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   896k|    auto it = range.begin();
 2002|   896k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   896k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.69k, False: 890k]
  |  |  ------------------
  ------------------
 2005|  6.69k|        ++it;
 2006|  6.69k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  6.69k|        return {it, {}};
 2008|  6.69k|    }
 2009|       |
 2010|   890k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 879k, False: 10.6k]
  ------------------
 2011|   879k|        ++it;
 2012|   879k|        return {it, string_type(1, *range.begin())};
 2013|   879k|    }
 2014|       |
 2015|  10.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  10.6k|    return {it, string_type{range.begin(), it}};
 2017|   890k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  6.69k|{
 1265|  6.69k|    auto it = input.begin();
 1266|  34.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 33.5k, False: 1.04k]
  ------------------
 1267|  33.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.64k, False: 27.9k]
  ------------------
 1268|  5.64k|            break;
 1269|  5.64k|        }
 1270|  33.5k|    }
 1271|  6.69k|    return it;
 1272|  6.69k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  10.6k|    {
  283|  10.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  10.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  10.6k|    {
  252|  10.6k|        constexpr iter_difference_t<I> zero{0};
  253|  10.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|  32.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 22.8k, False: 9.92k]
  |  Branch (255:30): [True: 22.1k, False: 717]
  ------------------
  256|  22.1k|            ++i;
  257|  22.1k|            ++counter;
  258|  22.1k|        }
  259|       |
  260|  10.6k|        return counter;
  261|  10.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   896k|    {
 1989|   896k|        return !codepoint.empty();
 1990|   896k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   517k|{
 2214|   517k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   517k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   593k|{
 3098|   593k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 593k, False: 0]
  ------------------
 3099|   593k|        auto it = read_while_classic_space(range);
 3100|   593k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   593k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.82k, False: 585k]
  |  |  ------------------
  ------------------
 3102|  7.82k|            return unexpected(e);
 3103|  7.82k|        }
 3104|       |
 3105|   585k|        return it;
 3106|   593k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   593k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   593k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   593k|    else {
 2258|   593k|        auto it = range.begin();
 2259|       |
 2260|   593k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   593k|            auto seg = get_contiguous_beginning(range);
 2262|   593k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   593k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 76.0k, False: 517k]
  ------------------
 2264|  76.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  76.0k|            }
 2266|   517k|            ranges::advance(it, seg.size());
 2267|   517k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   593k|            return detail::is_cp_space(cp);
 2271|   593k|        });
 2272|   593k|    }
 2273|   593k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   517k|        : m_fptr([](storage fn,
  743|   517k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   517k|              cvref<T> obj = *get<T>(fn);
  745|   517k|              if constexpr (std::is_void_v<R>) {
  746|   517k|                  obj(static_cast<decltype(args)>(args)...);
  747|   517k|              }
  748|   517k|              else {
  749|   517k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   517k|              }
  751|   517k|          }),
  752|   517k|          m_storage(std::addressof(f))
  753|   517k|    {
  754|   517k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   890k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   890k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   890k|              else {
  749|   890k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   890k|              }
  751|   890k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   890k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   890k|        else if constexpr (std::is_object_v<T>) {
  688|   890k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   890k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   890k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   890k|            return detail::is_cp_space(cp);
 2271|   890k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   517k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   517k|        {
  662|   517k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   502k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   502k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   502k|        auto beg = r.begin();
  991|   502k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 502k, False: 0]
  ------------------
  992|   502k|            return false;
  993|   502k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   502k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.31M|{
 1956|  1.31M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.31M|    else {
 1967|  1.31M|        auto it = range.begin();
 1968|  1.31M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 790k, False: 529k]
  ------------------
 1969|   790k|            return ranges::next(it, count);
 1970|   790k|        }
 1971|       |
 1972|  2.02M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.55M, False: 475k]
  ------------------
 1973|  1.55M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 54.0k, False: 1.50M]
  ------------------
 1974|  54.0k|                return unexpected(eof_error::eof);
 1975|  54.0k|            }
 1976|  1.55M|        }
 1977|       |
 1978|   475k|        return it;
 1979|   529k|    }
 1980|  1.31M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.31M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.31M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.31M|        else {
 1107|  1.31M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.31M, False: 0]
  ------------------
 1108|  1.31M|                return static_cast<size_t>(
 1109|  1.31M|                    r.begin().parent()->chars_available() -
 1110|  1.31M|                    r.begin().position());
 1111|  1.31M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.31M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.31M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  3.68M|    {
  763|  3.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  3.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.68M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.18M|        : m_fptr([](storage fn,
  743|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18M|              cvref<T> obj = *get<T>(fn);
  745|  1.18M|              if constexpr (std::is_void_v<R>) {
  746|  1.18M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.18M|              }
  748|  1.18M|              else {
  749|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18M|              }
  751|  1.18M|          }),
  752|  1.18M|          m_storage(std::addressof(f))
  753|  1.18M|    {
  754|  1.18M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.84M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.84M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.84M|              else {
  749|  1.84M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.84M|              }
  751|  1.84M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.84M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.84M|        else if constexpr (std::is_object_v<T>) {
  688|  1.84M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.84M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.18M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.18M|        {
  662|  1.18M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   366k|    {
 6144|   366k|        const bool need_skipped_width =
 6145|   366k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 366k]
  |  Branch (6145:33): [True: 0, False: 366k]
  ------------------
 6146|   366k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   366k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 366k]
  ------------------
 6150|   366k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 366k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   366k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 366k, False: 0]
  |  Branch (6154:56): [True: 366k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   366k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 366k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   730k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.90k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.90k|    }                                                  \
  |  |  |  | 3957|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   730k|                            make_eof_scan_error));
 6165|       |
 6166|   730k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 364k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   364k|            return result_type{it, 0};
 6174|   730k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   366k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|   888k|{
 2108|   888k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   888k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   888k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|   888k|    else {
 2079|   888k|        auto first = range.begin();
 2080|  1.38M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.38M, False: 3.29k]
  ------------------
 2081|  1.38M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 884k, False: 496k]
  ------------------
 2082|   884k|                return first;
 2083|   884k|            }
 2084|  1.38M|        }
 2085|  3.29k|        return first;
 2086|   888k|    }
 2087|   888k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   642k|    {
  108|   642k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   642k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   642k|    {
   94|   642k|        iter_difference_t<I> counter{0};
   95|  1.73M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.08M, False: 642k]
  ------------------
   96|  1.08M|            ++i;
   97|  1.08M|            ++counter;
   98|  1.08M|        }
   99|   642k|        return counter;
  100|   642k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   179k|    {
 1879|   179k|        auto stdloc = loc.get<std::locale>();
 1880|   179k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   179k|        grouping = numpunct.grouping();
 1882|   179k|        thousands_sep =
 1883|   179k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 179k]
  ------------------
 1884|   179k|        decimal_point = numpunct.decimal_point();
 1885|   179k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   179k|{
 1816|   179k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 179k, False: 0]
  ------------------
 1817|   179k|        return std::use_facet<Facet>(stdloc);
 1818|   179k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   179k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.21M|{
 1945|  1.21M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.13k, False: 1.20M]
  |  |  ------------------
  ------------------
 1946|  2.13k|        return unexpected(e);
 1947|  2.13k|    }
 1948|       |
 1949|  1.20M|    return ranges::next(range.begin());
 1950|  1.21M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.84M|{
  951|  1.84M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.03k, False: 1.84M]
  |  |  ------------------
  ------------------
  952|  6.03k|        return eof_error::eof;
  953|  6.03k|    }
  954|  1.84M|    return eof_error::good;
  955|  1.84M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  2.72M|{
  945|  2.72M|    return is_range_eof(r.begin(), r.end());
  946|  2.72M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  2.72M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.72M|    {
  938|  2.72M|        return begin == end;
  939|  2.72M|    }
  940|  2.72M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.20M|    {
  296|  1.20M|        ++x;
  297|  1.20M|        return x;
  298|  1.20M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   513k|{
 3290|   513k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   513k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 507k, False: 5.90k]
  ------------------
 3292|   507k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 507k, False: 72]
  ------------------
 3293|   507k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   507k|        }
 3295|     72|        return unexpected(eof_error::eof);
 3296|   507k|    }
 3297|       |
 3298|  5.90k|    auto& it = *r;
 3299|  5.90k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 4.45k, False: 1.45k]
  ------------------
 3300|  4.45k|        return std::pair{it, sign_type::minus_sign};
 3301|  4.45k|    }
 3302|  1.45k|    return std::pair{it, sign_type::plus_sign};
 3303|  5.90k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|   837k|{
 2405|   837k|    auto it = read_code_unit(range);
 2406|   837k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   837k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.22k, False: 835k]
  |  |  ------------------
  ------------------
 2407|  1.22k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.22k|    }
 2409|       |
 2410|  1.67M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.67M, False: 814k]
  ------------------
 2411|  1.67M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 21.0k, False: 1.64M]
  ------------------
 2412|  21.0k|            return *it;
 2413|  21.0k|        }
 2414|  1.67M|    }
 2415|       |
 2416|   814k|    return unexpected(parse_error::error);
 2417|   835k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.31M|{
 2364|  1.31M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.31M|    else {
 2377|  1.31M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.31M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.31M|                return ch;
 2380|  1.31M|            }
 2381|  1.31M|            return static_cast<char_type>(ch +
 2382|  1.31M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.31M|        };
 2384|       |
 2385|  1.31M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.31M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.31M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.31M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.0k, False: 1.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.0k|    }                                                  \
  |  |  |  | 3957|  1.31M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.26M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.26M, False: 674]
  |  |  ------------------
  ------------------
 2390|  1.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.26M|                    return ascii_tolower(a) ==
 2392|  1.26M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.26M|                }))) {
 2394|  1.26M|            return unexpected(parse_error::error);
 2395|  1.26M|        }
 2396|       |
 2397|    674|        return it;
 2398|  1.26M|    }
 2399|  1.31M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.48M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.48M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.19M, False: 291k]
  |  Branch (2378:29): [True: 277k, False: 14.4k]
  ------------------
 2379|  1.47M|                return ch;
 2380|  1.47M|            }
 2381|  14.4k|            return static_cast<char_type>(ch +
 2382|  14.4k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.48M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   374k|{
 2279|   374k|    auto it = read_code_unit(range);
 2280|   374k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 906, False: 373k]
  |  |  ------------------
  ------------------
 2281|    906|        return unexpected(make_eof_parse_error(it.error()));
 2282|    906|    }
 2283|       |
 2284|   373k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 367k, False: 5.64k]
  |  |  ------------------
  ------------------
 2285|   373k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   367k|        return unexpected(parse_error::error);
 2287|   367k|    }
 2288|       |
 2289|  5.64k|    return *it;
 2290|   373k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|   888k|{
 2128|   888k|    auto it = read_while_code_unit(range, pred);
 2129|   888k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 495k, False: 393k]
  ------------------
 2130|   495k|        return unexpected(parse_error::error);
 2131|   495k|    }
 2132|   393k|    return it;
 2133|   888k|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   371k|    {
 1720|   371k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   371k|                           ranges::common_range<Range>) {
 1737|   371k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   371k|            auto end_seg = range.end().contiguous_segment();
 1739|   371k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.4k, False: 352k]
  |  |  ------------------
  ------------------
 1740|   371k|                             detail::to_address(end_seg.end()))) {
 1741|  18.4k|                auto& str = m_storage.emplace();
 1742|  18.4k|                str.reserve(range.end().position() - range.begin().position());
 1743|  18.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  18.4k|                m_view = string_view_type{str};
 1745|  18.4k|                return;
 1746|  18.4k|            }
 1747|       |
 1748|   352k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   352k|                                                            end_seg.data());
 1750|   352k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   371k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.22M|    {
 1681|  3.22M|        return m_view;
 1682|  3.22M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  1.99M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   262k|    {
 6186|   262k|        const bool need_skipped_width =
 6187|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 262k]
  |  Branch (6187:33): [True: 0, False: 262k]
  ------------------
 6188|   262k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   262k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 262k]
  ------------------
 6191|   262k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 262k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   262k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 262k, False: 0]
  ------------------
 6200|   262k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 262k]
  ------------------
 6201|   262k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   262k|        return result_type{rng.begin(), 0};
 6225|   262k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.32M|{
 1956|  1.32M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.32M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.32M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.32M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 54.1k, False: 1.26M]
  ------------------
 1961|  54.1k|            return unexpected(eof_error::eof);
 1962|  54.1k|        }
 1963|       |
 1964|  1.26M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.32M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  2.15M|{
 1998|  2.15M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.15M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.15M|    auto it = range.begin();
 2002|  2.15M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.15M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.15M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.15M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.15M, False: 0]
  ------------------
 2011|  2.15M|        ++it;
 2012|  2.15M|        return {it, string_type(1, *range.begin())};
 2013|  2.15M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.15M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.48M|{
  945|  3.48M|    return is_range_eof(r.begin(), r.end());
  946|  3.48M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.48M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.48M|    {
  938|  3.48M|        return begin == end;
  939|  3.48M|    }
  940|  3.48M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   322k|    {
  190|   322k|        i = std::move(bound);
  191|   322k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  2.15M|    {
 1989|  2.15M|        return !codepoint.empty();
 1990|  2.15M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.33M|{
  951|  1.33M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.40k, False: 1.32M]
  |  |  ------------------
  ------------------
  952|  4.40k|        return eof_error::eof;
  953|  4.40k|    }
  954|  1.32M|    return eof_error::good;
  955|  1.33M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   692k|{
 1945|   692k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 500, False: 692k]
  |  |  ------------------
  ------------------
 1946|    500|        return unexpected(e);
 1947|    500|    }
 1948|       |
 1949|   692k|    return ranges::next(range.begin());
 1950|   692k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   692k|    {
  296|   692k|        ++x;
  297|   692k|        return x;
  298|   692k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   504k|{
 3290|   504k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   504k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 500k, False: 3.93k]
  ------------------
 3292|   500k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 500k, False: 24]
  ------------------
 3293|   500k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   500k|        }
 3295|     24|        return unexpected(eof_error::eof);
 3296|   500k|    }
 3297|       |
 3298|  3.93k|    auto& it = *r;
 3299|  3.93k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 2.68k, False: 1.25k]
  ------------------
 3300|  2.68k|        return std::pair{it, sign_type::minus_sign};
 3301|  2.68k|    }
 3302|  1.25k|    return std::pair{it, sign_type::plus_sign};
 3303|  3.93k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   572k|{
 2405|   572k|    auto it = read_code_unit(range);
 2406|   572k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   572k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 266, False: 572k]
  |  |  ------------------
  ------------------
 2407|    266|        return unexpected(make_eof_parse_error(it.error()));
 2408|    266|    }
 2409|       |
 2410|  1.14M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.14M, False: 563k]
  ------------------
 2411|  1.14M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 9.51k, False: 1.13M]
  ------------------
 2412|  9.51k|            return *it;
 2413|  9.51k|        }
 2414|  1.14M|    }
 2415|       |
 2416|   563k|    return unexpected(parse_error::error);
 2417|   572k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.32M|{
 2364|  1.32M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.32M|    else {
 2377|  1.32M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.32M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.32M|                return ch;
 2380|  1.32M|            }
 2381|  1.32M|            return static_cast<char_type>(ch +
 2382|  1.32M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.32M|        };
 2384|       |
 2385|  1.32M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.1k, False: 1.26M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.1k|    }                                                  \
  |  |  |  | 3957|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.26M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.26M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.26M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.26M, False: 674]
  |  |  ------------------
  ------------------
 2390|  1.26M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.26M|                    return ascii_tolower(a) ==
 2392|  1.26M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.26M|                }))) {
 2394|  1.26M|            return unexpected(parse_error::error);
 2395|  1.26M|        }
 2396|       |
 2397|    674|        return it;
 2398|  1.26M|    }
 2399|  1.32M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.48M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.48M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.19M, False: 292k]
  |  Branch (2378:29): [True: 277k, False: 14.5k]
  ------------------
 2379|  1.47M|                return ch;
 2380|  1.47M|            }
 2381|  14.5k|            return static_cast<char_type>(ch +
 2382|  14.5k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.48M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   119k|{
 2279|   119k|    auto it = read_code_unit(range);
 2280|   119k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 234, False: 119k]
  |  |  ------------------
  ------------------
 2281|    234|        return unexpected(make_eof_parse_error(it.error()));
 2282|    234|    }
 2283|       |
 2284|   119k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 117k, False: 2.11k]
  |  |  ------------------
  ------------------
 2285|   119k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   117k|        return unexpected(parse_error::error);
 2287|   117k|    }
 2288|       |
 2289|  2.11k|    return *it;
 2290|   119k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   301k|{
 2108|   301k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   301k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   301k|{
 2075|   301k|    if constexpr (ranges::common_range<Range>) {
 2076|   301k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   301k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   502k|{
 3098|   502k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 502k, False: 0]
  ------------------
 3099|   502k|        auto it = read_while_classic_space(range);
 3100|   502k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   502k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.42k, False: 498k]
  |  |  ------------------
  ------------------
 3102|  3.42k|            return unexpected(e);
 3103|  3.42k|        }
 3104|       |
 3105|   498k|        return it;
 3106|   502k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   502k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   502k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   502k|    else {
 2258|   502k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   502k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   502k|            return detail::is_cp_space(cp);
 2271|   502k|        });
 2272|   502k|    }
 2273|   502k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|   502k|{
 2214|   502k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   502k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  1.22M|{
 2193|  1.22M|    auto it = range.begin();
 2194|  2.63M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.15M, False: 480k]
  ------------------
 2195|  2.15M|        const auto val =
 2196|  2.15M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.15M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.15M, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.15M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.15M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.15M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 745k, False: 1.40M]
  ------------------
 2201|   745k|                return it;
 2202|   745k|            }
 2203|  2.15M|        }
 2204|  1.40M|        it = val.iterator;
 2205|  1.40M|    }
 2206|       |
 2207|   480k|    return it;
 2208|  1.22M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   502k|        : m_fptr([](storage fn,
  743|   502k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   502k|              cvref<T> obj = *get<T>(fn);
  745|   502k|              if constexpr (std::is_void_v<R>) {
  746|   502k|                  obj(static_cast<decltype(args)>(args)...);
  747|   502k|              }
  748|   502k|              else {
  749|   502k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   502k|              }
  751|   502k|          }),
  752|   502k|          m_storage(std::addressof(f))
  753|   502k|    {
  754|   502k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   879k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   879k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   879k|              else {
  749|   879k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   879k|              }
  751|   879k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   879k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   879k|        else if constexpr (std::is_object_v<T>) {
  688|   879k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   879k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   879k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   879k|            return detail::is_cp_space(cp);
 2271|   879k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   502k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   502k|        {
  662|   502k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.15M|    {
  304|  1.15M|        ranges::advance(x, n);
  305|  1.15M|        return x;
  306|  1.15M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.15M|    {
  268|  1.15M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.15M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.15M|    {
  181|  3.71M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.55M, False: 1.15M]
  ------------------
  182|  2.55M|            ++i;
  183|  2.55M|        }
  184|  1.15M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   115k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   115k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   115k|            auto rd = make_reader<T, char_type>();
 6306|   115k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   115k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   115k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 115k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   115k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   115k|                return impl(rd, range, value);
 6311|   115k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   115k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   734k|    {
 3188|   734k|        reader_error_handler eh{};
 3189|   734k|        get_derived().check_specs_impl(specs, eh);
 3190|   734k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 734k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   734k|        return {};
 3195|   734k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|   734k|    {
 3200|   734k|        return static_cast<Derived&>(*this);
 3201|   734k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|   734k|    {
 4239|   734k|        detail::check_float_type_specs(specs, eh);
 4240|   734k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   115k|    {
 6231|   115k|        const bool need_skipped_width =
 6232|   115k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 115k]
  |  Branch (6232:33): [True: 0, False: 115k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   115k|        auto it = rng.begin();
 6236|   115k|        std::ptrdiff_t prefix_width = 0;
 6237|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 115k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   115k|        else {
 6245|   115k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 900, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    900|    }                                                  \
  |  |  |  | 3957|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   114k|            std::tie(it, prefix_width) = prefix_result;
 6247|   114k|        }
 6248|   114k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   114k|        std::ptrdiff_t value_width = 0;
 6252|   114k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 114k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   114k|        else {
 6268|   114k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.5k, False: 81.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.5k|    }                                                  \
  |  | 3957|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  81.3k|                                             specs, value, loc));
 6270|       |
 6271|  81.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 81.3k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  81.3k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  81.3k|        std::ptrdiff_t postfix_width = 0;
 6280|  81.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 80.9k, False: 396]
  ------------------
 6281|  80.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  80.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  80.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  80.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 80.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  80.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  80.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  80.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  80.9k|                                 value_width));
 6285|  80.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  80.9k|        }
 6287|       |
 6288|  81.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  81.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  81.3k|            specs, prefix_width, value_width, postfix_width));
 6290|  81.3k|        return it;
 6291|  81.3k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.53M|    {
 3183|  1.53M|        return true;
 3184|  1.53M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4310|   728k|    {
 4311|   728k|        unsigned options{};
 4312|   728k|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 179k, False: 548k]
  ------------------
 4313|   179k|            options |= float_reader_base::allow_thsep;
 4314|   179k|        }
 4315|       |
 4316|   728k|        SCN_GCC_COMPAT_PUSH
 4317|   728k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|   728k|        switch (specs.type) {
 4320|   142k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 142k, False: 585k]
  ------------------
 4321|   142k|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|  43.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 43.9k, False: 684k]
  ------------------
 4324|  43.9k|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|   196k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 196k, False: 531k]
  ------------------
 4327|   196k|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|   165k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 165k, False: 562k]
  ------------------
 4330|   165k|                return options | float_reader_base::allow_scientific |
 4331|   165k|                       float_reader_base::allow_fixed;
 4332|       |
 4333|   179k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 179k, False: 548k]
  ------------------
 4334|   179k|                return options | float_reader_base::allow_scientific |
 4335|   179k|                       float_reader_base::allow_fixed |
 4336|   179k|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 728k]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|   728k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|   728k|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|   728k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3741|   728k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|   997k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  1.99M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3772|   248k|    {
 3773|   248k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   248k|        const std::ptrdiff_t sign_len =
 3776|   248k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.79k, False: 246k]
  ------------------
 3777|       |
 3778|   248k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   248k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 25.4k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  25.4k|    }                                                  \
  |  |  |  | 3957|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   222k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   248k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4129|   809k|    {
 4130|   809k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 809k, False: 0]
  ------------------
 4131|   809k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 809k, False: 0]
  ------------------
 4132|   809k|            return;
 4133|   809k|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.64M|    {
 1686|  1.64M|        return m_storage.has_value();
 1687|  1.64M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   899k|    {
 1691|   899k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   899k|        return *m_storage;
 1693|   899k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   114k|    {
 4264|   114k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   114k|#if !SCN_DISABLE_LOCALE
 4267|   114k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 26.6k, False: 88.1k]
  ------------------
 4268|  26.6k|            return read_impl<Range>(
 4269|  26.6k|                range, rd,
 4270|  26.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  26.6k|                },
 4273|  26.6k|                value, loc);
 4274|  26.6k|        }
 4275|  88.1k|#endif
 4276|       |
 4277|  88.1k|        return read_impl<Range>(
 4278|  88.1k|            range, rd,
 4279|  88.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  88.1k|                return r.read_source(SCN_FWD(args)...);
 4281|  88.1k|            },
 4282|  88.1k|            value);
 4283|   114k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   154k|    {
 4300|   154k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   154k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 41.8k, False: 112k]
  |  |  ------------------
  ------------------
 4302|  41.8k|            return unexpected(r.error());
 4303|  41.8k|        }
 4304|       |
 4305|   112k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.67k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.67k|    }                                                  \
  |  |  |  | 3957|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   111k|        return ranges::next(range.begin(), n);
 4307|   112k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   498k|    {
  763|   498k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   498k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  26.6k|        : m_fptr([](storage fn,
  743|  26.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.6k|              cvref<T> obj = *get<T>(fn);
  745|  26.6k|              if constexpr (std::is_void_v<R>) {
  746|  26.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.6k|              }
  748|  26.6k|              else {
  749|  26.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.6k|              }
  751|  26.6k|          }),
  752|  26.6k|          m_storage(std::addressof(f))
  753|  26.6k|    {
  754|  26.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  26.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  26.6k|              else {
  749|  26.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.6k|              }
  751|  26.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  26.6k|        else if constexpr (std::is_object_v<T>) {
  688|  26.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  26.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  26.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  26.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  26.6k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3760|  89.7k|    {
 3761|  89.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|  89.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  89.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|  89.7k|        return read_source_impl(range);
 3767|  89.7k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3786|   498k|    {
 3787|   498k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 498k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   498k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   498k|        auto it = sign_result.first;
 3790|   498k|        m_sign = sign_result.second;
 3791|       |
 3792|   498k|        auto digits_begin = it;
 3793|   498k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|   498k|        else {
 3820|   498k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 127k, False: 371k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|   127k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|   127k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   127k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   127k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|   127k|    }                                                  \
  |  | 3957|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|   371k|                it,
 3822|   371k|                do_read_source_impl(
 3823|   371k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|   371k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|   371k|        }
 3826|       |
 3827|   498k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   371k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 371k, False: 0]
  |  Branch (3829:48): [True: 371k, False: 0]
  ------------------
 3830|   371k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 371k, False: 0]
  ------------------
 3831|   371k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 371k, False: 0]
  ------------------
 3832|   371k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   371k|        }
 3834|       |
 3835|   371k|        handle_separators();
 3836|       |
 3837|   371k|        return it;
 3838|   498k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4072|   498k|    {
 4073|   498k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   498k|        const bool allowed_nonhex =
 4075|   498k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   498k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   498k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 498k, False: 0]
  |  Branch (4078:45): [True: 0, False: 498k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   498k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 498k]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|   498k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 498k, False: 0]
  |  Branch (4087:45): [True: 0, False: 498k]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|   498k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 498k]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|   498k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 322k, False: 176k]
  |  Branch (4094:28): [True: 98.2k, False: 224k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|  98.2k|            auto it = range.begin();
 4098|       |
 4099|  98.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 204, False: 98.0k]
  ------------------
 4100|    204|                m_kind = float_kind::hex_with_prefix;
 4101|    204|                it = *r;
 4102|    204|            }
 4103|  98.0k|            else {
 4104|  98.0k|                m_kind = float_kind::hex_without_prefix;
 4105|  98.0k|            }
 4106|       |
 4107|  98.2k|            return read_hex(ranges::subrange{it, range.end()});
 4108|  98.2k|        }
 4109|   400k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 176k, False: 224k]
  |  Branch (4109:29): [True: 176k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   176k|            m_kind = float_kind::generic;
 4113|   176k|            return read_regular_float(range);
 4114|   176k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   224k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 470, False: 223k]
  |  |  ------------------
  ------------------
 4120|    470|            m_kind = float_kind::hex_with_prefix;
 4121|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4122|    470|        }
 4123|       |
 4124|   223k|        m_kind = float_kind::generic;
 4125|   223k|        return read_regular(range);
 4126|   224k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3880|   498k|    {
 3881|   498k|        auto it = range.begin();
 3882|   498k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 498k, False: 0]
  ------------------
 3883|   498k|            return unexpected(r.error());
 3884|   498k|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   498k|    {
 3904|   498k|        auto it = range.begin();
 3905|   498k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 498k, False: 0]
  ------------------
 3906|   498k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   498k|                scan_error::invalid_scanned_value,
 3908|   498k|                "Invalid floating-point NaN value"));
 3909|   498k|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3873|   322k|    {
 3874|   322k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   322k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3974|  98.7k|    {
 3975|  98.7k|        auto it = range.begin();
 3976|       |
 3977|  98.7k|        std::ptrdiff_t digits_count = 0;
 3978|  98.7k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|  98.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.6k, False: 79.0k]
  |  |  ------------------
  ------------------
 3980|  19.6k|            return r.transform_error(map_parse_error_to_scan_error(
 3981|  19.6k|                scan_error::invalid_scanned_value,
 3982|  19.6k|                "Invalid hexadecimal floating-point value"));
 3983|  19.6k|        }
 3984|  79.0k|        else {
 3985|  79.0k|            digits_count += ranges::distance(it, *r);
 3986|  79.0k|            it = *r;
 3987|  79.0k|        }
 3988|       |
 3989|  79.0k|        m_integral_part_length = digits_count;
 3990|  79.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 1.03k, False: 78.0k]
  ------------------
 3991|  79.0k|                                             m_locale_options.decimal_point)) {
 3992|  1.03k|            it = *r;
 3993|  1.03k|        }
 3994|       |
 3995|  79.0k|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 862, False: 78.2k]
  ------------------
 3996|  79.0k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|    862|            digits_count += ranges::distance(it, *r);
 3998|    862|            it = *r;
 3999|    862|        }
 4000|       |
 4001|  79.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|  79.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.0k]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|  79.0k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|  79.0k|        return it;
 4010|  79.0k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3858|   177k|    {
 3859|   177k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 177k]
  |  |  |  Branch (1039:45): [True: 0, False: 177k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|   177k|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|   177k|        return read_while1_code_unit(
 3868|   177k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|   177k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   177k|        : m_fptr([](storage fn,
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
  752|   177k|          m_storage(std::addressof(f))
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   283k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   283k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   283k|              else {
  749|   283k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   283k|              }
  751|   283k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   283k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   283k|        else if constexpr (std::is_object_v<T>) {
  688|   283k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   283k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3868|   283k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   177k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3946|   323k|    {
 3947|   323k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 15.1k, False: 308k]
  ------------------
 3948|  15.1k|            auto beg_exp_it = range.begin();
 3949|  15.1k|            auto it = *r;
 3950|       |
 3951|  15.1k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 15.1k, False: 72]
  ------------------
 3952|  15.1k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  15.1k|                it = r_sign->first;
 3954|  15.1k|            }
 3955|       |
 3956|  15.1k|            if (auto r_exp = read_while1_code_unit(
 3957|  15.1k|                    ranges::subrange{it, range.end()},
 3958|  15.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  15.1k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  15.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.23k, False: 13.9k]
  |  |  ------------------
  ------------------
 3960|  1.23k|                it = beg_exp_it;
 3961|  1.23k|            }
 3962|  13.9k|            else {
 3963|  13.9k|                it = *r_exp;
 3964|  13.9k|            }
 3965|       |
 3966|  15.1k|            return it;
 3967|  15.1k|        }
 3968|   308k|        return range.begin();
 3969|   323k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  15.1k|        : m_fptr([](storage fn,
  743|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.1k|              cvref<T> obj = *get<T>(fn);
  745|  15.1k|              if constexpr (std::is_void_v<R>) {
  746|  15.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.1k|              }
  748|  15.1k|              else {
  749|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.1k|              }
  751|  15.1k|          }),
  752|  15.1k|          m_storage(std::addressof(f))
  753|  15.1k|    {
  754|  15.1k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  44.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.4k|              else {
  749|  44.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.4k|              }
  751|  44.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  44.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.4k|        else if constexpr (std::is_object_v<T>) {
  688|  44.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.4k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3958|  44.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  15.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  15.1k|        {
  662|  15.1k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4015|   399k|    {
 4016|   399k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   399k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 328k, False: 71.3k]
  |  Branch (4017:50): [True: 21.9k, False: 306k]
  ------------------
 4018|       |
 4019|   399k|        auto it = ranges::begin(range);
 4020|   399k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   399k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   399k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 104k, False: 295k]
  |  |  ------------------
  ------------------
 4024|   104k|            return r.transform_error(
 4025|   104k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|   104k|                                              "Invalid floating-point value"));
 4027|   104k|        }
 4028|   295k|        else {
 4029|   295k|            digits_count += ranges::distance(it, *r);
 4030|   295k|            it = *r;
 4031|   295k|        }
 4032|       |
 4033|   295k|        m_integral_part_length = digits_count;
 4034|   295k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 4.60k, False: 290k]
  ------------------
 4035|   295k|                                             m_locale_options.decimal_point)) {
 4036|  4.60k|            it = *r;
 4037|  4.60k|        }
 4038|       |
 4039|   295k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 3.79k, False: 291k]
  ------------------
 4040|   295k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  3.79k|            digits_count += ranges::distance(it, *r);
 4042|  3.79k|            it = *r;
 4043|  3.79k|        }
 4044|       |
 4045|   295k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   295k|        auto beg_exp_it = it;
 4052|   295k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 244k, False: 51.1k]
  ------------------
 4053|   244k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|   244k|        }
 4055|   295k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 5.07k, False: 290k]
  |  Branch (4055:29): [True: 3.41k, False: 1.66k]
  ------------------
 4056|  3.41k|            return detail::unexpected_scan_error(
 4057|  3.41k|                scan_error::invalid_scanned_value,
 4058|  3.41k|                "No exponent given to scientific float");
 4059|  3.41k|        }
 4060|       |
 4061|   291k|        m_kind =
 4062|   291k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 278k, False: 13.7k]
  ------------------
 4063|       |
 4064|   291k|        return it;
 4065|   295k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3843|   695k|    {
 3844|   695k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 695k]
  |  |  |  Branch (1039:45): [True: 0, False: 695k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   695k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   695k|        return read_while1_code_unit(
 3853|   695k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   695k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   695k|        : m_fptr([](storage fn,
  743|   695k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   695k|              cvref<T> obj = *get<T>(fn);
  745|   695k|              if constexpr (std::is_void_v<R>) {
  746|   695k|                  obj(static_cast<decltype(args)>(args)...);
  747|   695k|              }
  748|   695k|              else {
  749|   695k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   695k|              }
  751|   695k|          }),
  752|   695k|          m_storage(std::addressof(f))
  753|   695k|    {
  754|   695k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.05M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.05M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.05M|              else {
  749|  1.05M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.05M|              }
  751|  1.05M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.05M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.05M|        else if constexpr (std::is_object_v<T>) {
  688|  1.05M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.05M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3853|  1.05M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   695k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   695k|        {
  662|   695k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   371k|    {
 1676|   371k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   371k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  26.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.6k|        {
  662|  26.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  88.1k|        : m_fptr([](storage fn,
  743|  88.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.1k|              cvref<T> obj = *get<T>(fn);
  745|  88.1k|              if constexpr (std::is_void_v<R>) {
  746|  88.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.1k|              }
  748|  88.1k|              else {
  749|  88.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.1k|              }
  751|  88.1k|          }),
  752|  88.1k|          m_storage(std::addressof(f))
  753|  88.1k|    {
  754|  88.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  88.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.1k|              else {
  749|  88.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.1k|              }
  751|  88.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  88.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.1k|        else if constexpr (std::is_object_v<T>) {
  688|  88.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  88.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  88.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  88.1k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3746|   408k|    {
 3747|   408k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   408k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 408k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   408k|        return read_source_impl(range);
 3753|   408k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  88.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.1k|        {
  662|  88.1k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   114k|    {
 4264|   114k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   114k|#if !SCN_DISABLE_LOCALE
 4267|   114k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 26.7k, False: 88.1k]
  ------------------
 4268|  26.7k|            return read_impl<Range>(
 4269|  26.7k|                range, rd,
 4270|  26.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  26.7k|                },
 4273|  26.7k|                value, loc);
 4274|  26.7k|        }
 4275|  88.1k|#endif
 4276|       |
 4277|  88.1k|        return read_impl<Range>(
 4278|  88.1k|            range, rd,
 4279|  88.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  88.1k|                return r.read_source(SCN_FWD(args)...);
 4281|  88.1k|            },
 4282|  88.1k|            value);
 4283|   114k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   154k|    {
 4300|   154k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   154k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.7k, False: 135k]
  |  |  ------------------
  ------------------
 4302|  19.7k|            return unexpected(r.error());
 4303|  19.7k|        }
 4304|       |
 4305|   135k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.7k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.7k|    }                                                  \
  |  |  |  | 3957|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   111k|        return ranges::next(range.begin(), n);
 4307|   135k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   498k|    {
  763|   498k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   498k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  26.7k|        : m_fptr([](storage fn,
  743|  26.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.7k|              cvref<T> obj = *get<T>(fn);
  745|  26.7k|              if constexpr (std::is_void_v<R>) {
  746|  26.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.7k|              }
  748|  26.7k|              else {
  749|  26.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.7k|              }
  751|  26.7k|          }),
  752|  26.7k|          m_storage(std::addressof(f))
  753|  26.7k|    {
  754|  26.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  26.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  26.7k|              else {
  749|  26.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.7k|              }
  751|  26.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  26.7k|        else if constexpr (std::is_object_v<T>) {
  688|  26.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  26.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  26.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  26.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  26.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  26.7k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|  89.7k|    {
 3761|  89.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|  89.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  89.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 89.7k]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|  89.7k|        return read_source_impl(range);
 3767|  89.7k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|   498k|    {
 3787|   498k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   498k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 498k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|   498k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|   498k|        auto it = sign_result.first;
 3790|   498k|        m_sign = sign_result.second;
 3791|       |
 3792|   498k|        auto digits_begin = it;
 3793|   498k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|   498k|                      ranges::sized_range<Range>) {
 3796|   498k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|   997k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 498k]
  |  |  |  Branch (1039:45): [True: 0, False: 498k]
  |  |  |  Branch (1039:45): [True: 0, False: 498k]
  |  |  ------------------
  ------------------
 3797|   498k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|   498k|            else {
 3806|   498k|                auto cb = [&](const auto& rr)
 3807|   498k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   498k|                    auto res = read_all(rr);
 3809|   498k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|   498k|                        return detail::unexpected_scan_error(
 3811|   498k|                            scan_error::invalid_scanned_value,
 3812|   498k|                            "Invalid float value");
 3813|   498k|                    }
 3814|   498k|                    return res;
 3815|   498k|                };
 3816|   498k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   498k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   498k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 59.9k, False: 438k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  59.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  59.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  59.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  59.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  59.9k|    }                                                  \
  |  | 3957|   498k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   498k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|   438k|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|   498k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   498k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   498k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|   438k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 438k, False: 0]
  |  Branch (3829:48): [True: 438k, False: 0]
  ------------------
 3830|   438k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 438k, False: 0]
  ------------------
 3831|   438k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 438k, False: 0]
  ------------------
 3832|   438k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|   438k|        }
 3834|       |
 3835|   438k|        handle_separators();
 3836|       |
 3837|   438k|        return it;
 3838|   498k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|   498k|    {
 3881|   498k|        auto it = range.begin();
 3882|   498k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 498k, False: 0]
  ------------------
 3883|   498k|            return unexpected(r.error());
 3884|   498k|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|   498k|    {
 3904|   498k|        auto it = range.begin();
 3905|   498k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 498k, False: 0]
  ------------------
 3906|   498k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|   498k|                scan_error::invalid_scanned_value,
 3908|   498k|                "Invalid floating-point NaN value"));
 3909|   498k|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|   322k|    {
 3874|   322k|        return read_matching_string_classic_nocase(range, "0x");
 3875|   322k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   301k|{
 2128|   301k|    auto it = read_while_code_unit(range, pred);
 2129|   301k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 174k, False: 126k]
  ------------------
 2130|   174k|        return unexpected(parse_error::error);
 2131|   174k|    }
 2132|   126k|    return it;
 2133|   301k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3946|  68.4k|    {
 3947|  68.4k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 5.57k, False: 62.9k]
  ------------------
 3948|  5.57k|            auto beg_exp_it = range.begin();
 3949|  5.57k|            auto it = *r;
 3950|       |
 3951|  5.57k|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 5.55k, False: 24]
  ------------------
 3952|  5.57k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|  5.55k|                it = r_sign->first;
 3954|  5.55k|            }
 3955|       |
 3956|  5.57k|            if (auto r_exp = read_while1_code_unit(
 3957|  5.57k|                    ranges::subrange{it, range.end()},
 3958|  5.57k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|  5.57k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  5.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 470, False: 5.10k]
  |  |  ------------------
  ------------------
 3960|    470|                it = beg_exp_it;
 3961|    470|            }
 3962|  5.10k|            else {
 3963|  5.10k|                it = *r_exp;
 3964|  5.10k|            }
 3965|       |
 3966|  5.57k|            return it;
 3967|  5.57k|        }
 3968|  62.9k|        return range.begin();
 3969|  68.4k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.57k|        : m_fptr([](storage fn,
  743|  5.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.57k|              cvref<T> obj = *get<T>(fn);
  745|  5.57k|              if constexpr (std::is_void_v<R>) {
  746|  5.57k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.57k|              }
  748|  5.57k|              else {
  749|  5.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.57k|              }
  751|  5.57k|          }),
  752|  5.57k|          m_storage(std::addressof(f))
  753|  5.57k|    {
  754|  5.57k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.8k|              else {
  749|  15.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.8k|              }
  751|  15.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.8k|        else if constexpr (std::is_object_v<T>) {
  688|  15.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.8k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3958|  15.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.57k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.57k|        {
  662|  5.57k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|   176k|    {
 4016|   176k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|   176k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 104k, False: 71.3k]
  |  Branch (4017:50): [True: 21.9k, False: 82.7k]
  ------------------
 4018|       |
 4019|   176k|        auto it = ranges::begin(range);
 4020|   176k|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|   176k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|   176k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 56.4k, False: 119k]
  |  |  ------------------
  ------------------
 4024|  56.4k|            return r.transform_error(
 4025|  56.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|  56.4k|                                              "Invalid floating-point value"));
 4027|  56.4k|        }
 4028|   119k|        else {
 4029|   119k|            digits_count += ranges::distance(it, *r);
 4030|   119k|            it = *r;
 4031|   119k|        }
 4032|       |
 4033|   119k|        m_integral_part_length = digits_count;
 4034|   119k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 2.11k, False: 117k]
  ------------------
 4035|   119k|                                             m_locale_options.decimal_point)) {
 4036|  2.11k|            it = *r;
 4037|  2.11k|        }
 4038|       |
 4039|   119k|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 1.72k, False: 117k]
  ------------------
 4040|   119k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|  1.72k|            digits_count += ranges::distance(it, *r);
 4042|  1.72k|            it = *r;
 4043|  1.72k|        }
 4044|       |
 4045|   119k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 119k]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|   119k|        auto beg_exp_it = it;
 4052|   119k|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 68.4k, False: 51.1k]
  ------------------
 4053|  68.4k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|  68.4k|        }
 4055|   119k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 5.07k, False: 114k]
  |  Branch (4055:29): [True: 3.41k, False: 1.66k]
  ------------------
 4056|  3.41k|            return detail::unexpected_scan_error(
 4057|  3.41k|                scan_error::invalid_scanned_value,
 4058|  3.41k|                "No exponent given to scientific float");
 4059|  3.41k|        }
 4060|       |
 4061|   116k|        m_kind =
 4062|   116k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 111k, False: 5.10k]
  ------------------
 4063|       |
 4064|   116k|        return it;
 4065|   119k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|   295k|    {
 3844|   295k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 295k]
  |  |  |  Branch (1039:45): [True: 0, False: 295k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|   295k|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|   295k|        return read_while1_code_unit(
 3853|   295k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|   295k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   295k|        : m_fptr([](storage fn,
  743|   295k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   295k|              cvref<T> obj = *get<T>(fn);
  745|   295k|              if constexpr (std::is_void_v<R>) {
  746|   295k|                  obj(static_cast<decltype(args)>(args)...);
  747|   295k|              }
  748|   295k|              else {
  749|   295k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   295k|              }
  751|   295k|          }),
  752|   295k|          m_storage(std::addressof(f))
  753|   295k|    {
  754|   295k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   444k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   444k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   444k|              else {
  749|   444k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   444k|              }
  751|   444k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   444k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   444k|        else if constexpr (std::is_object_v<T>) {
  688|   444k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   444k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3853|   444k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   295k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   295k|        {
  662|   295k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|   498k|    {
 4073|   498k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|   498k|        const bool allowed_nonhex =
 4075|   498k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|   498k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|   498k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 498k, False: 0]
  |  Branch (4078:45): [True: 0, False: 498k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|   498k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 498k]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|   498k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 498k, False: 0]
  |  Branch (4087:45): [True: 0, False: 498k]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|   498k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 498k]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|   498k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 322k, False: 176k]
  |  Branch (4094:28): [True: 98.3k, False: 224k]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|  98.3k|            auto it = range.begin();
 4098|       |
 4099|  98.3k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 204, False: 98.1k]
  ------------------
 4100|    204|                m_kind = float_kind::hex_with_prefix;
 4101|    204|                it = *r;
 4102|    204|            }
 4103|  98.1k|            else {
 4104|  98.1k|                m_kind = float_kind::hex_without_prefix;
 4105|  98.1k|            }
 4106|       |
 4107|  98.3k|            return read_hex(ranges::subrange{it, range.end()});
 4108|  98.3k|        }
 4109|   400k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 176k, False: 224k]
  |  Branch (4109:29): [True: 176k, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|   176k|            m_kind = float_kind::generic;
 4113|   176k|            return read_regular_float(range);
 4114|   176k|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|   224k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 470, False: 224k]
  |  |  ------------------
  ------------------
 4120|    470|            m_kind = float_kind::hex_with_prefix;
 4121|    470|            return read_hex(ranges::subrange{*r, range.end()});
 4122|    470|        }
 4123|       |
 4124|   224k|        m_kind = float_kind::generic;
 4125|   224k|        return read_regular(range);
 4126|   224k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|   322k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|   322k|                    auto res = read_all(rr);
 3809|   322k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 155, False: 322k]
  |  |  ------------------
  ------------------
 3810|    155|                        return detail::unexpected_scan_error(
 3811|    155|                            scan_error::invalid_scanned_value,
 3812|    155|                            "Invalid float value");
 3813|    155|                    }
 3814|   322k|                    return res;
 3815|   322k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   322k|{
 1938|   322k|    return ranges::next(range.begin(), range.end());
 1939|   322k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   322k|    {
  313|   322k|        ranges::advance(x, bound);
  314|   322k|        return x;
  315|   322k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   322k|    {
  275|   322k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   322k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   438k|    {
 1676|   438k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   438k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   438k|    {
 1720|   438k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   438k|                      ranges::sized_range<Range>) {
 1725|   438k|            m_storage.reset();
 1726|   438k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   438k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  26.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.7k|        {
  662|  26.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  88.1k|        : m_fptr([](storage fn,
  743|  88.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.1k|              cvref<T> obj = *get<T>(fn);
  745|  88.1k|              if constexpr (std::is_void_v<R>) {
  746|  88.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.1k|              }
  748|  88.1k|              else {
  749|  88.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.1k|              }
  751|  88.1k|          }),
  752|  88.1k|          m_storage(std::addressof(f))
  753|  88.1k|    {
  754|  88.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  88.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.1k|              else {
  749|  88.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.1k|              }
  751|  88.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  88.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.1k|        else if constexpr (std::is_object_v<T>) {
  688|  88.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  88.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  88.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  88.1k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|   409k|    {
 3747|   409k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|   409k|        return read_source_impl(range);
 3753|   409k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  88.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.1k|        {
  662|  88.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   124k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   124k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   124k|            auto rd = make_reader<T, char_type>();
 6306|   124k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   124k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   124k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 124k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   124k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   124k|                return impl(rd, range, value);
 6311|   124k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   124k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   124k|    {
 6231|   124k|        const bool need_skipped_width =
 6232|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 124k]
  |  Branch (6232:33): [True: 0, False: 124k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   124k|        auto it = rng.begin();
 6236|   124k|        std::ptrdiff_t prefix_width = 0;
 6237|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 124k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   124k|        else {
 6245|   124k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 974, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    974|    }                                                  \
  |  |  |  | 3957|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   123k|            std::tie(it, prefix_width) = prefix_result;
 6247|   123k|        }
 6248|   123k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   123k|        std::ptrdiff_t value_width = 0;
 6252|   123k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 123k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   123k|        else {
 6268|   123k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.4k, False: 89.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.4k|    }                                                  \
  |  | 3957|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  89.9k|                                             specs, value, loc));
 6270|       |
 6271|  89.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 89.9k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  89.9k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  89.9k|        std::ptrdiff_t postfix_width = 0;
 6280|  89.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 89.5k, False: 438]
  ------------------
 6281|  89.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 89.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  89.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  89.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  89.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  89.5k|                                 value_width));
 6285|  89.5k|            std::tie(it, postfix_width) = postfix_result;
 6286|  89.5k|        }
 6287|       |
 6288|  89.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  89.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 89.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  89.9k|            specs, prefix_width, value_width, postfix_width));
 6290|  89.9k|        return it;
 6291|  89.9k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|   277k|    {
 3773|   277k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   277k|        const std::ptrdiff_t sign_len =
 3776|   277k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.85k, False: 275k]
  ------------------
 3777|       |
 3778|   277k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.2k, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.2k|    }                                                  \
  |  |  |  | 3957|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   252k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   277k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   123k|    {
 4264|   123k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   123k|#if !SCN_DISABLE_LOCALE
 4267|   123k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 30.9k, False: 92.4k]
  ------------------
 4268|  30.9k|            return read_impl<Range>(
 4269|  30.9k|                range, rd,
 4270|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  30.9k|                },
 4273|  30.9k|                value, loc);
 4274|  30.9k|        }
 4275|  92.4k|#endif
 4276|       |
 4277|  92.4k|        return read_impl<Range>(
 4278|  92.4k|            range, rd,
 4279|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  92.4k|                return r.read_source(SCN_FWD(args)...);
 4281|  92.4k|            },
 4282|  92.4k|            value);
 4283|   123k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   169k|    {
 4300|   169k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42.5k, False: 127k]
  |  |  ------------------
  ------------------
 4302|  42.5k|            return unexpected(r.error());
 4303|  42.5k|        }
 4304|       |
 4305|   127k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 869, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    869|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    869|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    869|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    869|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    869|    }                                                  \
  |  |  |  | 3957|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   126k|        return ranges::next(range.begin(), n);
 4307|   127k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  30.9k|        : m_fptr([](storage fn,
  743|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.9k|              cvref<T> obj = *get<T>(fn);
  745|  30.9k|              if constexpr (std::is_void_v<R>) {
  746|  30.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.9k|              }
  748|  30.9k|              else {
  749|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.9k|              }
  751|  30.9k|          }),
  752|  30.9k|          m_storage(std::addressof(f))
  753|  30.9k|    {
  754|  30.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  30.9k|              else {
  749|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.9k|              }
  751|  30.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  30.9k|        else if constexpr (std::is_object_v<T>) {
  688|  30.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  30.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  30.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  30.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  30.9k|        {
  662|  30.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  92.4k|        : m_fptr([](storage fn,
  743|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.4k|              cvref<T> obj = *get<T>(fn);
  745|  92.4k|              if constexpr (std::is_void_v<R>) {
  746|  92.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.4k|              }
  748|  92.4k|              else {
  749|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.4k|              }
  751|  92.4k|          }),
  752|  92.4k|          m_storage(std::addressof(f))
  753|  92.4k|    {
  754|  92.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.4k|              else {
  749|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.4k|              }
  751|  92.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  92.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.4k|        else if constexpr (std::is_object_v<T>) {
  688|  92.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  92.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  92.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  92.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.4k|        {
  662|  92.4k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   123k|    {
 4264|   123k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   123k|#if !SCN_DISABLE_LOCALE
 4267|   123k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 30.9k, False: 92.4k]
  ------------------
 4268|  30.9k|            return read_impl<Range>(
 4269|  30.9k|                range, rd,
 4270|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  30.9k|                },
 4273|  30.9k|                value, loc);
 4274|  30.9k|        }
 4275|  92.4k|#endif
 4276|       |
 4277|  92.4k|        return read_impl<Range>(
 4278|  92.4k|            range, rd,
 4279|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  92.4k|                return r.read_source(SCN_FWD(args)...);
 4281|  92.4k|            },
 4282|  92.4k|            value);
 4283|   123k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   169k|    {
 4300|   169k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   169k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.9k, False: 149k]
  |  |  ------------------
  ------------------
 4302|  19.9k|            return unexpected(r.error());
 4303|  19.9k|        }
 4304|       |
 4305|   149k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.4k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.4k|    }                                                  \
  |  |  |  | 3957|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   126k|        return ranges::next(range.begin(), n);
 4307|   149k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  30.9k|        : m_fptr([](storage fn,
  743|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.9k|              cvref<T> obj = *get<T>(fn);
  745|  30.9k|              if constexpr (std::is_void_v<R>) {
  746|  30.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.9k|              }
  748|  30.9k|              else {
  749|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.9k|              }
  751|  30.9k|          }),
  752|  30.9k|          m_storage(std::addressof(f))
  753|  30.9k|    {
  754|  30.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  30.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  30.9k|              else {
  749|  30.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.9k|              }
  751|  30.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  30.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  30.9k|        else if constexpr (std::is_object_v<T>) {
  688|  30.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  30.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  30.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  30.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  30.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  30.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  30.9k|        {
  662|  30.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  92.4k|        : m_fptr([](storage fn,
  743|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.4k|              cvref<T> obj = *get<T>(fn);
  745|  92.4k|              if constexpr (std::is_void_v<R>) {
  746|  92.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.4k|              }
  748|  92.4k|              else {
  749|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.4k|              }
  751|  92.4k|          }),
  752|  92.4k|          m_storage(std::addressof(f))
  753|  92.4k|    {
  754|  92.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  92.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.4k|              else {
  749|  92.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.4k|              }
  751|  92.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  92.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.4k|        else if constexpr (std::is_object_v<T>) {
  688|  92.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  92.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  92.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  92.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.4k|        {
  662|  92.4k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   126k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   126k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   126k|            auto rd = make_reader<T, char_type>();
 6306|   126k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   126k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6307|       |
 6308|   126k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 126k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   126k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   126k|                return impl(rd, range, value);
 6311|   126k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   126k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6230|   126k|    {
 6231|   126k|        const bool need_skipped_width =
 6232|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 126k]
  |  Branch (6232:33): [True: 0, False: 126k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   126k|        auto it = rng.begin();
 6236|   126k|        std::ptrdiff_t prefix_width = 0;
 6237|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 126k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   126k|        else {
 6245|   126k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.03k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.03k|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   125k|            std::tie(it, prefix_width) = prefix_result;
 6247|   125k|        }
 6248|   125k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   125k|        std::ptrdiff_t value_width = 0;
 6252|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 125k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   125k|        else {
 6268|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.3k, False: 92.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.3k|    }                                                  \
  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  92.4k|                                             specs, value, loc));
 6270|       |
 6271|  92.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 92.4k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  92.4k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  92.4k|        std::ptrdiff_t postfix_width = 0;
 6280|  92.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 91.9k, False: 470]
  ------------------
 6281|  91.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 91.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  91.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  91.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  91.9k|                                 value_width));
 6285|  91.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  91.9k|        }
 6287|       |
 6288|  92.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  92.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  92.4k|            specs, prefix_width, value_width, postfix_width));
 6290|  92.4k|        return it;
 6291|  92.4k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3772|   284k|    {
 3773|   284k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|   284k|        const std::ptrdiff_t sign_len =
 3776|   284k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 1.88k, False: 282k]
  ------------------
 3777|       |
 3778|   284k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.2k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.2k|    }                                                  \
  |  |  |  | 3957|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|   261k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|   284k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4263|   125k|    {
 4264|   125k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   125k|#if !SCN_DISABLE_LOCALE
 4267|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 32.1k, False: 93.7k]
  ------------------
 4268|  32.1k|            return read_impl<Range>(
 4269|  32.1k|                range, rd,
 4270|  32.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  32.1k|                },
 4273|  32.1k|                value, loc);
 4274|  32.1k|        }
 4275|  93.7k|#endif
 4276|       |
 4277|  93.7k|        return read_impl<Range>(
 4278|  93.7k|            range, rd,
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
 4281|  93.7k|            },
 4282|  93.7k|            value);
 4283|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|   173k|    {
 4300|   173k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   173k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.1k, False: 130k]
  |  |  ------------------
  ------------------
 4302|  43.1k|            return unexpected(r.error());
 4303|  43.1k|        }
 4304|       |
 4305|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 126, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    126|    }                                                  \
  |  |  |  | 3957|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   130k|        return ranges::next(range.begin(), n);
 4307|   130k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  32.1k|        : m_fptr([](storage fn,
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|  32.1k|              if constexpr (std::is_void_v<R>) {
  746|  32.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.1k|              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
  752|  32.1k|          m_storage(std::addressof(f))
  753|  32.1k|    {
  754|  32.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.1k|        else if constexpr (std::is_object_v<T>) {
  688|  32.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4270|  32.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  32.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  32.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.1k|        {
  662|  32.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  93.7k|        : m_fptr([](storage fn,
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|  93.7k|              if constexpr (std::is_void_v<R>) {
  746|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.7k|              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
  752|  93.7k|          m_storage(std::addressof(f))
  753|  93.7k|    {
  754|  93.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.7k|        else if constexpr (std::is_object_v<T>) {
  688|  93.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  93.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  93.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.7k|        {
  662|  93.7k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|   125k|    {
 4264|   125k|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|   125k|#if !SCN_DISABLE_LOCALE
 4267|   125k|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 32.1k, False: 93.7k]
  ------------------
 4268|  32.1k|            return read_impl<Range>(
 4269|  32.1k|                range, rd,
 4270|  32.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|  32.1k|                },
 4273|  32.1k|                value, loc);
 4274|  32.1k|        }
 4275|  93.7k|#endif
 4276|       |
 4277|  93.7k|        return read_impl<Range>(
 4278|  93.7k|            range, rd,
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
 4281|  93.7k|            },
 4282|  93.7k|            value);
 4283|   125k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|   174k|    {
 4300|   174k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|   174k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.2k, False: 153k]
  |  |  ------------------
  ------------------
 4302|  20.2k|            return unexpected(r.error());
 4303|  20.2k|        }
 4304|       |
 4305|   153k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.1k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.1k|    }                                                  \
  |  |  |  | 3957|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|   130k|        return ranges::next(range.begin(), n);
 4307|   153k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  32.1k|        : m_fptr([](storage fn,
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|  32.1k|              if constexpr (std::is_void_v<R>) {
  746|  32.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.1k|              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
  752|  32.1k|          m_storage(std::addressof(f))
  753|  32.1k|    {
  754|  32.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.1k|        else if constexpr (std::is_object_v<T>) {
  688|  32.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|  32.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4271|  32.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|  32.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  32.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.1k|        {
  662|  32.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  93.7k|        : m_fptr([](storage fn,
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|  93.7k|              if constexpr (std::is_void_v<R>) {
  746|  93.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.7k|              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
  752|  93.7k|          m_storage(std::addressof(f))
  753|  93.7k|    {
  754|  93.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  93.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.7k|              else {
  749|  93.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.7k|              }
  751|  93.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.7k|        else if constexpr (std::is_object_v<T>) {
  688|  93.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|  93.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4280|  93.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|  93.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.7k|        {
  662|  93.7k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   502k|{
 2193|   502k|    auto it = range.begin();
 2194|   883k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 879k, False: 3.42k]
  ------------------
 2195|   879k|        const auto val =
 2196|   879k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   879k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   879k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 879k, False: 0]
  |  |  ------------------
  ------------------
 2198|   879k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   879k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   879k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 498k, False: 381k]
  ------------------
 2201|   498k|                return it;
 2202|   498k|            }
 2203|   879k|        }
 2204|   381k|        it = val.iterator;
 2205|   381k|    }
 2206|       |
 2207|  3.42k|    return it;
 2208|   502k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   879k|{
 1998|   879k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   879k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   879k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   879k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   879k|    auto it = range.begin();
 2002|   879k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   879k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   879k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 879k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   879k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 879k, False: 0]
  ------------------
 2011|   879k|        ++it;
 2012|   879k|        return {it, string_type(1, *range.begin())};
 2013|   879k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   879k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   879k|    {
 1989|   879k|        return !codepoint.empty();
 1990|   879k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   502k|{
 2214|   502k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   502k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   502k|{
 3098|   502k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 502k, False: 0]
  ------------------
 3099|   502k|        auto it = read_while_classic_space(range);
 3100|   502k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   502k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.42k, False: 498k]
  |  |  ------------------
  ------------------
 3102|  3.42k|            return unexpected(e);
 3103|  3.42k|        }
 3104|       |
 3105|   498k|        return it;
 3106|   502k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   502k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   502k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   502k|    else {
 2258|   502k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   502k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   502k|            return detail::is_cp_space(cp);
 2271|   502k|        });
 2272|   502k|    }
 2273|   502k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   502k|        : m_fptr([](storage fn,
  743|   502k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   502k|              cvref<T> obj = *get<T>(fn);
  745|   502k|              if constexpr (std::is_void_v<R>) {
  746|   502k|                  obj(static_cast<decltype(args)>(args)...);
  747|   502k|              }
  748|   502k|              else {
  749|   502k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   502k|              }
  751|   502k|          }),
  752|   502k|          m_storage(std::addressof(f))
  753|   502k|    {
  754|   502k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   879k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   879k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   879k|              else {
  749|   879k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   879k|              }
  751|   879k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   879k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   879k|        else if constexpr (std::is_object_v<T>) {
  688|   879k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   879k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   879k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   879k|            return detail::is_cp_space(cp);
 2271|   879k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   502k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   502k|        {
  662|   502k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3618|  11.9k|    {
 3619|  11.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  11.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|  11.9k|        return read_default_with_base(range, value, 10);
 3621|  11.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3582|  11.9k|    {
 3583|  11.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|  10.2k|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|  10.2k|        if constexpr (!std::is_signed_v<T>) {
 3587|  10.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 0, False: 10.2k]
  ------------------
 3588|      0|                return detail::unexpected_scan_error(
 3589|      0|                    scan_error::invalid_scanned_value,
 3590|      0|                    "Unexpected '-' sign when parsing an "
 3591|      0|                    "unsigned value");
 3592|      0|            }
 3593|  10.2k|        }
 3594|       |
 3595|  10.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 10.2k]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  20.5k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  20.5k|                parse_integer_digits_without_thsep(
 3602|  20.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  20.5k|                    prefix_result.parsed_base));
 3604|       |
 3605|  20.5k|        auto buf = make_contiguous_buffer(
 3606|  20.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  20.5k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.09k, False: 9.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.09k|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|  9.16k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|  9.16k|                                    prefix_result.parsed_base));
 3610|       |
 3611|  9.16k|        return ranges::next(prefix_result.iterator,
 3612|  9.16k|                            ranges::distance(buf.view().begin(), result_it));
 3613|  20.5k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3408|  11.9k|{
 3409|  11.9k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  10.2k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  10.2k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  10.2k|        parse_integer_base_prefix(
 3414|  10.2k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  10.2k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 10.2k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  10.2k|    else {
 3426|  10.2k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 10.2k]
  ------------------
 3427|  10.2k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 96, False: 10.1k]
  ------------------
 3428|     96|            digits_begin_it = base_prefix_begin_it;
 3429|     96|        }
 3430|  10.2k|    }
 3431|       |
 3432|  10.2k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 10.2k, False: 0]
  ------------------
 3433|  10.2k|        sign = sign_type::plus_sign;
 3434|  10.2k|    }
 3435|  10.2k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  10.2k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  11.9k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3289|  11.9k|{
 3290|  11.9k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  11.9k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 11.9k, False: 0]
  ------------------
 3292|  11.9k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 10.2k, False: 1.69k]
  ------------------
 3293|  10.2k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  10.2k|        }
 3295|  1.69k|        return unexpected(eof_error::eof);
 3296|  11.9k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2404|  11.9k|{
 2405|  11.9k|    auto it = read_code_unit(range);
 2406|  11.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.2k]
  |  |  ------------------
  ------------------
 2407|  1.69k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.69k|    }
 2409|       |
 2410|  20.5k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 20.5k, False: 10.2k]
  ------------------
 2411|  20.5k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 20.5k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  20.5k|    }
 2415|       |
 2416|  10.2k|    return unexpected(parse_error::error);
 2417|  10.2k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  11.9k|{
 1945|  11.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.2k]
  |  |  ------------------
  ------------------
 1946|  1.69k|        return unexpected(e);
 1947|  1.69k|    }
 1948|       |
 1949|  10.2k|    return ranges::next(range.begin());
 1950|  11.9k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  11.9k|{
  951|  11.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.2k]
  |  |  ------------------
  ------------------
  952|  1.69k|        return eof_error::eof;
  953|  1.69k|    }
  954|  10.2k|    return eof_error::good;
  955|  11.9k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  11.9k|{
  945|  11.9k|    return is_range_eof(r.begin(), r.end());
  946|  11.9k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   895k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|   895k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|   895k|        auto buf = make_contiguous_buffer(range);
 2224|   895k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|   895k|        return ranges::next(range.begin(),
 2226|   895k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|   895k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   895k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   895k|                  ranges::sized_range<Range>) {
 1785|   895k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   895k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   895k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   895k|    {
 1589|   895k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   895k|    {
 1676|   895k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   895k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   895k|    {
 1720|   895k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   895k|                                          std::basic_string<CharT>>) {
 1730|   895k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   895k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   895k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   895k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4172|   326k|    {
 4173|   326k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 36.6k, False: 290k]
  ------------------
 4174|  36.6k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  36.6k|        }
 4176|   290k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   326k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   723k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   723k|    else {
 2229|   723k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   723k|        return read_until_code_point(
 2241|   723k|            ranges::subrange{it, range.end()},
 2242|   723k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   723k|    }
 2244|   723k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   723k|        : m_fptr([](storage fn,
  743|   723k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   723k|              cvref<T> obj = *get<T>(fn);
  745|   723k|              if constexpr (std::is_void_v<R>) {
  746|   723k|                  obj(static_cast<decltype(args)>(args)...);
  747|   723k|              }
  748|   723k|              else {
  749|   723k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   723k|              }
  751|   723k|          }),
  752|   723k|          m_storage(std::addressof(f))
  753|   723k|    {
  754|   723k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27M|              else {
  749|  1.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27M|              }
  751|  1.27M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.27M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.27M|        else if constexpr (std::is_object_v<T>) {
  688|  1.27M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  1.27M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   723k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   723k|        {
  662|   723k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   723k|    {
 1676|   723k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   723k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   723k|    {
 1720|   723k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   723k|                                          std::basic_string<CharT>>) {
 1730|   723k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   723k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   723k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4172|   222k|    {
 4173|   222k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 964, False: 221k]
  ------------------
 4174|    964|            return std::copysign(value, static_cast<T>(-1.0));
 4175|    964|        }
 4176|   221k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   222k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4172|   342k|    {
 4173|   342k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 39.2k, False: 303k]
  ------------------
 4174|  39.2k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  39.2k|        }
 4176|   303k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   342k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4172|   252k|    {
 4173|   252k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 1.01k, False: 251k]
  ------------------
 4174|  1.01k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  1.01k|        }
 4176|   251k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   252k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4172|   351k|    {
 4173|   351k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 41.9k, False: 309k]
  ------------------
 4174|  41.9k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  41.9k|        }
 4176|   309k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   351k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4172|   261k|    {
 4173|   261k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 1.11k, False: 260k]
  ------------------
 4174|  1.11k|            return std::copysign(value, static_cast<T>(-1.0));
 4175|  1.11k|        }
 4176|   260k|        return std::copysign(value, static_cast<T>(1.0));
 4177|   261k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   160k|{
 5892|   160k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.79k, False: 158k]
  |  |  ------------------
  ------------------
 5893|  1.79k|        return unexpected(e);
 5894|  1.79k|    }
 5895|       |
 5896|   158k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 158k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   158k|    return skip_classic_whitespace(range);
 5901|   158k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5979|  51.2k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  51.2k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  51.2k|            auto rd = make_reader<T, char_type>();
 5985|  51.2k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  51.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  51.2k|    {
 5972|  51.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  51.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  51.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  51.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 606, False: 50.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    606|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    606|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    606|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    606|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    606|    }                                                  \
  |  |  |  | 3957|  51.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  50.6k|                        .transform_error(make_eof_scan_error));
 5974|  50.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  51.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  50.6k|    {
 4246|  50.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  50.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  50.6k|        float_reader<CharT> rd{};
 4249|  50.6k|        return read_impl<Range>(
 4250|  50.6k|            range, rd,
 4251|  50.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  50.6k|                return r.read_source(SCN_FWD(args)...);
 4253|  50.6k|            },
 4254|  50.6k|            value);
 4255|  50.6k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3739|   319k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3725|   588k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  50.6k|        : m_fptr([](storage fn,
  743|  50.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.6k|              cvref<T> obj = *get<T>(fn);
  745|  50.6k|              if constexpr (std::is_void_v<R>) {
  746|  50.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.6k|              }
  748|  50.6k|              else {
  749|  50.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.6k|              }
  751|  50.6k|          }),
  752|  50.6k|          m_storage(std::addressof(f))
  753|  50.6k|    {
  754|  50.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  50.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.6k|              else {
  749|  50.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.6k|              }
  751|  50.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  50.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.6k|        else if constexpr (std::is_object_v<T>) {
  688|  50.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  50.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  50.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  50.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  50.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  50.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  50.6k|        {
  662|  50.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|  53.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  53.7k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  53.7k|            auto rd = make_reader<T, char_type>();
 5985|  53.7k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  53.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  53.7k|    {
 5972|  53.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  53.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 714, False: 53.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    714|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    714|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    714|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    714|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    714|    }                                                  \
  |  |  |  | 3957|  53.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  53.0k|                        .transform_error(make_eof_scan_error));
 5974|  53.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  53.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  53.0k|    {
 4246|  53.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  53.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  53.0k|        float_reader<CharT> rd{};
 4249|  53.0k|        return read_impl<Range>(
 4250|  53.0k|            range, rd,
 4251|  53.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.0k|                return r.read_source(SCN_FWD(args)...);
 4253|  53.0k|            },
 4254|  53.0k|            value);
 4255|  53.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  53.0k|        : m_fptr([](storage fn,
  743|  53.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.0k|              cvref<T> obj = *get<T>(fn);
  745|  53.0k|              if constexpr (std::is_void_v<R>) {
  746|  53.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.0k|              }
  748|  53.0k|              else {
  749|  53.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.0k|              }
  751|  53.0k|          }),
  752|  53.0k|          m_storage(std::addressof(f))
  753|  53.0k|    {
  754|  53.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  53.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.0k|              else {
  749|  53.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.0k|              }
  751|  53.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  53.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.0k|        else if constexpr (std::is_object_v<T>) {
  688|  53.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  53.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  53.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  53.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.0k|        {
  662|  53.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5979|  55.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  55.7k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  55.7k|            auto rd = make_reader<T, char_type>();
 5985|  55.7k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  55.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  55.7k|    {
 5972|  55.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  55.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  55.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  55.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 816, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    816|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    816|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    816|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    816|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    816|    }                                                  \
  |  |  |  | 3957|  55.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  54.9k|                        .transform_error(make_eof_scan_error));
 5974|  54.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  55.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  54.9k|    {
 4246|  54.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  54.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  54.9k|        float_reader<CharT> rd{};
 4249|  54.9k|        return read_impl<Range>(
 4250|  54.9k|            range, rd,
 4251|  54.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  54.9k|                return r.read_source(SCN_FWD(args)...);
 4253|  54.9k|            },
 4254|  54.9k|            value);
 4255|  54.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  54.9k|        : m_fptr([](storage fn,
  743|  54.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.9k|              cvref<T> obj = *get<T>(fn);
  745|  54.9k|              if constexpr (std::is_void_v<R>) {
  746|  54.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.9k|              }
  748|  54.9k|              else {
  749|  54.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.9k|              }
  751|  54.9k|          }),
  752|  54.9k|          m_storage(std::addressof(f))
  753|  54.9k|    {
  754|  54.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  54.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.9k|              else {
  749|  54.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.9k|              }
  751|  54.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  54.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.9k|        else if constexpr (std::is_object_v<T>) {
  688|  54.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  54.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  54.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  54.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  54.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.9k|        {
  662|  54.9k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|   162k|{
 5892|   162k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.83k, False: 161k]
  |  |  ------------------
  ------------------
 5893|  1.83k|        return unexpected(e);
 5894|  1.83k|    }
 5895|       |
 5896|   161k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 161k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   161k|    return skip_classic_whitespace(range);
 5901|   161k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  52.2k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  52.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  52.2k|            auto rd = make_reader<T, char_type>();
 5989|  52.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 52.2k, False: 0]
  ------------------
 5990|  52.2k|                return impl(rd, range, value);
 5991|  52.2k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  52.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  52.2k|    {
 5972|  52.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 633, False: 51.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    633|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    633|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    633|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    633|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    633|    }                                                  \
  |  |  |  | 3957|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  51.6k|                        .transform_error(make_eof_scan_error));
 5974|  51.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  52.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  51.6k|    {
 4246|  51.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  51.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  51.6k|        float_reader<CharT> rd{};
 4249|  51.6k|        return read_impl<Range>(
 4250|  51.6k|            range, rd,
 4251|  51.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  51.6k|                return r.read_source(SCN_FWD(args)...);
 4253|  51.6k|            },
 4254|  51.6k|            value);
 4255|  51.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  51.6k|        : m_fptr([](storage fn,
  743|  51.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.6k|              cvref<T> obj = *get<T>(fn);
  745|  51.6k|              if constexpr (std::is_void_v<R>) {
  746|  51.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.6k|              }
  748|  51.6k|              else {
  749|  51.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.6k|              }
  751|  51.6k|          }),
  752|  51.6k|          m_storage(std::addressof(f))
  753|  51.6k|    {
  754|  51.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  51.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.6k|              else {
  749|  51.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.6k|              }
  751|  51.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  51.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.6k|        else if constexpr (std::is_object_v<T>) {
  688|  51.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  51.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  51.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  51.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  51.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  51.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  51.6k|        {
  662|  51.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  54.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  54.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  54.7k|            auto rd = make_reader<T, char_type>();
 5989|  54.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 54.7k, False: 0]
  ------------------
 5990|  54.7k|                return impl(rd, range, value);
 5991|  54.7k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  54.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  54.7k|    {
 5972|  54.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  54.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  54.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  54.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 738, False: 53.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    738|    }                                                  \
  |  |  |  | 3957|  54.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  53.9k|                        .transform_error(make_eof_scan_error));
 5974|  53.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  54.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  53.9k|    {
 4246|  53.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  53.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  53.9k|        float_reader<CharT> rd{};
 4249|  53.9k|        return read_impl<Range>(
 4250|  53.9k|            range, rd,
 4251|  53.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.9k|                return r.read_source(SCN_FWD(args)...);
 4253|  53.9k|            },
 4254|  53.9k|            value);
 4255|  53.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  53.9k|        : m_fptr([](storage fn,
  743|  53.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.9k|              cvref<T> obj = *get<T>(fn);
  745|  53.9k|              if constexpr (std::is_void_v<R>) {
  746|  53.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.9k|              }
  748|  53.9k|              else {
  749|  53.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.9k|              }
  751|  53.9k|          }),
  752|  53.9k|          m_storage(std::addressof(f))
  753|  53.9k|    {
  754|  53.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  53.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.9k|              else {
  749|  53.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.9k|              }
  751|  53.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  53.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.9k|        else if constexpr (std::is_object_v<T>) {
  688|  53.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  53.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  53.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  53.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.9k|        {
  662|  53.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  56.0k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  56.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  56.0k|            auto rd = make_reader<T, char_type>();
 5989|  56.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 56.0k, False: 0]
  ------------------
 5990|  56.0k|                return impl(rd, range, value);
 5991|  56.0k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  56.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  56.0k|    {
 5972|  56.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  56.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  56.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  56.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 831, False: 55.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    831|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    831|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    831|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    831|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    831|    }                                                  \
  |  |  |  | 3957|  56.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  55.1k|                        .transform_error(make_eof_scan_error));
 5974|  55.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  56.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  55.1k|    {
 4246|  55.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  55.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  55.1k|        float_reader<CharT> rd{};
 4249|  55.1k|        return read_impl<Range>(
 4250|  55.1k|            range, rd,
 4251|  55.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  55.1k|                return r.read_source(SCN_FWD(args)...);
 4253|  55.1k|            },
 4254|  55.1k|            value);
 4255|  55.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  55.1k|        : m_fptr([](storage fn,
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|  55.1k|              if constexpr (std::is_void_v<R>) {
  746|  55.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.1k|              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
  752|  55.1k|          m_storage(std::addressof(f))
  753|  55.1k|    {
  754|  55.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  55.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.1k|              else {
  749|  55.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.1k|              }
  751|  55.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  55.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.1k|        else if constexpr (std::is_object_v<T>) {
  688|  55.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  55.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  55.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  55.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  55.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.1k|        {
  662|  55.1k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|   398k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   398k|    static_cast<    \
  |  | 1109|   398k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   398k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   398k|          m_current(m_range.begin())
 3020|   398k|    {
 3021|   398k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   745k|    {
 3030|   745k|        return m_range.end();
 3031|   745k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|   347k|    {
 3045|   347k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   347k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   347k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 347k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   347k|        }
 3051|   347k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   347k|    static_cast<    \
  |  | 1109|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   347k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   398k|    {
 3035|   398k|        return ranges::subrange{begin(), end()};
 3036|   398k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   398k|    {
 6144|   398k|        const bool need_skipped_width =
 6145|   398k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 398k]
  |  Branch (6145:33): [True: 0, False: 398k]
  ------------------
 6146|   398k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   398k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 398k]
  ------------------
 6150|   398k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 398k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   398k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 398k, False: 0]
  |  Branch (6154:56): [True: 398k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   398k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 398k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   791k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   398k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   398k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   398k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.71k, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.71k|    }                                                  \
  |  |  |  | 3957|   398k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   791k|                            make_eof_scan_error));
 6165|       |
 6166|   791k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 392k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   392k|            return result_type{it, 0};
 6174|   791k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   398k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   342k|    {
 6186|   342k|        const bool need_skipped_width =
 6187|   342k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 342k]
  |  Branch (6187:33): [True: 0, False: 342k]
  ------------------
 6188|   342k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   342k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 342k]
  ------------------
 6191|   342k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 342k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   342k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 342k, False: 0]
  ------------------
 6200|   342k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 342k]
  ------------------
 6201|   342k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   342k|        return result_type{rng.begin(), 0};
 6225|   342k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6295|   129k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   129k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   129k|            auto rd = make_reader<T, char_type>();
 6301|   129k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   129k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 129k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   129k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   129k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   129k|    {
 6231|   129k|        const bool need_skipped_width =
 6232|   129k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 129k]
  |  Branch (6232:33): [True: 0, False: 129k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   129k|        auto it = rng.begin();
 6236|   129k|        std::ptrdiff_t prefix_width = 0;
 6237|   129k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 129k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   129k|        else {
 6245|   129k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   129k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   129k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   129k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.71k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.71k|    }                                                  \
  |  |  |  | 3957|   129k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   127k|            std::tie(it, prefix_width) = prefix_result;
 6247|   127k|        }
 6248|   127k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   127k|        std::ptrdiff_t value_width = 0;
 6252|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 127k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   127k|        else {
 6268|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.4k, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.4k|    }                                                  \
  |  | 3957|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   112k|                                             specs, value, loc));
 6270|       |
 6271|   112k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 112k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   112k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   112k|        std::ptrdiff_t postfix_width = 0;
 6280|   112k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 110k, False: 1.40k]
  ------------------
 6281|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   110k|                                 value_width));
 6285|   110k|            std::tie(it, postfix_width) = postfix_result;
 6286|   110k|        }
 6287|       |
 6288|   112k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   112k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   112k|            specs, prefix_width, value_width, postfix_width));
 6290|   112k|        return it;
 6291|   112k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|   133k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   133k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   133k|            auto rd = make_reader<T, char_type>();
 6301|   133k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   133k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 133k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   133k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   133k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   133k|    {
 6231|   133k|        const bool need_skipped_width =
 6232|   133k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 133k]
  |  Branch (6232:33): [True: 0, False: 133k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   133k|        auto it = rng.begin();
 6236|   133k|        std::ptrdiff_t prefix_width = 0;
 6237|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 133k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   133k|        else {
 6245|   133k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.91k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.91k|    }                                                  \
  |  |  |  | 3957|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   131k|            std::tie(it, prefix_width) = prefix_result;
 6247|   131k|        }
 6248|   131k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   131k|        std::ptrdiff_t value_width = 0;
 6252|   131k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 131k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   131k|        else {
 6268|   131k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.2k, False: 116k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.2k|    }                                                  \
  |  | 3957|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   116k|                                             specs, value, loc));
 6270|       |
 6271|   116k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 116k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   116k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   116k|        std::ptrdiff_t postfix_width = 0;
 6280|   116k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 114k, False: 1.57k]
  ------------------
 6281|   114k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   114k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   114k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   114k|                                 value_width));
 6285|   114k|            std::tie(it, postfix_width) = postfix_result;
 6286|   114k|        }
 6287|       |
 6288|   116k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   116k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 116k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   116k|            specs, prefix_width, value_width, postfix_width));
 6290|   116k|        return it;
 6291|   116k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6295|   136k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   136k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   136k|            auto rd = make_reader<T, char_type>();
 6301|   136k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   136k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   136k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   136k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   136k|    {
 6231|   136k|        const bool need_skipped_width =
 6232|   136k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 136k]
  |  Branch (6232:33): [True: 0, False: 136k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   136k|        auto it = rng.begin();
 6236|   136k|        std::ptrdiff_t prefix_width = 0;
 6237|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 136k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   136k|        else {
 6245|   136k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.08k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.08k|    }                                                  \
  |  |  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   133k|            std::tie(it, prefix_width) = prefix_result;
 6247|   133k|        }
 6248|   133k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   133k|        std::ptrdiff_t value_width = 0;
 6252|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 133k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   133k|        else {
 6268|   133k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.1k, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.1k|    }                                                  \
  |  | 3957|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   118k|                                             specs, value, loc));
 6270|       |
 6271|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 118k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   118k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   118k|        std::ptrdiff_t postfix_width = 0;
 6280|   118k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 117k, False: 1.71k]
  ------------------
 6281|   117k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   117k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   117k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   117k|                                 value_width));
 6285|   117k|            std::tie(it, postfix_width) = postfix_result;
 6286|   117k|        }
 6287|       |
 6288|   118k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   118k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   118k|            specs, prefix_width, value_width, postfix_width));
 6290|   118k|        return it;
 6291|   118k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   135k|{
 5892|   135k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 480, False: 135k]
  |  |  ------------------
  ------------------
 5893|    480|        return unexpected(e);
 5894|    480|    }
 5895|       |
 5896|   135k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 135k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   135k|    return skip_classic_whitespace(range);
 5901|   135k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5979|  40.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  40.3k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  40.3k|            auto rd = make_reader<T, char_type>();
 5985|  40.3k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  40.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  40.3k|    {
 5972|  40.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 291, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    291|    }                                                  \
  |  |  |  | 3957|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  40.0k|                        .transform_error(make_eof_scan_error));
 5974|  40.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  40.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  40.0k|    {
 4246|  40.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  40.0k|        float_reader<CharT> rd{};
 4249|  40.0k|        return read_impl<Range>(
 4250|  40.0k|            range, rd,
 4251|  40.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.0k|                return r.read_source(SCN_FWD(args)...);
 4253|  40.0k|            },
 4254|  40.0k|            value);
 4255|  40.0k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3739|   269k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  40.0k|        : m_fptr([](storage fn,
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|  40.0k|              if constexpr (std::is_void_v<R>) {
  746|  40.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.0k|              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
  752|  40.0k|          m_storage(std::addressof(f))
  753|  40.0k|    {
  754|  40.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.0k|        else if constexpr (std::is_object_v<T>) {
  688|  40.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  40.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  40.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.0k|        {
  662|  40.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|  46.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  46.7k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  46.7k|            auto rd = make_reader<T, char_type>();
 5985|  46.7k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  46.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  46.7k|    {
 5972|  46.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  46.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  46.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  46.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 336, False: 46.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    336|    }                                                  \
  |  |  |  | 3957|  46.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  46.4k|                        .transform_error(make_eof_scan_error));
 5974|  46.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  46.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  46.4k|    {
 4246|  46.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  46.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  46.4k|        float_reader<CharT> rd{};
 4249|  46.4k|        return read_impl<Range>(
 4250|  46.4k|            range, rd,
 4251|  46.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  46.4k|                return r.read_source(SCN_FWD(args)...);
 4253|  46.4k|            },
 4254|  46.4k|            value);
 4255|  46.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  46.4k|        : m_fptr([](storage fn,
  743|  46.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.4k|              cvref<T> obj = *get<T>(fn);
  745|  46.4k|              if constexpr (std::is_void_v<R>) {
  746|  46.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.4k|              }
  748|  46.4k|              else {
  749|  46.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.4k|              }
  751|  46.4k|          }),
  752|  46.4k|          m_storage(std::addressof(f))
  753|  46.4k|    {
  754|  46.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  46.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.4k|              else {
  749|  46.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.4k|              }
  751|  46.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.4k|        else if constexpr (std::is_object_v<T>) {
  688|  46.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  46.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  46.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  46.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  46.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.4k|        {
  662|  46.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5979|  48.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  48.5k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  48.5k|            auto rd = make_reader<T, char_type>();
 5985|  48.5k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  48.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|  48.5k|    {
 5972|  48.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 369, False: 48.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    369|    }                                                  \
  |  |  |  | 3957|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  48.2k|                        .transform_error(make_eof_scan_error));
 5974|  48.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  48.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|  48.2k|    {
 4246|  48.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  48.2k|        float_reader<CharT> rd{};
 4249|  48.2k|        return read_impl<Range>(
 4250|  48.2k|            range, rd,
 4251|  48.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  48.2k|                return r.read_source(SCN_FWD(args)...);
 4253|  48.2k|            },
 4254|  48.2k|            value);
 4255|  48.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  48.2k|        : m_fptr([](storage fn,
  743|  48.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.2k|              cvref<T> obj = *get<T>(fn);
  745|  48.2k|              if constexpr (std::is_void_v<R>) {
  746|  48.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.2k|              }
  748|  48.2k|              else {
  749|  48.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.2k|              }
  751|  48.2k|          }),
  752|  48.2k|          m_storage(std::addressof(f))
  753|  48.2k|    {
  754|  48.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  48.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.2k|              else {
  749|  48.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.2k|              }
  751|  48.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.2k|        else if constexpr (std::is_object_v<T>) {
  688|  48.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|  48.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  48.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  48.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  48.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.2k|        {
  662|  48.2k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   367k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   367k|    static_cast<    \
  |  | 1109|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   367k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   367k|          m_current(m_range.begin())
 3020|   367k|    {
 3021|   367k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   630k|    {
 3030|   630k|        return m_range.end();
 3031|   630k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   263k|    {
 3045|   263k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   263k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   263k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 263k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   263k|        }
 3051|   263k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   263k|    static_cast<    \
  |  | 1109|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   263k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   367k|    {
 3035|   367k|        return ranges::subrange{begin(), end()};
 3036|   367k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   367k|    {
 6144|   367k|        const bool need_skipped_width =
 6145|   367k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 367k]
  |  Branch (6145:33): [True: 0, False: 367k]
  ------------------
 6146|   367k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   367k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 367k]
  ------------------
 6150|   367k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 367k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   367k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 367k, False: 0]
  |  Branch (6154:56): [True: 367k, False: 0]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   367k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 367k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   731k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.90k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.90k|    }                                                  \
  |  |  |  | 3957|   367k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   731k|                            make_eof_scan_error));
 6165|       |
 6166|   731k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 364k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   364k|            return result_type{it, 0};
 6174|   731k|        }
 6175|       |
 6176|      0|        return result_type{rng.begin(), 0};
 6177|   367k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   262k|    {
 6186|   262k|        const bool need_skipped_width =
 6187|   262k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 262k]
  |  Branch (6187:33): [True: 0, False: 262k]
  ------------------
 6188|   262k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   262k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 262k]
  ------------------
 6191|   262k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 262k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   262k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 262k, False: 0]
  ------------------
 6200|   262k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 0, False: 262k]
  ------------------
 6201|   262k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 0]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 0]
  ------------------
 6203|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   262k|        return result_type{rng.begin(), 0};
 6225|   262k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6295|   115k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   115k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   115k|            auto rd = make_reader<T, char_type>();
 6301|   115k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   115k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   115k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   115k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   115k|    {
 6231|   115k|        const bool need_skipped_width =
 6232|   115k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 115k]
  |  Branch (6232:33): [True: 0, False: 115k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   115k|        auto it = rng.begin();
 6236|   115k|        std::ptrdiff_t prefix_width = 0;
 6237|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 115k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   115k|        else {
 6245|   115k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 900, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    900|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    900|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    900|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    900|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    900|    }                                                  \
  |  |  |  | 3957|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   114k|            std::tie(it, prefix_width) = prefix_result;
 6247|   114k|        }
 6248|   114k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   114k|        std::ptrdiff_t value_width = 0;
 6252|   114k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 114k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   114k|        else {
 6268|   114k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.5k, False: 81.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.5k|    }                                                  \
  |  | 3957|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  81.3k|                                             specs, value, loc));
 6270|       |
 6271|  81.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 81.3k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  81.3k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  81.3k|        std::ptrdiff_t postfix_width = 0;
 6280|  81.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 80.9k, False: 396]
  ------------------
 6281|  80.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  80.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  80.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  80.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 80.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  80.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  80.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  80.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  80.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  80.9k|                                 value_width));
 6285|  80.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  80.9k|        }
 6287|       |
 6288|  81.3k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  81.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  81.3k|            specs, prefix_width, value_width, postfix_width));
 6290|  81.3k|        return it;
 6291|  81.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|   124k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   124k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   124k|            auto rd = make_reader<T, char_type>();
 6301|   124k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   124k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   124k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   124k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   124k|    {
 6231|   124k|        const bool need_skipped_width =
 6232|   124k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 124k]
  |  Branch (6232:33): [True: 0, False: 124k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   124k|        auto it = rng.begin();
 6236|   124k|        std::ptrdiff_t prefix_width = 0;
 6237|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 124k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   124k|        else {
 6245|   124k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 974, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    974|    }                                                  \
  |  |  |  | 3957|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   123k|            std::tie(it, prefix_width) = prefix_result;
 6247|   123k|        }
 6248|   123k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   123k|        std::ptrdiff_t value_width = 0;
 6252|   123k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 123k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   123k|        else {
 6268|   123k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.4k, False: 89.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.4k|    }                                                  \
  |  | 3957|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  89.9k|                                             specs, value, loc));
 6270|       |
 6271|  89.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 89.9k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  89.9k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  89.9k|        std::ptrdiff_t postfix_width = 0;
 6280|  89.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 89.5k, False: 438]
  ------------------
 6281|  89.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 89.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  89.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  89.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  89.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  89.5k|                                 value_width));
 6285|  89.5k|            std::tie(it, postfix_width) = postfix_result;
 6286|  89.5k|        }
 6287|       |
 6288|  89.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  89.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 89.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  89.9k|            specs, prefix_width, value_width, postfix_width));
 6290|  89.9k|        return it;
 6291|  89.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6295|   126k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   126k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   126k|            auto rd = make_reader<T, char_type>();
 6301|   126k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   126k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6302|   126k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   126k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|   126k|    {
 6231|   126k|        const bool need_skipped_width =
 6232|   126k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 126k]
  |  Branch (6232:33): [True: 0, False: 126k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   126k|        auto it = rng.begin();
 6236|   126k|        std::ptrdiff_t prefix_width = 0;
 6237|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 126k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   126k|        else {
 6245|   126k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.03k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.03k|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   125k|            std::tie(it, prefix_width) = prefix_result;
 6247|   125k|        }
 6248|   125k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   125k|        std::ptrdiff_t value_width = 0;
 6252|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 125k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   125k|        else {
 6268|   125k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 33.3k, False: 92.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  33.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  33.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  33.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  33.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  33.3k|    }                                                  \
  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  92.5k|                                             specs, value, loc));
 6270|       |
 6271|  92.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 92.5k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  92.5k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  92.5k|        std::ptrdiff_t postfix_width = 0;
 6280|  92.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 92.0k, False: 470]
  ------------------
 6281|  92.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  92.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  92.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  92.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  92.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  92.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  92.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  92.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  92.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  92.0k|                                 value_width));
 6285|  92.0k|            std::tie(it, postfix_width) = postfix_result;
 6286|  92.0k|        }
 6287|       |
 6288|  92.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  92.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  92.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  92.5k|            specs, prefix_width, value_width, postfix_width));
 6290|  92.5k|        return it;
 6291|  92.5k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|   135k|{
 5892|   135k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 480, False: 135k]
  |  |  ------------------
  ------------------
 5893|    480|        return unexpected(e);
 5894|    480|    }
 5895|       |
 5896|   135k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 135k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   135k|    return skip_classic_whitespace(range);
 5901|   135k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  40.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  40.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  40.3k|            auto rd = make_reader<T, char_type>();
 5989|  40.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 40.3k, False: 0]
  ------------------
 5990|  40.3k|                return impl(rd, range, value);
 5991|  40.3k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  40.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  40.3k|    {
 5972|  40.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 291, False: 40.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    291|    }                                                  \
  |  |  |  | 3957|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  40.0k|                        .transform_error(make_eof_scan_error));
 5974|  40.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  40.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  40.0k|    {
 4246|  40.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  40.0k|        float_reader<CharT> rd{};
 4249|  40.0k|        return read_impl<Range>(
 4250|  40.0k|            range, rd,
 4251|  40.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.0k|                return r.read_source(SCN_FWD(args)...);
 4253|  40.0k|            },
 4254|  40.0k|            value);
 4255|  40.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  40.0k|        : m_fptr([](storage fn,
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|  40.0k|              if constexpr (std::is_void_v<R>) {
  746|  40.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.0k|              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
  752|  40.0k|          m_storage(std::addressof(f))
  753|  40.0k|    {
  754|  40.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.0k|        else if constexpr (std::is_object_v<T>) {
  688|  40.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  40.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  40.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  40.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.0k|        {
  662|  40.0k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  46.7k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  46.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  46.7k|            auto rd = make_reader<T, char_type>();
 5989|  46.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 46.7k, False: 0]
  ------------------
 5990|  46.7k|                return impl(rd, range, value);
 5991|  46.7k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  46.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  46.7k|    {
 5972|  46.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  46.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  46.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  46.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 336, False: 46.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    336|    }                                                  \
  |  |  |  | 3957|  46.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  46.3k|                        .transform_error(make_eof_scan_error));
 5974|  46.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  46.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  46.3k|    {
 4246|  46.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  46.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  46.3k|        float_reader<CharT> rd{};
 4249|  46.3k|        return read_impl<Range>(
 4250|  46.3k|            range, rd,
 4251|  46.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  46.3k|                return r.read_source(SCN_FWD(args)...);
 4253|  46.3k|            },
 4254|  46.3k|            value);
 4255|  46.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  46.3k|        : m_fptr([](storage fn,
  743|  46.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.3k|              cvref<T> obj = *get<T>(fn);
  745|  46.3k|              if constexpr (std::is_void_v<R>) {
  746|  46.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.3k|              }
  748|  46.3k|              else {
  749|  46.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.3k|              }
  751|  46.3k|          }),
  752|  46.3k|          m_storage(std::addressof(f))
  753|  46.3k|    {
  754|  46.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  46.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.3k|              else {
  749|  46.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.3k|              }
  751|  46.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.3k|        else if constexpr (std::is_object_v<T>) {
  688|  46.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  46.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  46.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  46.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  46.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.3k|        {
  662|  46.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|  48.5k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  48.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  48.5k|            auto rd = make_reader<T, char_type>();
 5989|  48.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 48.5k, False: 0]
  ------------------
 5990|  48.5k|                return impl(rd, range, value);
 5991|  48.5k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  48.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5971|  48.5k|    {
 5972|  48.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 369, False: 48.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    369|    }                                                  \
  |  |  |  | 3957|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  48.1k|                        .transform_error(make_eof_scan_error));
 5974|  48.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  48.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4245|  48.1k|    {
 4246|  48.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|  48.1k|        float_reader<CharT> rd{};
 4249|  48.1k|        return read_impl<Range>(
 4250|  48.1k|            range, rd,
 4251|  48.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  48.1k|                return r.read_source(SCN_FWD(args)...);
 4253|  48.1k|            },
 4254|  48.1k|            value);
 4255|  48.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  48.1k|        : m_fptr([](storage fn,
  743|  48.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.1k|              cvref<T> obj = *get<T>(fn);
  745|  48.1k|              if constexpr (std::is_void_v<R>) {
  746|  48.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.1k|              }
  748|  48.1k|              else {
  749|  48.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.1k|              }
  751|  48.1k|          }),
  752|  48.1k|          m_storage(std::addressof(f))
  753|  48.1k|    {
  754|  48.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  48.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.1k|              else {
  749|  48.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.1k|              }
  751|  48.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.1k|        else if constexpr (std::is_object_v<T>) {
  688|  48.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4251|  48.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4252|  48.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|  48.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  48.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.1k|        {
  662|  48.1k|        }

LLVMFuzzerTestOneInput:
   54|  1.72k|{
   55|  1.72k|    scn::fuzz::run(data, size);
   56|  1.72k|    return 0;
   57|  1.72k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  1.72k|{
   33|  1.72k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 1.72k]
  |  Branch (33:35): [True: 0, False: 1.72k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  1.72k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  1.72k|    const auto& f =
   40|  1.72k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  1.72k|    do_basic_run(sv, f);
   42|       |
   43|  1.72k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  1.72k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  1.72k|    do_basic_run(wsv_reinterpret, wf);
   46|  1.72k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.72k, False: 0]
  ------------------
   47|  1.72k|        do_basic_run(wsv_transcode, wf);
   48|  1.72k|    }
   49|  1.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.72k|{
   25|  1.72k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.72k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.72k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.72k|{
   25|  1.72k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.72k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.72k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.44k|{
   25|  3.44k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.44k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.44k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.44k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.44k|{
   25|  3.44k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.44k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.44k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.44k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.72k|{
   53|  1.72k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.72k|    string_buffer.resize(size);
   57|  1.72k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.72k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.72k|    const auto wsv_reinterpret_size =
   62|  1.72k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 64, False: 1.65k]
  ------------------
   63|  1.72k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.72k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.72k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.72k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.72k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.72k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.72k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.72k|{
  123|  1.72k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.72k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.72k|    buf.resize(sizeof...(Args));
  126|  1.72k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.72k|    return buf;
  128|  1.72k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.72k|{
  109|  1.72k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.72k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.72k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.72k|{
  186|  1.72k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.72k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.72k|                                   format_strings);
  189|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  81.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  81.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  81.6k|            auto result = scn::scan<T>(
  140|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  81.6k|                scn::runtime_format(f));
  142|  81.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 71.3k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  71.3k|            it = result->begin();
  146|  71.3k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  81.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  81.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  81.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  81.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  81.6k|            auto result = scn::scan<T>(
  155|  81.6k|                global_locale,
  156|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  81.6k|                scn::runtime_format(f));
  158|  81.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 71.3k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  71.3k|            it = result->begin();
  162|  71.3k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  17.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  17.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.0k|            auto result = scn::scan_value<T>(
  171|  17.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 15.3k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  15.3k|            it = result->begin();
  176|  15.3k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  84.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  84.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  84.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  84.6k|            auto result = scn::scan<T>(
  140|  84.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  84.6k|                scn::runtime_format(f));
  142|  84.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 74.3k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  74.3k|            it = result->begin();
  146|  74.3k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  84.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  84.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  84.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  84.6k|            auto result = scn::scan<T>(
  155|  84.6k|                global_locale,
  156|  84.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  84.6k|                scn::runtime_format(f));
  158|  84.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 74.3k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  74.3k|            it = result->begin();
  162|  74.3k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  17.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.9k|            auto result = scn::scan_value<T>(
  171|  17.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 16.2k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  16.2k|            it = result->begin();
  176|  16.2k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  86.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.5k|            auto result = scn::scan<T>(
  140|  86.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.5k|                scn::runtime_format(f));
  142|  86.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 76.2k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  76.2k|            it = result->begin();
  146|  76.2k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  86.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.5k|            auto result = scn::scan<T>(
  155|  86.5k|                global_locale,
  156|  86.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.5k|                scn::runtime_format(f));
  158|  86.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 76.2k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  76.2k|            it = result->begin();
  162|  76.2k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  18.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.5k|            auto result = scn::scan_value<T>(
  171|  18.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 16.8k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  16.8k|            it = result->begin();
  176|  16.8k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  86.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.9k|            auto result = scn::scan<T>(
  140|  86.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.9k|                scn::runtime_format(f));
  142|  86.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 76.5k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  76.5k|            it = result->begin();
  146|  76.5k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  86.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.9k|            auto result = scn::scan<T>(
  155|  86.9k|                global_locale,
  156|  86.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.9k|                scn::runtime_format(f));
  158|  86.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 76.5k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  76.5k|            it = result->begin();
  162|  76.5k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  17.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  17.4k|            auto result = scn::scan_value<T>(
  171|  17.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  17.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 15.7k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  15.7k|            it = result->begin();
  176|  15.7k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  90.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  90.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  90.8k|            auto result = scn::scan<T>(
  140|  90.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  90.8k|                scn::runtime_format(f));
  142|  90.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 80.5k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  80.5k|            it = result->begin();
  146|  80.5k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  90.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  90.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  90.8k|            auto result = scn::scan<T>(
  155|  90.8k|                global_locale,
  156|  90.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  90.8k|                scn::runtime_format(f));
  158|  90.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 80.5k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  80.5k|            it = result->begin();
  162|  80.5k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  18.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.2k|            auto result = scn::scan_value<T>(
  171|  18.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 16.5k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  16.5k|            it = result->begin();
  176|  16.5k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.72k|{
  134|       |    // Regular scan
  135|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.3k, False: 1.72k]
  ------------------
  136|  10.3k|        auto it = scn::ranges::begin(source);
  137|  92.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  92.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  92.8k|            auto result = scn::scan<T>(
  140|  92.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  92.8k|                scn::runtime_format(f));
  142|  92.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.3k, False: 82.5k]
  ------------------
  143|  10.3k|                break;
  144|  10.3k|            }
  145|  82.5k|            it = result->begin();
  146|  82.5k|        }
  147|  10.3k|    }
  148|       |
  149|       |    // scan localized
  150|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.3k, False: 1.72k]
  ------------------
  151|  10.3k|        auto it = scn::ranges::begin(source);
  152|  92.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  92.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  92.8k|            auto result = scn::scan<T>(
  155|  92.8k|                global_locale,
  156|  92.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  92.8k|                scn::runtime_format(f));
  158|  92.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.3k, False: 82.5k]
  ------------------
  159|  10.3k|                break;
  160|  10.3k|            }
  161|  82.5k|            it = result->begin();
  162|  82.5k|        }
  163|  10.3k|    }
  164|       |
  165|       |    // scan_value
  166|  1.72k|    {
  167|  1.72k|        auto it = scn::ranges::begin(source);
  168|  18.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.6k|            auto result = scn::scan_value<T>(
  171|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.72k, False: 16.9k]
  ------------------
  173|  1.72k|                break;
  174|  1.72k|            }
  175|  16.9k|            it = result->begin();
  176|  16.9k|        }
  177|  1.72k|    }
  178|  1.72k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.72k|{
   91|  1.72k|    using char_type = ranges::range_value_t<Source>;
   92|  1.72k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.72k|    deque.clear();
   94|  1.72k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.72k|              std::back_inserter(deque));
   96|  1.72k|    return deque;
   97|  1.72k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.72k|{
   80|  1.72k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.72k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.72k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.72k|{
  123|  1.72k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.72k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.72k|    buf.resize(sizeof...(Args));
  126|  1.72k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.72k|    return buf;
  128|  1.72k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.72k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.72k|    else {
  113|  1.72k|        return wformat_string_view_buffer;
  114|  1.72k|    }
  115|  1.72k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  3.44k|{
  186|  3.44k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  3.44k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  3.44k|                                   format_strings);
  189|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  71.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  71.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  71.3k|            auto result = scn::scan<T>(
  140|  71.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  71.3k|                scn::runtime_format(f));
  142|  71.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 50.7k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  50.7k|            it = result->begin();
  146|  50.7k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  71.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  71.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  71.3k|            auto result = scn::scan<T>(
  155|  71.3k|                global_locale,
  156|  71.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  71.3k|                scn::runtime_format(f));
  158|  71.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 50.7k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  50.7k|            it = result->begin();
  162|  50.7k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  13.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.4k|            auto result = scn::scan_value<T>(
  171|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 10.0k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  10.0k|            it = result->begin();
  176|  10.0k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  77.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  77.7k|            auto result = scn::scan<T>(
  140|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  77.7k|                scn::runtime_format(f));
  142|  77.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 57.1k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  57.1k|            it = result->begin();
  146|  57.1k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  77.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  77.7k|            auto result = scn::scan<T>(
  155|  77.7k|                global_locale,
  156|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.7k|                scn::runtime_format(f));
  158|  77.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 57.1k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  57.1k|            it = result->begin();
  162|  57.1k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  15.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.5k|            auto result = scn::scan_value<T>(
  171|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 12.1k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  12.1k|            it = result->begin();
  176|  12.1k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  79.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.6k|            auto result = scn::scan<T>(
  140|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.6k|                scn::runtime_format(f));
  142|  79.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 59.0k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  59.0k|            it = result->begin();
  146|  59.0k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  79.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.6k|            auto result = scn::scan<T>(
  155|  79.6k|                global_locale,
  156|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.6k|                scn::runtime_format(f));
  158|  79.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 59.0k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  59.0k|            it = result->begin();
  162|  59.0k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  16.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.1k|            auto result = scn::scan_value<T>(
  171|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 12.7k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  71.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  71.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  71.3k|            auto result = scn::scan<T>(
  140|  71.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  71.3k|                scn::runtime_format(f));
  142|  71.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 50.6k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  50.6k|            it = result->begin();
  146|  50.6k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  71.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  71.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  71.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  71.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  71.3k|            auto result = scn::scan<T>(
  155|  71.3k|                global_locale,
  156|  71.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  71.3k|                scn::runtime_format(f));
  158|  71.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 50.6k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  50.6k|            it = result->begin();
  162|  50.6k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  13.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.4k|            auto result = scn::scan_value<T>(
  171|  13.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 9.99k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  9.99k|            it = result->begin();
  176|  9.99k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  77.7k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  77.7k|            auto result = scn::scan<T>(
  140|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  77.7k|                scn::runtime_format(f));
  142|  77.7k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 57.1k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  57.1k|            it = result->begin();
  146|  57.1k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  77.7k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  77.7k|            auto result = scn::scan<T>(
  155|  77.7k|                global_locale,
  156|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  77.7k|                scn::runtime_format(f));
  158|  77.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 57.1k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  57.1k|            it = result->begin();
  162|  57.1k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  15.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.5k|            auto result = scn::scan_value<T>(
  171|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 12.1k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  12.1k|            it = result->begin();
  176|  12.1k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.44k|{
  134|       |    // Regular scan
  135|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 20.6k, False: 3.44k]
  ------------------
  136|  20.6k|        auto it = scn::ranges::begin(source);
  137|  79.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  79.6k|            auto result = scn::scan<T>(
  140|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  79.6k|                scn::runtime_format(f));
  142|  79.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 20.6k, False: 58.9k]
  ------------------
  143|  20.6k|                break;
  144|  20.6k|            }
  145|  58.9k|            it = result->begin();
  146|  58.9k|        }
  147|  20.6k|    }
  148|       |
  149|       |    // scan localized
  150|  20.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 20.6k, False: 3.44k]
  ------------------
  151|  20.6k|        auto it = scn::ranges::begin(source);
  152|  79.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  79.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  79.6k|            auto result = scn::scan<T>(
  155|  79.6k|                global_locale,
  156|  79.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  79.6k|                scn::runtime_format(f));
  158|  79.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.6k, False: 58.9k]
  ------------------
  159|  20.6k|                break;
  160|  20.6k|            }
  161|  58.9k|            it = result->begin();
  162|  58.9k|        }
  163|  20.6k|    }
  164|       |
  165|       |    // scan_value
  166|  3.44k|    {
  167|  3.44k|        auto it = scn::ranges::begin(source);
  168|  16.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.1k|            auto result = scn::scan_value<T>(
  171|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.44k, False: 12.7k]
  ------------------
  173|  3.44k|                break;
  174|  3.44k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.44k|    }
  178|  3.44k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  3.44k|{
   91|  3.44k|    using char_type = ranges::range_value_t<Source>;
   92|  3.44k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  3.44k|    deque.clear();
   94|  3.44k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  3.44k|              std::back_inserter(deque));
   96|  3.44k|    return deque;
   97|  3.44k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  3.44k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  3.44k|    else {
   84|  3.44k|        return wnoncontiguous_buffer;
   85|  3.44k|    }
   86|  3.44k|}

