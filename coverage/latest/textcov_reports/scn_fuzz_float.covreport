_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   994k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   994k|  chars_format const fmt = options.format;
  277|   994k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   994k|  parsed_number_string_t<UC> answer;
  280|   994k|  answer.valid = false;
  281|   994k|  answer.too_many_digits = false;
  282|   994k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   994k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 994k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   994k|  UC const * const start_digits = p;
  303|       |
  304|   994k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.33M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.83M, False: 501k]
  |  Branch (306:25): [True: 4.34M, False: 493k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.34M|    i = 10 * i +
  310|  4.34M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.34M|    ++p;
  312|  4.34M|  }
  313|   994k|  UC const * const end_of_integer_part = p;
  314|   994k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   994k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   994k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   994k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 994k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   994k|  int64_t exponent = 0;
  324|   994k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 493k, False: 501k]
  |  Branch (324:49): [True: 185k, False: 308k]
  ------------------
  325|   994k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 185k, False: 809k]
  ------------------
  326|   185k|    ++p;
  327|   185k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   185k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   769k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 651k, False: 117k]
  |  Branch (332:27): [True: 583k, False: 68.2k]
  ------------------
  333|   583k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   583k|      ++p;
  335|   583k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   583k|    }
  337|   185k|    exponent = before - p;
  338|   185k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   185k|    digit_count -= exponent;
  340|   185k|  }
  341|   994k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   994k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 994k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   994k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 994k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   994k|  int64_t exp_number = 0;            // explicit exponential part
  351|   994k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 855k, False: 139k]
  ------------------
  352|   994k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 376k, False: 479k]
  ------------------
  353|   994k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 77.1k, False: 299k]
  |  Branch (353:29): [True: 49.9k, False: 249k]
  ------------------
  354|   994k|       ||
  355|   994k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   867k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 867k]
  ------------------
  356|   867k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   867k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   127k|    UC const * location_of_e = p;
  359|   127k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 77.1k, False: 49.9k]
  |  Branch (359:28): [True: 49.9k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   127k|      ++p;
  361|   127k|    }
  362|   127k|    bool neg_exp = false;
  363|   127k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 127k, False: 135]
  |  Branch (363:24): [True: 5.89k, False: 121k]
  ------------------
  364|  5.89k|      neg_exp = true;
  365|  5.89k|      ++p;
  366|   121k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 121k, False: 135]
  |  Branch (366:31): [True: 32.9k, False: 88.1k]
  ------------------
  367|  32.9k|      ++p;
  368|  32.9k|    }
  369|   127k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 185, False: 126k]
  |  Branch (369:24): [True: 490, False: 126k]
  ------------------
  370|    675|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 675]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    675|      p = location_of_e;
  376|   126k|    } else {
  377|   396k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 304k, False: 91.6k]
  |  Branch (377:29): [True: 269k, False: 34.8k]
  ------------------
  378|   269k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   269k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 246k, False: 22.9k]
  ------------------
  380|   246k|          exp_number = 10 * exp_number + digit;
  381|   246k|        }
  382|   269k|        ++p;
  383|   269k|      }
  384|   126k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 5.86k, False: 120k]
  ------------------
  385|   126k|      exponent += exp_number;
  386|   126k|    }
  387|   867k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   867k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 728k, False: 139k]
  |  Branch (389:44): [True: 0, False: 728k]
  ------------------
  390|   867k|  }
  391|   994k|  answer.lastmatch = p;
  392|   994k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   994k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 167k, False: 827k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   167k|    UC const * start = start_digits;
  405|   673k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 671k, False: 1.28k]
  |  Branch (405:32): [True: 497k, False: 174k]
  |  Branch (405:53): [True: 7.70k, False: 166k]
  ------------------
  406|   505k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 497k, False: 7.70k]
  ------------------
  407|   505k|      start++;
  408|   505k|    }
  409|       |
  410|   167k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 162k, False: 5.30k]
  ------------------
  411|   162k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   162k|      i = 0;
  416|   162k|      p = answer.integer.ptr;
  417|   162k|      UC const* int_end = p + answer.integer.len();
  418|   162k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.67M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.63M, False: 44.3k]
  |  Branch (419:54): [True: 1.51M, False: 118k]
  ------------------
  420|  1.51M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.51M|        ++p;
  422|  1.51M|      }
  423|   162k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 44.3k, False: 118k]
  ------------------
  424|  44.3k|        exponent = end_of_integer_part - p + exp_number;
  425|  44.3k|      }
  426|   118k|      else { // We have a value with a fractional component.
  427|   118k|        p = answer.fraction.ptr;
  428|   118k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.07M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.96M, False: 118k]
  |  Branch (429:56): [True: 1.96M, False: 0]
  ------------------
  430|  1.96M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.96M|          ++p;
  432|  1.96M|        }
  433|   118k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   118k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   162k|    }
  437|   167k|  }
  438|   994k|  answer.exponent = exponent;
  439|   994k|  answer.mantissa = i;
  440|   994k|  return answer;
  441|   994k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.92M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.92M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 146k, False: 5.77M]
  |  Branch (36:27): [True: 450k, False: 5.32M]
  ------------------
   37|  5.92M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   185k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   663k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 532k, False: 130k]
  |  Branch (249:43): [True: 477k, False: 55.1k]
  ------------------
  250|   477k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   477k|    p += 8;
  252|   477k|  }
  253|   185k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   532k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   532k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   532k|     0x8080808080808080));
  172|   532k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.21M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.21M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.21M|  uint64_t val;
   63|  1.21M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.21M|  return val;
   69|  1.21M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   684k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   684k|  const uint64_t mask = 0x000000FF000000FF;
  148|   684k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   684k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   684k|  val -= 0x3030303030303030;
  151|   684k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   684k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   684k|  return uint32_t(val);
  154|   684k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   206k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   206k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   206k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   206k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   206k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   253k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   253k|  chars_format const fmt = options.format;
  277|   253k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   253k|  parsed_number_string_t<UC> answer;
  280|   253k|  answer.valid = false;
  281|   253k|  answer.too_many_digits = false;
  282|   253k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   253k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 253k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   253k|  UC const * const start_digits = p;
  303|       |
  304|   253k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   530k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 353k, False: 177k]
  |  Branch (306:25): [True: 277k, False: 76.1k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   277k|    i = 10 * i +
  310|   277k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   277k|    ++p;
  312|   277k|  }
  313|   253k|  UC const * const end_of_integer_part = p;
  314|   253k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   253k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   253k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   253k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 253k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   253k|  int64_t exponent = 0;
  324|   253k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 76.1k, False: 177k]
  |  Branch (324:49): [True: 576, False: 75.5k]
  ------------------
  325|   253k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 576, False: 253k]
  ------------------
  326|    576|    ++p;
  327|    576|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    576|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  2.37k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.92k, False: 456]
  |  Branch (332:27): [True: 1.80k, False: 120]
  ------------------
  333|  1.80k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.80k|      ++p;
  335|  1.80k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.80k|    }
  337|    576|    exponent = before - p;
  338|    576|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    576|    digit_count -= exponent;
  340|    576|  }
  341|   253k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   253k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 253k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   253k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 253k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   253k|  int64_t exp_number = 0;            // explicit exponential part
  351|   253k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 199k, False: 54.1k]
  ------------------
  352|   253k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 75.6k, False: 123k]
  ------------------
  353|   253k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 112, False: 75.5k]
  |  Branch (353:29): [True: 7.49k, False: 68.0k]
  ------------------
  354|   253k|       ||
  355|   253k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   246k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 246k]
  ------------------
  356|   246k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   246k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  7.60k|    UC const * location_of_e = p;
  359|  7.60k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 112, False: 7.49k]
  |  Branch (359:28): [True: 7.49k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  7.60k|      ++p;
  361|  7.60k|    }
  362|  7.60k|    bool neg_exp = false;
  363|  7.60k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 7.58k, False: 20]
  |  Branch (363:24): [True: 1.80k, False: 5.77k]
  ------------------
  364|  1.80k|      neg_exp = true;
  365|  1.80k|      ++p;
  366|  5.79k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 5.77k, False: 20]
  |  Branch (366:31): [True: 160, False: 5.61k]
  ------------------
  367|    160|      ++p;
  368|    160|    }
  369|  7.60k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 7.57k]
  |  Branch (369:24): [True: 335, False: 7.23k]
  ------------------
  370|    365|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 365]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    365|      p = location_of_e;
  376|  7.23k|    } else {
  377|  26.0k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 20.9k, False: 5.05k]
  |  Branch (377:29): [True: 18.7k, False: 2.18k]
  ------------------
  378|  18.7k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  18.7k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 18.3k, False: 424]
  ------------------
  380|  18.3k|          exp_number = 10 * exp_number + digit;
  381|  18.3k|        }
  382|  18.7k|        ++p;
  383|  18.7k|      }
  384|  7.23k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 1.78k, False: 5.45k]
  ------------------
  385|  7.23k|      exponent += exp_number;
  386|  7.23k|    }
  387|   246k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   246k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 191k, False: 54.1k]
  |  Branch (389:44): [True: 0, False: 191k]
  ------------------
  390|   246k|  }
  391|   253k|  answer.lastmatch = p;
  392|   253k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   253k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 180, False: 253k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    180|    UC const * start = start_digits;
  405|    180|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 180, False: 0]
  |  Branch (405:32): [True: 0, False: 180]
  |  Branch (405:53): [True: 0, False: 180]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|    180|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 180, False: 0]
  ------------------
  411|    180|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    180|      i = 0;
  416|    180|      p = answer.integer.ptr;
  417|    180|      UC const* int_end = p + answer.integer.len();
  418|    180|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.34k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.20k, False: 144]
  |  Branch (419:54): [True: 3.16k, False: 36]
  ------------------
  420|  3.16k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.16k|        ++p;
  422|  3.16k|      }
  423|    180|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 144, False: 36]
  ------------------
  424|    144|        exponent = end_of_integer_part - p + exp_number;
  425|    144|      }
  426|     36|      else { // We have a value with a fractional component.
  427|     36|        p = answer.fraction.ptr;
  428|     36|        UC const* frac_end = p + answer.fraction.len();
  429|    288|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 252, False: 36]
  |  Branch (429:56): [True: 252, False: 0]
  ------------------
  430|    252|          i = i * 10 + uint64_t(*p - UC('0'));
  431|    252|          ++p;
  432|    252|        }
  433|     36|        exponent = answer.fraction.ptr - p + exp_number;
  434|     36|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    180|    }
  437|    180|  }
  438|   253k|  answer.exponent = exponent;
  439|   253k|  answer.mantissa = i;
  440|   253k|  return answer;
  441|   253k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   383k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   383k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 77.7k, False: 305k]
  |  Branch (36:27): [True: 976, False: 304k]
  ------------------
   37|   383k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    576|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    576|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    576|    return;
  240|    576|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  56.1k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   120k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   187k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   187k|    return small_mul(vec, y);
  565|   187k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   273k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   273k|  limb carry = 0;
  284|  1.07M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 797k, False: 273k]
  ------------------
  285|   797k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   797k|  }
  287|   273k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 156k, False: 117k]
  ------------------
  288|   156k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   156k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
  289|   156k|  }
  290|   273k|  return true;
  291|   273k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.08M|  constexpr size_t len() const noexcept {
   77|  2.08M|    return length;
   78|  2.08M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   797k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   797k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   797k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   797k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   797k|  carry = limb(z >> limb_bits);
  235|   797k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   797k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.20M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.20M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.20M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.20M|    return data[index];
   60|  2.20M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   223k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   223k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 223k, False: 0]
  ------------------
   93|   223k|      push_unchecked(value);
   94|   223k|      return true;
   95|   223k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   223k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   257k|  constexpr size_t capacity() const noexcept {
   83|   257k|    return size;
   84|   257k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   275k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   275k|    data[length] = value;
   88|   275k|    length++;
   89|   275k|  }
_ZN10fast_float6bigint3addEm:
  567|   187k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   187k|    return small_add(vec, y);
  569|   187k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   187k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   187k|  return small_add_from(vec, y, 0);
  277|   187k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   187k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   187k|  size_t index = start;
  259|   187k|  limb carry = y;
  260|   187k|  bool overflow;
  261|   284k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 153k, False: 130k]
  |  Branch (261:24): [True: 97.7k, False: 56.1k]
  ------------------
  262|  97.7k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  97.7k|    carry = limb(overflow);
  264|  97.7k|    index += 1;
  265|  97.7k|  }
  266|   187k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 56.1k, False: 130k]
  ------------------
  267|  56.1k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  56.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 56.1k]
  |  |  ------------------
  ------------------
  268|  56.1k|  }
  269|   187k|  return true;
  270|   187k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   223k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   223k|  limb z;
  211|       |// gcc and clang
  212|   223k|#if defined(__has_builtin)
  213|   223k|  #if __has_builtin(__builtin_add_overflow)
  214|   223k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   223k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   223k|      return z;
  217|   223k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   223k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.42k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.42k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.42k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.42k]
  |  |  ------------------
  ------------------
  611|  4.42k|    return pow2(exp);
  612|  4.42k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  56.1k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  56.1k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  56.1k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  59.2k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.07k, False: 56.1k]
  ------------------
  582|  3.07k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  583|  3.07k|      exp -= large_step;
  584|  3.07k|    }
  585|  56.1k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  56.1k|    uint32_t small_step = 27;
  587|  56.1k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  78.8k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.6k, False: 56.1k]
  ------------------
  593|  22.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
  594|  22.6k|      exp -= small_step;
  595|  22.6k|    }
  596|  56.1k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 48.8k, False: 7.38k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  48.8k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  48.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 48.8k]
  |  |  ------------------
  ------------------
  601|  48.8k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  48.8k|      );
  603|  48.8k|    }
  604|       |
  605|  56.1k|    return true;
  606|  56.1k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.07k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.07k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.07k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.07k|  } else {
  368|  3.07k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  369|  3.07k|  }
  370|  3.07k|  return true;
  371|  3.07k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.07k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.07k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.07k|  stackvec<size> z(xs);
  338|  3.07k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.07k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.07k, False: 0]
  ------------------
  341|  3.07k|    limb y0 = y[0];
  342|  3.07k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.07k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.07k]
  |  |  ------------------
  ------------------
  343|  15.3k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.3k, False: 3.07k]
  ------------------
  344|  12.3k|      limb yi = y[index];
  345|  12.3k|      stackvec<size> zi;
  346|  12.3k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.3k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.3k|        zi.set_len(0);
  349|  12.3k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
  350|  12.3k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
  351|  12.3k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.3k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
  353|  12.3k|      }
  354|  12.3k|    }
  355|  3.07k|  }
  356|       |
  357|  3.07k|  x.normalize();
  358|  3.07k|  return true;
  359|  3.07k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.07k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.07k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.07k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.07k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  45.5k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  45.5k|    length = uint16_t(len);
   75|  45.5k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.3k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.3k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.3k, False: 0]
  ------------------
  108|  15.3k|      extend_unchecked(s);
  109|  15.3k|      return true;
  110|  15.3k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.3k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.3k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.3k|    limb* ptr = data + length;
  102|  15.3k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.3k|    set_len(len() + s.len());
  104|  15.3k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.3k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.3k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.3k]
  |  Branch (300:26): [True: 12.1k, False: 184]
  ------------------
  301|  12.1k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  12.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
  302|  12.1k|  }
  303|       |
  304|  12.3k|  bool carry = false;
  305|   103k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 91.2k, False: 12.3k]
  ------------------
  306|  91.2k|    limb xi = x[index + start];
  307|  91.2k|    limb yi = y[index];
  308|  91.2k|    bool c1 = false;
  309|  91.2k|    bool c2 = false;
  310|  91.2k|    xi = scalar_add(xi, yi, c1);
  311|  91.2k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 34.7k, False: 56.4k]
  ------------------
  312|  34.7k|      xi = scalar_add(xi, 1, c2);
  313|  34.7k|    }
  314|  91.2k|    x[index + start] = xi;
  315|  91.2k|    carry = c1 | c2;
  316|  91.2k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.3k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.3k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.3k|  return true;
  323|  12.3k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  12.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  12.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 12.1k]
  ------------------
  132|      0|      return false;
  133|  12.1k|    } else {
  134|  12.1k|      resize_unchecked(new_len, value);
  135|  12.1k|      return true;
  136|  12.1k|    }
  137|  12.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  12.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  12.1k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 12.1k, False: 0]
  ------------------
  120|  12.1k|      size_t count = new_len - len();
  121|  12.1k|      limb* first = data + len();
  122|  12.1k|      limb* last = first + count;
  123|  12.1k|      ::std::fill(first, last, value);
  124|  12.1k|      set_len(new_len);
  125|  12.1k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  12.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  54.8k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  54.8k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 54.8k, False: 0]
  |  Branch (152:25): [True: 0, False: 54.8k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  54.8k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  67.3k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  67.3k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  67.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  67.3k|    size_t rindex = length - index - 1;
   69|  67.3k|    return data[rindex];
   70|  67.3k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  56.1k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  56.1k|    return shl(exp);
  574|  56.1k|  }
_ZN10fast_float6bigint3shlEm:
  530|  56.1k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  56.1k|    size_t rem = n % limb_bits;
  532|  56.1k|    size_t div = n / limb_bits;
  533|  56.1k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 51.7k, False: 4.35k]
  ------------------
  534|  51.7k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  51.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 51.7k]
  |  |  ------------------
  ------------------
  535|  51.7k|    }
  536|  56.1k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 5.80k, False: 50.3k]
  ------------------
  537|  5.80k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  5.80k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
  538|  5.80k|    }
  539|  56.1k|    return true;
  540|  56.1k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  51.7k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  51.7k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  51.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  51.7k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  51.7k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  51.7k|    size_t shl = n;
  493|  51.7k|    size_t shr = limb_bits - shl;
  494|  51.7k|    limb prev = 0;
  495|   167k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 116k, False: 51.7k]
  ------------------
  496|   116k|      limb xi = vec[index];
  497|   116k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   116k|      prev = xi;
  499|   116k|    }
  500|       |
  501|  51.7k|    limb carry = prev >> shr;
  502|  51.7k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 11.7k, False: 40.0k]
  ------------------
  503|  11.7k|      return vec.try_push(carry);
  504|  11.7k|    }
  505|  40.0k|    return true;
  506|  51.7k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  5.80k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  5.80k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  5.80k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  5.80k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 5.80k]
  ------------------
  512|      0|      return false;
  513|  5.80k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 5.80k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  5.80k|      limb* dst = vec.data + n;
  516|  5.80k|      const limb* src = vec.data;
  517|  5.80k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  5.80k|      limb* first = vec.data;
  520|  5.80k|      limb* last = first + n;
  521|  5.80k|      ::std::fill(first, last, 0);
  522|  5.80k|      vec.set_len(n + vec.len());
  523|  5.80k|      return true;
  524|  5.80k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  5.80k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  10.2k|  constexpr bool is_empty() const noexcept {
   80|  10.2k|    return length == 0;
   81|  10.2k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.42k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.42k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.42k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.42k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.42k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.22k, False: 3.19k]
  ------------------
  435|  1.22k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.19k|    } else {
  437|  3.19k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.19k|      truncated |= vec.nonzero(2);
  439|  3.19k|      return result;
  440|  3.19k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.42k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.22k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.22k|  truncated = false;
  167|  1.22k|  int shl = leading_zeroes(r0);
  168|  1.22k|  return r0 << shl;
  169|  1.22k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.19k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.19k|  int shl = leading_zeroes(r0);
  174|  3.19k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 3.16k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  3.16k|  } else {
  178|  3.16k|    int shr = 64 - shl;
  179|  3.16k|    truncated = (r1 << shl) != 0;
  180|  3.16k|    return (r0 << shl) | (r1 >> shr);
  181|  3.16k|  }
  182|  3.19k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.19k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.23k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 481, False: 2.75k]
  ------------------
  143|    481|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 443, False: 38]
  ------------------
  144|    443|        return true;
  145|    443|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.75k|    return false;
  149|  3.19k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.42k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.42k|    int lz = ctlz();
  560|  4.42k|    return int(limb_bits * vec.len()) - lz;
  561|  4.42k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.42k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.42k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.42k]
  ------------------
  545|      0|      return 0;
  546|  4.42k|    } else {
  547|  4.42k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.42k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.42k|    }
  555|  4.42k|  }
_ZN10fast_float6bigintC2Em:
  418|  51.7k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  51.7k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  51.7k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  51.7k|    vec.normalize();
  426|  51.7k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  51.7k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  51.7k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 51.7k]
  ------------------
  464|      0|      return 1;
  465|  51.7k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 51.7k]
  ------------------
  466|      0|      return -1;
  467|  51.7k|    } else {
  468|   100k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 97.2k, False: 3.60k]
  ------------------
  469|  97.2k|        limb xi = vec[index - 1];
  470|  97.2k|        limb yi = other.vec[index - 1];
  471|  97.2k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.0k, False: 85.2k]
  ------------------
  472|  12.0k|          return 1;
  473|  85.2k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 36.0k, False: 49.1k]
  ------------------
  474|  36.0k|          return -1;
  475|  36.0k|        }
  476|  97.2k|      }
  477|  3.60k|      return 0;
  478|  51.7k|    }
  479|  51.7k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   194k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   194k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   194k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   194k|    return data[index];
   64|   194k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   215k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   215k|  adjusted_mantissa answer;
   96|   215k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.52k, False: 212k]
  |  Branch (96:19): [True: 998, False: 211k]
  ------------------
   97|  4.52k|    answer.power2 = 0;
   98|  4.52k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.52k|    return answer;
  101|  4.52k|  }
  102|   211k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.60k, False: 204k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.60k|    answer.power2 = binary::infinite_power();
  105|  6.60k|    answer.mantissa = 0;
  106|  6.60k|    return answer;
  107|  6.60k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   204k|  int lz = leading_zeroes(w);
  112|   204k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   204k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   204k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   204k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   204k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   204k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 876, False: 203k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    876|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 124, False: 752]
  ------------------
  137|    124|      answer.power2 = 0;
  138|    124|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    124|      return answer;
  141|    124|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    752|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    752|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    752|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    752|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 752, False: 0]
  ------------------
  156|    752|    return answer;
  157|    876|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   203k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 71.3k, False: 132k]
  |  Branch (162:30): [True: 69.3k, False: 1.91k]
  |  Branch (162:77): [True: 64.0k, False: 5.38k]
  ------------------
  163|   203k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 7.98k, False: 56.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  7.98k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.84k, False: 4.13k]
  ------------------
  168|  3.84k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.84k|    }
  170|  7.98k|  }
  171|       |
  172|   203k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   203k|  answer.mantissa >>= 1;
  174|   203k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.9k, False: 188k]
  ------------------
  175|  14.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.9k|    answer.power2++; // undo previous addition
  177|  14.9k|  }
  178|       |
  179|   203k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   203k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.11k, False: 202k]
  ------------------
  181|  1.11k|    answer.power2 = binary::infinite_power();
  182|  1.11k|    answer.mantissa = 0;
  183|  1.11k|  }
  184|   203k|  return answer;
  185|   204k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   227k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   227k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   227k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   227k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   227k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   227k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   227k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 44.2k, False: 183k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  44.2k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  44.2k|    firstproduct.low += secondproduct.high;
   35|  44.2k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 31.9k, False: 12.3k]
  ------------------
   36|  31.9k|      firstproduct.high++;
   37|  31.9k|    }
   38|  44.2k|  }
   39|   227k|  return firstproduct;
   40|   227k|}
_ZN10fast_float6detail5powerEi:
   58|   450k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   450k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   450k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  23.3k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  23.3k|  int lz = leading_zeroes(w);
   82|  23.3k|  w <<= lz;
   83|  23.3k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  23.3k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  23.3k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  23.3k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  23.3k|  int hilz = int(w >> 63) ^ 1;
   69|  23.3k|  adjusted_mantissa answer;
   70|  23.3k|  answer.mantissa = w << hilz;
   71|  23.3k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  23.3k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  23.3k|  return answer;
   74|  23.3k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   196k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   196k|  adjusted_mantissa answer;
   96|   196k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.22k, False: 193k]
  |  Branch (96:19): [True: 292, False: 192k]
  ------------------
   97|  3.51k|    answer.power2 = 0;
   98|  3.51k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.51k|    return answer;
  101|  3.51k|  }
  102|   192k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.31k, False: 189k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.31k|    answer.power2 = binary::infinite_power();
  105|  3.31k|    answer.mantissa = 0;
  106|  3.31k|    return answer;
  107|  3.31k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   189k|  int lz = leading_zeroes(w);
  112|   189k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   189k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   189k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   189k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   189k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   189k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.22k, False: 187k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.22k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 52, False: 2.17k]
  ------------------
  137|     52|      answer.power2 = 0;
  138|     52|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     52|      return answer;
  141|     52|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.17k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.17k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.17k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.17k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.17k, False: 0]
  ------------------
  156|  2.17k|    return answer;
  157|  2.22k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   187k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 58.3k, False: 129k]
  |  Branch (162:30): [True: 32.1k, False: 26.1k]
  |  Branch (162:77): [True: 29.1k, False: 3.03k]
  ------------------
  163|   187k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.41k, False: 23.7k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.41k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.38k, False: 1.03k]
  ------------------
  168|  4.38k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.38k|    }
  170|  5.41k|  }
  171|       |
  172|   187k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   187k|  answer.mantissa >>= 1;
  174|   187k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.8k, False: 172k]
  ------------------
  175|  14.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.8k|    answer.power2++; // undo previous addition
  177|  14.8k|  }
  178|       |
  179|   187k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   187k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 264, False: 187k]
  ------------------
  181|    264|    answer.power2 = binary::infinite_power();
  182|    264|    answer.mantissa = 0;
  183|    264|  }
  184|   187k|  return answer;
  185|   189k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   222k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   222k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   222k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   222k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   222k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   222k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   222k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 89.4k, False: 133k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  89.4k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  89.4k|    firstproduct.low += secondproduct.high;
   35|  89.4k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 28.8k, False: 60.5k]
  ------------------
   36|  28.8k|      firstproduct.high++;
   37|  28.8k|    }
   38|  89.4k|  }
   39|   222k|  return firstproduct;
   40|   222k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  32.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  32.8k|  int lz = leading_zeroes(w);
   82|  32.8k|  w <<= lz;
   83|  32.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  32.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  32.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  32.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  32.8k|  int hilz = int(w >> 63) ^ 1;
   69|  32.8k|  adjusted_mantissa answer;
   70|  32.8k|  answer.mantissa = w << hilz;
   71|  32.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  32.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  32.8k|  return answer;
   74|  32.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  23.3k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  23.3k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  23.3k|  int32_t sci_exp = scientific_exponent(num);
  411|  23.3k|  size_t max_digits = binary_format<T>::max_digits();
  412|  23.3k|  size_t digits = 0;
  413|  23.3k|  bigint bigmant;
  414|  23.3k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  23.3k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  23.3k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 534, False: 22.8k]
  ------------------
  418|    534|    return positive_digit_comp<T>(bigmant, exponent);
  419|  22.8k|  } else {
  420|  22.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  22.8k|  }
  422|  23.3k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  56.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  56.1k|  uint64_t mantissa = num.mantissa;
   30|  56.1k|  int32_t exponent = int32_t(num.exponent);
   31|   280k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 224k, False: 56.1k]
  ------------------
   32|   224k|    mantissa /= 10000;
   33|   224k|    exponent += 4;
   34|   224k|  }
   35|   112k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 56.1k, False: 56.1k]
  ------------------
   36|  56.1k|    mantissa /= 100;
   37|  56.1k|    exponent += 2;
   38|  56.1k|  }
   39|  56.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 56.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  56.1k|  return exponent;
   44|  56.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  56.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  56.1k|  size_t counter = 0;
  245|  56.1k|  digits = 0;
  246|  56.1k|  limb value = 0;
  247|  56.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  56.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  56.1k|  UC const * p = num.integer.ptr;
  255|  56.1k|  UC const * pend = p + num.integer.len();
  256|  56.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   126k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 71.0k, False: 55.8k]
  ------------------
  259|   121k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 65.5k, False: 56.1k]
  |  Branch (259:45): [True: 50.9k, False: 14.5k]
  |  Branch (259:70): [True: 50.6k, False: 295]
  ------------------
  260|  50.6k|      parse_eight_digits(p, value, counter, digits);
  261|  50.6k|    }
  262|   223k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 206k, False: 17.1k]
  |  Branch (262:30): [True: 152k, False: 53.6k]
  |  Branch (262:43): [True: 152k, False: 295]
  ------------------
  263|   152k|      parse_one_digit(p, value, counter, digits);
  264|   152k|    }
  265|  71.0k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 295, False: 70.7k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    295|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    295|      bool truncated = is_truncated(p, pend);
  269|    295|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 263, False: 32]
  ------------------
  270|    263|        truncated |= is_truncated(num.fraction);
  271|    263|      }
  272|    295|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 179, False: 116]
  ------------------
  273|    179|        round_up_bigint(result, digits);
  274|    179|      }
  275|    295|      return;
  276|  70.7k|    } else {
  277|  70.7k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  70.7k|      counter = 0;
  279|  70.7k|      value = 0;
  280|  70.7k|    }
  281|  71.0k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  55.8k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 52.1k, False: 3.76k]
  ------------------
  285|  52.1k|    p = num.fraction.ptr;
  286|  52.1k|    pend = p + num.fraction.len();
  287|  52.1k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.21k, False: 49.9k]
  ------------------
  288|  2.21k|      skip_zeros(p, pend);
  289|  2.21k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   163k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 113k, False: 49.4k]
  ------------------
  292|   269k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 206k, False: 62.8k]
  |  Branch (292:47): [True: 157k, False: 49.7k]
  |  Branch (292:72): [True: 155k, False: 1.31k]
  ------------------
  293|   155k|        parse_eight_digits(p, value, counter, digits);
  294|   155k|      }
  295|   474k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 410k, False: 64.0k]
  |  Branch (295:32): [True: 362k, False: 47.7k]
  |  Branch (295:45): [True: 360k, False: 2.10k]
  ------------------
  296|   360k|        parse_one_digit(p, value, counter, digits);
  297|   360k|      }
  298|   113k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.69k, False: 111k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.69k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.69k|        bool truncated = is_truncated(p, pend);
  302|  2.69k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.88k, False: 816]
  ------------------
  303|  1.88k|          round_up_bigint(result, digits);
  304|  1.88k|        }
  305|  2.69k|        return;
  306|   111k|      } else {
  307|   111k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   111k|        counter = 0;
  309|   111k|        value = 0;
  310|   111k|      }
  311|   113k|    }
  312|  52.1k|  }
  313|       |
  314|  53.1k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 53.1k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  53.1k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  58.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  58.3k|  uint64_t val;
  161|  70.0k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 33.5k, False: 36.4k]
  ------------------
  162|  33.5k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  33.5k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 21.9k, False: 11.6k]
  ------------------
  164|  21.9k|      break;
  165|  21.9k|    }
  166|  11.6k|    first += int_cmp_len<UC>();
  167|  11.6k|  }
  168|   112k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 110k, False: 2.21k]
  ------------------
  169|   110k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 56.1k, False: 54.4k]
  ------------------
  170|  56.1k|      break;
  171|  56.1k|    }
  172|  54.4k|    first++;
  173|  54.4k|  }
  174|  58.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   206k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   206k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   206k|  p += 8;
  210|   206k|  counter += 8;
  211|   206k|  count += 8;
  212|   206k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   513k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   513k|  value = value * 10 + limb(*p - UC('0'));
  218|   513k|  p++;
  219|   513k|  counter++;
  220|   513k|  count++;
  221|   513k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   187k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   187k|  big.mul(power);
  226|   187k|  big.add(value);
  227|   187k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.25k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.25k|  uint64_t val;
  183|  7.39k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.21k, False: 2.17k]
  ------------------
  184|  5.21k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.21k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.08k, False: 4.13k]
  ------------------
  186|  1.08k|      return true;
  187|  1.08k|    }
  188|  4.13k|    first += int_cmp_len<UC>();
  189|  4.13k|  }
  190|  3.71k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.60k, False: 1.11k]
  ------------------
  191|  2.60k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.05k, False: 1.54k]
  ------------------
  192|  1.05k|      return true;
  193|  1.05k|    }
  194|  1.54k|    ++first;
  195|  1.54k|  }
  196|  1.11k|  return false;
  197|  2.17k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    263|bool is_truncated(span<const UC> s) noexcept {
  201|    263|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    263|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.05k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.05k|  add_native(big, 10, 1);
  234|  2.05k|  count++;
  235|  2.05k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    534|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    534|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    534|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    534|  adjusted_mantissa answer;
  324|    534|  bool truncated;
  325|    534|  answer.mantissa = bigmant.hi64(truncated);
  326|    534|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    534|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
  334|       |
  335|    534|  return answer;
  336|    534|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    534|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    534|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    534|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 534]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    534|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    534|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 534]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    534|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    534|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 534]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    534|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    534|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    534|  const uint64_t mask
  125|    534|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 534]
  ------------------
  126|    534|    ? UINT64_MAX
  127|    534|    : (uint64_t(1) << shift) - 1;
  128|    534|  const uint64_t halfway
  129|    534|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 534]
  ------------------
  130|    534|    ? 0
  131|    534|    : uint64_t(1) << (shift - 1);
  132|    534|  uint64_t truncated_bits = am.mantissa & mask;
  133|    534|  bool is_above = truncated_bits > halfway;
  134|    534|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    534|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 534]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    534|  } else {
  140|    534|    am.mantissa >>= shift;
  141|    534|  }
  142|    534|  am.power2 += shift;
  143|       |
  144|    534|  bool is_odd = (am.mantissa & 1) == 1;
  145|    534|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    534|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 460]
  |  Branch (331:27): [True: 368, False: 92]
  |  Branch (331:41): [True: 60, False: 308]
  |  Branch (331:56): [True: 56, False: 344]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    534|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  22.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  22.8k|  bigint& real_digits = bigmant;
  347|  22.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  22.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  22.8k|  T b;
  354|  22.8k|  to_float(false, am_b, b);
  355|  22.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  22.8k|  bigint theor_digits(theor.mantissa);
  357|  22.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  22.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  22.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  22.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 22.8k, False: 0]
  ------------------
  363|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  22.8k|  }
  365|  22.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 22.8k, False: 0]
  ------------------
  366|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  22.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  22.8k|  int ord = real_digits.compare(theor_digits);
  373|  22.8k|  adjusted_mantissa answer = am;
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
  387|       |
  388|  22.8k|  return answer;
  389|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  51.7k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  51.7k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 51.7k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  51.7k|  } else {
  153|  51.7k|    am.mantissa >>= shift;
  154|  51.7k|  }
  155|  51.7k|  am.power2 += shift;
  156|  51.7k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  22.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  22.8k|  adjusted_mantissa am = to_extended(value);
   84|  22.8k|  am.mantissa <<= 1;
   85|  22.8k|  am.mantissa += 1;
   86|  22.8k|  am.power2 -= 1;
   87|  22.8k|  return am;
   88|  22.8k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  22.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  22.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  22.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  22.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  22.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  22.8k|  adjusted_mantissa am;
   56|  22.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  22.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  22.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  22.8k|#endif
   63|  22.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 22.8k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  22.8k|  } else {
   68|       |    // normal
   69|  22.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  22.8k|    am.power2 -= bias;
   71|  22.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  22.8k|  }
   73|       |
   74|  22.8k|  return am;
   75|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  22.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  22.8k|  const uint64_t mask
  125|  22.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 22.8k]
  ------------------
  126|  22.8k|    ? UINT64_MAX
  127|  22.8k|    : (uint64_t(1) << shift) - 1;
  128|  22.8k|  const uint64_t halfway
  129|  22.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 22.8k]
  ------------------
  130|  22.8k|    ? 0
  131|  22.8k|    : uint64_t(1) << (shift - 1);
  132|  22.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  22.8k|  bool is_above = truncated_bits > halfway;
  134|  22.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  22.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 22.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  22.8k|  } else {
  140|  22.8k|    am.mantissa >>= shift;
  141|  22.8k|  }
  142|  22.8k|  am.power2 += shift;
  143|       |
  144|  22.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  22.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  22.8k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 22.6k]
  ------------------
  379|    210|        return true;
  380|  22.6k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 19.5k, False: 3.09k]
  ------------------
  381|  19.5k|        return false;
  382|  19.5k|      } else {
  383|  3.09k|        return is_odd;
  384|  3.09k|      }
  385|  22.8k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  32.8k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  32.8k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  32.8k|  int32_t sci_exp = scientific_exponent(num);
  411|  32.8k|  size_t max_digits = binary_format<T>::max_digits();
  412|  32.8k|  size_t digits = 0;
  413|  32.8k|  bigint bigmant;
  414|  32.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  32.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  32.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.89k, False: 28.9k]
  ------------------
  418|  3.89k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  28.9k|  } else {
  420|  28.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  28.9k|  }
  422|  32.8k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.89k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.89k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.89k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.89k|  adjusted_mantissa answer;
  324|  3.89k|  bool truncated;
  325|  3.89k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.89k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.89k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.89k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.89k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.89k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.89k|    });
  333|  3.89k|  });
  334|       |
  335|  3.89k|  return answer;
  336|  3.89k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.89k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.89k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.89k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.89k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.89k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.89k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 690, False: 3.20k]
  ------------------
  109|    690|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    690|    am.power2++;
  111|    690|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.89k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.89k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.89k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.89k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.89k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.89k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.89k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.89k|    });
  333|  3.89k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.89k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.89k|  const uint64_t mask
  125|  3.89k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.89k]
  ------------------
  126|  3.89k|    ? UINT64_MAX
  127|  3.89k|    : (uint64_t(1) << shift) - 1;
  128|  3.89k|  const uint64_t halfway
  129|  3.89k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.89k]
  ------------------
  130|  3.89k|    ? 0
  131|  3.89k|    : uint64_t(1) << (shift - 1);
  132|  3.89k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.89k|  bool is_above = truncated_bits > halfway;
  134|  3.89k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.89k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.89k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.89k|  } else {
  140|  3.89k|    am.mantissa >>= shift;
  141|  3.89k|  }
  142|  3.89k|  am.power2 += shift;
  143|       |
  144|  3.89k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.89k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.89k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.89k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.89k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 748, False: 3.14k]
  |  Branch (331:27): [True: 2.54k, False: 595]
  |  Branch (331:41): [True: 731, False: 1.81k]
  |  Branch (331:56): [True: 303, False: 2.11k]
  |  Branch (331:66): [True: 60, False: 243]
  ------------------
  332|  3.89k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  28.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  28.9k|  bigint& real_digits = bigmant;
  347|  28.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  28.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  28.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  28.9k|  T b;
  354|  28.9k|  to_float(false, am_b, b);
  355|  28.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  28.9k|  bigint theor_digits(theor.mantissa);
  357|  28.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  28.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  28.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  28.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 28.9k, False: 0]
  ------------------
  363|  28.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  28.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  28.9k|  }
  365|  28.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.57k, False: 26.3k]
  ------------------
  366|  2.57k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.57k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  26.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 26.2k, False: 74]
  ------------------
  368|  26.2k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  26.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  26.2k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  28.9k|  int ord = real_digits.compare(theor_digits);
  373|  28.9k|  adjusted_mantissa answer = am;
  374|  28.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  28.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.9k|      (void)_;  // not needed, since we've done our comparison
  377|  28.9k|      (void)__; // not needed, since we've done our comparison
  378|  28.9k|      if (ord > 0) {
  379|  28.9k|        return true;
  380|  28.9k|      } else if (ord < 0) {
  381|  28.9k|        return false;
  382|  28.9k|      } else {
  383|  28.9k|        return is_odd;
  384|  28.9k|      }
  385|  28.9k|    });
  386|  28.9k|  });
  387|       |
  388|  28.9k|  return answer;
  389|  28.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  28.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  28.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  28.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 106, False: 28.8k]
  ------------------
   96|       |    // have a denormal float
   97|    106|    int32_t shift = -am.power2 + 1;
   98|    106|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    106|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 106, False: 0]
  ------------------
  101|    106|    return;
  102|    106|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 28.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  28.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  28.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  28.9k|  adjusted_mantissa am = to_extended(value);
   84|  28.9k|  am.mantissa <<= 1;
   85|  28.9k|  am.mantissa += 1;
   86|  28.9k|  am.power2 -= 1;
   87|  28.9k|  return am;
   88|  28.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  28.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  28.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  28.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  28.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  28.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  28.9k|  adjusted_mantissa am;
   56|  28.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  28.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  28.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  28.9k|#endif
   63|  28.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 106, False: 28.8k]
  ------------------
   64|       |    // denormal
   65|    106|    am.power2 = 1 - bias;
   66|    106|    am.mantissa = bits & mantissa_mask;
   67|  28.8k|  } else {
   68|       |    // normal
   69|  28.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  28.8k|    am.power2 -= bias;
   71|  28.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  28.8k|  }
   73|       |
   74|  28.9k|  return am;
   75|  28.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  28.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  28.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  28.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 106, False: 28.8k]
  ------------------
   96|       |    // have a denormal float
   97|    106|    int32_t shift = -am.power2 + 1;
   98|    106|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    106|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 106, False: 0]
  ------------------
  101|    106|    return;
  102|    106|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  28.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  28.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 28.7k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  28.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  28.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 28.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  28.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  28.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  28.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.9k|      (void)_;  // not needed, since we've done our comparison
  377|  28.9k|      (void)__; // not needed, since we've done our comparison
  378|  28.9k|      if (ord > 0) {
  379|  28.9k|        return true;
  380|  28.9k|      } else if (ord < 0) {
  381|  28.9k|        return false;
  382|  28.9k|      } else {
  383|  28.9k|        return is_odd;
  384|  28.9k|      }
  385|  28.9k|    });
  386|  28.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  28.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  28.9k|  const uint64_t mask
  125|  28.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 28.9k]
  ------------------
  126|  28.9k|    ? UINT64_MAX
  127|  28.9k|    : (uint64_t(1) << shift) - 1;
  128|  28.9k|  const uint64_t halfway
  129|  28.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 28.9k]
  ------------------
  130|  28.9k|    ? 0
  131|  28.9k|    : uint64_t(1) << (shift - 1);
  132|  28.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  28.9k|  bool is_above = truncated_bits > halfway;
  134|  28.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  28.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 28.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  28.9k|  } else {
  140|  28.9k|    am.mantissa >>= shift;
  141|  28.9k|  }
  142|  28.9k|  am.power2 += shift;
  143|       |
  144|  28.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  28.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  28.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  28.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  28.9k|      (void)_;  // not needed, since we've done our comparison
  377|  28.9k|      (void)__; // not needed, since we've done our comparison
  378|  28.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.8k, False: 17.0k]
  ------------------
  379|  11.8k|        return true;
  380|  17.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 16.5k, False: 510]
  ------------------
  381|  16.5k|        return false;
  382|  16.5k|      } else {
  383|    510|        return is_odd;
  384|    510|      }
  385|  28.9k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.98M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.18M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   389k|  constexpr size_t len() const noexcept {
  238|   389k|    return length;
  239|   389k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   610k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   610k|  return -10;
  469|   610k|#endif
  470|   610k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   570k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   570k|  return 10;
  517|   570k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   499k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   499k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   499k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.50M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.50M|  return 23;
  477|  1.50M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   474k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   474k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   474k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   524k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   212k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   212k|  return -65;
  568|   212k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   211k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   211k|  return 38;
  559|   211k|}
_ZN10fast_float14leading_zeroesEm:
  268|   459k|int leading_zeroes(uint64_t input_num) {
  269|   459k|  assert(input_num > 0);
  270|   459k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   459k|  return __builtin_clzll(input_num);
  285|   459k|#endif
  286|   459k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   584k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   584k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   584k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   584k|  answer.low = uint64_t(r);
  337|   584k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   584k|  return answer;
  342|   584k|}
_ZN10fast_float8value128C2Ev:
  251|   584k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   251k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   251k|  return -127;
  500|   251k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  71.3k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  71.3k|  return -17;
  493|  71.3k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  69.3k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  69.3k|  return 10;
  485|  69.3k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   162k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   162k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 56.1k, False: 106k]
  |  Branch (352:38): [True: 0, False: 106k]
  ------------------
  353|   162k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  23.3k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  23.3k|  return 114;
  575|  23.3k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  93.2k|{
  650|  93.2k|    return sizeof(uint64_t) / sizeof(UC);
  651|  93.2k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  38.8k|{
  644|  38.8k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  38.8k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  38.8k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  74.6k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   195k|  constexpr size_t len() const noexcept {
  238|   195k|    return length;
  239|   195k|  }
_ZNK10fast_float4spanImEixEm:
  241|   106k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   106k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   106k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   106k|    return ptr[index];
  244|   106k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   158k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   158k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   158k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   158k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   158k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   158k|  ::memcpy(&value, &word, sizeof(T));
  615|   158k|#endif
  616|   158k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   158k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   392k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   392k|  return 0xFF;
  507|   392k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   994k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   507k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   254k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    216|  constexpr size_t len() const noexcept {
  238|    216|    return length;
  239|    216|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   253k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   637k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   637k|  return -22;
  461|   637k|#endif
  462|   637k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   631k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   631k|  return 22;
  514|   631k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   528k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   528k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   528k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.53M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.53M|  return 52;
  474|  1.53M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   524k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   524k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   524k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   193k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   193k|  return -342;
  564|   193k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   192k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   192k|  return 308;
  555|   192k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   255k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   255k|  return -1023;
  497|   255k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  58.3k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  58.3k|  return -4;
  489|  58.3k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  32.1k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  32.1k|  return 23;
  481|  32.1k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  32.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  32.8k|  return 769;
  572|  32.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   142k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   142k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   142k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   142k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   142k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   142k|  ::memcpy(&value, &word, sizeof(T));
  615|   142k|#endif
  616|   142k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   142k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   365k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   365k|  return 0x7FF;
  504|   365k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   486k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   486k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   486k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   486k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   486k|    return from_chars_advanced(first, last, value, options);
  143|   486k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   486k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   486k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   486k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   486k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   486k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 486k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   486k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   486k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 486k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   486k|  answer.ec = std::errc(); // be optimistic
  221|   486k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   486k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 446k, False: 39.7k]
  |  Branch (227:69): [True: 423k, False: 23.7k]
  |  Branch (227:131): [True: 378k, False: 44.9k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   378k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 378k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   378k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 353k, False: 24.4k]
  ------------------
  239|   353k|        value = T(pns.mantissa);
  240|   353k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.94k, False: 345k]
  ------------------
  241|   345k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   353k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 353k]
  ------------------
  243|   353k|        return answer;
  244|   353k|      }
  245|   378k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   378k|  }
  262|   132k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   132k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 79.6k, False: 53.2k]
  |  Branch (263:29): [True: 79.6k, False: 0]
  ------------------
  264|  79.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 23.3k, False: 56.2k]
  ------------------
  265|  23.3k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  23.3k|    }
  267|  79.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   132k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 23.3k, False: 109k]
  ------------------
  271|   132k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   132k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 129k, False: 3.29k]
  |  Branch (273:29): [True: 15.1k, False: 114k]
  |  Branch (273:49): [True: 719, False: 14.4k]
  |  Branch (273:68): [True: 4.31k, False: 127k]
  ------------------
  274|  5.03k|    answer.ec = std::errc::result_out_of_range;
  275|  5.03k|  }
  276|   132k|  return answer;
  277|   486k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.02M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.02M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.02M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.02M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.02M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.02M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   124k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   124k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   124k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   124k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   124k|    return from_chars_advanced(first, last, value, options);
  143|   124k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   124k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   124k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   124k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   124k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   124k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 124k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   124k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   124k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 124k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   124k|  answer.ec = std::errc(); // be optimistic
  221|   124k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   124k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 123k, False: 770]
  |  Branch (227:69): [True: 121k, False: 1.98k]
  |  Branch (227:131): [True: 121k, False: 90]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   121k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 121k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   121k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 121k, False: 108]
  ------------------
  239|   121k|        value = T(pns.mantissa);
  240|   121k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 208, False: 120k]
  ------------------
  241|   120k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   121k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 121k]
  ------------------
  243|   121k|        return answer;
  244|   121k|      }
  245|   121k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   121k|  }
  262|  2.95k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  2.95k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 90, False: 2.86k]
  |  Branch (263:29): [True: 90, False: 0]
  ------------------
  264|     90|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 90]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|     90|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  2.95k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 2.95k]
  ------------------
  271|  2.95k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  2.95k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.72k, False: 232]
  |  Branch (273:29): [True: 2.26k, False: 456]
  |  Branch (273:49): [True: 576, False: 1.68k]
  |  Branch (273:68): [True: 1.68k, False: 688]
  ------------------
  274|  2.26k|    answer.ec = std::errc::result_out_of_range;
  275|  2.26k|  }
  276|  2.95k|  return answer;
  277|   124k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   508k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   508k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   508k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   508k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   508k|    return from_chars_advanced(first, last, value, options);
  143|   508k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   508k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   508k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   508k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   508k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   508k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 508k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   508k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   508k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 508k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   508k|  answer.ec = std::errc(); // be optimistic
  221|   508k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   508k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 502k, False: 5.24k]
  |  Branch (227:69): [True: 480k, False: 22.7k]
  |  Branch (227:131): [True: 402k, False: 78.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   402k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 402k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   402k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 397k, False: 4.51k]
  ------------------
  239|   397k|        value = T(pns.mantissa);
  240|   397k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 22.5k, False: 375k]
  ------------------
  241|   375k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   397k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 397k]
  ------------------
  243|   397k|        return answer;
  244|   397k|      }
  245|   402k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   402k|  }
  262|   110k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   110k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 82.8k, False: 27.7k]
  |  Branch (263:29): [True: 82.8k, False: 0]
  ------------------
  264|  82.8k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 32.8k, False: 50.0k]
  ------------------
  265|  32.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  32.8k|    }
  267|  82.8k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   110k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 32.8k, False: 77.7k]
  ------------------
  271|   110k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   110k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 107k, False: 3.00k]
  |  Branch (273:29): [True: 10.1k, False: 97.4k]
  |  Branch (273:49): [True: 195, False: 9.96k]
  |  Branch (273:68): [True: 2.11k, False: 108k]
  ------------------
  274|  2.30k|    answer.ec = std::errc::result_out_of_range;
  275|  2.30k|  }
  276|   110k|  return answer;
  277|   508k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   129k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   129k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   129k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   129k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   129k|    return from_chars_advanced(first, last, value, options);
  143|   129k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   129k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   129k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   129k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   129k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   129k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 129k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   129k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   129k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 129k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   129k|  answer.ec = std::errc(); // be optimistic
  221|   129k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   129k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 128k, False: 836]
  |  Branch (227:69): [True: 126k, False: 2.02k]
  |  Branch (227:131): [True: 126k, False: 90]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   126k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 126k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   126k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 126k, False: 54]
  ------------------
  239|   126k|        value = T(pns.mantissa);
  240|   126k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 268, False: 126k]
  ------------------
  241|   126k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   126k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 126k]
  ------------------
  243|   126k|        return answer;
  244|   126k|      }
  245|   126k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   126k|  }
  262|  3.00k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.00k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 90, False: 2.91k]
  |  Branch (263:29): [True: 90, False: 0]
  ------------------
  264|     90|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 90]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|     90|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.00k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.00k]
  ------------------
  271|  3.00k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.00k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.78k, False: 218]
  |  Branch (273:29): [True: 1.18k, False: 1.60k]
  |  Branch (273:49): [True: 82, False: 1.10k]
  |  Branch (273:68): [True: 1.10k, False: 1.82k]
  ------------------
  274|  1.18k|    answer.ec = std::errc::result_out_of_range;
  275|  1.18k|  }
  276|  3.00k|  return answer;
  277|   129k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.22M|{
 3807|  3.22M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.22M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.22M|    }
 3810|  3.22M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.22M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.22M|    }
 3813|  3.22M|    else {
 3814|       |        // utf-32
 3815|  3.22M|        static_assert(sizeof(U) == 4);
 3816|  3.22M|        SCN_UNUSED(ch);
 3817|  3.22M|        return 1;
 3818|  3.22M|    }
 3819|  3.22M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.22M|{
 3771|  3.22M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.22M|    SCN_GCC_COMPAT_PUSH
 3774|  3.22M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.22M|    constexpr char lengths[] =
 3776|  3.22M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.22M|        "\1\1\1\1\1\1\1\1"
 3778|  3.22M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.22M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.22M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.22M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.22M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.22M|    SCN_GCC_COMPAT_POP
 3785|  3.22M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.88M|{
 4013|  2.88M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.88M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.88M|    }
 4016|  2.88M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.88M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.88M|    }
 4019|  2.88M|    else {
 4020|  2.88M|        SCN_EXPECT(input.size() == 1);
 4021|  2.88M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.88M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.88M|            return invalid_code_point;
 4024|  2.88M|        }
 4025|  2.88M|        return cp;
 4026|  2.88M|    }
 4027|  2.88M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.88M|{
 3826|  2.88M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.88M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.88M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.88M|    };
 3831|       |
 3832|  2.88M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.81M, False: 72.2k]
  ------------------
 3833|  2.81M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 649, False: 2.81M]
  ------------------
 3834|    649|            SCN_UNLIKELY_ATTR
 3835|    649|            return invalid_code_point;
 3836|    649|        }
 3837|  2.81M|        return static_cast<char32_t>(input[0]);
 3838|  2.81M|    }
 3839|       |
 3840|  72.2k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 64.0k, False: 8.19k]
  ------------------
 3841|  64.0k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 140, False: 63.8k]
  ------------------
 3842|    140|            SCN_UNLIKELY_ATTR
 3843|    140|            return invalid_code_point;
 3844|    140|        }
 3845|  63.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 4.97k, False: 58.9k]
  ------------------
 3846|  4.97k|            SCN_UNLIKELY_ATTR
 3847|  4.97k|            return invalid_code_point;
 3848|  4.97k|        }
 3849|       |
 3850|  58.9k|        char32_t cp{};
 3851|  58.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  58.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  58.9k|        return cp;
 3854|  63.8k|    }
 3855|       |
 3856|  8.19k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 5.72k, False: 2.46k]
  ------------------
 3857|  5.72k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 137, False: 5.58k]
  ------------------
 3858|    137|            SCN_UNLIKELY_ATTR
 3859|    137|            return invalid_code_point;
 3860|    137|        }
 3861|  5.58k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 3.72k, False: 1.85k]
  ------------------
 3862|  5.58k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 598, False: 1.26k]
  ------------------
 3863|  4.32k|            SCN_UNLIKELY_ATTR
 3864|  4.32k|            return invalid_code_point;
 3865|  4.32k|        }
 3866|       |
 3867|  1.26k|        char32_t cp{};
 3868|  1.26k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.26k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.26k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.26k|        return cp;
 3872|  5.58k|    }
 3873|       |
 3874|  2.46k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.46k, False: 0]
  ------------------
 3875|  2.46k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.46k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.46k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 509, False: 1.96k]
  ------------------
 3880|    509|            SCN_UNLIKELY_ATTR
 3881|    509|            return invalid_code_point;
 3882|    509|        }
 3883|  1.96k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 551, False: 1.40k]
  ------------------
 3884|  1.96k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 563, False: 846]
  ------------------
 3885|  1.96k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 543, False: 303]
  ------------------
 3886|  1.65k|            SCN_UNLIKELY_ATTR
 3887|  1.65k|            return invalid_code_point;
 3888|  1.65k|        }
 3889|       |
 3890|    303|        char32_t cp{};
 3891|    303|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    303|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    303|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    303|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    303|        return cp;
 3896|  1.96k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  75.5k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  75.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  75.5k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.84M|{
 3699|  4.84M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.84M|                                          decltype(first), decltype(last)> &&
 3701|  4.84M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.84M|        return {first, last};
 3703|  4.84M|    }
 3704|  4.84M|    else {
 3705|  4.84M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.84M|                                       to_address(first), to_address(last)))};
 3707|  4.84M|    }
 3708|  4.84M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.7M|{
  326|  14.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  16.8M|{
  304|  16.8M|    return p;
  305|  16.8M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.72M|{
 3730|  7.72M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.72M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.72M|                      decltype(it)> &&
 3733|  7.72M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.72M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.72M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.72M|        return it;
 3736|  7.72M|    }
 3737|  7.72M|    else {
 3738|  7.72M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.72M|    }
 3740|  7.72M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  83.2k|    {
 2724|  83.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  83.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  83.2k|    {
 2705|  83.2k|        return decay_copy(t.begin());
 2706|  83.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  11.2M|{
 1949|  11.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.13M|    {
 2781|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.13M|    {
 2763|  2.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.13M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   155k|{
 8867|   155k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   155k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   155k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   155k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   664k|{
 5396|   664k|    detail::check_scan_arg_types<Args...>();
 5397|   664k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   664k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|   995k|{
 5135|   995k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   995k|                  "Scan argument types must be default constructible");
 5137|   995k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   995k|                  "Scan argument types must be Destructible");
 5139|   995k|    static_assert(
 5140|   995k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   995k|        "Scan argument types must not be references");
 5142|   995k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   664k|    {
 5349|   664k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   664k|    {
 5360|   664k|        return {detail::make_arg<
 5361|   664k|            kind, Context,
 5362|   664k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   664k|                                 typename Context::char_type>::value>(args)...};
 5364|   664k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   664k|{
 5170|   664k|    return make_value<Context>(value).ref_value;
 5171|   664k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   734k|{
 5120|   734k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   734k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   734k|                                  needs_context_tag>) {
 5124|   734k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   734k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   734k|    }
 5126|   734k|    else {
 5127|   734k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   734k|            value, context_tag<Context>{}));
 5129|   734k|    }
 5130|   734k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   734k|    {                                                                        \
 4959|   734k|        return val;                                                          \
 4960|   734k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|   995k|{
 5089|   995k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   995k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   995k|    constexpr bool scannable_char =
 5093|   995k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   995k|    static_assert(scannable_char,
 5095|   995k|                  "Cannot scan an argument of an unsupported character "
 5096|   995k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   995k|    constexpr bool scannable_const =
 5099|   995k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   995k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   995k|    constexpr bool scannable_disabled =
 5103|   995k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   995k|    static_assert(scannable_disabled,
 5105|   995k|                  "Cannot scan an argument that has been disabled by "
 5106|   995k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   995k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   995k|    static_assert(
 5110|   995k|        scannable,
 5111|   995k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   995k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   995k|    return arg_value{arg};
 5115|   995k|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|   995k|    {
 4902|   995k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   480k|{
 8654|   480k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   480k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   480k|{
 8591|   480k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   480k|    auto result = vscan_impl(buffer, format, args);
 8594|   480k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.4k, False: 443k]
  |  |  ------------------
  ------------------
 8595|  37.4k|        return unexpected(result.error());
 8596|  37.4k|    }
 8597|   443k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   480k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.06M|{
 4720|  1.06M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.06M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.06M|                  "\n"
 4724|  1.06M|                  "Unsupported range type given as input to a scanning "
 4725|  1.06M|                  "function.\n"
 4726|  1.06M|                  "A range needs to have a character type (value type) "
 4727|  1.06M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.06M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.06M|                  "to be included.\n"
 4730|  1.06M|                  "See the scnlib documentation for more details.");
 4731|  1.06M|    static_assert(
 4732|  1.06M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.06M|        "\n"
 4734|  1.06M|        "Unsupported range type given as input to a scanning "
 4735|  1.06M|        "function.\n"
 4736|  1.06M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.06M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.06M|        "not supported.");
 4739|  1.06M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.06M|                  "\n"
 4741|  1.06M|                  "Unsupported range type given as input to a scanning "
 4742|  1.06M|                  "function.\n"
 4743|  1.06M|                  "file_marker_found cannot be used as an "
 4744|  1.06M|                  "source range type to scn::scan.\n"
 4745|  1.06M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.06M|                  "and do not provide an explicit source range, "
 4747|  1.06M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.06M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.06M|                  "\n"
 4750|  1.06M|                  "Unsupported range type given as input to a scanning "
 4751|  1.06M|                  "function.\n"
 4752|  1.06M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.06M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.06M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.06M|                  "\n"
 4756|  1.06M|                  "Unsupported range type given as input to a scanning "
 4757|  1.06M|                  "function.\n"
 4758|  1.06M|                  "A range needs to model forward_range and have a valid "
 4759|  1.06M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.06M|                  "Examples of scannable ranges are std::string, "
 4761|  1.06M|                  "std::string_view, "
 4762|  1.06M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.06M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.06M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.06M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.06M|{
 4659|  1.06M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.06M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.06M|    }
 4662|  1.06M|    else {
 4663|  1.06M|        return invalid_char_type{};
 4664|  1.06M|    }
 4665|  1.06M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.06M|    {
 2855|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.06M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.06M|    {
 2836|  1.06M|        return t.data();
 2837|  1.06M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.06M|    {
 3231|  1.06M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 14.1k, False: 1.05M]
  ------------------
 3232|  1.06M|                   ? nullptr
 3233|  1.06M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.06M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.06M|    {
 3005|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.06M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.06M|    {
 2978|  1.06M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.06M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  5.84M|    {
 3339|  5.84M|        return m_iterator == m_sentinel;
 3340|  5.84M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.11M|    {
 3185|  2.11M|        return static_cast<const D&>(*this);
 3186|  2.11M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.03M|    {
 2724|  2.03M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.03M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.03M|    {
 2705|  2.03M|        return decay_copy(t.begin());
 2706|  2.03M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  25.7M|    {
 3330|  25.7M|        return m_iterator;
 3331|  25.7M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.06M|    {
 2930|  1.06M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.06M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.06M|    {
 2896|  1.06M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.06M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.05M|{
 1949|  4.05M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.05M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  5.88M|    {
 3346|  5.88M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  5.88M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.1M|    {
 1598|  10.1M|        return has_value();
 1599|  10.1M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  19.9M|    {
  485|  19.9M|        return m_has_value;
  486|  19.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   737k|    {
 1604|   737k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   737k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   737k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   737k|        return this->get_unexpected().error();
 1606|   737k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   737k|    {
  468|   737k|        return m_unexpected;
  469|   737k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.69M|    {
  361|  5.69M|        return m_unexpected;
  362|  5.69M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.78M|    {
  347|  2.78M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.78M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  81.1k|    {
 1476|  81.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  81.1k|    {
  447|  81.1k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.17M|    {
  356|  6.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.17M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   985k|{
 5923|   985k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   985k|                      ranges::iterator_t<SourceRange>>) {
 5925|   985k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   985k|    }
 5927|   985k|    else {
 5928|   985k|        auto it = ranges::begin(source);
 5929|   985k|        while (n > 0) {
 5930|   985k|            --n;
 5931|   985k|            ++it;
 5932|   985k|        }
 5933|   985k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   985k|    }
 5935|   985k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.05M|    {
 2724|  6.05M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.05M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.05M|    {
 2705|  6.05M|        return decay_copy(t.begin());
 2706|  6.05M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   985k|{
 5910|   985k|    return ranges::end(source);
 5911|   985k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   985k|    {
 2781|   985k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   985k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   985k|    {
 2763|   985k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   985k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  12.5M|    {
 3334|  12.5M|        return m_sentinel;
 3335|  12.5M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.95M|    {
 1653|  3.95M|        return value();
 1654|  3.95M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  9.13M|    {
 1627|  9.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.13M|        return this->get_value();
 1629|  9.13M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.13M|    {
  451|  9.13M|        return m_value;
  452|  9.13M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   985k|    {
 1430|   985k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   985k|    {
  437|   985k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   310k|    {
 7975|   310k|        return m_str;
 7976|   310k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   664k|    {
 5426|   664k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   664k|    {
 5379|   664k|        return m_argptrs;
 5380|   664k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  2.06M|    {
 5478|  2.06M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   310k|{
 8820|   310k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 285k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   285k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   285k|    static_cast<    \
  |  |  929|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   285k|    static_cast<    \
  |  |  929|   285k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   310k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.13M|    {
  485|  2.13M|        return m_has_value;
  486|  2.13M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  81.1k|    {
 1604|  81.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  81.1k|        return this->get_unexpected().error();
 1606|  81.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  81.1k|    {
  468|  81.1k|        return m_unexpected;
  469|  81.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   344k|    {
 1177|   344k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   886k|    {
 1653|   886k|        return value();
 1654|   886k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   985k|    {
 1627|   985k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   985k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   985k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   985k|        return this->get_value();
 1629|   985k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   985k|    {
  451|   985k|        return m_value;
  452|   985k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   317k|    {
 5830|   317k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   985k|    {
 5681|   985k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   832k|    {
 5616|   832k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   317k|    {
 1430|   317k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   317k|    {
  437|   317k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   664k|    {
 5374|   664k|        return m_args;
 5375|   664k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  10.0M|    {
 3316|  10.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.06M|{
 7691|  2.06M|    return s;
 7692|  2.06M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.06M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   310k|    {
 7971|   310k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   344k|    {
 1598|   344k|        return has_value();
 1599|   344k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   661k|    {
  485|   661k|        return m_has_value;
  486|   661k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   317k|    {
 1673|   317k|        return &value();
 1674|   317k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   317k|    {
 1627|   317k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   317k|        return this->get_value();
 1629|   317k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   317k|    {
  451|   317k|        return m_value;
  452|   317k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   985k|    {
 5698|   985k|        return ranges::begin(m_range);
 5699|   985k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   155k|{
 8934|   155k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   155k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   155k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   155k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   480k|{
 8672|   480k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   480k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   480k|{
 8607|   480k|#if !SCN_DISABLE_LOCALE
 8608|   480k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   480k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   480k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   480k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   480k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.4k, False: 443k]
  |  |  ------------------
  ------------------
 8615|  37.4k|        return unexpected(result.error());
 8616|  37.4k|    }
 8617|   443k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   480k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  33.6k|{
 8973|  33.6k|    T value;
 8974|  33.6k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 31.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  33.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  31.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.5k|    static_cast<    \
  |  |  929|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.5k|    static_cast<    \
  |  |  929|  31.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  69.8k|{
 5155|  69.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  69.8k|    basic_scan_arg<Context> arg;
 5158|  69.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  69.8k|    arg.m_value = make_value<Context>(value);
 5160|  69.8k|    return arg;
 5161|  69.8k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.27M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.07M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   104k|{
 8685|   104k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   104k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   104k|{
 8631|   104k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   104k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   104k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.24k, False: 98.6k]
  |  |  ------------------
  ------------------
 8635|  6.24k|        return unexpected(result.error());
 8636|  6.24k|    }
 8637|  98.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   104k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  98.6k|    {
 1663|  98.6k|        return std::move(value());
 1664|  98.6k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   161k|{
 8867|   161k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   161k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   161k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   161k|    static_cast<    \
  |  |  929|   161k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   161k|    static_cast<    \
  |  |  929|   161k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   161k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   693k|{
 5396|   693k|    detail::check_scan_arg_types<Args...>();
 5397|   693k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   693k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.03M|{
 5135|  1.03M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.03M|                  "Scan argument types must be default constructible");
 5137|  1.03M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.03M|                  "Scan argument types must be Destructible");
 5139|  1.03M|    static_assert(
 5140|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.03M|        "Scan argument types must not be references");
 5142|  1.03M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   693k|    {
 5349|   693k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   693k|    {
 5360|   693k|        return {detail::make_arg<
 5361|   693k|            kind, Context,
 5362|   693k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   693k|                                 typename Context::char_type>::value>(args)...};
 5364|   693k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   693k|{
 5170|   693k|    return make_value<Context>(value).ref_value;
 5171|   693k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   767k|{
 5120|   767k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   767k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   767k|                                  needs_context_tag>) {
 5124|   767k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   767k|    }
 5126|   767k|    else {
 5127|   767k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   767k|            value, context_tag<Context>{}));
 5129|   767k|    }
 5130|   767k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   767k|    {                                                                        \
 4959|   767k|        return val;                                                          \
 4960|   767k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.03M|{
 5089|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.03M|    constexpr bool scannable_char =
 5093|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.03M|    static_assert(scannable_char,
 5095|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.03M|    constexpr bool scannable_const =
 5099|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.03M|    constexpr bool scannable_disabled =
 5103|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.03M|    static_assert(scannable_disabled,
 5105|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.03M|    static_assert(
 5110|  1.03M|        scannable,
 5111|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.03M|    return arg_value{arg};
 5115|  1.03M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.03M|    {
 4902|  1.03M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   323k|    {
 7975|   323k|        return m_str;
 7976|   323k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   693k|    {
 5426|   693k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   693k|    {
 5379|   693k|        return m_argptrs;
 5380|   693k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   323k|{
 8820|   323k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 298k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   298k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   323k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   358k|    {
 1177|   358k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   331k|    {
 5830|   331k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   872k|    {
 5616|   872k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   331k|    {
 1430|   331k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   331k|    {
  437|   331k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   693k|    {
 5374|   693k|        return m_args;
 5375|   693k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   323k|    {
 7971|   323k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   358k|    {
 1598|   358k|        return has_value();
 1599|   358k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   690k|    {
  485|   690k|        return m_has_value;
  486|   690k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   331k|    {
 1673|   331k|        return &value();
 1674|   331k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   331k|    {
 1627|   331k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   331k|        return this->get_value();
 1629|   331k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   331k|    {
  451|   331k|        return m_value;
  452|   331k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   161k|{
 8934|   161k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   161k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   161k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   161k|    static_cast<    \
  |  |  929|   161k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   161k|    static_cast<    \
  |  |  929|   161k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   161k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  35.3k|{
 8973|  35.3k|    T value;
 8974|  35.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 33.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  35.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.2k|    static_cast<    \
  |  |  929|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.2k|    static_cast<    \
  |  |  929|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  73.4k|{
 5155|  73.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  73.4k|    basic_scan_arg<Context> arg;
 5158|  73.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  73.4k|    arg.m_value = make_value<Context>(value);
 5160|  73.4k|    return arg;
 5161|  73.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   163k|{
 8867|   163k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   163k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   163k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   163k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   702k|{
 5396|   702k|    detail::check_scan_arg_types<Args...>();
 5397|   702k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   702k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.04M|{
 5135|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.04M|                  "Scan argument types must be default constructible");
 5137|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.04M|                  "Scan argument types must be Destructible");
 5139|  1.04M|    static_assert(
 5140|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.04M|        "Scan argument types must not be references");
 5142|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   702k|    {
 5349|   702k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   702k|    {
 5360|   702k|        return {detail::make_arg<
 5361|   702k|            kind, Context,
 5362|   702k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   702k|                                 typename Context::char_type>::value>(args)...};
 5364|   702k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   702k|{
 5170|   702k|    return make_value<Context>(value).ref_value;
 5171|   702k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   776k|{
 5120|   776k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   776k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   776k|                                  needs_context_tag>) {
 5124|   776k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   776k|    }
 5126|   776k|    else {
 5127|   776k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   776k|            value, context_tag<Context>{}));
 5129|   776k|    }
 5130|   776k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   776k|    {                                                                        \
 4959|   776k|        return val;                                                          \
 4960|   776k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.04M|{
 5089|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.04M|    constexpr bool scannable_char =
 5093|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.04M|    static_assert(scannable_char,
 5095|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.04M|    constexpr bool scannable_const =
 5099|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.04M|    constexpr bool scannable_disabled =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.04M|    static_assert(scannable_disabled,
 5105|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.04M|    static_assert(
 5110|  1.04M|        scannable,
 5111|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.04M|    return arg_value{arg};
 5115|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.04M|    {
 4902|  1.04M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   327k|    {
 7975|   327k|        return m_str;
 7976|   327k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   702k|    {
 5426|   702k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   702k|    {
 5379|   702k|        return m_argptrs;
 5380|   702k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   327k|{
 8820|   327k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 302k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   302k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   327k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   363k|    {
 1177|   363k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   336k|    {
 5830|   336k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   885k|    {
 5616|   885k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   336k|    {
 1430|   336k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   336k|    {
  437|   336k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   702k|    {
 5374|   702k|        return m_args;
 5375|   702k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   327k|    {
 7971|   327k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   363k|    {
 1598|   363k|        return has_value();
 1599|   363k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   699k|    {
  485|   699k|        return m_has_value;
  486|   699k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   336k|    {
 1673|   336k|        return &value();
 1674|   336k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   336k|    {
 1627|   336k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   336k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   336k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   336k|        return this->get_value();
 1629|   336k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   336k|    {
  451|   336k|        return m_value;
  452|   336k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   163k|{
 8934|   163k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   163k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   163k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   163k|    static_cast<    \
  |  |  929|   163k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   163k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  35.9k|{
 8973|  35.9k|    T value;
 8974|  35.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 33.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  35.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.8k|    static_cast<    \
  |  |  929|  33.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.8k|    static_cast<    \
  |  |  929|  33.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  74.4k|{
 5155|  74.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  74.4k|    basic_scan_arg<Context> arg;
 5158|  74.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  74.4k|    arg.m_value = make_value<Context>(value);
 5160|  74.4k|    return arg;
 5161|  74.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  81.1k|    {
 2724|  81.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  81.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  81.1k|    {
 2705|  81.1k|        return decay_copy(t.begin());
 2706|  81.1k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  51.5M|{
 1949|  51.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  51.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  51.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.42M|    {
 2781|  2.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.42M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.42M|    {
 2763|  2.42M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.42M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   176k|{
 8867|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   176k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   176k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   549k|{
 8654|   549k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   549k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   549k|{
 8591|   549k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   549k|    auto result = vscan_impl(buffer, format, args);
 8594|   549k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.4k, False: 512k]
  |  |  ------------------
  ------------------
 8595|  37.4k|        return unexpected(result.error());
 8596|  37.4k|    }
 8597|   512k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   549k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.21M|{
 4720|  1.21M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.21M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.21M|                  "\n"
 4724|  1.21M|                  "Unsupported range type given as input to a scanning "
 4725|  1.21M|                  "function.\n"
 4726|  1.21M|                  "A range needs to have a character type (value type) "
 4727|  1.21M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.21M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.21M|                  "to be included.\n"
 4730|  1.21M|                  "See the scnlib documentation for more details.");
 4731|  1.21M|    static_assert(
 4732|  1.21M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.21M|        "\n"
 4734|  1.21M|        "Unsupported range type given as input to a scanning "
 4735|  1.21M|        "function.\n"
 4736|  1.21M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.21M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.21M|        "not supported.");
 4739|  1.21M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.21M|                  "\n"
 4741|  1.21M|                  "Unsupported range type given as input to a scanning "
 4742|  1.21M|                  "function.\n"
 4743|  1.21M|                  "file_marker_found cannot be used as an "
 4744|  1.21M|                  "source range type to scn::scan.\n"
 4745|  1.21M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.21M|                  "and do not provide an explicit source range, "
 4747|  1.21M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.21M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.21M|                  "\n"
 4750|  1.21M|                  "Unsupported range type given as input to a scanning "
 4751|  1.21M|                  "function.\n"
 4752|  1.21M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.21M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.21M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.21M|                  "\n"
 4756|  1.21M|                  "Unsupported range type given as input to a scanning "
 4757|  1.21M|                  "function.\n"
 4758|  1.21M|                  "A range needs to model forward_range and have a valid "
 4759|  1.21M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.21M|                  "Examples of scannable ranges are std::string, "
 4761|  1.21M|                  "std::string_view, "
 4762|  1.21M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.21M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.21M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.21M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.21M|{
 4690|  1.21M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.21M|        return file_marker_found{};
 4692|  1.21M|    }
 4693|  1.21M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.21M|        if constexpr (ranges::range<Range>) {
 4695|  1.21M|            return insufficient_range{};
 4696|  1.21M|        }
 4697|  1.21M|        else {
 4698|  1.21M|            return invalid_input_range{};
 4699|  1.21M|        }
 4700|  1.21M|    }
 4701|  1.21M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.21M|        return invalid_char_type{};
 4703|  1.21M|    }
 4704|  1.21M|    else {
 4705|  1.21M|        return make_forward_scan_buffer(r);
 4706|  1.21M|    }
 4707|  1.21M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.21M|{
 4524|  1.21M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.21M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.21M|    {
 4411|  1.21M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.21M|    {
 4382|  1.21M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.21M|    {
 4151|  1.21M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.21M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.34M|    {
 2724|  2.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.34M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.34M|    {
 2705|  2.34M|        return decay_copy(t.begin());
 2706|  2.34M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.47M|    {
 3330|  3.47M|        return m_iterator;
 3331|  3.47M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  14.9M|    {
 4415|  14.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 276k, False: 14.7M]
  ------------------
 4416|   276k|            return false;
 4417|   276k|        }
 4418|  14.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  14.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  14.7M|        }
 4421|  14.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 13.5M, False: 1.19M]
  ------------------
 4422|  13.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  13.5M|                                          this->m_current_view.begin(),
 4424|  13.5M|                                          this->m_current_view.end());
 4425|  13.5M|        }
 4426|  14.7M|        m_latest = *m_cursor;
 4427|  14.7M|        ++m_cursor;
 4428|  14.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  14.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  14.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  14.7M|        }
 4432|  14.7M|        return true;
 4433|  14.7M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  44.4M|    {
 2781|  44.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  44.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  44.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  44.4M|    {
 2763|  44.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  44.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  44.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  45.5M|    {
 3334|  45.5M|        return m_sentinel;
 3335|  45.5M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.21M|    {
 4071|  1.21M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.21M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.21M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  81.1k|    {
 1476|  81.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  81.1k|    {
  447|  81.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.21M|    {
 1177|  1.21M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.13M|{
 5923|  1.13M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.13M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.13M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.13M|    }
 5927|  1.13M|    else {
 5928|  1.13M|        auto it = ranges::begin(source);
 5929|  1.13M|        while (n > 0) {
 5930|  1.13M|            --n;
 5931|  1.13M|            ++it;
 5932|  1.13M|        }
 5933|  1.13M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.13M|    }
 5935|  1.13M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.13M|    {
 2724|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.13M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.13M|    {
 2705|  1.13M|        return decay_copy(t.begin());
 2706|  1.13M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.13M|{
 5910|  1.13M|    return ranges::end(source);
 5911|  1.13M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.13M|    {
 2781|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.13M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.13M|    {
 2763|  1.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.13M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.13M|    {
  437|  1.13M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   353k|    {
 7975|   353k|        return m_str;
 7976|   353k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   353k|{
 8820|   353k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 328k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   328k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   328k|    static_cast<    \
  |  |  929|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   328k|    static_cast<    \
  |  |  929|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   353k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.21M|    {
 1598|  1.21M|        return has_value();
 1599|  1.21M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.42M|    {
  485|  2.42M|        return m_has_value;
  486|  2.42M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  81.1k|    {
 1604|  81.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  81.1k|        return this->get_unexpected().error();
 1606|  81.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  81.1k|    {
  468|  81.1k|        return m_unexpected;
  469|  81.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   390k|    {
 1177|   390k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  1.02M|    {
 1653|  1.02M|        return value();
 1654|  1.02M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   363k|    {
 5830|   363k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.13M|    {
 5681|  1.13M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   363k|    {
 1430|   363k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   363k|    {
  437|   363k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.34M|    {
 3316|  2.34M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   353k|    {
 7971|   353k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   390k|    {
 1598|   390k|        return has_value();
 1599|   390k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   753k|    {
  485|   753k|        return m_has_value;
  486|   753k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   363k|    {
 1673|   363k|        return &value();
 1674|   363k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   363k|    {
 1627|   363k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   363k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   363k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   363k|        return this->get_value();
 1629|   363k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   363k|    {
  451|   363k|        return m_value;
  452|   363k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.13M|    {
 5698|  1.13M|        return ranges::begin(m_range);
 5699|  1.13M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   176k|{
 8934|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   176k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   176k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   549k|{
 8672|   549k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   549k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   549k|{
 8607|   549k|#if !SCN_DISABLE_LOCALE
 8608|   549k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   549k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   549k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   549k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   549k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.4k, False: 512k]
  |  |  ------------------
  ------------------
 8615|  37.4k|        return unexpected(result.error());
 8616|  37.4k|    }
 8617|   512k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   549k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  36.2k|{
 8973|  36.2k|    T value;
 8974|  36.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 34.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.1k|    static_cast<    \
  |  |  929|  34.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.1k|    static_cast<    \
  |  |  929|  34.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   112k|{
 8685|   112k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   112k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   112k|{
 8631|   112k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   112k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   112k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.24k, False: 106k]
  |  |  ------------------
  ------------------
 8635|  6.24k|        return unexpected(result.error());
 8636|  6.24k|    }
 8637|   106k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   112k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   106k|    {
 1663|   106k|        return std::move(value());
 1664|   106k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   185k|{
 8867|   185k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   185k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   185k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   185k|    static_cast<    \
  |  |  929|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   185k|    static_cast<    \
  |  |  929|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   185k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   370k|    {
 7975|   370k|        return m_str;
 7976|   370k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   370k|{
 8820|   370k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 345k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   345k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   345k|    static_cast<    \
  |  |  929|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   345k|    static_cast<    \
  |  |  929|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   370k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   408k|    {
 1177|   408k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   381k|    {
 5830|   381k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   381k|    {
 1430|   381k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   381k|    {
  437|   381k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   370k|    {
 7971|   370k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   408k|    {
 1598|   408k|        return has_value();
 1599|   408k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   790k|    {
  485|   790k|        return m_has_value;
  486|   790k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   381k|    {
 1673|   381k|        return &value();
 1674|   381k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   381k|    {
 1627|   381k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   381k|        return this->get_value();
 1629|   381k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   381k|    {
  451|   381k|        return m_value;
  452|   381k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   185k|{
 8934|   185k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   185k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   185k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   185k|    static_cast<    \
  |  |  929|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   185k|    static_cast<    \
  |  |  929|   185k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   185k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  38.0k|{
 8973|  38.0k|    T value;
 8974|  38.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  38.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  38.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  38.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  36.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  38.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   187k|{
 8867|   187k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   187k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   187k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   187k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   374k|    {
 7975|   374k|        return m_str;
 7976|   374k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   374k|{
 8820|   374k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 349k]
  |  |  ------------------
  ------------------
 8821|  24.9k|        return unexpected(result.error());
 8822|  24.9k|    }
 8823|   349k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   349k|    static_cast<    \
  |  |  929|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   349k|    static_cast<    \
  |  |  929|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   374k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.0k|    {
 1476|  27.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.0k|    {
  447|  27.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   413k|    {
 1177|   413k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   386k|    {
 5830|   386k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   386k|    {
 1430|   386k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   386k|    {
  437|   386k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   374k|    {
 7971|   374k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   413k|    {
 1598|   413k|        return has_value();
 1599|   413k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   799k|    {
  485|   799k|        return m_has_value;
  486|   799k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   386k|    {
 1673|   386k|        return &value();
 1674|   386k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   386k|    {
 1627|   386k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   386k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   386k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   386k|        return this->get_value();
 1629|   386k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   386k|    {
  451|   386k|        return m_value;
  452|   386k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   187k|{
 8934|   187k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   187k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   187k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   187k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  38.5k|{
 8973|  38.5k|    T value;
 8974|  38.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  38.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  38.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.08k, False: 36.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.08k|    }                                                  \
  |  |  |  | 3671|  38.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  36.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.4k|    static_cast<    \
  |  |  929|  36.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  38.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   166k|    {
 2724|   166k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   166k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   166k|    {
 2705|   166k|        return decay_copy(t.begin());
 2706|   166k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.56M|{
 1949|  2.56M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.56M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   803k|    {
 2781|   803k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   803k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   803k|    {
 2763|   803k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   803k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   238k|{
 5396|   238k|    detail::check_scan_arg_types<Args...>();
 5397|   238k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   238k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   238k|    {
 5349|   238k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   238k|    {
 5360|   238k|        return {detail::make_arg<
 5361|   238k|            kind, Context,
 5362|   238k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   238k|                                 typename Context::char_type>::value>(args)...};
 5364|   238k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   238k|{
 5170|   238k|    return make_value<Context>(value).ref_value;
 5171|   238k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   260k|{
 5120|   260k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   260k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   260k|                                  needs_context_tag>) {
 5124|   260k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   260k|    }
 5126|   260k|    else {
 5127|   260k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   260k|            value, context_tag<Context>{}));
 5129|   260k|    }
 5130|   260k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   260k|    {                                                                        \
 4959|   260k|        return val;                                                          \
 4960|   260k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   182k|{
 8591|   182k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   182k|    auto result = vscan_impl(buffer, format, args);
 8594|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 107k]
  |  |  ------------------
  ------------------
 8595|  74.9k|        return unexpected(result.error());
 8596|  74.9k|    }
 8597|   107k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   182k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   399k|{
 4720|   399k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   399k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   399k|                  "\n"
 4724|   399k|                  "Unsupported range type given as input to a scanning "
 4725|   399k|                  "function.\n"
 4726|   399k|                  "A range needs to have a character type (value type) "
 4727|   399k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   399k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   399k|                  "to be included.\n"
 4730|   399k|                  "See the scnlib documentation for more details.");
 4731|   399k|    static_assert(
 4732|   399k|        !std::is_same_v<T, custom_char_traits>,
 4733|   399k|        "\n"
 4734|   399k|        "Unsupported range type given as input to a scanning "
 4735|   399k|        "function.\n"
 4736|   399k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   399k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   399k|        "not supported.");
 4739|   399k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   399k|                  "\n"
 4741|   399k|                  "Unsupported range type given as input to a scanning "
 4742|   399k|                  "function.\n"
 4743|   399k|                  "file_marker_found cannot be used as an "
 4744|   399k|                  "source range type to scn::scan.\n"
 4745|   399k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   399k|                  "and do not provide an explicit source range, "
 4747|   399k|                  "or use scn::scan with a FILE* directly.");
 4748|   399k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   399k|                  "\n"
 4750|   399k|                  "Unsupported range type given as input to a scanning "
 4751|   399k|                  "function.\n"
 4752|   399k|                  "In order to be scannable, a range needs to satisfy "
 4753|   399k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   399k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   399k|                  "\n"
 4756|   399k|                  "Unsupported range type given as input to a scanning "
 4757|   399k|                  "function.\n"
 4758|   399k|                  "A range needs to model forward_range and have a valid "
 4759|   399k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   399k|                  "Examples of scannable ranges are std::string, "
 4761|   399k|                  "std::string_view, "
 4762|   399k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   399k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   399k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   399k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   399k|{
 4659|   399k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   399k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   399k|    }
 4662|   399k|    else {
 4663|   399k|        return invalid_char_type{};
 4664|   399k|    }
 4665|   399k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   399k|    {
 2855|   399k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   399k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   399k|    {
 2836|   399k|        return t.data();
 2837|   399k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   399k|    {
 3231|   399k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.21k, False: 398k]
  ------------------
 3232|   399k|                   ? nullptr
 3233|   399k|                   : std::addressof(*ranges::begin(derived()));
 3234|   399k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   399k|    {
 3005|   399k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   399k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   399k|    {
 2978|   399k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   399k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   723k|    {
 3339|   723k|        return m_iterator == m_sentinel;
 3340|   723k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   798k|    {
 3185|   798k|        return static_cast<const D&>(*this);
 3186|   798k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   635k|    {
 2724|   635k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   635k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   635k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   635k|    {
 2705|   635k|        return decay_copy(t.begin());
 2706|   635k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  13.3M|    {
 3330|  13.3M|        return m_iterator;
 3331|  13.3M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   399k|    {
 2930|   399k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   399k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   399k|    {
 2896|   399k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   399k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.75M|    {
 3346|  1.75M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.75M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   162k|    {
 1476|   162k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   162k|    {
  447|   162k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   237k|{
 5923|   237k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   237k|                      ranges::iterator_t<SourceRange>>) {
 5925|   237k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   237k|    }
 5927|   237k|    else {
 5928|   237k|        auto it = ranges::begin(source);
 5929|   237k|        while (n > 0) {
 5930|   237k|            --n;
 5931|   237k|            ++it;
 5932|   237k|        }
 5933|   237k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   237k|    }
 5935|   237k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   718k|    {
 2724|   718k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   718k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   718k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   718k|    {
 2705|   718k|        return decay_copy(t.begin());
 2706|   718k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   237k|{
 5910|   237k|    return ranges::end(source);
 5911|   237k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   237k|    {
 2781|   237k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   237k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   237k|    {
 2763|   237k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   237k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  7.50M|    {
 3334|  7.50M|        return m_sentinel;
 3335|  7.50M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   237k|    {
 1430|   237k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   237k|    {
  437|   237k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   119k|    {
 7975|   119k|        return m_str;
 7976|   119k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   238k|    {
 5426|   238k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   238k|    {
 5379|   238k|        return m_argptrs;
 5380|   238k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   731k|    {
 5478|   731k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   119k|{
 8820|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 69.5k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  69.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.5k|    static_cast<    \
  |  |  929|  69.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   119k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   399k|    {
 1598|   399k|        return has_value();
 1599|   399k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   799k|    {
  485|   799k|        return m_has_value;
  486|   799k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   162k|    {
 1604|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   162k|        return this->get_unexpected().error();
 1606|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   162k|    {
  468|   162k|        return m_unexpected;
  469|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   215k|    {
 1653|   215k|        return value();
 1654|   215k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   237k|    {
 1627|   237k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   237k|        return this->get_value();
 1629|   237k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   237k|    {
  451|   237k|        return m_value;
  452|   237k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  76.3k|    {
 5830|  76.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   237k|    {
 5681|   237k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  76.3k|    {
 1430|  76.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  76.3k|    {
  437|  76.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   238k|    {
 5374|   238k|        return m_args;
 5375|   238k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  4.74M|    {
 3316|  4.74M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   731k|{
 7696|   731k|    return s;
 7697|   731k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   731k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   119k|    {
 7971|   119k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   206k|    {
  485|   206k|        return m_has_value;
  486|   206k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  76.3k|    {
 1673|  76.3k|        return &value();
 1674|  76.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  76.3k|    {
 1627|  76.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  76.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  76.3k|        return this->get_value();
 1629|  76.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  76.3k|    {
  451|  76.3k|        return m_value;
  452|  76.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   237k|    {
 5698|   237k|        return ranges::begin(m_range);
 5699|   237k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   182k|{
 8607|   182k|#if !SCN_DISABLE_LOCALE
 8608|   182k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   182k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   182k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   182k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 107k]
  |  |  ------------------
  ------------------
 8615|  74.9k|        return unexpected(result.error());
 8616|  74.9k|    }
 8617|   107k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   182k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  21.8k|{
 5155|  21.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  21.8k|    basic_scan_arg<Context> arg;
 5158|  21.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  21.8k|    arg.m_value = make_value<Context>(value);
 5160|  21.8k|    return arg;
 5161|  21.8k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   799k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  33.9k|{
 8631|  33.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  33.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 21.4k]
  |  |  ------------------
  ------------------
 8635|  12.4k|        return unexpected(result.error());
 8636|  12.4k|    }
 8637|  21.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  33.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  21.4k|    {
 1663|  21.4k|        return std::move(value());
 1664|  21.4k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   244k|{
 5396|   244k|    detail::check_scan_arg_types<Args...>();
 5397|   244k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   244k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   244k|    {
 5349|   244k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   244k|    {
 5360|   244k|        return {detail::make_arg<
 5361|   244k|            kind, Context,
 5362|   244k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   244k|                                 typename Context::char_type>::value>(args)...};
 5364|   244k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   244k|{
 5170|   244k|    return make_value<Context>(value).ref_value;
 5171|   244k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   267k|{
 5120|   267k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   267k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   267k|                                  needs_context_tag>) {
 5124|   267k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   267k|    }
 5126|   267k|    else {
 5127|   267k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   267k|            value, context_tag<Context>{}));
 5129|   267k|    }
 5130|   267k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   267k|    {                                                                        \
 4959|   267k|        return val;                                                          \
 4960|   267k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   122k|    {
 7975|   122k|        return m_str;
 7976|   122k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   244k|    {
 5426|   244k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   244k|    {
 5379|   244k|        return m_argptrs;
 5380|   244k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   122k|{
 8820|   122k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 72.3k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  72.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.3k|    static_cast<    \
  |  |  929|  72.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.3k|    static_cast<    \
  |  |  929|  72.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   122k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  79.6k|    {
 5830|  79.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  79.6k|    {
 1430|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  79.6k|    {
  437|  79.6k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   244k|    {
 5374|   244k|        return m_args;
 5375|   244k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   122k|    {
 7971|   122k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   213k|    {
  485|   213k|        return m_has_value;
  486|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  79.6k|    {
 1673|  79.6k|        return &value();
 1674|  79.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  79.6k|    {
 1627|  79.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.6k|        return this->get_value();
 1629|  79.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  79.6k|    {
  451|  79.6k|        return m_value;
  452|  79.6k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  22.7k|{
 5155|  22.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  22.7k|    basic_scan_arg<Context> arg;
 5158|  22.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  22.7k|    arg.m_value = make_value<Context>(value);
 5160|  22.7k|    return arg;
 5161|  22.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   247k|{
 5396|   247k|    detail::check_scan_arg_types<Args...>();
 5397|   247k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   247k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   247k|    {
 5349|   247k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   247k|    {
 5360|   247k|        return {detail::make_arg<
 5361|   247k|            kind, Context,
 5362|   247k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   247k|                                 typename Context::char_type>::value>(args)...};
 5364|   247k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   247k|{
 5170|   247k|    return make_value<Context>(value).ref_value;
 5171|   247k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   270k|{
 5120|   270k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   270k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   270k|                                  needs_context_tag>) {
 5124|   270k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   270k|    }
 5126|   270k|    else {
 5127|   270k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   270k|            value, context_tag<Context>{}));
 5129|   270k|    }
 5130|   270k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   270k|    {                                                                        \
 4959|   270k|        return val;                                                          \
 4960|   270k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   123k|    {
 7975|   123k|        return m_str;
 7976|   123k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   247k|    {
 5426|   247k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   247k|    {
 5379|   247k|        return m_argptrs;
 5380|   247k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   123k|{
 8820|   123k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 73.8k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  73.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.8k|    static_cast<    \
  |  |  929|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.8k|    static_cast<    \
  |  |  929|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   123k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   135k|    {
 1177|   135k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  81.3k|    {
 5830|  81.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  81.3k|    {
 1430|  81.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  81.3k|    {
  437|  81.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   247k|    {
 5374|   247k|        return m_args;
 5375|   247k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   123k|    {
 7971|   123k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   135k|    {
 1598|   135k|        return has_value();
 1599|   135k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   216k|    {
  485|   216k|        return m_has_value;
  486|   216k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  81.3k|    {
 1673|  81.3k|        return &value();
 1674|  81.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  81.3k|    {
 1627|  81.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  81.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  81.3k|        return this->get_value();
 1629|  81.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  81.3k|    {
  451|  81.3k|        return m_value;
  452|  81.3k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  23.2k|{
 5155|  23.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  23.2k|    basic_scan_arg<Context> arg;
 5158|  23.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  23.2k|    arg.m_value = make_value<Context>(value);
 5160|  23.2k|    return arg;
 5161|  23.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   162k|    {
 2724|   162k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   162k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   162k|    {
 2705|   162k|        return decay_copy(t.begin());
 2706|   162k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  7.61M|{
 1949|  7.61M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.61M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   798k|    {
 2781|   798k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   798k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   798k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   798k|    {
 2763|   798k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   798k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   798k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   182k|{
 8591|   182k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   182k|    auto result = vscan_impl(buffer, format, args);
 8594|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 107k]
  |  |  ------------------
  ------------------
 8595|  74.9k|        return unexpected(result.error());
 8596|  74.9k|    }
 8597|   107k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   182k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   399k|{
 4720|   399k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   399k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   399k|                  "\n"
 4724|   399k|                  "Unsupported range type given as input to a scanning "
 4725|   399k|                  "function.\n"
 4726|   399k|                  "A range needs to have a character type (value type) "
 4727|   399k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   399k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   399k|                  "to be included.\n"
 4730|   399k|                  "See the scnlib documentation for more details.");
 4731|   399k|    static_assert(
 4732|   399k|        !std::is_same_v<T, custom_char_traits>,
 4733|   399k|        "\n"
 4734|   399k|        "Unsupported range type given as input to a scanning "
 4735|   399k|        "function.\n"
 4736|   399k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   399k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   399k|        "not supported.");
 4739|   399k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   399k|                  "\n"
 4741|   399k|                  "Unsupported range type given as input to a scanning "
 4742|   399k|                  "function.\n"
 4743|   399k|                  "file_marker_found cannot be used as an "
 4744|   399k|                  "source range type to scn::scan.\n"
 4745|   399k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   399k|                  "and do not provide an explicit source range, "
 4747|   399k|                  "or use scn::scan with a FILE* directly.");
 4748|   399k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   399k|                  "\n"
 4750|   399k|                  "Unsupported range type given as input to a scanning "
 4751|   399k|                  "function.\n"
 4752|   399k|                  "In order to be scannable, a range needs to satisfy "
 4753|   399k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   399k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   399k|                  "\n"
 4756|   399k|                  "Unsupported range type given as input to a scanning "
 4757|   399k|                  "function.\n"
 4758|   399k|                  "A range needs to model forward_range and have a valid "
 4759|   399k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   399k|                  "Examples of scannable ranges are std::string, "
 4761|   399k|                  "std::string_view, "
 4762|   399k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   399k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   399k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   399k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   399k|{
 4690|   399k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   399k|        return file_marker_found{};
 4692|   399k|    }
 4693|   399k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   399k|        if constexpr (ranges::range<Range>) {
 4695|   399k|            return insufficient_range{};
 4696|   399k|        }
 4697|   399k|        else {
 4698|   399k|            return invalid_input_range{};
 4699|   399k|        }
 4700|   399k|    }
 4701|   399k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   399k|        return invalid_char_type{};
 4703|   399k|    }
 4704|   399k|    else {
 4705|   399k|        return make_forward_scan_buffer(r);
 4706|   399k|    }
 4707|   399k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   399k|{
 4524|   399k|    return basic_scan_forward_buffer_impl(range);
 4525|   399k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   399k|    {
 4411|   399k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   399k|    {
 4382|   399k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   399k|    {
 4151|   399k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   399k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   636k|    {
 2724|   636k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   636k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   636k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   636k|    {
 2705|   636k|        return decay_copy(t.begin());
 2706|   636k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   873k|    {
 3330|   873k|        return m_iterator;
 3331|   873k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.94M|    {
 4415|  1.94M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 151k, False: 1.79M]
  ------------------
 4416|   151k|            return false;
 4417|   151k|        }
 4418|  1.79M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.79M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.79M|        }
 4421|  1.79M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.39M, False: 398k]
  ------------------
 4422|  1.39M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.39M|                                          this->m_current_view.begin(),
 4424|  1.39M|                                          this->m_current_view.end());
 4425|  1.39M|        }
 4426|  1.79M|        m_latest = *m_cursor;
 4427|  1.79M|        ++m_cursor;
 4428|  1.79M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.79M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.79M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.79M|        }
 4432|  1.79M|        return true;
 4433|  1.79M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.54M|    {
 2781|  5.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.54M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.54M|    {
 2763|  5.54M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  5.78M|    {
 3334|  5.78M|        return m_sentinel;
 3335|  5.78M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   399k|    {
 4071|   399k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   399k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   399k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   162k|    {
 1476|   162k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   162k|    {
  447|   162k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   237k|{
 5923|   237k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   237k|                      ranges::iterator_t<SourceRange>>) {
 5925|   237k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   237k|    }
 5927|   237k|    else {
 5928|   237k|        auto it = ranges::begin(source);
 5929|   237k|        while (n > 0) {
 5930|   237k|            --n;
 5931|   237k|            ++it;
 5932|   237k|        }
 5933|   237k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   237k|    }
 5935|   237k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   237k|    {
 2724|   237k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   237k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   237k|    {
 2705|   237k|        return decay_copy(t.begin());
 2706|   237k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   237k|{
 5910|   237k|    return ranges::end(source);
 5911|   237k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   237k|    {
 2781|   237k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   237k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   237k|    {
 2763|   237k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   237k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   237k|    {
 1430|   237k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   237k|    {
  437|   237k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   119k|    {
 7975|   119k|        return m_str;
 7976|   119k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   119k|{
 8820|   119k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 69.4k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  69.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.4k|    static_cast<    \
  |  |  929|  69.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  69.4k|    static_cast<    \
  |  |  929|  69.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   119k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   399k|    {
 1598|   399k|        return has_value();
 1599|   399k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   798k|    {
  485|   798k|        return m_has_value;
  486|   798k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   162k|    {
 1604|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   162k|        return this->get_unexpected().error();
 1606|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   162k|    {
  468|   162k|        return m_unexpected;
  469|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   130k|    {
 1177|   130k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   215k|    {
 1653|   215k|        return value();
 1654|   215k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   237k|    {
 1627|   237k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   237k|        return this->get_value();
 1629|   237k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   237k|    {
  451|   237k|        return m_value;
  452|   237k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  76.2k|    {
 5830|  76.2k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   237k|    {
 5681|   237k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  76.2k|    {
 1430|  76.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  76.2k|    {
  437|  76.2k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   636k|    {
 3316|   636k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   119k|    {
 7971|   119k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   206k|    {
  485|   206k|        return m_has_value;
  486|   206k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  76.2k|    {
 1673|  76.2k|        return &value();
 1674|  76.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  76.2k|    {
 1627|  76.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  76.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  76.2k|        return this->get_value();
 1629|  76.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  76.2k|    {
  451|  76.2k|        return m_value;
  452|  76.2k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   237k|    {
 5698|   237k|        return ranges::begin(m_range);
 5699|   237k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   182k|{
 8607|   182k|#if !SCN_DISABLE_LOCALE
 8608|   182k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   182k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   182k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   182k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   182k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.9k, False: 107k]
  |  |  ------------------
  ------------------
 8615|  74.9k|        return unexpected(result.error());
 8616|  74.9k|    }
 8617|   107k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   182k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  33.9k|{
 8631|  33.9k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  33.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  33.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.4k, False: 21.4k]
  |  |  ------------------
  ------------------
 8635|  12.4k|        return unexpected(result.error());
 8636|  12.4k|    }
 8637|  21.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  33.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  21.4k|    {
 1663|  21.4k|        return std::move(value());
 1664|  21.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   122k|    {
 7975|   122k|        return m_str;
 7976|   122k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   122k|{
 8820|   122k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 72.3k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  72.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.3k|    static_cast<    \
  |  |  929|  72.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.3k|    static_cast<    \
  |  |  929|  72.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   122k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   133k|    {
 1177|   133k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  79.5k|    {
 5830|  79.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  79.5k|    {
 1430|  79.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  79.5k|    {
  437|  79.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   122k|    {
 7971|   122k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   133k|    {
 1598|   133k|        return has_value();
 1599|   133k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   213k|    {
  485|   213k|        return m_has_value;
  486|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  79.5k|    {
 1673|  79.5k|        return &value();
 1674|  79.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  79.5k|    {
 1627|  79.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.5k|        return this->get_value();
 1629|  79.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  79.5k|    {
  451|  79.5k|        return m_value;
  452|  79.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   123k|    {
 7975|   123k|        return m_str;
 7976|   123k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   123k|{
 8820|   123k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.9k, False: 73.8k]
  |  |  ------------------
  ------------------
 8821|  49.9k|        return unexpected(result.error());
 8822|  49.9k|    }
 8823|  73.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.8k|    static_cast<    \
  |  |  929|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.8k|    static_cast<    \
  |  |  929|  73.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   123k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.1k|    {
 1476|  54.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.1k|    {
  447|  54.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   135k|    {
 1177|   135k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  81.2k|    {
 5830|  81.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  81.2k|    {
 1430|  81.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  81.2k|    {
  437|  81.2k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   123k|    {
 7971|   123k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   135k|    {
 1598|   135k|        return has_value();
 1599|   135k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   216k|    {
  485|   216k|        return m_has_value;
  486|   216k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  81.2k|    {
 1673|  81.2k|        return &value();
 1674|  81.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  81.2k|    {
 1627|  81.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  81.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  81.2k|        return this->get_value();
 1629|  81.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  81.2k|    {
  451|  81.2k|        return m_value;
  452|  81.2k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.40M|    {
 3568|  3.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.40M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  14.1M|    {
 3574|  14.1M|        return m_code == good;
 3575|  14.1M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   374k|    {
 3585|   374k|        return m_code;
 3586|   374k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  54.8M|    {
 3330|  54.8M|        return m_iterator;
 3331|  54.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  16.0M|    {
 3330|  16.0M|        return m_iterator;
 3331|  16.0M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.22M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   593k|    {
 6272|   593k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   593k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   593k|            m_specs.localized = true;
 6274|   593k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   593k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.62M|    {
 6303|  1.62M|        m_specs.type = type;
 6304|  1.62M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.22M|    {
 6376|  2.22M|        return static_cast<bool>(m_error);
 6377|  2.22M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   374k|{
 3609|   374k|    return a.code() == b;
 3610|   374k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   374k|{
 3613|   374k|    return !(a == b);
 3614|   374k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   593k|{
 7063|   593k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 593k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 593k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 593k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 593k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 593k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 593k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 593k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 593k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 593k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 593k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 593k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 593k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 593k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 593k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 593k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 593k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   190k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 190k, False: 403k]
  ------------------
 7091|   390k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 200k, False: 393k]
  ------------------
 7092|   593k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 203k, False: 390k]
  ------------------
 7093|   593k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 593k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 593k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 593k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 593k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 593k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 593k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   593k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   593k|            SCN_CLANG_POP
 7110|   593k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   593k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.59M|    {
 2896|  2.59M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.59M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.59M|    {
 2930|  2.59M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.59M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.59M|    {
 2953|  2.59M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.59M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.59M|    {
 2962|  2.59M|        return fn::impl(std::forward<T>(t));
 2963|  2.59M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    972|{
 3654|    972|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    972|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    972|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.15k|{
 3654|  2.15k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.15k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  25.8k|{
 3654|  25.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  25.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  25.8k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.22M|{
 7193|  2.22M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.62M, False: 593k]
  ------------------
 7194|  2.22M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.62M]
  ------------------
 7195|  1.62M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.62M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.22M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   341M|    {
 4195|   341M|        return m_end == nullptr;
 4196|   341M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   930k|{
 3715|   930k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   930k|                                          const CharT*, const CharT*>) {
 3717|   930k|        return {first, last};
 3718|   930k|    }
 3719|   930k|    else {
 3720|   930k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   930k|    }
 3722|   930k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.57M|    {
 4211|  4.57M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.57M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.57M|        return parent()->get_segment_starting_at(position());
 4217|  4.57M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   189M|    {
 4205|   189M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   189M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   189M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   189M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   189M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.57M|    {
 4101|  4.57M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00M, False: 2.57M]
  |  |  ------------------
  ------------------
 4102|  4.57M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.00M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.00M|        }
 4105|  2.57M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.57M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.57M|        return m_current_view.substr(start);
 4108|  2.57M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.18M|    {
 4200|  3.18M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.18M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.18M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  8.37M|    {
 4190|  8.37M|        return m_position;
 4191|  8.37M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.63M|    {
 4123|  3.63M|        return m_is_contiguous;
 4124|  3.63M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  50.0M|    {
 4195|  50.0M|        return m_end == nullptr;
 4196|  50.0M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   230k|{
 3715|   230k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   230k|                                          const CharT*, const CharT*>) {
 3717|   230k|        return {first, last};
 3718|   230k|    }
 3719|   230k|    else {
 3720|   230k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   230k|    }
 3722|   230k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   877k|    {
 4211|   877k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 877k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   877k|        return parent()->get_segment_starting_at(position());
 4217|   877k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  26.8M|    {
 4205|  26.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  26.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  26.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  26.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   877k|    {
 4101|   877k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 469k, False: 408k]
  |  |  ------------------
  ------------------
 4102|   877k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   469k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   469k|        }
 4105|   408k|        const auto start = pos - m_putback_buffer.size();
 4106|   408k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   408k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   408k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   408k|        return m_current_view.substr(start);
 4108|   408k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.03M|    {
 4200|  1.03M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.03M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.03M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.98M|    {
 4190|  1.98M|        return m_position;
 4191|  1.98M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.19M|    {
 4123|  1.19M|        return m_is_contiguous;
 4124|  1.19M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  9.55M|    {
 3180|  9.55M|        return static_cast<D&>(*this);
 3181|  9.55M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.78M|    {
 2978|  4.78M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.78M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.78M|    {
 3005|  4.78M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.78M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.78M|    {
 3221|  4.78M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.3k, False: 4.77M]
  ------------------
 3222|  4.78M|                   ? nullptr
 3223|  4.78M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.78M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   646k|    {
 3180|   646k|        return static_cast<D&>(*this);
 3181|   646k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   323k|    {
 2978|   323k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   323k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   323k|    {
 3005|   323k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   323k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   323k|    {
 3221|   323k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 323k]
  ------------------
 3222|   323k|                   ? nullptr
 3223|   323k|                   : std::addressof(*ranges::begin(derived()));
 3224|   323k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   873k|    {
 8169|   873k|        return ranges::subrange{begin(), end()};
 8170|   873k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.55M|    {
 8153|  2.55M|        return m_current;
 8154|  2.55M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   873k|    {
 8161|   873k|        return ranges::default_sentinel;
 8162|   873k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  13.3M|    {
 3316|  13.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.70M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.21M|    {
 1837|  1.21M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.21M|                                            std::forward<F>(f));
 1839|  1.21M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.21M|{
 1323|  1.21M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.21M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.21M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.21M|            return result(*std::forward<Exp>(exp));
 1327|  1.21M|        }
 1328|       |
 1329|  1.21M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.21M|        return result(unexpect, monostate{});
 1331|  1.21M|    }
 1332|  1.21M|    else {
 1333|  1.21M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.21M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.21M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.19M, False: 18.3k]
  |  |  ------------------
  ------------------
 1335|  1.21M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.21M|                   : result(unexpect,
 1337|  18.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.21M|    }
 1340|  1.21M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.8M|    {
  485|  12.8M|        return m_has_value;
  486|  12.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.34M|    {
 1663|  4.34M|        return std::move(value());
 1664|  4.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.96M|    {
 1627|  4.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.96M|        return this->get_value();
 1629|  4.96M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.96M|    {
  451|  4.96M|        return m_value;
  452|  4.96M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.39M|    {
 1430|  5.39M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.39M|    {
  437|  5.39M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.85M|    {
 1177|  6.85M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  40.4k|{
 1211|  40.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  40.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.5k|    {
 1614|  53.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.5k|        return std::move(this->get_unexpected().error());
 1616|  53.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  72.0k|    {
  468|  72.0k|        return m_unexpected;
  469|  72.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   385k|    {
  361|   385k|        return m_unexpected;
  362|   385k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.19M|    {
 1486|  1.19M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.39M|    {
  447|  1.39M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   297k|    {
 8169|   297k|        return ranges::subrange{begin(), end()};
 8170|   297k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   768k|    {
 8153|   768k|        return m_current;
 8154|   768k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   297k|    {
 8161|   297k|        return ranges::default_sentinel;
 8162|   297k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  3.86M|    {
 3316|  3.86M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   399k|    {
 1837|   399k|        return detail::transform_error_impl(std::move(*this),
 1838|   399k|                                            std::forward<F>(f));
 1839|   399k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   399k|{
 1323|   399k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   399k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   399k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   399k|            return result(*std::forward<Exp>(exp));
 1327|   399k|        }
 1328|       |
 1329|   399k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   399k|        return result(unexpect, monostate{});
 1331|   399k|    }
 1332|   399k|    else {
 1333|   399k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   399k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   399k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 396k, False: 2.99k]
  |  |  ------------------
  ------------------
 1335|   399k|                   ? result(*std::forward<Exp>(exp))
 1336|   399k|                   : result(unexpect,
 1337|  2.99k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.99k|                                           std::forward<Exp>(exp).error()));
 1339|   399k|    }
 1340|   399k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.71M|    {
  485|  3.71M|        return m_has_value;
  486|  3.71M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.38M|    {
 1663|  1.38M|        return std::move(value());
 1664|  1.38M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.39M|    {
 1627|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39M|        return this->get_value();
 1629|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.39M|    {
  451|  1.39M|        return m_value;
  452|  1.39M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.28M|    {
 1430|  1.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.28M|    {
  437|  1.28M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.28M|    {
 1177|  2.28M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  48.9k|    {
 1614|  48.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  48.9k|        return std::move(this->get_unexpected().error());
 1616|  48.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  50.4k|    {
  468|  50.4k|        return m_unexpected;
  469|  50.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   554k|    {
 1486|   554k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   999k|    {
  447|   999k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   141k|    {
  347|   141k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   141k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   141k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   178k|    {
 1476|   178k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.20M|    {
  447|  1.20M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.01M|    {
 1177|  6.01M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.74M|    {
 1430|  4.74M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.74M|    {
  437|  4.74M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  7.04M|    {
 1598|  7.04M|        return has_value();
 1599|  7.04M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  11.0M|    {
  485|  11.0M|        return m_has_value;
  486|  11.0M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   215k|    {
 1604|   215k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   215k|        return this->get_unexpected().error();
 1606|   215k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   215k|    {
  468|   215k|        return m_unexpected;
  469|   215k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.05M|    {
 1663|  3.05M|        return std::move(value());
 1664|  3.05M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.78M|    {
 1627|  3.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.78M|        return this->get_value();
 1629|  3.78M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.78M|    {
  451|  3.78M|        return m_value;
  452|  3.78M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   361k|    {
 1476|   361k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   831k|    {
  447|   831k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.28M|    {
 1177|  2.28M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.45M|    {
 1430|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.45M|    {
  437|  1.45M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.68M|    {
 1598|  2.68M|        return has_value();
 1599|  2.68M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.24M|    {
  485|  4.24M|        return m_has_value;
  486|  4.24M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   434k|    {
 1604|   434k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   434k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   434k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   434k|        return this->get_unexpected().error();
 1606|   434k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   434k|    {
  468|   434k|        return m_unexpected;
  469|   434k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   957k|    {
 1663|   957k|        return std::move(value());
 1664|   957k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.06M|    {
 1837|  1.06M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.06M|                                            std::forward<F>(f));
 1839|  1.06M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.06M|{
 1323|  1.06M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.06M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.06M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.06M|            return result(*std::forward<Exp>(exp));
 1327|  1.06M|        }
 1328|       |
 1329|  1.06M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.06M|        return result(unexpect, monostate{});
 1331|  1.06M|    }
 1332|  1.06M|    else {
 1333|  1.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05M, False: 16.0k]
  |  |  ------------------
  ------------------
 1335|  1.06M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.06M|                   : result(unexpect,
 1337|  16.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  16.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.06M|    }
 1340|  1.06M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.05M|    {
  485|  4.05M|        return m_has_value;
  486|  4.05M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.05M|    {
 1663|  1.05M|        return std::move(value());
 1664|  1.05M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.39M|    {
 1627|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39M|        return this->get_value();
 1629|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.39M|    {
  451|  1.39M|        return m_value;
  452|  1.39M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  16.0k|    {
 1614|  16.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  16.0k|        return std::move(this->get_unexpected().error());
 1616|  16.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.7k|    {
  468|  20.7k|        return m_unexpected;
  469|  20.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.02M|    {
 1486|  1.02M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.73M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   200k|    {
 1476|   200k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  10.6M|    {
 4280|  10.6M|        return x.is_at_end();
 4281|  10.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  25.9M|    {
 4324|  25.9M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 25.9M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  25.9M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 25.9M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  25.9M|        return !read_at_position();
 4331|  25.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   111M|    {
 4304|   111M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   111M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   111M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   111M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 111M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   111M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   111M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 96.5M, False: 14.9M]
  |  |  ------------------
  ------------------
 4311|  96.5M|            return true;
 4312|  96.5M|        }
 4313|       |
 4314|  29.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 14.9M, False: 14.7M]
  ------------------
 4315|  14.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 276k, False: 14.7M]
  ------------------
 4316|   276k|                return false;
 4317|   276k|            }
 4318|  14.9M|        }
 4319|  14.7M|        return true;
 4320|  14.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   144M|    {
 4081|   144M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   144M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  29.0M|    {
 4239|  29.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  29.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  29.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 29.0M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  29.0M|        auto res = read_at_position();
 4248|  29.0M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  29.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  29.0M|        return parent()->get_character_at(m_position);
 4250|  29.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  29.0M|    {
 4112|  29.0M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  29.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4M, False: 10.5M]
  |  |  ------------------
  ------------------
 4113|  29.0M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  18.4M|            return m_putback_buffer[pos];
 4115|  18.4M|        }
 4116|  10.5M|        const auto start = pos - m_putback_buffer.size();
 4117|  10.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  10.5M|        return m_current_view[start];
 4119|  10.5M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  7.74M|    {
 1430|  7.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  7.74M|    {
  437|  7.74M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.81M|    {
 1177|  7.81M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   127k|    {
  347|   127k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   127k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  72.0k|    {
 1476|  72.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  72.0k|    {
  447|  72.0k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   193k|    {
  356|   193k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   193k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   193k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.41M|    {
 1598|  3.41M|        return has_value();
 1599|  3.41M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   624k|    {
 1653|   624k|        return value();
 1654|   624k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  27.1M|    {
 4274|  27.1M|        return !(lhs == rhs);
 4275|  27.1M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  30.3M|    {
 4269|  30.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 30.3M, False: 0]
  |  Branch (4269:46): [True: 4.03M, False: 26.3M]
  ------------------
 4270|  30.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  56.4M|    {
 4225|  56.4M|        ++m_position;
 4226|  56.4M|        (void)read_at_position();
 4227|  56.4M|        return *this;
 4228|  56.4M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  65.5k|    {
  347|  65.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  65.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  65.5k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  13.8k|    {
 1476|  13.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  13.8k|    {
  447|  13.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.67M|    {
 1177|  1.67M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.65M|    {
 1430|  1.65M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.65M|    {
  437|  1.65M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.67M|    {
 1598|  1.67M|        return has_value();
 1599|  1.67M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.34M|    {
  485|  3.34M|        return m_has_value;
  486|  3.34M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  13.8k|    {
 1604|  13.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.8k|        return this->get_unexpected().error();
 1606|  13.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.8k|    {
  468|  13.8k|        return m_unexpected;
  469|  13.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.65M|    {
 1663|  1.65M|        return std::move(value());
 1664|  1.65M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.65M|    {
 1627|  1.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.65M|        return this->get_value();
 1629|  1.65M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.65M|    {
  451|  1.65M|        return m_value;
  452|  1.65M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  37.2M|    {
 3334|  37.2M|        return m_sentinel;
 3335|  37.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  60.7k|    {
  347|  60.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  60.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  60.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.1M|    {
  361|  12.1M|        return m_unexpected;
  362|  12.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.32M|    {
  356|  3.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.32M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  14.7M|    {
  347|  14.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.7M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  14.7M|    {
  361|  14.7M|        return m_unexpected;
  362|  14.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  14.7M|    {
  356|  14.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.7M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   127k|{
 1211|   127k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   127k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.13M|    {
  347|  3.13M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.13M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  18.5k|    {
 1604|  18.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.5k|        return this->get_unexpected().error();
 1606|  18.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.23M|    {
 1476|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.26M|    {
  447|  1.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.3M|    {
 1177|  13.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   630k|    {
 1430|   630k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   630k|    {
  437|   630k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.76M|    {
 1476|  6.76M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.76M|    {
  447|  6.76M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  14.5M|    {
 1598|  14.5M|        return has_value();
 1599|  14.5M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  25.6M|    {
  485|  25.6M|        return m_has_value;
  486|  25.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.39M|    {
 1604|  3.39M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.39M|        return this->get_unexpected().error();
 1606|  3.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.39M|    {
  468|  3.39M|        return m_unexpected;
  469|  3.39M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.30M|    {
 1430|  1.30M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.30M|    {
  437|  1.30M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.30M|    {
 1177|  1.30M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    336|    {
 1476|    336|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    336|    {
  447|    336|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.39M|    {
 1653|  3.39M|        return value();
 1654|  3.39M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.54M|    {
 1627|  6.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.54M|        return this->get_value();
 1629|  6.54M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.54M|    {
  451|  6.54M|        return m_value;
  452|  6.54M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   111k|    {
 1598|   111k|        return has_value();
 1599|   111k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.61M|    {
  485|  2.61M|        return m_has_value;
  486|  2.61M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.19M|    {
 1663|  1.19M|        return std::move(value());
 1664|  1.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.30M|    {
 1627|  1.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30M|        return this->get_value();
 1629|  1.30M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.30M|    {
  451|  1.30M|        return m_value;
  452|  1.30M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.18M|    {
 1837|  3.18M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.18M|                                            std::forward<F>(f));
 1839|  3.18M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.18M|{
 1323|  3.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.18M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.18M|            return result(*std::forward<Exp>(exp));
 1327|  3.18M|        }
 1328|       |
 1329|  3.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.18M|        return result(unexpect, monostate{});
 1331|  3.18M|    }
 1332|  3.18M|    else {
 1333|  3.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.14M, False: 35.1k]
  |  |  ------------------
  ------------------
 1335|  3.18M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.18M|                   : result(unexpect,
 1337|  35.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.1k|                                           std::forward<Exp>(exp).error()));
 1339|  3.18M|    }
 1340|  3.18M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.64M|    {
 1430|  4.64M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.64M|    {
  437|  4.64M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.1k|    {
 1486|  35.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.14M|    {
 1663|  3.14M|        return std::move(value());
 1664|  3.14M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.37M|    {
 3330|  1.37M|        return m_iterator;
 3331|  1.37M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.37M|    {
 3334|  1.37M|        return m_sentinel;
 3335|  1.37M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  8.03M|    {
 1598|  8.03M|        return has_value();
 1599|  8.03M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.6M|    {
  485|  12.6M|        return m_has_value;
  486|  12.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   264k|    {
 1604|   264k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   264k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   264k|        return this->get_unexpected().error();
 1606|   264k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   264k|    {
  468|   264k|        return m_unexpected;
  469|   264k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.46M|    {
 1663|  3.46M|        return std::move(value());
 1664|  3.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.32M|    {
 1627|  4.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.32M|        return this->get_value();
 1629|  4.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.32M|    {
  451|  4.32M|        return m_value;
  452|  4.32M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.15M|{
  326|  2.15M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.15M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.07M|    {
 3316|  1.07M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  15.3M|    {
 4291|  15.3M|        return !x.is_at_end();
 4292|  15.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.7k|    {
 1476|  20.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.7k|    {
  447|  20.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.64M|    {
 1177|  2.64M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.62M|    {
 1430|  2.62M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.62M|    {
  437|  2.62M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.57M|    {
 1598|  1.57M|        return has_value();
 1599|  1.57M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   344k|    {
 1653|   344k|        return value();
 1654|   344k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.5k|    {
 1476|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.5k|    {
  447|  11.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.43M|    {
 1177|  1.43M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.41M|    {
 1430|  1.41M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.41M|    {
  437|  1.41M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.43M|    {
 1598|  1.43M|        return has_value();
 1599|  1.43M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.86M|    {
  485|  2.86M|        return m_has_value;
  486|  2.86M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.5k|    {
 1604|  11.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.5k|        return this->get_unexpected().error();
 1606|  11.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.5k|    {
  468|  11.5k|        return m_unexpected;
  469|  11.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.41M|    {
 1663|  1.41M|        return std::move(value());
 1664|  1.41M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.41M|    {
 1627|  1.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.41M|        return this->get_value();
 1629|  1.41M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.41M|    {
  451|  1.41M|        return m_value;
  452|  1.41M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.70k|    {
 1604|  4.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.70k|        return this->get_unexpected().error();
 1606|  4.70k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.07M|    {
 1476|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.07M|    {
  447|  1.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.01M|    {
 1177|  6.01M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   350k|    {
 1430|   350k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   350k|    {
  437|   350k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  4.13M|    {
 1476|  4.13M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.13M|    {
  447|  4.13M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  7.06M|    {
 1598|  7.06M|        return has_value();
 1599|  7.06M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  12.0M|    {
  485|  12.0M|        return m_has_value;
  486|  12.0M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.86M|    {
 1604|  2.86M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.86M|        return this->get_unexpected().error();
 1606|  2.86M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.86M|    {
  468|  2.86M|        return m_unexpected;
  469|  2.86M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.07M|    {
 1177|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    108|    {
 1476|    108|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    108|    {
  447|    108|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.12M|    {
 1653|  1.12M|        return value();
 1654|  1.12M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.12M|    {
 1627|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12M|        return this->get_value();
 1629|  1.12M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.12M|    {
  451|  1.12M|        return m_value;
  452|  1.12M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  28.3k|    {
 1598|  28.3k|        return has_value();
 1599|  28.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.15M|    {
  485|  2.15M|        return m_has_value;
  486|  2.15M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.05M|    {
 1663|  1.05M|        return std::move(value());
 1664|  1.05M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.07M|    {
 1627|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.07M|        return this->get_value();
 1629|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.07M|    {
  451|  1.07M|        return m_value;
  452|  1.07M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   454k|    {
 1430|   454k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   454k|    {
  437|   454k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.02M|    {
 2855|  2.02M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.02M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.02M|    {
 2836|  2.02M|        return t.data();
 2837|  2.02M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   737k|    {
 1476|   737k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   737k|    {
  447|   737k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.50M|    {
 1177|  8.50M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  7.65M|    {
 1430|  7.65M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  7.65M|    {
  437|  7.65M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.18M|    {
 1663|  5.18M|        return std::move(value());
 1664|  5.18M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.20M|{
 1211|  3.20M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.20M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.19M|    {
 1837|  1.19M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.19M|                                            std::forward<F>(f));
 1839|  1.19M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.19M|{
 1323|  1.19M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.19M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.19M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.19M|            return result(*std::forward<Exp>(exp));
 1327|  1.19M|        }
 1328|       |
 1329|  1.19M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.19M|        return result(unexpect, monostate{});
 1331|  1.19M|    }
 1332|  1.19M|    else {
 1333|  1.19M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.19M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.19M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.19M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.19M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.19M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.19M|    }
 1340|  1.19M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.19M|    {
 1430|  1.19M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.19M|    {
  437|  1.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.19M|    {
 1177|  1.19M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.19M|    {
 1598|  1.19M|        return has_value();
 1599|  1.19M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.38M|    {
  485|  2.38M|        return m_has_value;
  486|  2.38M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.19M|    {
 1663|  1.19M|        return std::move(value());
 1664|  1.19M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.19M|    {
 1627|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.19M|        return this->get_value();
 1629|  1.19M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.19M|    {
  451|  1.19M|        return m_value;
  452|  1.19M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.17M|    {
 1823|  1.17M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.17M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.17M|{
 1323|  1.17M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.17M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.17M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.17M|            return result(*std::forward<Exp>(exp));
 1327|  1.17M|        }
 1328|       |
 1329|  1.17M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.17M|        return result(unexpect, monostate{});
 1331|  1.17M|    }
 1332|  1.17M|    else {
 1333|  1.17M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.17M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.17M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.17M]
  |  |  ------------------
  ------------------
 1335|  1.17M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.17M|                   : result(unexpect,
 1337|  1.17M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.17M|                                           std::forward<Exp>(exp).error()));
 1339|  1.17M|    }
 1340|  1.17M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  62.6k|    {
 1430|  62.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  62.6k|    {
  437|  62.6k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   859k|    {
 1653|   859k|        return value();
 1654|   859k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   274k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   111k|    {
 1673|   111k|        return &value();
 1674|   111k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   857k|    {
 2724|   857k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   857k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   857k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   857k|    {
 2705|   857k|        return decay_copy(t.begin());
 2706|   857k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   857k|{
 1949|   857k|    return SCN_FWD(t);
  ------------------
  |  |  930|   857k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   857k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   521k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.05M|    {
 1837|  1.05M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.05M|                                            std::forward<F>(f));
 1839|  1.05M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.05M|{
 1323|  1.05M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.05M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.05M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.05M|            return result(*std::forward<Exp>(exp));
 1327|  1.05M|        }
 1328|       |
 1329|  1.05M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.05M|        return result(unexpect, monostate{});
 1331|  1.05M|    }
 1332|  1.05M|    else {
 1333|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.05M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.05M|    }
 1340|  1.05M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.05M|    {
 1430|  1.05M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.05M|    {
  437|  1.05M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.05M|    {
 1177|  1.05M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.05M|    {
 1598|  1.05M|        return has_value();
 1599|  1.05M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.10M|    {
  485|  2.10M|        return m_has_value;
  486|  2.10M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.05M|    {
 1663|  1.05M|        return std::move(value());
 1664|  1.05M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.05M|    {
 1627|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05M|        return this->get_value();
 1629|  1.05M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.05M|    {
  451|  1.05M|        return m_value;
  452|  1.05M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.01M|    {
 1823|  1.01M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.01M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.01M|{
 1323|  1.01M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.01M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.01M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.01M|            return result(*std::forward<Exp>(exp));
 1327|  1.01M|        }
 1328|       |
 1329|  1.01M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.01M|        return result(unexpect, monostate{});
 1331|  1.01M|    }
 1332|  1.01M|    else {
 1333|  1.01M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.01M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 1335|  1.01M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.01M|                   : result(unexpect,
 1337|  1.01M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.01M|                                           std::forward<Exp>(exp).error()));
 1339|  1.01M|    }
 1340|  1.01M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  61.1k|    {
 1430|  61.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  61.1k|    {
  437|  61.1k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.01M|    {
 3648|  1.01M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   736k|    {
 1653|   736k|        return value();
 1654|   736k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  28.2k|    {
 1673|  28.2k|        return &value();
 1674|  28.2k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.17M|    {
 3648|  1.17M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   445k|    {
 1476|   445k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.22M|    {
 4280|  3.22M|        return x.is_at_end();
 4281|  3.22M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  4.97M|    {
 4324|  4.97M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.97M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  4.97M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 4.97M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  4.97M|        return !read_at_position();
 4331|  4.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  15.4M|    {
 4304|  15.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  15.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  15.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 15.4M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  15.4M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  15.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.5M, False: 1.94M]
  |  |  ------------------
  ------------------
 4311|  13.5M|            return true;
 4312|  13.5M|        }
 4313|       |
 4314|  3.74M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.94M, False: 1.79M]
  ------------------
 4315|  1.94M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 151k, False: 1.79M]
  ------------------
 4316|   151k|                return false;
 4317|   151k|            }
 4318|  1.94M|        }
 4319|  1.79M|        return true;
 4320|  1.94M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  20.2M|    {
 4081|  20.2M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  20.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  4.81M|    {
 4239|  4.81M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  4.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  4.81M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 4.81M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  4.81M|        auto res = read_at_position();
 4248|  4.81M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  4.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  4.81M|        return parent()->get_character_at(m_position);
 4250|  4.81M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  4.81M|    {
 4112|  4.81M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.09M, False: 727k]
  |  |  ------------------
  ------------------
 4113|  4.81M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.09M|            return m_putback_buffer[pos];
 4115|  4.09M|        }
 4116|   727k|        const auto start = pos - m_putback_buffer.size();
 4117|   727k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   727k|        return m_current_view[start];
 4119|   727k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.68M|{
 3807|  1.68M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.68M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.68M|    }
 3810|  1.68M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.68M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.68M|    }
 3813|  1.68M|    else {
 3814|       |        // utf-32
 3815|  1.68M|        static_assert(sizeof(U) == 4);
 3816|  1.68M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.68M|        return 1;
 3818|  1.68M|    }
 3819|  1.68M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.22M|    {
 1430|  2.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.22M|    {
  437|  2.22M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.27M|    {
 1177|  2.27M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  50.4k|    {
 1476|  50.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  50.4k|    {
  447|  50.4k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   845k|    {
 1598|   845k|        return has_value();
 1599|   845k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  9.73k|    {
 1653|  9.73k|        return value();
 1654|  9.73k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.23M|    {
 4274|  2.23M|        return !(lhs == rhs);
 4275|  2.23M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  3.07M|    {
 4269|  3.07M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.07M, False: 0]
  |  Branch (4269:46): [True: 1.00M, False: 2.06M]
  ------------------
 4270|  3.07M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  5.66M|    {
 4225|  5.66M|        ++m_position;
 4226|  5.66M|        (void)read_at_position();
 4227|  5.66M|        return *this;
 4228|  5.66M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.68M|{
 4013|  1.68M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.68M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.68M|    }
 4016|  1.68M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.68M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.68M|    }
 4019|  1.68M|    else {
 4020|  1.68M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.68M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.68M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168k, False: 1.51M]
  |  |  ------------------
  ------------------
 4023|   168k|            return invalid_code_point;
 4024|   168k|        }
 4025|  1.51M|        return cp;
 4026|  1.68M|    }
 4027|  1.68M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.24k|    {
 1476|  2.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.24k|    {
  447|  2.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   469k|    {
 1177|   469k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   467k|    {
 1430|   467k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   467k|    {
  437|   467k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   469k|    {
 1598|   469k|        return has_value();
 1599|   469k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   938k|    {
  485|   938k|        return m_has_value;
  486|   938k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.24k|    {
 1604|  2.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.24k|        return this->get_unexpected().error();
 1606|  2.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.24k|    {
  468|  2.24k|        return m_unexpected;
  469|  2.24k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   467k|    {
 1663|   467k|        return std::move(value());
 1664|   467k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   467k|    {
 1627|   467k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   467k|        return this->get_value();
 1629|   467k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   467k|    {
  451|   467k|        return m_value;
  452|   467k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  8.14M|    {
 3334|  8.14M|        return m_sentinel;
 3335|  8.14M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.55k|    {
 1604|  1.55k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.55k|        return this->get_unexpected().error();
 1606|  1.55k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   443k|    {
 1476|   443k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   489k|    {
  447|   489k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.94M|    {
 1177|  3.94M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  9.73k|    {
 1430|  9.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  9.73k|    {
  437|  9.73k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.21M|    {
 1476|  2.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.21M|    {
  447|  2.21M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  4.34M|    {
 1598|  4.34M|        return has_value();
 1599|  4.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.77M|    {
  485|  7.77M|        return m_has_value;
  486|  7.77M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.39M|    {
 1604|  1.39M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.39M|        return this->get_unexpected().error();
 1606|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.39M|    {
  468|  1.39M|        return m_unexpected;
  469|  1.39M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   403k|    {
 1430|   403k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   403k|    {
  437|   403k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   403k|    {
 1177|   403k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   499k|    {
 1653|   499k|        return value();
 1654|   499k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.48M|    {
 1627|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48M|        return this->get_value();
 1629|  1.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.48M|    {
  451|  1.48M|        return m_value;
  452|  1.48M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  6.71k|    {
 1598|  6.71k|        return has_value();
 1599|  6.71k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   806k|    {
  485|   806k|        return m_has_value;
  486|   806k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   396k|    {
 1663|   396k|        return std::move(value());
 1664|   396k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   403k|    {
 1627|   403k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   403k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   403k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   403k|        return this->get_value();
 1629|   403k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   403k|    {
  451|   403k|        return m_value;
  452|   403k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.03M|    {
 1837|  1.03M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.03M|                                            std::forward<F>(f));
 1839|  1.03M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.03M|{
 1323|  1.03M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.03M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.03M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.03M|            return result(*std::forward<Exp>(exp));
 1327|  1.03M|        }
 1328|       |
 1329|  1.03M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.03M|        return result(unexpect, monostate{});
 1331|  1.03M|    }
 1332|  1.03M|    else {
 1333|  1.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 985k, False: 45.9k]
  |  |  ------------------
  ------------------
 1335|  1.03M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.03M|                   : result(unexpect,
 1337|  45.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  45.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.03M|    }
 1340|  1.03M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.23M|    {
 1430|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.23M|    {
  437|  1.23M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  45.9k|    {
 1486|  45.9k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|   985k|    {
 1663|   985k|        return std::move(value());
 1664|   985k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   254k|    {
 3330|   254k|        return m_iterator;
 3331|   254k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   254k|    {
 3334|   254k|        return m_sentinel;
 3335|   254k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.68M|    {
 1598|  2.68M|        return has_value();
 1599|  2.68M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.32M|    {
  485|  4.32M|        return m_has_value;
  486|  4.32M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   603k|    {
 1604|   603k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   603k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   603k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   603k|        return this->get_unexpected().error();
 1606|   603k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   603k|    {
  468|   603k|        return m_unexpected;
  469|   603k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   872k|    {
 1663|   872k|        return std::move(value());
 1664|   872k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.04M|    {
 1627|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04M|        return this->get_value();
 1629|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.04M|    {
  451|  1.04M|        return m_value;
  452|  1.04M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   477k|{
  304|   477k|    return p;
  305|   477k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   477k|{
  326|   477k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   477k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   238k|    {
 3316|   238k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.74M|    {
 4291|  1.74M|        return !x.is_at_end();
 4292|  1.74M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  49.3k|    {
 1476|  49.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  49.3k|    {
  447|  49.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.96M|    {
 1177|  1.96M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.91M|    {
 1430|  1.91M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.91M|    {
  437|  1.91M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   532k|    {
 1598|   532k|        return has_value();
 1599|   532k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.40M|    {
  485|  3.40M|        return m_has_value;
  486|  3.40M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  3.90k|    {
 1653|  3.90k|        return value();
 1654|  3.90k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.38M|    {
 1627|  1.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.38M|        return this->get_value();
 1629|  1.38M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.38M|    {
  451|  1.38M|        return m_value;
  452|  1.38M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.24k|    {
 1476|  2.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.24k|    {
  447|  2.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   469k|    {
 1177|   469k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   467k|    {
 1430|   467k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   467k|    {
  437|   467k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   399k|    {
 1837|   399k|        return detail::transform_error_impl(std::move(*this),
 1838|   399k|                                            std::forward<F>(f));
 1839|   399k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   399k|{
 1323|   399k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   399k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   399k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   399k|            return result(*std::forward<Exp>(exp));
 1327|   399k|        }
 1328|       |
 1329|   399k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   399k|        return result(unexpect, monostate{});
 1331|   399k|    }
 1332|   399k|    else {
 1333|   399k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   399k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   399k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 396k, False: 2.99k]
  |  |  ------------------
  ------------------
 1335|   399k|                   ? result(*std::forward<Exp>(exp))
 1336|   399k|                   : result(unexpect,
 1337|  2.99k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.99k|                                           std::forward<Exp>(exp).error()));
 1339|   399k|    }
 1340|   399k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.38M|    {
 1663|  1.38M|        return std::move(value());
 1664|  1.38M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  48.9k|    {
 1614|  48.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  48.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  48.9k|        return std::move(this->get_unexpected().error());
 1616|  48.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  49.3k|    {
  468|  49.3k|        return m_unexpected;
  469|  49.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   470k|    {
 1486|   470k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   469k|    {
 1598|   469k|        return has_value();
 1599|   469k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   939k|    {
  485|   939k|        return m_has_value;
  486|   939k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.24k|    {
 1604|  2.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.24k|        return this->get_unexpected().error();
 1606|  2.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.24k|    {
  468|  2.24k|        return m_unexpected;
  469|  2.24k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   467k|    {
 1663|   467k|        return std::move(value());
 1664|   467k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   467k|    {
 1627|   467k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   467k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   467k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   467k|        return this->get_value();
 1629|   467k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   467k|    {
  451|   467k|        return m_value;
  452|   467k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    398|    {
 1604|    398|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    398|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    398|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    398|        return this->get_unexpected().error();
 1606|    398|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   443k|    {
 1476|   443k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   489k|    {
  447|   489k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.24M|    {
 1177|  3.24M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  3.90k|    {
 1430|  3.90k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.90k|    {
  437|  3.90k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.67M|    {
 1476|  1.67M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.67M|    {
  447|  1.67M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.63M|    {
 1598|  3.63M|        return has_value();
 1599|  3.63M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  6.58M|    {
  485|  6.58M|        return m_has_value;
  486|  6.58M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.30M|    {
 1604|  1.30M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.30M|        return this->get_unexpected().error();
 1606|  1.30M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.30M|    {
  468|  1.30M|        return m_unexpected;
  469|  1.30M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   399k|    {
 1430|   399k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   399k|    {
  437|   399k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   180k|    {
 1653|   180k|        return value();
 1654|   180k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.16M|    {
 1627|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.16M|        return this->get_value();
 1629|  1.16M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.16M|    {
  451|  1.16M|        return m_value;
  452|  1.16M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.33k|    {
 1598|  2.33k|        return has_value();
 1599|  2.33k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   798k|    {
  485|   798k|        return m_has_value;
  486|   798k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   396k|    {
 1663|   396k|        return std::move(value());
 1664|   396k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   399k|    {
 1627|   399k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   399k|        return this->get_value();
 1629|   399k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   399k|    {
  451|   399k|        return m_value;
  452|   399k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.03M|    {
 1837|  1.03M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.03M|                                            std::forward<F>(f));
 1839|  1.03M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.03M|{
 1323|  1.03M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.03M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.03M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.03M|            return result(*std::forward<Exp>(exp));
 1327|  1.03M|        }
 1328|       |
 1329|  1.03M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.03M|        return result(unexpect, monostate{});
 1331|  1.03M|    }
 1332|  1.03M|    else {
 1333|  1.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 986k, False: 45.9k]
  |  |  ------------------
  ------------------
 1335|  1.03M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.03M|                   : result(unexpect,
 1337|  45.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  45.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.03M|    }
 1340|  1.03M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  45.9k|    {
 1486|  45.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   986k|    {
 1663|   986k|        return std::move(value());
 1664|   986k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   323k|    {
 2855|   323k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   323k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   323k|    {
 2836|   323k|        return t.data();
 2837|   323k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   396k|    {
 1837|   396k|        return detail::transform_error_impl(std::move(*this),
 1838|   396k|                                            std::forward<F>(f));
 1839|   396k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   396k|{
 1323|   396k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   396k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   396k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   396k|            return result(*std::forward<Exp>(exp));
 1327|   396k|        }
 1328|       |
 1329|   396k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   396k|        return result(unexpect, monostate{});
 1331|   396k|    }
 1332|   396k|    else {
 1333|   396k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   396k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   396k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 396k, False: 0]
  |  |  ------------------
  ------------------
 1335|   396k|                   ? result(*std::forward<Exp>(exp))
 1336|   396k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   396k|    }
 1340|   396k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   396k|    {
 1430|   396k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   396k|    {
  437|   396k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   396k|    {
 1177|   396k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   396k|    {
 1598|   396k|        return has_value();
 1599|   396k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   792k|    {
  485|   792k|        return m_has_value;
  486|   792k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   396k|    {
 1663|   396k|        return std::move(value());
 1664|   396k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   396k|    {
 1627|   396k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   396k|        return this->get_value();
 1629|   396k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   396k|    {
  451|   396k|        return m_value;
  452|   396k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   551k|    {
 1823|   551k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   551k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   551k|{
 1323|   551k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   551k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   551k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   551k|            return result(*std::forward<Exp>(exp));
 1327|   551k|        }
 1328|       |
 1329|   551k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   551k|        return result(unexpect, monostate{});
 1331|   551k|    }
 1332|   551k|    else {
 1333|   551k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   551k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   551k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 551k]
  |  |  ------------------
  ------------------
 1335|   551k|                   ? result(*std::forward<Exp>(exp))
 1336|   551k|                   : result(unexpect,
 1337|   551k|                            trivial_invoke(std::forward<F>(f),
 1338|   551k|                                           std::forward<Exp>(exp).error()));
 1339|   551k|    }
 1340|   551k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   172k|    {
 1653|   172k|        return value();
 1654|   172k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  70.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  6.64k|    {
 1673|  6.64k|        return &value();
 1674|  6.64k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   325k|    {
 2724|   325k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   325k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   325k|    {
 2705|   325k|        return decay_copy(t.begin());
 2706|   325k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   325k|{
 1949|   325k|    return SCN_FWD(t);
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   325k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   168k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   396k|    {
 1837|   396k|        return detail::transform_error_impl(std::move(*this),
 1838|   396k|                                            std::forward<F>(f));
 1839|   396k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   396k|{
 1323|   396k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   396k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   396k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   396k|            return result(*std::forward<Exp>(exp));
 1327|   396k|        }
 1328|       |
 1329|   396k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   396k|        return result(unexpect, monostate{});
 1331|   396k|    }
 1332|   396k|    else {
 1333|   396k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   396k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   396k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 396k, False: 0]
  |  |  ------------------
  ------------------
 1335|   396k|                   ? result(*std::forward<Exp>(exp))
 1336|   396k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   396k|    }
 1340|   396k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   396k|    {
 1430|   396k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   396k|    {
  437|   396k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   396k|    {
 1177|   396k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   396k|    {
 1598|   396k|        return has_value();
 1599|   396k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   793k|    {
  485|   793k|        return m_has_value;
  486|   793k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   396k|    {
 1663|   396k|        return std::move(value());
 1664|   396k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   396k|    {
 1627|   396k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   396k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   396k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   396k|        return this->get_value();
 1629|   396k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   396k|    {
  451|   396k|        return m_value;
  452|   396k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   467k|    {
 1823|   467k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   467k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   467k|{
 1323|   467k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   467k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   467k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   467k|            return result(*std::forward<Exp>(exp));
 1327|   467k|        }
 1328|       |
 1329|   467k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   467k|        return result(unexpect, monostate{});
 1331|   467k|    }
 1332|   467k|    else {
 1333|   467k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   467k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   467k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 467k]
  |  |  ------------------
  ------------------
 1335|   467k|                   ? result(*std::forward<Exp>(exp))
 1336|   467k|                   : result(unexpect,
 1337|   467k|                            trivial_invoke(std::forward<F>(f),
 1338|   467k|                                           std::forward<Exp>(exp).error()));
 1339|   467k|    }
 1340|   467k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   467k|    {
 3648|   467k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   172k|    {
 1653|   172k|        return value();
 1654|   172k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.31k|    {
 1673|  2.31k|        return &value();
 1674|  2.31k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   551k|    {
 3648|   551k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   118k|    {
 1430|   118k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   118k|    {
  437|   118k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   112k|{
 3654|   112k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   112k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   959k|    {
 2855|   959k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   959k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   959k|    {
 2836|   959k|        return t.data();
 2837|   959k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.06M|    {
 5466|  2.06M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.06M|        return static_cast<std::size_t>(m_desc &
 5471|  2.06M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.06M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  4.12M|    {
 5491|  4.12M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  4.12M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.06M|    {
 5434|  2.06M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.06M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.06M|        const auto t = type(id);
 5446|  2.06M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.06M|        basic_scan_arg<Context> arg;
 5451|  2.06M|        arg.m_type = t;
 5452|  2.06M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.06M, False: 0]
  ------------------
 5453|  2.06M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.06M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.06M|        return arg;
 5459|  2.06M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.06M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.06M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.06M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.06M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.06M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.06M|    {
 5495|  2.06M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.06M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  3.90M|    {
 5247|  3.90M|        return m_type != detail::arg_type::none_type;
 5248|  3.90M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   314k|{
 8417|   314k|#define SCN_VISIT(Type)                                         \
 8418|   314k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   314k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   314k|    }                                                           \
 8421|   314k|    else {                                                      \
 8422|   314k|        return vis(monostate_val);                              \
 8423|   314k|    }
 8424|       |
 8425|   314k|    monostate monostate_val{};
 8426|       |
 8427|   314k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 314k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 314k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 314k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 314k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 314k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 314k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 314k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 314k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 314k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 314k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 314k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 314k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 314k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 314k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 314k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   100k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 100k, False: 213k]
  ------------------
 8459|   100k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8460|   106k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 106k, False: 208k]
  ------------------
 8461|   106k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   106k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   106k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   106k|    }                                                           \
  |  | 8421|   106k|    else {                                                      \
  |  | 8422|   106k|        return vis(monostate_val);                              \
  |  | 8423|   106k|    }
  ------------------
 8462|   107k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 107k, False: 206k]
  ------------------
 8463|   107k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   107k|    }                                                           \
  |  | 8421|   107k|    else {                                                      \
  |  | 8422|   107k|        return vis(monostate_val);                              \
  |  | 8423|   107k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 314k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 314k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 314k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 314k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 314k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 314k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 314k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 314k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 314k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   314k|            SCN_CLANG_POP
 8495|   314k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.62M|    {
 5545|  1.62M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   873k|    {
 8138|   873k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.62M|    {
 8056|  1.62M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.21M|{
 4344|  1.21M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.21M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.21M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.21M|                            ranges::default_sentinel};
 4350|  1.21M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.21M|    {
 4177|  1.21M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.21M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.21M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   338k|{
 8417|   338k|#define SCN_VISIT(Type)                                         \
 8418|   338k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   338k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   338k|    }                                                           \
 8421|   338k|    else {                                                      \
 8422|   338k|        return vis(monostate_val);                              \
 8423|   338k|    }
 8424|       |
 8425|   338k|    monostate monostate_val{};
 8426|       |
 8427|   338k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 338k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 338k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 338k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 338k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 338k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 338k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 338k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 338k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 338k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 338k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 338k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 338k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 338k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 338k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 338k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   108k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 108k, False: 229k]
  ------------------
 8459|   108k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   108k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   108k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   108k|    }                                                           \
  |  | 8421|   108k|    else {                                                      \
  |  | 8422|   108k|        return vis(monostate_val);                              \
  |  | 8423|   108k|    }
  ------------------
 8460|   114k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 114k, False: 224k]
  ------------------
 8461|   114k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   114k|    }                                                           \
  |  | 8421|   114k|    else {                                                      \
  |  | 8422|   114k|        return vis(monostate_val);                              \
  |  | 8423|   114k|    }
  ------------------
 8462|   115k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 115k, False: 223k]
  ------------------
 8463|   115k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   115k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   115k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   115k|    }                                                           \
  |  | 8421|   115k|    else {                                                      \
  |  | 8422|   115k|        return vis(monostate_val);                              \
  |  | 8423|   115k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 338k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 338k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 338k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 338k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 338k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 338k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 338k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 338k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 338k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   338k|            SCN_CLANG_POP
 8495|   338k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   751k|{
 7044|   751k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   751k|    handler.check_args_exhausted();
 7046|   751k|    return handler.get_error();
 7047|   751k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   751k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   751k|    auto begin = format.data();
 7013|   751k|    auto it = begin;
 7014|   751k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.44M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 751k, False: 689k]
  ------------------
 7017|   751k|        const auto ch = *it++;
 7018|   751k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 751k, False: 0]
  ------------------
 7019|   751k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   751k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   751k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.4k, False: 689k]
  ------------------
 7023|  62.4k|                return;
 7024|  62.4k|            }
 7025|   751k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   751k|    }
 7036|       |
 7037|   689k|    handler.on_literal_text(begin, end);
 7038|   689k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   751k|{
 6942|   751k|    struct id_adapter {
 6943|   751k|        constexpr void operator()()
 6944|   751k|        {
 6945|   751k|            arg_id = handler.on_arg_id();
 6946|   751k|        }
 6947|   751k|        constexpr void operator()(std::size_t id)
 6948|   751k|        {
 6949|   751k|            arg_id = handler.on_arg_id(id);
 6950|   751k|        }
 6951|       |
 6952|   751k|        constexpr void on_error(const char* msg)
 6953|   751k|        {
 6954|   751k|            SCN_UNLIKELY_ATTR
 6955|   751k|            handler.on_error(msg);
 6956|   751k|        }
 6957|       |
 6958|   751k|        Handler& handler;
 6959|   751k|        std::size_t arg_id;
 6960|   751k|    };
 6961|       |
 6962|   751k|    ++begin;
 6963|   751k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   751k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 751k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   751k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 751k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   751k|    else {
 6975|   751k|        auto adapter = id_adapter{handler, 0};
 6976|   751k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   751k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   751k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 751k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   751k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 751k, False: 0]
  ------------------
 6987|   751k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   751k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   751k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  |  Branch (859:45): [True: 0, False: 751k]
  |  |  |  Branch (859:45): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   751k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   751k|    }
 7003|   751k|    return begin + 1;
 7004|   751k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.62M|    {
 8039|  1.62M|        return m_args.get(id);
 8040|  1.62M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.62M|    {
 8049|  1.62M|        return m_locale;
 8050|  1.62M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.62M|    {
 5566|  1.62M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.62M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.62M|        do_check_arg_id(id);
 5574|  1.62M|        return id;
 5575|  1.62M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.62M|{
 6054|  1.62M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.62M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.62M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   751k|{
 6443|   751k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   751k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 751k, False: 0]
  |  Branch (6444:26): [True: 0, False: 751k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   751k|    handler();
 6449|   751k|    return begin;
 6450|   751k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   751k|        {
 6945|   751k|            arg_id = handler.on_arg_id();
 6946|   751k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.25M|    {
 5252|  3.25M|        return m_type;
 5253|  3.25M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.62M|    {
 5561|  1.62M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.62M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.25M|    {
 5550|  3.25M|        return m_format.data();
 5551|  3.25M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   751k|    {
 7122|   751k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   751k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   751k|{
 6858|   751k|    auto do_presentation = [&]() -> const CharT* {
 6859|   751k|        if (*begin == CharT{'['}) {
 6860|   751k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   751k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   751k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   751k|                return begin;
 6866|   751k|            }
 6867|   751k|            handler.on_character_set_string(set);
 6868|   751k|            return begin;
 6869|   751k|        }
 6870|   751k|        if (*begin == CharT{'/'}) {
 6871|   751k|            return parse_presentation_regex(begin, end, handler);
 6872|   751k|        }
 6873|   751k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   751k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   751k|            handler.on_error("Invalid type specifier in format string");
 6876|   751k|            return begin;
 6877|   751k|        }
 6878|   751k|        handler.on_type(type);
 6879|   751k|        return begin;
 6880|   751k|    };
 6881|       |
 6882|   751k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 751k, False: 0]
  |  Branch (6882:28): [True: 751k, False: 0]
  ------------------
 6883|   751k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 751k, False: 0]
  |  Branch (6883:36): [True: 541k, False: 209k]
  ------------------
 6884|   541k|        return do_presentation();
 6885|   541k|    }
 6886|       |
 6887|   209k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   209k|    begin = parse_align(begin, end, handler);
 6893|   209k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   209k|    begin = parse_width(begin, end, handler);
 6899|   209k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   209k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 209k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   209k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 209k, False: 0]
  ------------------
 6918|   209k|        handler.on_localized();
 6919|   209k|        ++begin;
 6920|   209k|    }
 6921|   209k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   209k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 209k, False: 0]
  |  Branch (6926:25): [True: 0, False: 209k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   209k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   209k|    return begin;
 6935|   209k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.62M|{
 6507|  1.62M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.16M, False: 457k]
  |  Branch (6507:33): [True: 1.16M, False: 0]
  ------------------
 6508|  1.62M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 457k, False: 0]
  |  Branch (6508:33): [True: 457k, False: 0]
  ------------------
 6509|  1.62M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   541k|    auto do_presentation = [&]() -> const CharT* {
 6859|   541k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 541k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   541k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 541k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   541k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   541k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   541k|        handler.on_type(type);
 6879|   541k|        return begin;
 6880|   541k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.16M|{
 6455|  1.16M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.16M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.16M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.16M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.16M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.16M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.16M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.16M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.16M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.16M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.16M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   495k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 495k, False: 671k]
  ------------------
 6474|   495k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.16M]
  ------------------
 6475|   495k|            return presentation_type::float_hex;
 6476|  40.3k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 40.3k, False: 1.12M]
  ------------------
 6477|  40.3k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.16M]
  ------------------
 6478|  40.3k|            return presentation_type::float_scientific;
 6479|   240k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 240k, False: 926k]
  ------------------
 6480|   240k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.16M]
  ------------------
 6481|   240k|            return presentation_type::float_fixed;
 6482|   390k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 390k, False: 776k]
  ------------------
 6483|   390k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.16M]
  ------------------
 6484|   390k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.16M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.16M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.16M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.16M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.16M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.16M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.16M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.16M|    }
 6502|  1.16M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   209k|{
 6532|   209k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   209k|    auto check_align = [](wchar_t ch) {
 6535|   209k|        switch (ch) {
 6536|   209k|            case L'<':
 6537|   209k|                return align_type::left;
 6538|   209k|            case L'>':
 6539|   209k|                return align_type::right;
 6540|   209k|            case L'^':
 6541|   209k|                return align_type::center;
 6542|   209k|            default:
 6543|   209k|                return align_type::none;
 6544|   209k|        }
 6545|   209k|    };
 6546|       |
 6547|   209k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   209k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  |  Branch (859:45): [True: 0, False: 209k]
  |  |  |  Branch (859:45): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6549|   209k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   209k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   209k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   209k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   209k|    const auto begin_before_fill = begin;
 6559|   209k|    begin += potential_fill_len;
 6560|       |
 6561|   209k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 209k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   209k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   209k|    const auto begin_after_fill = begin;
 6567|   209k|    ++begin;
 6568|       |
 6569|   209k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 209k, False: 0]
  ------------------
 6570|   209k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 209k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   209k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 209k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   209k|    }
 6578|       |
 6579|   209k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 209k, False: 0]
  ------------------
 6580|   209k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 209k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   209k|        return begin_before_fill;
 6585|   209k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   209k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   457k|{
 6514|   457k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   457k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   457k|        return 1;
 6517|   457k|    }
 6518|   457k|    else {
 6519|   457k|        const auto lengths =
 6520|   457k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   457k|            "\3\4";
 6522|   457k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   457k|        return len;
 6524|   457k|    }
 6525|   457k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   419k|    auto check_align = [](wchar_t ch) {
 6535|   419k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 419k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 419k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 419k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   419k|            default:
  ------------------
  |  Branch (6542:13): [True: 419k, False: 0]
  ------------------
 6543|   419k|                return align_type::none;
 6544|   419k|        }
 6545|   419k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   209k|{
 6597|   209k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   209k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 209k, False: 0]
  |  Branch (6599:33): [True: 0, False: 209k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   209k|    return begin;
 6610|   209k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   209k|    {
 7127|   209k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   209k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 209k, False: 0]
  ------------------
 7129|   209k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 209k, False: 0]
  ------------------
 7130|   209k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 209k]
  ------------------
 7131|   209k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   209k|        Handler::on_localized();
 7139|   209k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   751k|{
 8417|   751k|#define SCN_VISIT(Type)                                         \
 8418|   751k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   751k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   751k|    }                                                           \
 8421|   751k|    else {                                                      \
 8422|   751k|        return vis(monostate_val);                              \
 8423|   751k|    }
 8424|       |
 8425|   751k|    monostate monostate_val{};
 8426|       |
 8427|   751k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 751k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 751k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 751k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 751k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 751k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 751k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 751k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 751k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 751k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 751k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 751k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 751k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 751k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 751k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 751k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   243k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 243k, False: 508k]
  ------------------
 8459|   243k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   243k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   243k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   243k|    }                                                           \
  |  | 8421|   243k|    else {                                                      \
  |  | 8422|   243k|        return vis(monostate_val);                              \
  |  | 8423|   243k|    }
  ------------------
 8460|   252k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 252k, False: 498k]
  ------------------
 8461|   252k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   252k|    }                                                           \
  |  | 8421|   252k|    else {                                                      \
  |  | 8422|   252k|        return vis(monostate_val);                              \
  |  | 8423|   252k|    }
  ------------------
 8462|   255k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 255k, False: 496k]
  ------------------
 8463|   255k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   255k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   255k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   255k|    }                                                           \
  |  | 8421|   255k|    else {                                                      \
  |  | 8422|   255k|        return vis(monostate_val);                              \
  |  | 8423|   255k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 751k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 751k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 751k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 751k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 751k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 751k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 751k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 751k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 751k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   751k|            SCN_CLANG_POP
 8495|   751k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   873k|{
 7044|   873k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   873k|    handler.check_args_exhausted();
 7046|   873k|    return handler.get_error();
 7047|   873k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   873k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   873k|    auto begin = format.data();
 7013|   873k|    auto it = begin;
 7014|   873k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.68M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 873k, False: 811k]
  ------------------
 7017|   873k|        const auto ch = *it++;
 7018|   873k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 873k, False: 0]
  ------------------
 7019|   873k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   873k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   873k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.4k, False: 811k]
  ------------------
 7023|  62.4k|                return;
 7024|  62.4k|            }
 7025|   873k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   873k|    }
 7036|       |
 7037|   811k|    handler.on_literal_text(begin, end);
 7038|   811k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   811k|    {
 8175|   811k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   811k|    static_cast<    \
  |  |  929|   811k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   811k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   873k|{
 6942|   873k|    struct id_adapter {
 6943|   873k|        constexpr void operator()()
 6944|   873k|        {
 6945|   873k|            arg_id = handler.on_arg_id();
 6946|   873k|        }
 6947|   873k|        constexpr void operator()(std::size_t id)
 6948|   873k|        {
 6949|   873k|            arg_id = handler.on_arg_id(id);
 6950|   873k|        }
 6951|       |
 6952|   873k|        constexpr void on_error(const char* msg)
 6953|   873k|        {
 6954|   873k|            SCN_UNLIKELY_ATTR
 6955|   873k|            handler.on_error(msg);
 6956|   873k|        }
 6957|       |
 6958|   873k|        Handler& handler;
 6959|   873k|        std::size_t arg_id;
 6960|   873k|    };
 6961|       |
 6962|   873k|    ++begin;
 6963|   873k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   873k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 873k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   873k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 873k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   873k|    else {
 6975|   873k|        auto adapter = id_adapter{handler, 0};
 6976|   873k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   873k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   873k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 873k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   873k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 873k, False: 0]
  ------------------
 6987|   873k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   873k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   873k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  |  Branch (859:45): [True: 0, False: 873k]
  |  |  |  Branch (859:45): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   873k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   873k|    }
 7003|   873k|    return begin + 1;
 7004|   873k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   873k|{
 6443|   873k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   873k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   873k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   873k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 873k, False: 0]
  |  Branch (6444:26): [True: 0, False: 873k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   873k|    handler();
 6449|   873k|    return begin;
 6450|   873k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   873k|        {
 6945|   873k|            arg_id = handler.on_arg_id();
 6946|   873k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   873k|    {
 7122|   873k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   873k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   873k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   873k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   873k|{
 6858|   873k|    auto do_presentation = [&]() -> const CharT* {
 6859|   873k|        if (*begin == CharT{'['}) {
 6860|   873k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   873k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   873k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   873k|                return begin;
 6866|   873k|            }
 6867|   873k|            handler.on_character_set_string(set);
 6868|   873k|            return begin;
 6869|   873k|        }
 6870|   873k|        if (*begin == CharT{'/'}) {
 6871|   873k|            return parse_presentation_regex(begin, end, handler);
 6872|   873k|        }
 6873|   873k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   873k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   873k|            handler.on_error("Invalid type specifier in format string");
 6876|   873k|            return begin;
 6877|   873k|        }
 6878|   873k|        handler.on_type(type);
 6879|   873k|        return begin;
 6880|   873k|    };
 6881|       |
 6882|   873k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 873k, False: 0]
  |  Branch (6882:28): [True: 873k, False: 0]
  ------------------
 6883|   873k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 873k, False: 0]
  |  Branch (6883:36): [True: 625k, False: 248k]
  ------------------
 6884|   625k|        return do_presentation();
 6885|   625k|    }
 6886|       |
 6887|   248k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   248k|    begin = parse_align(begin, end, handler);
 6893|   248k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   248k|    begin = parse_width(begin, end, handler);
 6899|   248k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   248k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 248k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   248k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 248k, False: 0]
  ------------------
 6918|   248k|        handler.on_localized();
 6919|   248k|        ++begin;
 6920|   248k|    }
 6921|   248k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   248k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 248k, False: 0]
  |  Branch (6926:25): [True: 0, False: 248k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   248k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   248k|    return begin;
 6935|   248k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   625k|    auto do_presentation = [&]() -> const CharT* {
 6859|   625k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 625k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   625k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 625k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   625k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   625k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 625k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   625k|        handler.on_type(type);
 6879|   625k|        return begin;
 6880|   625k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   248k|{
 6532|   248k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   248k|    auto check_align = [](wchar_t ch) {
 6535|   248k|        switch (ch) {
 6536|   248k|            case L'<':
 6537|   248k|                return align_type::left;
 6538|   248k|            case L'>':
 6539|   248k|                return align_type::right;
 6540|   248k|            case L'^':
 6541|   248k|                return align_type::center;
 6542|   248k|            default:
 6543|   248k|                return align_type::none;
 6544|   248k|        }
 6545|   248k|    };
 6546|       |
 6547|   248k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   248k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  |  Branch (859:45): [True: 0, False: 248k]
  |  |  |  Branch (859:45): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6549|   248k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   248k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   248k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   248k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   248k|    const auto begin_before_fill = begin;
 6559|   248k|    begin += potential_fill_len;
 6560|       |
 6561|   248k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 248k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   248k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   248k|    const auto begin_after_fill = begin;
 6567|   248k|    ++begin;
 6568|       |
 6569|   248k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 248k, False: 0]
  ------------------
 6570|   248k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   248k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 248k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   248k|    }
 6578|       |
 6579|   248k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 248k, False: 0]
  ------------------
 6580|   248k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 248k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   248k|        return begin_before_fill;
 6585|   248k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   248k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   496k|    auto check_align = [](wchar_t ch) {
 6535|   496k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 496k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 496k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 496k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   496k|            default:
  ------------------
  |  Branch (6542:13): [True: 496k, False: 0]
  ------------------
 6543|   496k|                return align_type::none;
 6544|   496k|        }
 6545|   496k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   248k|{
 6597|   248k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   248k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 248k, False: 0]
  |  Branch (6599:33): [True: 0, False: 248k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   248k|    return begin;
 6610|   248k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   248k|    {
 7127|   248k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   248k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 248k, False: 0]
  ------------------
 7129|   248k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 248k, False: 0]
  ------------------
 7130|   248k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 248k]
  ------------------
 7131|   248k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   248k|        Handler::on_localized();
 7139|   248k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   873k|{
 8417|   873k|#define SCN_VISIT(Type)                                         \
 8418|   873k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   873k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   873k|    }                                                           \
 8421|   873k|    else {                                                      \
 8422|   873k|        return vis(monostate_val);                              \
 8423|   873k|    }
 8424|       |
 8425|   873k|    monostate monostate_val{};
 8426|       |
 8427|   873k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 873k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 873k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 873k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 873k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 873k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 873k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 873k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 873k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 873k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 873k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 873k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 873k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 873k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 873k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 873k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   281k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 281k, False: 592k]
  ------------------
 8459|   281k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   281k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   281k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   281k|    }                                                           \
  |  | 8421|   281k|    else {                                                      \
  |  | 8422|   281k|        return vis(monostate_val);                              \
  |  | 8423|   281k|    }
  ------------------
 8460|   294k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 294k, False: 579k]
  ------------------
 8461|   294k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   294k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   294k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   294k|    }                                                           \
  |  | 8421|   294k|    else {                                                      \
  |  | 8422|   294k|        return vis(monostate_val);                              \
  |  | 8423|   294k|    }
  ------------------
 8462|   297k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 297k, False: 575k]
  ------------------
 8463|   297k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   297k|    }                                                           \
  |  | 8421|   297k|    else {                                                      \
  |  | 8422|   297k|        return vis(monostate_val);                              \
  |  | 8423|   297k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 873k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 873k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 873k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 873k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 873k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 873k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 873k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 873k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 873k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   873k|            SCN_CLANG_POP
 8495|   873k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  81.1k|    {
 4076|  81.1k|        sync(0);
 4077|  81.1k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   731k|    {
 5466|   731k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   731k|        return static_cast<std::size_t>(m_desc &
 5471|   731k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   731k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.46M|    {
 5491|  1.46M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.46M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   731k|    {
 5434|   731k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   731k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   731k|        const auto t = type(id);
 5446|   731k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   731k|        basic_scan_arg<Context> arg;
 5451|   731k|        arg.m_type = t;
 5452|   731k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 731k, False: 0]
  ------------------
 5453|   731k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   731k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   731k|        return arg;
 5459|   731k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   731k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   731k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   731k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   731k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   731k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   731k|    {
 5495|   731k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   731k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.39M|    {
 5247|  1.39M|        return m_type != detail::arg_type::none_type;
 5248|  1.39M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   101k|{
 8417|   101k|#define SCN_VISIT(Type)                                         \
 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   101k|    }                                                           \
 8421|   101k|    else {                                                      \
 8422|   101k|        return vis(monostate_val);                              \
 8423|   101k|    }
 8424|       |
 8425|   101k|    monostate monostate_val{};
 8426|       |
 8427|   101k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 101k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 101k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 101k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 101k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 101k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 101k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 101k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 101k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 101k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 101k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 101k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 101k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 101k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 101k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 101k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  32.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 32.8k, False: 69.1k]
  ------------------
 8459|  32.8k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  32.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.8k|    }                                                           \
  |  | 8421|  32.8k|    else {                                                      \
  |  | 8422|  32.8k|        return vis(monostate_val);                              \
  |  | 8423|  32.8k|    }
  ------------------
 8460|  34.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 34.2k, False: 67.7k]
  ------------------
 8461|  34.2k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.2k|    }                                                           \
  |  | 8421|  34.2k|    else {                                                      \
  |  | 8422|  34.2k|        return vis(monostate_val);                              \
  |  | 8423|  34.2k|    }
  ------------------
 8462|  34.9k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 34.9k, False: 67.0k]
  ------------------
 8463|  34.9k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  34.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.9k|    }                                                           \
  |  | 8421|  34.9k|    else {                                                      \
  |  | 8422|  34.9k|        return vis(monostate_val);                              \
  |  | 8423|  34.9k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 101k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 101k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 101k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 101k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 101k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 101k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 101k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 101k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 101k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   101k|            SCN_CLANG_POP
 8495|   101k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   595k|    {
 5545|   595k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   297k|    {
 8138|   297k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   595k|    {
 8056|   595k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   297k|{
 7044|   297k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   297k|    handler.check_args_exhausted();
 7046|   297k|    return handler.get_error();
 7047|   297k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   297k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   297k|    auto begin = format.data();
 7013|   297k|    auto it = begin;
 7014|   297k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   470k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 297k, False: 172k]
  ------------------
 7017|   297k|        const auto ch = *it++;
 7018|   297k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 297k, False: 0]
  ------------------
 7019|   297k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   297k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   297k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 124k, False: 172k]
  ------------------
 7023|   124k|                return;
 7024|   124k|            }
 7025|   297k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   297k|    }
 7036|       |
 7037|   172k|    handler.on_literal_text(begin, end);
 7038|   172k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   297k|{
 6942|   297k|    struct id_adapter {
 6943|   297k|        constexpr void operator()()
 6944|   297k|        {
 6945|   297k|            arg_id = handler.on_arg_id();
 6946|   297k|        }
 6947|   297k|        constexpr void operator()(std::size_t id)
 6948|   297k|        {
 6949|   297k|            arg_id = handler.on_arg_id(id);
 6950|   297k|        }
 6951|       |
 6952|   297k|        constexpr void on_error(const char* msg)
 6953|   297k|        {
 6954|   297k|            SCN_UNLIKELY_ATTR
 6955|   297k|            handler.on_error(msg);
 6956|   297k|        }
 6957|       |
 6958|   297k|        Handler& handler;
 6959|   297k|        std::size_t arg_id;
 6960|   297k|    };
 6961|       |
 6962|   297k|    ++begin;
 6963|   297k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   297k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 297k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   297k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 297k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   297k|    else {
 6975|   297k|        auto adapter = id_adapter{handler, 0};
 6976|   297k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   297k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   297k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 297k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   297k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 297k, False: 0]
  ------------------
 6987|   297k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   297k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   297k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  |  Branch (859:45): [True: 0, False: 297k]
  |  |  |  Branch (859:45): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   297k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   297k|    }
 7003|   297k|    return begin + 1;
 7004|   297k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   595k|    {
 8039|   595k|        return m_args.get(id);
 8040|   595k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   595k|    {
 8049|   595k|        return m_locale;
 8050|   595k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   595k|    {
 5566|   595k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 595k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   595k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   595k|        do_check_arg_id(id);
 5574|   595k|        return id;
 5575|   595k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   595k|{
 6054|   595k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   595k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   595k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   297k|{
 6443|   297k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   297k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 297k, False: 0]
  |  Branch (6444:26): [True: 0, False: 297k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   297k|    handler();
 6449|   297k|    return begin;
 6450|   297k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   297k|        {
 6945|   297k|            arg_id = handler.on_arg_id();
 6946|   297k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.19M|    {
 5252|  1.19M|        return m_type;
 5253|  1.19M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   595k|    {
 5561|   595k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   595k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   399k|{
 4344|   399k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 399k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   399k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   399k|                            ranges::default_sentinel};
 4350|   399k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   399k|    {
 4177|   399k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   399k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   399k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.19M|    {
 5550|  1.19M|        return m_format.data();
 5551|  1.19M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   297k|    {
 7122|   297k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   297k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   297k|{
 6858|   297k|    auto do_presentation = [&]() -> const CharT* {
 6859|   297k|        if (*begin == CharT{'['}) {
 6860|   297k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   297k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   297k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   297k|                return begin;
 6866|   297k|            }
 6867|   297k|            handler.on_character_set_string(set);
 6868|   297k|            return begin;
 6869|   297k|        }
 6870|   297k|        if (*begin == CharT{'/'}) {
 6871|   297k|            return parse_presentation_regex(begin, end, handler);
 6872|   297k|        }
 6873|   297k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   297k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   297k|            handler.on_error("Invalid type specifier in format string");
 6876|   297k|            return begin;
 6877|   297k|        }
 6878|   297k|        handler.on_type(type);
 6879|   297k|        return begin;
 6880|   297k|    };
 6881|       |
 6882|   297k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 297k, False: 0]
  |  Branch (6882:28): [True: 297k, False: 0]
  ------------------
 6883|   297k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 297k, False: 0]
  |  Branch (6883:36): [True: 229k, False: 67.9k]
  ------------------
 6884|   229k|        return do_presentation();
 6885|   229k|    }
 6886|       |
 6887|  67.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  67.9k|    begin = parse_align(begin, end, handler);
 6893|  67.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  67.9k|    begin = parse_width(begin, end, handler);
 6899|  67.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  67.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 67.9k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  67.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 67.9k, False: 0]
  ------------------
 6918|  67.9k|        handler.on_localized();
 6919|  67.9k|        ++begin;
 6920|  67.9k|    }
 6921|  67.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  67.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 67.9k, False: 0]
  |  Branch (6926:25): [True: 0, False: 67.9k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  67.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  67.9k|    return begin;
 6935|  67.9k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   595k|{
 6507|   595k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 459k, False: 135k]
  |  Branch (6507:33): [True: 459k, False: 0]
  ------------------
 6508|   595k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 135k, False: 0]
  |  Branch (6508:33): [True: 135k, False: 0]
  ------------------
 6509|   595k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   229k|    auto do_presentation = [&]() -> const CharT* {
 6859|   229k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 229k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   229k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 229k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   229k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   229k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   229k|        handler.on_type(type);
 6879|   229k|        return begin;
 6880|   229k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   459k|{
 6455|   459k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 459k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 459k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 459k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 459k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 459k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 459k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 459k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 459k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 459k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 459k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   141k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 141k, False: 317k]
  ------------------
 6474|   141k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 459k]
  ------------------
 6475|   141k|            return presentation_type::float_hex;
 6476|  50.6k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 50.6k, False: 408k]
  ------------------
 6477|  50.6k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 459k]
  ------------------
 6478|  50.6k|            return presentation_type::float_scientific;
 6479|   131k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 131k, False: 328k]
  ------------------
 6480|   131k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 459k]
  ------------------
 6481|   131k|            return presentation_type::float_fixed;
 6482|   135k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 135k, False: 323k]
  ------------------
 6483|   135k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 459k]
  ------------------
 6484|   135k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 459k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 459k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 459k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 459k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 459k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 459k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 459k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   459k|    }
 6502|   459k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  67.9k|{
 6532|  67.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  67.9k|    auto check_align = [](wchar_t ch) {
 6535|  67.9k|        switch (ch) {
 6536|  67.9k|            case L'<':
 6537|  67.9k|                return align_type::left;
 6538|  67.9k|            case L'>':
 6539|  67.9k|                return align_type::right;
 6540|  67.9k|            case L'^':
 6541|  67.9k|                return align_type::center;
 6542|  67.9k|            default:
 6543|  67.9k|                return align_type::none;
 6544|  67.9k|        }
 6545|  67.9k|    };
 6546|       |
 6547|  67.9k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  67.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  |  Branch (859:45): [True: 0, False: 67.9k]
  |  |  |  Branch (859:45): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6549|  67.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  67.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  67.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  67.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  67.9k|    const auto begin_before_fill = begin;
 6559|  67.9k|    begin += potential_fill_len;
 6560|       |
 6561|  67.9k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 67.9k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  67.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  67.9k|    const auto begin_after_fill = begin;
 6567|  67.9k|    ++begin;
 6568|       |
 6569|  67.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 67.9k, False: 0]
  ------------------
 6570|  67.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  67.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 67.9k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  67.9k|    }
 6578|       |
 6579|  67.9k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 67.9k, False: 0]
  ------------------
 6580|  67.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 67.9k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  67.9k|        return begin_before_fill;
 6585|  67.9k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  67.9k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   135k|{
 6514|   135k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   135k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   135k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   135k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   135k|        return 1;
 6517|   135k|    }
 6518|   135k|    else {
 6519|   135k|        const auto lengths =
 6520|   135k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   135k|            "\3\4";
 6522|   135k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   135k|        return len;
 6524|   135k|    }
 6525|   135k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   135k|    auto check_align = [](wchar_t ch) {
 6535|   135k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 135k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 135k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 135k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   135k|            default:
  ------------------
  |  Branch (6542:13): [True: 135k, False: 0]
  ------------------
 6543|   135k|                return align_type::none;
 6544|   135k|        }
 6545|   135k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  67.9k|{
 6597|  67.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  67.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 67.9k, False: 0]
  |  Branch (6599:33): [True: 0, False: 67.9k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  67.9k|    return begin;
 6610|  67.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  67.9k|    {
 7127|  67.9k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  67.9k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 67.9k, False: 0]
  ------------------
 7129|  67.9k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 67.9k, False: 0]
  ------------------
 7130|  67.9k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 67.9k]
  ------------------
 7131|  67.9k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  67.9k|        Handler::on_localized();
 7139|  67.9k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   297k|{
 8417|   297k|#define SCN_VISIT(Type)                                         \
 8418|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   297k|    }                                                           \
 8421|   297k|    else {                                                      \
 8422|   297k|        return vis(monostate_val);                              \
 8423|   297k|    }
 8424|       |
 8425|   297k|    monostate monostate_val{};
 8426|       |
 8427|   297k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 297k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 297k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 297k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 297k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 297k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 297k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 297k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 297k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 297k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 297k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 297k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 297k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 297k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 297k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 297k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  97.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 97.6k, False: 200k]
  ------------------
 8459|  97.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  97.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.6k|    }                                                           \
  |  | 8421|  97.6k|    else {                                                      \
  |  | 8422|  97.6k|        return vis(monostate_val);                              \
  |  | 8423|  97.6k|    }
  ------------------
 8460|  99.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 99.5k, False: 198k]
  ------------------
 8461|  99.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  99.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  99.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  99.5k|    }                                                           \
  |  | 8421|  99.5k|    else {                                                      \
  |  | 8422|  99.5k|        return vis(monostate_val);                              \
  |  | 8423|  99.5k|    }
  ------------------
 8462|   100k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 100k, False: 197k]
  ------------------
 8463|   100k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 297k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 297k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 297k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 297k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 297k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 297k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 297k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 297k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 297k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   297k|            SCN_CLANG_POP
 8495|   297k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   101k|{
 8417|   101k|#define SCN_VISIT(Type)                                         \
 8418|   101k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   101k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   101k|    }                                                           \
 8421|   101k|    else {                                                      \
 8422|   101k|        return vis(monostate_val);                              \
 8423|   101k|    }
 8424|       |
 8425|   101k|    monostate monostate_val{};
 8426|       |
 8427|   101k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 101k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 101k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 101k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 101k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 101k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 101k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 101k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 101k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 101k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 101k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 101k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 101k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 101k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 101k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 101k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  32.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 32.7k, False: 69.0k]
  ------------------
 8459|  32.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  32.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.7k|    }                                                           \
  |  | 8421|  32.7k|    else {                                                      \
  |  | 8422|  32.7k|        return vis(monostate_val);                              \
  |  | 8423|  32.7k|    }
  ------------------
 8460|  34.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 34.1k, False: 67.6k]
  ------------------
 8461|  34.1k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  34.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.1k|    }                                                           \
  |  | 8421|  34.1k|    else {                                                      \
  |  | 8422|  34.1k|        return vis(monostate_val);                              \
  |  | 8423|  34.1k|    }
  ------------------
 8462|  34.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 34.8k, False: 66.9k]
  ------------------
 8463|  34.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  34.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.8k|    }                                                           \
  |  | 8421|  34.8k|    else {                                                      \
  |  | 8422|  34.8k|        return vis(monostate_val);                              \
  |  | 8423|  34.8k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 101k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 101k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 101k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 101k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 101k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 101k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 101k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 101k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 101k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   101k|            SCN_CLANG_POP
 8495|   101k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   297k|{
 7044|   297k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   297k|    handler.check_args_exhausted();
 7046|   297k|    return handler.get_error();
 7047|   297k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   297k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   297k|    auto begin = format.data();
 7013|   297k|    auto it = begin;
 7014|   297k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   470k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 297k, False: 172k]
  ------------------
 7017|   297k|        const auto ch = *it++;
 7018|   297k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 297k, False: 0]
  ------------------
 7019|   297k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   297k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   297k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 124k, False: 172k]
  ------------------
 7023|   124k|                return;
 7024|   124k|            }
 7025|   297k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   297k|    }
 7036|       |
 7037|   172k|    handler.on_literal_text(begin, end);
 7038|   172k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   172k|    {
 8175|   172k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   172k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   297k|{
 6942|   297k|    struct id_adapter {
 6943|   297k|        constexpr void operator()()
 6944|   297k|        {
 6945|   297k|            arg_id = handler.on_arg_id();
 6946|   297k|        }
 6947|   297k|        constexpr void operator()(std::size_t id)
 6948|   297k|        {
 6949|   297k|            arg_id = handler.on_arg_id(id);
 6950|   297k|        }
 6951|       |
 6952|   297k|        constexpr void on_error(const char* msg)
 6953|   297k|        {
 6954|   297k|            SCN_UNLIKELY_ATTR
 6955|   297k|            handler.on_error(msg);
 6956|   297k|        }
 6957|       |
 6958|   297k|        Handler& handler;
 6959|   297k|        std::size_t arg_id;
 6960|   297k|    };
 6961|       |
 6962|   297k|    ++begin;
 6963|   297k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   297k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 297k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   297k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 297k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   297k|    else {
 6975|   297k|        auto adapter = id_adapter{handler, 0};
 6976|   297k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   297k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   297k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 297k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   297k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 297k, False: 0]
  ------------------
 6987|   297k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   297k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   297k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  |  Branch (859:45): [True: 0, False: 297k]
  |  |  |  Branch (859:45): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   297k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   297k|    }
 7003|   297k|    return begin + 1;
 7004|   297k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   297k|{
 6443|   297k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   297k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 297k, False: 0]
  |  Branch (6444:26): [True: 0, False: 297k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   297k|    handler();
 6449|   297k|    return begin;
 6450|   297k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   297k|        {
 6945|   297k|            arg_id = handler.on_arg_id();
 6946|   297k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   297k|    {
 7122|   297k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   297k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   297k|{
 6858|   297k|    auto do_presentation = [&]() -> const CharT* {
 6859|   297k|        if (*begin == CharT{'['}) {
 6860|   297k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   297k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   297k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   297k|                return begin;
 6866|   297k|            }
 6867|   297k|            handler.on_character_set_string(set);
 6868|   297k|            return begin;
 6869|   297k|        }
 6870|   297k|        if (*begin == CharT{'/'}) {
 6871|   297k|            return parse_presentation_regex(begin, end, handler);
 6872|   297k|        }
 6873|   297k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   297k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   297k|            handler.on_error("Invalid type specifier in format string");
 6876|   297k|            return begin;
 6877|   297k|        }
 6878|   297k|        handler.on_type(type);
 6879|   297k|        return begin;
 6880|   297k|    };
 6881|       |
 6882|   297k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 297k, False: 0]
  |  Branch (6882:28): [True: 297k, False: 0]
  ------------------
 6883|   297k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 297k, False: 0]
  |  Branch (6883:36): [True: 229k, False: 67.8k]
  ------------------
 6884|   229k|        return do_presentation();
 6885|   229k|    }
 6886|       |
 6887|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  67.8k|    begin = parse_align(begin, end, handler);
 6893|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  67.8k|    begin = parse_width(begin, end, handler);
 6899|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  67.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 67.8k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  67.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 67.8k, False: 0]
  ------------------
 6918|  67.8k|        handler.on_localized();
 6919|  67.8k|        ++begin;
 6920|  67.8k|    }
 6921|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  67.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 67.8k, False: 0]
  |  Branch (6926:25): [True: 0, False: 67.8k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  67.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  67.8k|    return begin;
 6935|  67.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   229k|    auto do_presentation = [&]() -> const CharT* {
 6859|   229k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 229k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   229k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 229k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   229k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   229k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   229k|        handler.on_type(type);
 6879|   229k|        return begin;
 6880|   229k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  67.8k|{
 6532|  67.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  67.8k|    auto check_align = [](wchar_t ch) {
 6535|  67.8k|        switch (ch) {
 6536|  67.8k|            case L'<':
 6537|  67.8k|                return align_type::left;
 6538|  67.8k|            case L'>':
 6539|  67.8k|                return align_type::right;
 6540|  67.8k|            case L'^':
 6541|  67.8k|                return align_type::center;
 6542|  67.8k|            default:
 6543|  67.8k|                return align_type::none;
 6544|  67.8k|        }
 6545|  67.8k|    };
 6546|       |
 6547|  67.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  67.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  |  Branch (859:45): [True: 0, False: 67.8k]
  |  |  |  Branch (859:45): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6549|  67.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  67.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  67.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  67.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  67.8k|    const auto begin_before_fill = begin;
 6559|  67.8k|    begin += potential_fill_len;
 6560|       |
 6561|  67.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 67.8k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  67.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  67.8k|    const auto begin_after_fill = begin;
 6567|  67.8k|    ++begin;
 6568|       |
 6569|  67.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 67.8k, False: 0]
  ------------------
 6570|  67.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.8k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  67.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 67.8k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  67.8k|    }
 6578|       |
 6579|  67.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 67.8k, False: 0]
  ------------------
 6580|  67.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 67.8k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  67.8k|        return begin_before_fill;
 6585|  67.8k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  67.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   135k|    auto check_align = [](wchar_t ch) {
 6535|   135k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 135k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 135k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 135k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   135k|            default:
  ------------------
  |  Branch (6542:13): [True: 135k, False: 0]
  ------------------
 6543|   135k|                return align_type::none;
 6544|   135k|        }
 6545|   135k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  67.8k|{
 6597|  67.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  67.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 67.8k, False: 0]
  |  Branch (6599:33): [True: 0, False: 67.8k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  67.8k|    return begin;
 6610|  67.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  67.8k|    {
 7127|  67.8k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  67.8k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 67.8k, False: 0]
  ------------------
 7129|  67.8k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 67.8k, False: 0]
  ------------------
 7130|  67.8k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 67.8k]
  ------------------
 7131|  67.8k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  67.8k|        Handler::on_localized();
 7139|  67.8k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   297k|{
 8417|   297k|#define SCN_VISIT(Type)                                         \
 8418|   297k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   297k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   297k|    }                                                           \
 8421|   297k|    else {                                                      \
 8422|   297k|        return vis(monostate_val);                              \
 8423|   297k|    }
 8424|       |
 8425|   297k|    monostate monostate_val{};
 8426|       |
 8427|   297k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 297k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 297k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 297k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 297k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 297k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 297k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 297k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 297k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 297k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 297k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 297k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 297k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 297k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 297k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 297k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  97.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 97.6k, False: 200k]
  ------------------
 8459|  97.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  97.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  97.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  97.6k|    }                                                           \
  |  | 8421|  97.6k|    else {                                                      \
  |  | 8422|  97.6k|        return vis(monostate_val);                              \
  |  | 8423|  97.6k|    }
  ------------------
 8460|  99.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 99.5k, False: 198k]
  ------------------
 8461|  99.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  99.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  99.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  99.5k|    }                                                           \
  |  | 8421|  99.5k|    else {                                                      \
  |  | 8422|  99.5k|        return vis(monostate_val);                              \
  |  | 8423|  99.5k|    }
  ------------------
 8462|   100k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 100k, False: 197k]
  ------------------
 8463|   100k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 297k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 297k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 297k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 297k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 297k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 297k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 297k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 297k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 297k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   297k|            SCN_CLANG_POP
 8495|   297k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   162k|    {
 4076|   162k|        sync(0);
 4077|   162k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   217k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  67.9k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  59.7k|{
   89|  59.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   182k|{
   44|   182k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   182k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  59.7k|{
  127|  59.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   182k|{
   60|   182k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   182k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.9k|{
  163|  10.9k|    T value;
  164|  10.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 6.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.77k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.77k|    static_cast<    \
  |  |  929|  6.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.77k|    static_cast<    \
  |  |  929|  6.77k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  33.9k|{
   72|  33.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  33.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  61.1k|{
   89|  61.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  61.1k|{
  127|  61.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.4k|{
  163|  11.4k|    T value;
  164|  11.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 7.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  11.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.23k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.23k|    static_cast<    \
  |  |  929|  7.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.23k|    static_cast<    \
  |  |  929|  7.23k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  61.9k|{
   89|  61.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.9k|    static_cast<    \
  |  |  929|  61.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.9k|    static_cast<    \
  |  |  929|  61.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.9k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  61.9k|{
  127|  61.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.9k|    static_cast<    \
  |  |  929|  61.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.9k|    static_cast<    \
  |  |  929|  61.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.9k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.6k|{
  163|  11.6k|    T value;
  164|  11.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 7.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.47k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.47k|    static_cast<    \
  |  |  929|  7.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.47k|    static_cast<    \
  |  |  929|  7.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.6k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  59.7k|{
   89|  59.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   182k|{
   44|   182k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   182k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  59.7k|{
  127|  59.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.7k|    static_cast<    \
  |  |  929|  59.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   182k|{
   60|   182k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   182k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.9k|{
  163|  10.9k|    T value;
  164|  10.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 6.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.75k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.75k|    static_cast<    \
  |  |  929|  6.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.75k|    static_cast<    \
  |  |  929|  6.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  33.9k|{
   72|  33.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  33.9k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  61.1k|{
   89|  61.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.1k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  61.1k|{
  127|  61.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.1k|    static_cast<    \
  |  |  929|  61.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.1k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.3k|{
  163|  11.3k|    T value;
  164|  11.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 7.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.22k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.22k|    static_cast<    \
  |  |  929|  7.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.22k|    static_cast<    \
  |  |  929|  7.22k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  61.8k|{
   89|  61.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.8k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  61.8k|{
  127|  61.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.8k|    static_cast<    \
  |  |  929|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.6k|{
  163|  11.6k|    T value;
  164|  11.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.16k, False: 7.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.16k|    }                                                  \
  |  |  |  | 3671|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.46k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.46k|    static_cast<    \
  |  |  929|  7.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.46k|    static_cast<    \
  |  |  929|  7.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.6k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.39M|{
  653|  1.39M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.39M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   586k|{
  659|   586k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   586k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 293k, False: 293k]
  ------------------
  661|   586k|                    : std::locale{};
  662|   586k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   695k|{
 1221|   695k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   695k|                                  m_nan_payload_buffer, value);
 1223|   695k|    value = this->setsign(value);
 1224|   695k|    return n;
 1225|   695k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   182k|{
 1221|   182k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   182k|                                  m_nan_payload_buffer, value);
 1223|   182k|    value = this->setsign(value);
 1224|   182k|    return n;
 1225|   182k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   725k|{
 1221|   725k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   725k|                                  m_nan_payload_buffer, value);
 1223|   725k|    value = this->setsign(value);
 1224|   725k|    return n;
 1225|   725k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   188k|{
 1221|   188k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   188k|                                  m_nan_payload_buffer, value);
 1223|   188k|    value = this->setsign(value);
 1224|   188k|    return n;
 1225|   188k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   732k|{
 1221|   732k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   732k|                                  m_nan_payload_buffer, value);
 1223|   732k|    value = this->setsign(value);
 1224|   732k|    return n;
 1225|   732k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   191k|{
 1221|   191k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   191k|                                  m_nan_payload_buffer, value);
 1223|   191k|    value = this->setsign(value);
 1224|   191k|    return n;
 1225|   191k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   480k|{
 2184|   480k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   480k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   549k|{
 2192|   549k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   549k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   549k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 512k, False: 37.4k]
  |  |  ------------------
  ------------------
 2194|   512k|        source.sync(*n);
 2195|   512k|    }
 2196|  37.4k|    else {
 2197|  37.4k|        source.sync_all();
 2198|  37.4k|    }
 2199|   549k|    return n;
 2200|   549k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   182k|{
 2208|   182k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   182k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   182k|{
 2216|   182k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   182k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 107k, False: 74.9k]
  |  |  ------------------
  ------------------
 2218|   107k|        source.sync(*n);
 2219|   107k|    }
 2220|  74.9k|    else {
 2221|  74.9k|        source.sync_all();
 2222|  74.9k|    }
 2223|   182k|    return n;
 2224|   182k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   959k|{
  194|   959k|    return find_classic_impl(
  195|   959k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   959k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   959k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.27M|{
  202|  2.27M|    return find_classic_impl(
  203|  2.27M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.27M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.27M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   480k|{
 2141|   480k|    return vscan_internal(source, format, args);
 2142|   480k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   549k|{
 2147|   549k|    auto n = vscan_internal(source, format, args);
 2148|   549k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   549k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 512k, False: 37.4k]
  |  |  ------------------
  ------------------
 2149|   512k|        source.sync(*n);
 2150|   512k|    }
 2151|  37.4k|    else {
 2152|  37.4k|        source.sync_all();
 2153|  37.4k|    }
 2154|   549k|    return n;
 2155|   549k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   182k|{
 2161|   182k|    return vscan_internal(source, format, args);
 2162|   182k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   182k|{
 2167|   182k|    auto n = vscan_internal(source, format, args);
 2168|   182k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 107k, False: 74.9k]
  |  |  ------------------
  ------------------
 2169|   107k|        source.sync(*n);
 2170|   107k|    }
 2171|  74.9k|    else {
 2172|  74.9k|        source.sync_all();
 2173|  74.9k|    }
 2174|   182k|    return n;
 2175|   182k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   104k|{
 2251|   104k|    return vscan_value_internal(source, arg);
 2252|   104k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   112k|{
 2256|   112k|    auto n = vscan_value_internal(source, arg);
 2257|   112k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   112k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 106k, False: 6.24k]
  |  |  ------------------
  ------------------
 2258|   106k|        source.sync(*n);
 2259|   106k|    }
 2260|  6.24k|    else {
 2261|  6.24k|        source.sync_all();
 2262|  6.24k|    }
 2263|   112k|    return n;
 2264|   112k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  33.9k|{
 2270|  33.9k|    return vscan_value_internal(source, arg);
 2271|  33.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  33.9k|{
 2276|  33.9k|    auto n = vscan_value_internal(source, arg);
 2277|  33.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  33.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.4k, False: 12.4k]
  |  |  ------------------
  ------------------
 2278|  21.4k|        source.sync(*n);
 2279|  21.4k|    }
 2280|  12.4k|    else {
 2281|  12.4k|        source.sync_all();
 2282|  12.4k|    }
 2283|  33.9k|    return n;
 2284|  33.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   959k|{
  118|   959k|    auto it = source.begin();
  119|       |
  120|  3.15M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.53M, False: 614k]
  ------------------
  121|  2.53M|        auto sv =
  122|  2.53M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.53M|                .substr(0, 8);
  124|       |
  125|  2.53M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.47M, False: 60.9k]
  ------------------
  126|  2.47M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.47M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.47M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 318k, False: 2.15M]
  ------------------
  129|   318k|                break;
  130|   318k|            }
  131|  2.15M|            continue;
  132|  2.47M|        }
  133|       |
  134|   201k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 167k, False: 34.4k]
  ------------------
  135|   167k|            auto tmp =
  136|   167k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   167k|            auto res = get_next_code_point(tmp);
  138|   167k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 26.4k, False: 140k]
  ------------------
  139|  26.4k|                return it;
  140|  26.4k|            }
  141|   140k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   140k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   140k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   140k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   140k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   140k|        }
  145|  60.9k|    }
  146|       |
  147|   933k|    return detail::make_string_view_iterator(source, it);
  148|   959k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.93M|{
  105|  3.93M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.93M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.93M|    uint64_t word{};
  108|  3.93M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.93M|    return has_byte_greater(word, 127) != 0;
  111|  3.93M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  15.1M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   167k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.27M|{
  118|  2.27M|    auto it = source.begin();
  119|       |
  120|  2.48M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.39M, False: 1.08M]
  ------------------
  121|  1.39M|        auto sv =
  122|  1.39M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.39M|                .substr(0, 8);
  124|       |
  125|  1.39M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.31M, False: 81.8k]
  ------------------
  126|  1.31M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.31M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.31M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.11M, False: 202k]
  ------------------
  129|  1.11M|                break;
  130|  1.11M|            }
  131|   202k|            continue;
  132|  1.31M|        }
  133|       |
  134|   158k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 149k, False: 8.46k]
  ------------------
  135|   149k|            auto tmp =
  136|   149k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   149k|            auto res = get_next_code_point(tmp);
  138|   149k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 73.4k, False: 76.2k]
  ------------------
  139|  73.4k|                return it;
  140|  73.4k|            }
  141|  76.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  76.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  76.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  76.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  76.2k|        }
  145|  81.8k|    }
  146|       |
  147|  2.19M|    return detail::make_string_view_iterator(source, it);
  148|  2.27M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.03M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   149k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   695k|{
 1138|   695k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.10k, False: 690k]
  ------------------
 1139|  4.10k|        value = std::numeric_limits<T>::infinity();
 1140|  4.10k|        return 3;
 1141|  4.10k|    }
 1142|   690k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.69k, False: 687k]
  ------------------
 1143|  3.69k|        value = std::numeric_limits<T>::infinity();
 1144|  3.69k|        return 8;
 1145|  3.69k|    }
 1146|   687k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.3k, False: 656k]
  ------------------
 1147|  30.3k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.3k|        return 3;
 1149|  30.3k|    }
 1150|   656k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 870, False: 655k]
  ------------------
 1151|    870|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    870|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    870|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    870|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    870|    }
 1182|       |
 1183|   655k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   655k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   655k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   655k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 140k, False: 515k]
  ------------------
 1185|   140k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.37k, False: 138k]
  |  |  ------------------
  ------------------
 1186|  2.37k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.37k|                                         "Invalid floating-point digit");
 1188|  2.37k|        }
 1189|   140k|    }
 1190|   653k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.40k, False: 647k]
  |  |  ------------------
  ------------------
 1191|  6.40k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.40k|                                     "Invalid floating-point digit");
 1193|  6.40k|    }
 1194|       |
 1195|   647k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   647k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   647k|            double tmp{};
 1200|   647k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   647k|            value = tmp;
 1202|   647k|            return ret;
 1203|   647k|        }
 1204|   647k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   647k|            return fast_float_fallback(data, value);
 1208|   647k|        }
 1209|   647k|    }
 1210|   647k|    else {
 1211|       |        // Default to fast_float
 1212|   647k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   647k|    }
 1214|   647k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   647k|    {
 1078|   647k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.33M|    {
  712|  2.33M|        return {kind, options};
  713|  2.33M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   647k|    {
 1082|   647k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 138k, False: 508k]
  ------------------
 1083|   647k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 22.2k, False: 486k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   160k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   160k|                                              value);
 1087|   160k|        }
 1088|       |
 1089|   486k|        const auto flags = get_flags();
 1090|   486k|        const auto view = get_view();
 1091|   486k|        const auto result = fast_float::from_chars(
 1092|   486k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   486k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   486k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.03k, False: 481k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.03k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.03k|                                              value);
 1102|  5.03k|        }
 1103|       |
 1104|   481k|        return result.ptr - view.data();
 1105|   486k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   165k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   165k|    {
 1048|   165k|#if !SCN_DISABLE_STRTOD
 1049|   165k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   165k|    }
 1056|   165k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   165k|    {
  894|   165k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   198k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   165k|    {
  898|   165k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   165k|                           generic_strtod);
  900|   165k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   165k|    {
  732|   165k|        CharT* end{};
  733|   165k|        errno = 0;
  734|   165k|        value = strtod_cb(src, &end);
  735|   165k|        const auto saved_errno = errno;
  736|   165k|        auto chars_read = end - src;
  737|       |
  738|   165k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   165k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.99k, False: 159k]
  |  |  ------------------
  ------------------
  740|  5.99k|            return unexpected(e);
  741|  5.99k|        }
  742|       |
  743|   159k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 137k, False: 22.0k]
  ------------------
  744|   159k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 137k, False: 0]
  ------------------
  745|   137k|            chars_read -= 2;
  746|   137k|        }
  747|       |
  748|   159k|        return chars_read;
  749|   165k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   198k|    {
  778|   198k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 68.3k, False: 130k]
  |  Branch (778:37): [True: 0, False: 68.3k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   198k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 22.4k, False: 176k]
  ------------------
  785|   198k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 22.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   198k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.33k, False: 190k]
  |  Branch (791:34): [True: 1.42k, False: 6.91k]
  ------------------
  792|  1.42k|            SCN_UNLIKELY_ATTR
  793|  1.42k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.42k|        }
  795|       |
  796|   197k|        SCN_GCC_COMPAT_PUSH
  797|   197k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   197k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 197k, False: 0]
  ------------------
  800|   197k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 197k, False: 0]
  ------------------
  801|   197k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.88k, False: 190k]
  ------------------
  802|  6.88k|            SCN_UNLIKELY_ATTR
  803|  6.88k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.88k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   190k|            return {};
  809|   197k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   206k|{
  687|   206k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 69.8k, False: 137k]
  |  Branch (687:25): [True: 0, False: 137k]
  ------------------
  688|   206k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   165k|    {
  755|   165k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 161k, False: 4.02k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   161k|            auto first_space = read_until_classic_space(input.view());
  758|   161k|            input.assign(
  759|   161k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   161k|        }
  761|       |
  762|   165k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 138k, False: 27.2k]
  ------------------
  763|   138k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   138k|                input.get_allocated_string().insert(0, "0x");
  765|   138k|            }
  766|   138k|            else {
  767|   138k|                input.get_allocated_string().insert(0, L"0x");
  768|   138k|            }
  769|   138k|        }
  770|       |
  771|   165k|        return input.get_allocated_string().c_str();
  772|   165k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   165k|    {
  905|   165k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   165k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   165k|        }
  908|   165k|        else {
  909|   165k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   165k|        }
  911|   165k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   165k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   165k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   165k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   165k|            return std::strtof(str, str_end);
  839|   165k|        }
  840|   165k|        else if constexpr (std::is_same_v<T, double>) {
  841|   165k|            return std::strtod(str, str_end);
  842|   165k|        }
  843|   165k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   165k|            return std::strtold(str, str_end);
  845|   165k|        }
  846|   165k|#endif
  847|   165k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.24M|    {
 1061|  1.24M|        unsigned format_flags{};
 1062|  1.24M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.23M, False: 9.98k]
  ------------------
 1063|  1.23M|            format_flags |= fast_float::fixed;
 1064|  1.23M|        }
 1065|  1.24M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.05M, False: 193k]
  ------------------
 1066|  1.05M|            format_flags |= fast_float::scientific;
 1067|  1.05M|        }
 1068|       |
 1069|  1.24M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.24M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   486k|    {
 1110|   486k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   486k|            return m_input.view();
 1112|   486k|        }
 1113|   486k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   486k|            return std::u16string_view{
 1115|   486k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   486k|                m_input.view().size()};
 1117|   486k|        }
 1118|   486k|        else {
 1119|   486k|            return std::u32string_view{
 1120|   486k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   486k|                m_input.view().size()};
 1122|   486k|        }
 1123|   486k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   182k|{
 1138|   182k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 182k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   182k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 182k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   182k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 182k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   182k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 182k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   182k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   182k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.6k, False: 143k]
  ------------------
 1185|  38.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 30.6k]
  |  |  ------------------
  ------------------
 1186|  8.03k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.03k|                                         "Invalid floating-point digit");
 1188|  8.03k|        }
 1189|  38.6k|    }
 1190|   174k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.6k, False: 154k]
  |  |  ------------------
  ------------------
 1191|  19.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  19.6k|                                     "Invalid floating-point digit");
 1193|  19.6k|    }
 1194|       |
 1195|   154k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   154k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   154k|            double tmp{};
 1200|   154k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   154k|            value = tmp;
 1202|   154k|            return ret;
 1203|   154k|        }
 1204|   154k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   154k|            return fast_float_fallback(data, value);
 1208|   154k|        }
 1209|   154k|    }
 1210|   154k|    else {
 1211|       |        // Default to fast_float
 1212|   154k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   154k|    }
 1214|   154k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   154k|    {
 1078|   154k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   543k|    {
  712|   543k|        return {kind, options};
  713|   543k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   154k|    {
 1082|   154k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 30.6k, False: 124k]
  ------------------
 1083|   154k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 203, False: 124k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  30.8k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  30.8k|                                              value);
 1087|  30.8k|        }
 1088|       |
 1089|   124k|        const auto flags = get_flags();
 1090|   124k|        const auto view = get_view();
 1091|   124k|        const auto result = fast_float::from_chars(
 1092|   124k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   124k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   124k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 121k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.26k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.26k|                                              value);
 1102|  2.26k|        }
 1103|       |
 1104|   121k|        return result.ptr - view.data();
 1105|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  33.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  33.0k|    {
 1048|  33.0k|#if !SCN_DISABLE_STRTOD
 1049|  33.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  33.0k|    }
 1056|  33.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  33.0k|    {
  894|  33.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  33.0k|    {
  898|  33.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  33.0k|                           generic_strtod);
  900|  33.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  33.0k|    {
  732|  33.0k|        CharT* end{};
  733|  33.0k|        errno = 0;
  734|  33.0k|        value = strtod_cb(src, &end);
  735|  33.0k|        const auto saved_errno = errno;
  736|  33.0k|        auto chars_read = end - src;
  737|       |
  738|  33.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  33.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.31k, False: 30.7k]
  |  |  ------------------
  ------------------
  740|  2.31k|            return unexpected(e);
  741|  2.31k|        }
  742|       |
  743|  30.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.5k, False: 203]
  ------------------
  744|  30.7k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.5k, False: 0]
  ------------------
  745|  30.5k|            chars_read -= 2;
  746|  30.5k|        }
  747|       |
  748|  30.7k|        return chars_read;
  749|  33.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  33.0k|    {
  755|  33.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 31.6k, False: 1.42k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  31.6k|            auto first_space = read_until_classic_space(input.view());
  758|  31.6k|            input.assign(
  759|  31.6k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  31.6k|        }
  761|       |
  762|  33.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.6k, False: 2.46k]
  ------------------
  763|  30.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.6k|                input.get_allocated_string().insert(0, "0x");
  765|  30.6k|            }
  766|  30.6k|            else {
  767|  30.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.6k|            }
  769|  30.6k|        }
  770|       |
  771|  33.0k|        return input.get_allocated_string().c_str();
  772|  33.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  33.0k|    {
  905|  33.0k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  33.0k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  33.0k|        }
  908|  33.0k|        else {
  909|  33.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  33.0k|        }
  911|  33.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  33.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  33.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  33.0k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  33.0k|            return std::wcstof(str, str_end);
  877|  33.0k|        }
  878|  33.0k|        else if constexpr (std::is_same_v<T, double>) {
  879|  33.0k|            return std::wcstod(str, str_end);
  880|  33.0k|        }
  881|  33.0k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  33.0k|            return std::wcstold(str, str_end);
  883|  33.0k|        }
  884|  33.0k|#endif
  885|  33.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   124k|    {
 1110|   124k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   124k|            return m_input.view();
 1112|   124k|        }
 1113|   124k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   124k|            return std::u16string_view{
 1115|   124k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   124k|                m_input.view().size()};
 1117|   124k|        }
 1118|   124k|        else {
 1119|   124k|            return std::u32string_view{
 1120|   124k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   124k|                m_input.view().size()};
 1122|   124k|        }
 1123|   124k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   725k|{
 1138|   725k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.49k, False: 720k]
  ------------------
 1139|  4.49k|        value = std::numeric_limits<T>::infinity();
 1140|  4.49k|        return 3;
 1141|  4.49k|    }
 1142|   720k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.09k, False: 716k]
  ------------------
 1143|  4.09k|        value = std::numeric_limits<T>::infinity();
 1144|  4.09k|        return 8;
 1145|  4.09k|    }
 1146|   716k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 31.1k, False: 685k]
  ------------------
 1147|  31.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  31.1k|        return 3;
 1149|  31.1k|    }
 1150|   685k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 940, False: 684k]
  ------------------
 1151|    940|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    940|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    940|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    940|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    940|    }
 1182|       |
 1183|   684k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   684k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 145k, False: 539k]
  ------------------
 1185|   145k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.46k, False: 142k]
  |  |  ------------------
  ------------------
 1186|  2.46k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.46k|                                         "Invalid floating-point digit");
 1188|  2.46k|        }
 1189|   145k|    }
 1190|   682k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   682k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.94k, False: 675k]
  |  |  ------------------
  ------------------
 1191|  6.94k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.94k|                                     "Invalid floating-point digit");
 1193|  6.94k|    }
 1194|       |
 1195|   675k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   675k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   675k|            double tmp{};
 1200|   675k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   675k|            value = tmp;
 1202|   675k|            return ret;
 1203|   675k|        }
 1204|   675k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   675k|            return fast_float_fallback(data, value);
 1208|   675k|        }
 1209|   675k|    }
 1210|   675k|    else {
 1211|       |        // Default to fast_float
 1212|   675k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   675k|    }
 1214|   675k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   675k|    {
 1078|   675k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   675k|    {
 1082|   675k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 142k, False: 532k]
  ------------------
 1083|   675k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 24.4k, False: 508k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   167k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   167k|                                              value);
 1087|   167k|        }
 1088|       |
 1089|   508k|        const auto flags = get_flags();
 1090|   508k|        const auto view = get_view();
 1091|   508k|        const auto result = fast_float::from_chars(
 1092|   508k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   508k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 508k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   508k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.30k, False: 505k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.30k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.30k|                                              value);
 1102|  2.30k|        }
 1103|       |
 1104|   505k|        return result.ptr - view.data();
 1105|   508k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   169k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   169k|    {
 1048|   169k|#if !SCN_DISABLE_STRTOD
 1049|   169k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   169k|    }
 1056|   169k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   169k|    {
  894|   169k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   201k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   169k|    {
  898|   169k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   169k|                           generic_strtod);
  900|   169k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   169k|    {
  732|   169k|        CharT* end{};
  733|   169k|        errno = 0;
  734|   169k|        value = strtod_cb(src, &end);
  735|   169k|        const auto saved_errno = errno;
  736|   169k|        auto chars_read = end - src;
  737|       |
  738|   169k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   169k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 166k]
  |  |  ------------------
  ------------------
  740|  2.75k|            return unexpected(e);
  741|  2.75k|        }
  742|       |
  743|   166k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 142k, False: 24.3k]
  ------------------
  744|   166k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 142k, False: 0]
  ------------------
  745|   142k|            chars_read -= 2;
  746|   142k|        }
  747|       |
  748|   166k|        return chars_read;
  749|   169k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   201k|    {
  778|   201k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 68.0k, False: 133k]
  |  Branch (778:37): [True: 0, False: 68.0k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   201k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 24.6k, False: 176k]
  ------------------
  785|   201k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 24.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   201k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 3.98k, False: 197k]
  |  Branch (791:34): [True: 355, False: 3.63k]
  ------------------
  792|    355|            SCN_UNLIKELY_ATTR
  793|    355|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    355|        }
  795|       |
  796|   201k|        SCN_GCC_COMPAT_PUSH
  797|   201k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   201k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 201k, False: 0]
  ------------------
  800|   201k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 201k, False: 0]
  ------------------
  801|   201k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.63k, False: 197k]
  ------------------
  802|  3.63k|            SCN_UNLIKELY_ATTR
  803|  3.63k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.63k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   197k|            return {};
  809|   201k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   205k|{
  691|   205k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 68.3k, False: 136k]
  |  Branch (691:24): [True: 0, False: 136k]
  ------------------
  692|   205k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   169k|    {
  755|   169k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 166k, False: 2.96k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   166k|            auto first_space = read_until_classic_space(input.view());
  758|   166k|            input.assign(
  759|   166k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   166k|        }
  761|       |
  762|   169k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 142k, False: 26.7k]
  ------------------
  763|   142k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   142k|                input.get_allocated_string().insert(0, "0x");
  765|   142k|            }
  766|   142k|            else {
  767|   142k|                input.get_allocated_string().insert(0, L"0x");
  768|   142k|            }
  769|   142k|        }
  770|       |
  771|   169k|        return input.get_allocated_string().c_str();
  772|   169k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   169k|    {
  905|   169k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   169k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   169k|        }
  908|   169k|        else {
  909|   169k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   169k|        }
  911|   169k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   169k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   169k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   169k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   169k|            return std::strtof(str, str_end);
  839|   169k|        }
  840|   169k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   169k|            return std::strtod(str, str_end);
  842|   169k|        }
  843|   169k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   169k|            return std::strtold(str, str_end);
  845|   169k|        }
  846|   169k|#endif
  847|   169k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   508k|    {
 1110|   508k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   508k|            return m_input.view();
 1112|   508k|        }
 1113|   508k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   508k|            return std::u16string_view{
 1115|   508k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   508k|                m_input.view().size()};
 1117|   508k|        }
 1118|   508k|        else {
 1119|   508k|            return std::u32string_view{
 1120|   508k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   508k|                m_input.view().size()};
 1122|   508k|        }
 1123|   508k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   188k|{
 1138|   188k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 188k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   188k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 188k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   188k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 188k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   188k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 188k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   188k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   188k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.6k, False: 149k]
  ------------------
 1185|  38.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 30.6k]
  |  |  ------------------
  ------------------
 1186|  8.03k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.03k|                                         "Invalid floating-point digit");
 1188|  8.03k|        }
 1189|  38.6k|    }
 1190|   180k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 160k]
  |  |  ------------------
  ------------------
 1191|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.0k|                                     "Invalid floating-point digit");
 1193|  20.0k|    }
 1194|       |
 1195|   160k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   160k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   160k|            double tmp{};
 1200|   160k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   160k|            value = tmp;
 1202|   160k|            return ret;
 1203|   160k|        }
 1204|   160k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   160k|            return fast_float_fallback(data, value);
 1208|   160k|        }
 1209|   160k|    }
 1210|   160k|    else {
 1211|       |        // Default to fast_float
 1212|   160k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   160k|    }
 1214|   160k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   160k|    {
 1078|   160k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   160k|    {
 1082|   160k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 30.6k, False: 129k]
  ------------------
 1083|   160k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 203, False: 129k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  30.8k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  30.8k|                                              value);
 1087|  30.8k|        }
 1088|       |
 1089|   129k|        const auto flags = get_flags();
 1090|   129k|        const auto view = get_view();
 1091|   129k|        const auto result = fast_float::from_chars(
 1092|   129k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   129k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 129k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   129k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18k, False: 128k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.18k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.18k|                                              value);
 1102|  1.18k|        }
 1103|       |
 1104|   128k|        return result.ptr - view.data();
 1105|   129k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  32.0k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  32.0k|    {
 1048|  32.0k|#if !SCN_DISABLE_STRTOD
 1049|  32.0k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  32.0k|    }
 1056|  32.0k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  32.0k|    {
  894|  32.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  32.0k|    {
  898|  32.0k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  32.0k|                           generic_strtod);
  900|  32.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  32.0k|    {
  732|  32.0k|        CharT* end{};
  733|  32.0k|        errno = 0;
  734|  32.0k|        value = strtod_cb(src, &end);
  735|  32.0k|        const auto saved_errno = errno;
  736|  32.0k|        auto chars_read = end - src;
  737|       |
  738|  32.0k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  32.0k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.23k, False: 30.7k]
  |  |  ------------------
  ------------------
  740|  1.23k|            return unexpected(e);
  741|  1.23k|        }
  742|       |
  743|  30.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.5k, False: 203]
  ------------------
  744|  30.7k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.5k, False: 0]
  ------------------
  745|  30.5k|            chars_read -= 2;
  746|  30.5k|        }
  747|       |
  748|  30.7k|        return chars_read;
  749|  32.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  32.0k|    {
  755|  32.0k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 31.1k, False: 890]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  31.1k|            auto first_space = read_until_classic_space(input.view());
  758|  31.1k|            input.assign(
  759|  31.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  31.1k|        }
  761|       |
  762|  32.0k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.6k, False: 1.38k]
  ------------------
  763|  30.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.6k|                input.get_allocated_string().insert(0, "0x");
  765|  30.6k|            }
  766|  30.6k|            else {
  767|  30.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.6k|            }
  769|  30.6k|        }
  770|       |
  771|  32.0k|        return input.get_allocated_string().c_str();
  772|  32.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  32.0k|    {
  905|  32.0k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  32.0k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  32.0k|        }
  908|  32.0k|        else {
  909|  32.0k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  32.0k|        }
  911|  32.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  32.0k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  32.0k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  32.0k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  32.0k|            return std::wcstof(str, str_end);
  877|  32.0k|        }
  878|  32.0k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  32.0k|            return std::wcstod(str, str_end);
  880|  32.0k|        }
  881|  32.0k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  32.0k|            return std::wcstold(str, str_end);
  883|  32.0k|        }
  884|  32.0k|#endif
  885|  32.0k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   129k|    {
 1110|   129k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   129k|            return m_input.view();
 1112|   129k|        }
 1113|   129k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   129k|            return std::u16string_view{
 1115|   129k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   129k|                m_input.view().size()};
 1117|   129k|        }
 1118|   129k|        else {
 1119|   129k|            return std::u32string_view{
 1120|   129k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   129k|                m_input.view().size()};
 1122|   129k|        }
 1123|   129k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   732k|{
 1138|   732k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.63k, False: 728k]
  ------------------
 1139|  4.63k|        value = std::numeric_limits<T>::infinity();
 1140|  4.63k|        return 3;
 1141|  4.63k|    }
 1142|   728k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.19k, False: 724k]
  ------------------
 1143|  4.19k|        value = std::numeric_limits<T>::infinity();
 1144|  4.19k|        return 8;
 1145|  4.19k|    }
 1146|   724k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 31.4k, False: 692k]
  ------------------
 1147|  31.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  31.4k|        return 3;
 1149|  31.4k|    }
 1150|   692k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 972, False: 691k]
  ------------------
 1151|    972|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    972|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    972|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    972|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    972|    }
 1182|       |
 1183|   691k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   691k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   691k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   691k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 145k, False: 545k]
  ------------------
 1185|   145k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.54k, False: 143k]
  |  |  ------------------
  ------------------
 1186|  2.54k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.54k|                                         "Invalid floating-point digit");
 1188|  2.54k|        }
 1189|   145k|    }
 1190|   689k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.23k, False: 681k]
  |  |  ------------------
  ------------------
 1191|  7.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.23k|                                     "Invalid floating-point digit");
 1193|  7.23k|    }
 1194|       |
 1195|   681k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   681k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   681k|            double tmp{};
 1200|   681k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   681k|            value = tmp;
 1202|   681k|            return ret;
 1203|   681k|        }
 1204|   681k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   681k|            return fast_float_fallback(data, value);
 1208|   681k|        }
 1209|   681k|    }
 1210|   681k|    else {
 1211|       |        // Default to fast_float
 1212|   681k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   681k|    }
 1214|   681k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   681k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   681k|    {
 1048|   681k|#if !SCN_DISABLE_STRTOD
 1049|   681k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   681k|    }
 1056|   681k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   681k|    {
  894|   681k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   844k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   681k|    {
  898|   681k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   681k|                           generic_strtod);
  900|   681k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   681k|    {
  732|   681k|        CharT* end{};
  733|   681k|        errno = 0;
  734|   681k|        value = strtod_cb(src, &end);
  735|   681k|        const auto saved_errno = errno;
  736|   681k|        auto chars_read = end - src;
  737|       |
  738|   681k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   681k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 563, False: 681k]
  |  |  ------------------
  ------------------
  740|    563|            return unexpected(e);
  741|    563|        }
  742|       |
  743|   681k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 143k, False: 538k]
  ------------------
  744|   681k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 143k, False: 0]
  ------------------
  745|   143k|            chars_read -= 2;
  746|   143k|        }
  747|       |
  748|   681k|        return chars_read;
  749|   681k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   844k|    {
  778|   844k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 318k, False: 525k]
  |  Branch (778:37): [True: 0, False: 318k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   844k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 24.6k, False: 820k]
  ------------------
  785|   844k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 24.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   844k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 663, False: 844k]
  |  Branch (791:34): [True: 66, False: 597]
  ------------------
  792|     66|            SCN_UNLIKELY_ATTR
  793|     66|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     66|        }
  795|       |
  796|   844k|        SCN_GCC_COMPAT_PUSH
  797|   844k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   844k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 844k, False: 0]
  ------------------
  800|   844k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 844k, False: 0]
  ------------------
  801|   844k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 597, False: 844k]
  ------------------
  802|    597|            SCN_UNLIKELY_ATTR
  803|    597|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    597|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   844k|            return {};
  809|   844k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   845k|{
  695|   845k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 318k, False: 526k]
  |  Branch (695:26): [True: 0, False: 526k]
  ------------------
  696|   845k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   681k|    {
  755|   681k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 632k, False: 49.9k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   632k|            auto first_space = read_until_classic_space(input.view());
  758|   632k|            input.assign(
  759|   632k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   632k|        }
  761|       |
  762|   681k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 143k, False: 538k]
  ------------------
  763|   143k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   143k|                input.get_allocated_string().insert(0, "0x");
  765|   143k|            }
  766|   143k|            else {
  767|   143k|                input.get_allocated_string().insert(0, L"0x");
  768|   143k|            }
  769|   143k|        }
  770|       |
  771|   681k|        return input.get_allocated_string().c_str();
  772|   681k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   681k|    {
  905|   681k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   681k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   681k|        }
  908|   681k|        else {
  909|   681k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   681k|        }
  911|   681k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   681k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   681k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   681k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   681k|            return std::strtof(str, str_end);
  839|   681k|        }
  840|   681k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   681k|            return std::strtod(str, str_end);
  842|   681k|        }
  843|   681k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   681k|            return std::strtold(str, str_end);
  845|   681k|        }
  846|   681k|#endif
  847|   681k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   191k|{
 1138|   191k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 191k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   191k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 191k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   191k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 191k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   191k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 191k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   191k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   191k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.7k, False: 152k]
  ------------------
 1185|  38.7k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.05k, False: 30.6k]
  |  |  ------------------
  ------------------
 1186|  8.05k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.05k|                                         "Invalid floating-point digit");
 1188|  8.05k|        }
 1189|  38.7k|    }
 1190|   183k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.3k, False: 162k]
  |  |  ------------------
  ------------------
 1191|  20.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.3k|                                     "Invalid floating-point digit");
 1193|  20.3k|    }
 1194|       |
 1195|   162k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   162k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   162k|            double tmp{};
 1200|   162k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   162k|            value = tmp;
 1202|   162k|            return ret;
 1203|   162k|        }
 1204|   162k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   162k|            return fast_float_fallback(data, value);
 1208|   162k|        }
 1209|   162k|    }
 1210|   162k|    else {
 1211|       |        // Default to fast_float
 1212|   162k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   162k|    }
 1214|   162k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   162k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   162k|    {
 1048|   162k|#if !SCN_DISABLE_STRTOD
 1049|   162k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   162k|    }
 1056|   162k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   162k|    {
  894|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   162k|    {
  898|   162k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   162k|                           generic_strtod);
  900|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   162k|    {
  732|   162k|        CharT* end{};
  733|   162k|        errno = 0;
  734|   162k|        value = strtod_cb(src, &end);
  735|   162k|        const auto saved_errno = errno;
  736|   162k|        auto chars_read = end - src;
  737|       |
  738|   162k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   162k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 162k]
  |  |  ------------------
  ------------------
  740|    100|            return unexpected(e);
  741|    100|        }
  742|       |
  743|   162k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.6k, False: 132k]
  ------------------
  744|   162k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.6k, False: 0]
  ------------------
  745|  30.6k|            chars_read -= 2;
  746|  30.6k|        }
  747|       |
  748|   162k|        return chars_read;
  749|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   162k|    {
  755|   162k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 159k, False: 2.77k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   159k|            auto first_space = read_until_classic_space(input.view());
  758|   159k|            input.assign(
  759|   159k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   159k|        }
  761|       |
  762|   162k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.6k, False: 132k]
  ------------------
  763|  30.6k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.6k|                input.get_allocated_string().insert(0, "0x");
  765|  30.6k|            }
  766|  30.6k|            else {
  767|  30.6k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.6k|            }
  769|  30.6k|        }
  770|       |
  771|   162k|        return input.get_allocated_string().c_str();
  772|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   162k|    {
  905|   162k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   162k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   162k|        }
  908|   162k|        else {
  909|   162k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   162k|        }
  911|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   162k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   162k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   162k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   162k|            return std::wcstof(str, str_end);
  877|   162k|        }
  878|   162k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   162k|            return std::wcstod(str, str_end);
  880|   162k|        }
  881|   162k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   162k|            return std::wcstold(str, str_end);
  883|   162k|        }
  884|   162k|#endif
  885|   162k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.09M|{
 2073|  1.09M|    const auto argcount = args.size();
 2074|  1.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 225k, False: 873k]
  |  Branch (2074:60): [True: 225k, False: 0]
  ------------------
 2075|   225k|        auto arg = args.get(0);
 2076|   225k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   225k|    static_cast<    \
  |  |  929|   225k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   225k|    }
 2078|       |
 2079|   873k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 873k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   873k|    SCN_UNLIKELY_ATTR
 2087|   873k|    {
 2088|   873k|        auto handler = format_handler<false, CharT>{
 2089|   873k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   873k|    static_cast<    \
  |  |  929|   873k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   873k|    static_cast<    \
  |  |  929|   873k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   873k|        return vscan_parse_format_string(format, handler);
 2091|   873k|    }
 2092|   873k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.06M|{
 1625|  2.06M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.62M, False: 435k]
  ------------------
 1626|  1.62M|        return false;
 1627|  1.62M|    }
 1628|   435k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 435k, False: 0]
  |  Branch (1628:39): [True: 435k, False: 0]
  ------------------
 1629|  2.06M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   338k|{
 1658|   338k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 338k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   338k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   338k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 338k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   338k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   338k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   338k|    static_cast<    \
  |  |  929|   338k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   338k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.7k|    }                                                  \
  |  |  |  | 3671|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   319k|    return it.position();
 1675|   338k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   751k|    {
 1903|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.22M|    {
 1722|  2.22M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   751k|    {
 1853|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   751k|{
 2038|   751k|    const auto beg = handler.get_ctx().begin();
 2039|   751k|    detail::parse_format_string<false>(format, handler);
 2040|   751k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.4k, False: 689k]
  |  |  ------------------
  ------------------
 2041|  62.4k|        return unexpected(handler.error);
 2042|  62.4k|    }
 2043|   689k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   751k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  5.13M|    {
 2022|  5.13M|        return ctx.get();
 2023|  5.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  5.13M|    {
 1857|  5.13M|        return contiguous_ctx;
 1858|  5.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.44M|    {
 1907|  1.44M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.44M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.44M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   751k|{
 1681|   751k|    auto arg = ctx.arg(id);
 1682|   751k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   751k|    return arg;
 1686|   751k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.22M|    {
 1797|  2.22M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.22M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.22M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.22M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.22M|            visited_args_lower64 |= (1ull << id);
 1808|  2.22M|            return;
 1809|  2.22M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.22M|    {
 1782|  2.22M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.22M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.22M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.22M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.22M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.22M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   374k|    {
 1766|   374k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 374k, False: 0]
  |  |  ------------------
  ------------------
 1767|   374k|            error = err;
 1768|   374k|        }
 1769|   374k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   751k|    {
 1944|   751k|        return parse_ctx.next_arg_id();
 1945|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   751k|    {
 1985|   751k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   751k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   751k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 751k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   751k|        auto specs = detail::format_specs{};
 1998|   751k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   751k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   751k|            arg.type()};
 2001|       |
 2002|   751k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   751k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 751k]
  |  Branch (2003:29): [True: 0, False: 751k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   751k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 751k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   751k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   751k|        on_visit_scan_arg(
 2014|   751k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   751k|                                           get_ctx().locale()},
 2016|   751k|            arg);
 2017|   751k|        return parse_ctx.begin();
 2018|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   751k|    {
 1701|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   751k|    {
 1956|   751k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 751k]
  |  Branch (1956:23): [True: 0, False: 751k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   751k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   751k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.4k, False: 689k]
  |  |  ------------------
  ------------------
 1963|  62.4k|            on_error(r.error());
 1964|  62.4k|        }
 1965|   689k|        else {
 1966|   689k|            get_ctx().advance_to(*r);
 1967|   689k|        }
 1968|   751k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.22M|    {
 1729|  2.22M|        {
 1730|  2.22M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.22M]
  ------------------
 1731|  2.22M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.22M]
  ------------------
 1732|  2.22M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.22M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.22M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.22M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.22M|        }
 1739|       |
 1740|  2.22M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.22M, False: 0]
  ------------------
 1741|  2.22M|            return;
 1742|  2.22M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.22M|    {
 1777|  2.22M|        return error;
 1778|  2.22M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.66M|    {
 1773|  6.66M|        return static_cast<bool>(error);
 1774|  6.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   873k|    {
 1903|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   873k|    {
 1830|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   873k|{
 2038|   873k|    const auto beg = handler.get_ctx().begin();
 2039|   873k|    detail::parse_format_string<false>(format, handler);
 2040|   873k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.4k, False: 811k]
  |  |  ------------------
  ------------------
 2041|  62.4k|        return unexpected(handler.error);
 2042|  62.4k|    }
 2043|   811k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   873k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.99M|    {
 2022|  5.99M|        return ctx.get();
 2023|  5.99M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.99M|    {
 1834|  5.99M|        return ctx;
 1835|  5.99M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.68M|    {
 1907|  1.68M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.68M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.68M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   873k|{
 1681|   873k|    auto arg = ctx.arg(id);
 1682|   873k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   873k|    return arg;
 1686|   873k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   873k|    {
 1944|   873k|        return parse_ctx.next_arg_id();
 1945|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   873k|    {
 1985|   873k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   873k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   873k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 873k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   873k|        auto specs = detail::format_specs{};
 1998|   873k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   873k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   873k|            arg.type()};
 2001|       |
 2002|   873k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   873k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 873k]
  |  Branch (2003:29): [True: 0, False: 873k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   873k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   873k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   873k|        on_visit_scan_arg(
 2014|   873k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   873k|                                           get_ctx().locale()},
 2016|   873k|            arg);
 2017|   873k|        return parse_ctx.begin();
 2018|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   873k|    {
 1701|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   873k|    {
 1956|   873k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 873k]
  |  Branch (1956:23): [True: 0, False: 873k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   873k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   873k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.4k, False: 811k]
  |  |  ------------------
  ------------------
 1963|  62.4k|            on_error(r.error());
 1964|  62.4k|        }
 1965|   811k|        else {
 1966|   811k|            get_ctx().advance_to(*r);
 1967|   811k|        }
 1968|   873k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   961k|{
 2053|   961k|    const auto argcount = args.size();
 2054|   961k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 209k, False: 751k]
  |  Branch (2054:60): [True: 209k, False: 0]
  ------------------
 2055|   209k|        auto arg = args.get(0);
 2056|   209k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   209k|    static_cast<    \
  |  |  929|   209k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   209k|    }
 2058|       |
 2059|   751k|    auto handler = format_handler<true, CharT>{
 2060|   751k|        ranges::subrange<const CharT*>{source.data(),
 2061|   751k|                                       source.data() + source.size()},
 2062|   751k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   751k|    static_cast<    \
  |  |  929|   751k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   751k|    return vscan_parse_format_string(format, handler);
 2064|   961k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   314k|{
 1638|   314k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   314k|    auto reader =
 1644|   314k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   314k|            ranges::subrange<const CharT*>{source.data(),
 1646|   314k|                                           source.data() + source.size()},
 1647|   314k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   314k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   314k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.7k|    }                                                  \
  |  |  |  | 3671|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   295k|    return ranges::distance(source.data(), it);
 1650|   314k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   365k|{
 2053|   365k|    const auto argcount = args.size();
 2054|   365k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 67.9k, False: 297k]
  |  Branch (2054:60): [True: 67.9k, False: 0]
  ------------------
 2055|  67.9k|        auto arg = args.get(0);
 2056|  67.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  67.9k|    static_cast<    \
  |  |  929|  67.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  67.9k|    }
 2058|       |
 2059|   297k|    auto handler = format_handler<true, CharT>{
 2060|   297k|        ranges::subrange<const CharT*>{source.data(),
 2061|   297k|                                       source.data() + source.size()},
 2062|   297k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   297k|    return vscan_parse_format_string(format, handler);
 2064|   365k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   731k|{
 1625|   731k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 595k, False: 135k]
  ------------------
 1626|   595k|        return false;
 1627|   595k|    }
 1628|   135k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 135k, False: 0]
  |  Branch (1628:39): [True: 135k, False: 0]
  ------------------
 1629|   731k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   101k|{
 1638|   101k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   101k|    auto reader =
 1644|   101k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   101k|            ranges::subrange<const CharT*>{source.data(),
 1646|   101k|                                           source.data() + source.size()},
 1647|   101k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   101k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.4k, False: 64.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.4k|    }                                                  \
  |  |  |  | 3671|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  64.4k|    return ranges::distance(source.data(), it);
 1650|   101k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   297k|    {
 1903|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   297k|    {
 1853|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   297k|{
 2038|   297k|    const auto beg = handler.get_ctx().begin();
 2039|   297k|    detail::parse_format_string<false>(format, handler);
 2040|   297k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 172k]
  |  |  ------------------
  ------------------
 2041|   124k|        return unexpected(handler.error);
 2042|   124k|    }
 2043|   172k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.83M|    {
 2022|  1.83M|        return ctx.get();
 2023|  1.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.83M|    {
 1857|  1.83M|        return contiguous_ctx;
 1858|  1.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   470k|    {
 1907|   470k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 470k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   470k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   297k|{
 1681|   297k|    auto arg = ctx.arg(id);
 1682|   297k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   297k|    return arg;
 1686|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   297k|    {
 1944|   297k|        return parse_ctx.next_arg_id();
 1945|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   297k|    {
 1985|   297k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   297k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   297k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 297k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   297k|        auto specs = detail::format_specs{};
 1998|   297k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   297k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   297k|            arg.type()};
 2001|       |
 2002|   297k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   297k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 297k]
  |  Branch (2003:29): [True: 0, False: 297k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   297k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   297k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   297k|        on_visit_scan_arg(
 2014|   297k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   297k|                                           get_ctx().locale()},
 2016|   297k|            arg);
 2017|   297k|        return parse_ctx.begin();
 2018|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   297k|    {
 1701|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   297k|    {
 1956|   297k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 297k]
  |  Branch (1956:23): [True: 0, False: 297k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   297k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   297k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 172k]
  |  |  ------------------
  ------------------
 1963|   124k|            on_error(r.error());
 1964|   124k|        }
 1965|   172k|        else {
 1966|   172k|            get_ctx().advance_to(*r);
 1967|   172k|        }
 1968|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   365k|{
 2073|   365k|    const auto argcount = args.size();
 2074|   365k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 67.8k, False: 297k]
  |  Branch (2074:60): [True: 67.8k, False: 0]
  ------------------
 2075|  67.8k|        auto arg = args.get(0);
 2076|  67.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  67.8k|    static_cast<    \
  |  |  929|  67.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  67.8k|    }
 2078|       |
 2079|   297k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 297k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   297k|    SCN_UNLIKELY_ATTR
 2087|   297k|    {
 2088|   297k|        auto handler = format_handler<false, CharT>{
 2089|   297k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   297k|    static_cast<    \
  |  |  929|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   297k|        return vscan_parse_format_string(format, handler);
 2091|   297k|    }
 2092|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   101k|{
 1658|   101k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   101k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   101k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 101k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   101k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   101k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   101k|    static_cast<    \
  |  |  929|   101k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   101k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   101k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   101k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   101k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.4k, False: 64.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.4k|    }                                                  \
  |  |  |  | 3671|   101k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  64.3k|    return it.position();
 1675|   101k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   297k|    {
 1903|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   297k|    {
 1830|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   297k|{
 2038|   297k|    const auto beg = handler.get_ctx().begin();
 2039|   297k|    detail::parse_format_string<false>(format, handler);
 2040|   297k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 172k]
  |  |  ------------------
  ------------------
 2041|   124k|        return unexpected(handler.error);
 2042|   124k|    }
 2043|   172k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.83M|    {
 2022|  1.83M|        return ctx.get();
 2023|  1.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.83M|    {
 1834|  1.83M|        return ctx;
 1835|  1.83M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   470k|    {
 1907|   470k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 470k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   470k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   297k|{
 1681|   297k|    auto arg = ctx.arg(id);
 1682|   297k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   297k|    return arg;
 1686|   297k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   297k|    {
 1944|   297k|        return parse_ctx.next_arg_id();
 1945|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   297k|    {
 1985|   297k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   297k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   297k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 297k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   297k|        auto specs = detail::format_specs{};
 1998|   297k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   297k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   297k|            arg.type()};
 2001|       |
 2002|   297k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   297k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 297k]
  |  Branch (2003:29): [True: 0, False: 297k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   297k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   297k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   297k|        on_visit_scan_arg(
 2014|   297k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   297k|                                           get_ctx().locale()},
 2016|   297k|            arg);
 2017|   297k|        return parse_ctx.begin();
 2018|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   297k|    {
 1701|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   297k|    {
 1956|   297k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 297k]
  |  Branch (1956:23): [True: 0, False: 297k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   297k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   297k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 172k]
  |  |  ------------------
  ------------------
 1963|   124k|            on_error(r.error());
 1964|   124k|        }
 1965|   172k|        else {
 1966|   172k|            get_ctx().advance_to(*r);
 1967|   172k|        }
 1968|   297k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   104k|{
 2099|   104k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   112k|{
 2099|   112k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  33.9k|{
 2099|  33.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  33.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  33.9k|{
 2099|  33.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  33.9k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.08k|{
 1363|  2.08k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.08k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.08k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.08k|            std::u32string tmp;
 1368|  2.08k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.08k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.08k|                std::u32string_view{tmp}, dest);
 1371|  2.08k|        }
 1372|  2.08k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.08k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.08k|        }
 1375|  2.08k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.08k|{
 1256|  2.08k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.08k|    auto it = src.begin();
 1259|   590k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 588k, False: 2.08k]
  ------------------
 1260|   588k|        auto res = get_next_code_point(
 1261|   588k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   588k|                                                                 src.end()));
 1263|   588k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.08k, False: 585k]
  |  |  ------------------
  ------------------
 1264|  2.08k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.08k|        }
 1266|   585k|        else {
 1267|   585k|            dest.push_back(res.value);
 1268|   585k|        }
 1269|   588k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   588k|    }
 1271|  2.08k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   904k|{
 1169|   904k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   904k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   904k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   904k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   904k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   904k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.5k, False: 882k]
  |  |  ------------------
  ------------------
 1173|  22.5k|        return {get_start_for_next_code_point(input),
 1174|  22.5k|                detail::invalid_code_point};
 1175|  22.5k|    }
 1176|   882k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.31k, False: 878k]
  |  |  ------------------
  ------------------
 1177|  3.31k|        return {input.end(), detail::invalid_code_point};
 1178|  3.31k|    }
 1179|       |
 1180|   878k|    return {input.begin() + len,
 1181|   878k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   882k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  22.5k|{
 1155|  22.5k|    auto it = input.begin();
 1156|   184k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 178k, False: 6.08k]
  ------------------
 1157|   178k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.4k, False: 161k]
  ------------------
 1158|  16.4k|            break;
 1159|  16.4k|        }
 1160|   178k|    }
 1161|  22.5k|    return it;
 1162|  22.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  24.0M|    {
  809|  24.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  24.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  24.0M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.02M|    {
  823|  9.02M|        return a.m_code == b.m_code;
  824|  9.02M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.24M|    {
 1728|  1.24M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.24M|        std::strcpy(m_locbuf, loc);
 1730|  1.24M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.24M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.24M|        std::setlocale(m_category, m_locbuf);
 1735|  1.24M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.24M|    {
 1757|  1.24M|        std::setlocale(cat, "C");
 1758|  1.24M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.22M|    {
 2936|  2.22M|        return m_msg == nullptr;
 2937|  2.22M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.19M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  17.1M|{
  458|  17.1M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  17.1M|        static_cast<unsigned char>(ch))];
  460|  17.1M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  42.0k|{
  469|  42.0k|    return static_cast<unsigned char>(ch) <= 127;
  470|  42.0k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.93M|{
  539|  3.93M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.93M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.2M|{
  784|  10.2M|    return e != eof_error::good;
  785|  10.2M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  40.4k|{
  798|  40.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  40.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  40.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  40.4k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   187k|{
  845|   187k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   187k|    return parse_error::eof;
  847|   187k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.20M|{
  854|  3.20M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.20M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.20M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 69.0k, False: 3.13M]
  ------------------
  859|  69.0k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  69.0k|    }
  861|       |
  862|  3.13M|    return scan_error{code, msg};
  863|  3.20M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.20M|{
  868|  3.20M|    return [code, msg](parse_error err) {
  869|  3.20M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.20M|    };
  871|  3.20M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  4.01M|{
 1200|       |    // Pattern_White_Space property
 1201|  4.01M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 3.82M, False: 186k]
  |  Branch (1201:27): [True: 944k, False: 2.88M]
  ------------------
 1202|  4.01M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 57.0k, False: 3.01M]
  ------------------
 1203|  4.01M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 56.0k, False: 2.95M]
  ------------------
 1204|  4.01M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.90k, False: 2.95M]
  ------------------
 1205|  4.01M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 20.4k, False: 2.93M]
  ------------------
 1206|  4.01M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 542k, False: 2.38M]
  ------------------
 1207|  4.01M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 2.38M]
  ------------------
 1208|  4.01M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.76M|{
 2220|  2.76M|    unsigned char running_diff{0};
 2221|  10.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.61M, False: 2.76M]
  ------------------
 2222|  7.61M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.61M|    }
 2224|  2.76M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 86.4k, False: 2.67M]
  |  Branch (2224:33): [True: 15.7k, False: 2.65M]
  ------------------
 2225|  2.76M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  18.9M|{
 3123|  18.9M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  18.9M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.93M|{
 3127|  1.93M|#if WCHAR_MIN < 0
 3128|  1.93M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.92M, False: 11.7k]
  |  Branch (3128:20): [True: 1.16M, False: 753k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.16M|        return char_to_int(static_cast<char>(ch));
 3133|  1.16M|    }
 3134|   765k|    return 255;
 3135|  1.93M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.84M|{
 6008|  1.84M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.84M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.84M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.84M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.84M|    return {};
 6023|  1.84M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.10M|    {
  304|  3.10M|        ranges::advance(x, n);
  305|  3.10M|        return x;
  306|  3.10M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.10M|    {
  268|  3.10M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.10M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.10M|    {
  151|  3.10M|        i += n;
  152|  3.10M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.67M|    {
  108|  3.67M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.67M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.67M|    {
   87|  3.67M|        return s - i;
   88|  3.67M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.22M|    {
  304|  1.22M|        ranges::advance(x, n);
  305|  1.22M|        return x;
  306|  1.22M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.22M|    {
  268|  1.22M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.22M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.22M|    {
  151|  1.22M|        i += n;
  152|  1.22M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   324k|    {
  108|   324k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   324k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   324k|    {
   87|   324k|        return s - i;
   88|   324k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.21M|{
  981|  1.21M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.21M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.21M|        return true;
  984|  1.21M|    }
  985|  1.21M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.21M|                           ranges::const_iterator_t<Range>,
  987|  1.21M|                           typename detail::basic_scan_buffer<
  988|  1.21M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.21M|        auto beg = r.begin();
  990|  1.21M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.21M, False: 0]
  ------------------
  991|  1.21M|            return false;
  992|  1.21M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.21M|    else {
 1006|  1.21M|        return false;
 1007|  1.21M|    }
 1008|  1.21M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  30.7M|    {
  763|  30.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  30.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.7M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.18M|{
 1857|  3.18M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.18M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.18M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.18M|        if (sz < count) {
 1862|  3.18M|            return unexpected(eof_error::eof);
 1863|  3.18M|        }
 1864|       |
 1865|  3.18M|        return ranges::next(range.begin(), count);
 1866|  3.18M|    }
 1867|  3.18M|    else {
 1868|  3.18M|        auto it = range.begin();
 1869|  3.18M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.95M, False: 1.22M]
  ------------------
 1870|  1.95M|            return ranges::next(it, count);
 1871|  1.95M|        }
 1872|       |
 1873|  4.86M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.67M, False: 1.18M]
  ------------------
 1874|  3.67M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.1k, False: 3.64M]
  ------------------
 1875|  35.1k|                return unexpected(eof_error::eof);
 1876|  35.1k|            }
 1877|  3.67M|        }
 1878|       |
 1879|  1.18M|        return it;
 1880|  1.22M|    }
 1881|  3.18M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.18M|{
 1095|  3.18M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.18M|        return r.size();
 1097|  3.18M|    }
 1098|  3.18M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.18M|                           ranges::const_iterator_t<Range>,
 1100|  3.18M|                           typename detail::basic_scan_buffer<
 1101|  3.18M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.18M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.18M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.18M|        }
 1105|  3.18M|        else {
 1106|  3.18M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.18M, False: 0]
  ------------------
 1107|  3.18M|                return static_cast<size_t>(
 1108|  3.18M|                    r.begin().parent()->chars_available() -
 1109|  3.18M|                    r.begin().position());
 1110|  3.18M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.18M|        }
 1113|  3.18M|    }
 1114|  3.18M|    else {
 1115|  3.18M|        return 0;
 1116|  3.18M|    }
 1117|  3.18M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.92M|    {
  754|  2.92M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  15.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3M|              cvref<T> obj = *get<T>(fn);
  745|  15.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3M|              }
  748|  15.3M|              else {
  749|  15.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3M|              }
  751|  15.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.3M|    {
  684|  15.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.3M|            return static_cast<T*>(s.m_cp);
  686|  15.3M|        }
  687|  15.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.3M|            return static_cast<T*>(s.m_p);
  689|  15.3M|        }
  690|  15.3M|        else {
  691|  15.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.3M|        }
  693|  15.3M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  2.92M|        {
  662|  2.92M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  6.98M|    {
  763|  6.98M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.98M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.87M|    {
  754|  1.87M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.29M|              cvref<T> obj = *get<T>(fn);
  745|  3.29M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.29M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.29M|              }
  748|  3.29M|              else {
  749|  3.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.29M|              }
  751|  3.29M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.29M|    {
  684|  3.29M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.29M|            return static_cast<T*>(s.m_cp);
  686|  3.29M|        }
  687|  3.29M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.29M|            return static_cast<T*>(s.m_p);
  689|  3.29M|        }
  690|  3.29M|        else {
  691|  3.29M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.29M|        }
  693|  3.29M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  1.87M|        {
  662|  1.87M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   873k|    {
 6037|   873k|        const bool need_skipped_width =
 6038|   873k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 873k]
  |  Branch (6038:33): [True: 0, False: 873k]
  ------------------
 6039|   873k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   873k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 873k]
  ------------------
 6043|   873k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 873k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   873k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 873k, False: 0]
  |  Branch (6047:56): [True: 873k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   873k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 873k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.73M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   873k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   873k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   873k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.8k, False: 859k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.8k|    }                                                  \
  |  |  |  | 3671|   873k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.73M|                            make_eof_scan_error));
 6058|       |
 6059|  1.73M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 859k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   859k|            return result_type{it, 0};
 6067|  1.73M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   873k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.33M|{
 1976|  2.33M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.33M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.33M|{
 1957|  2.33M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.33M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.33M|    }
 1960|  2.33M|    else {
 1961|  2.33M|        auto first = range.begin();
 1962|  12.3M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 12.2M, False: 25.6k]
  ------------------
 1963|  12.2M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.30M, False: 9.97M]
  ------------------
 1964|  2.30M|                return first;
 1965|  2.30M|            }
 1966|  12.2M|        }
 1967|  25.6k|        return first;
 1968|  2.33M|    }
 1969|  2.33M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.08M|    {
  108|  2.08M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.08M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.08M|    {
   94|  2.08M|        iter_difference_t<I> counter{0};
   95|  19.9M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.8M, False: 2.08M]
  ------------------
   96|  17.8M|            ++i;
   97|  17.8M|            ++counter;
   98|  17.8M|        }
   99|  2.08M|        return counter;
  100|  2.08M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.20M|    return [code, msg](parse_error err) {
  869|  3.20M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.20M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   451k|    {
 1780|   451k|        auto stdloc = loc.get<std::locale>();
 1781|   451k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   451k|        grouping = numpunct.grouping();
 1783|   451k|        thousands_sep =
 1784|   451k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 451k]
  ------------------
 1785|   451k|        decimal_point = numpunct.decimal_point();
 1786|   451k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   451k|{
 1717|   451k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 451k, False: 0]
  ------------------
 1718|   451k|        return std::use_facet<Facet>(stdloc);
 1719|   451k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   451k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.41M|{
 1846|  3.41M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.5k, False: 3.39M]
  |  |  ------------------
  ------------------
 1847|  18.5k|        return unexpected(e);
 1848|  18.5k|    }
 1849|       |
 1850|  3.39M|    return ranges::next(range.begin());
 1851|  3.41M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.96M|{
  950|  4.96M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.8k, False: 4.92M]
  |  |  ------------------
  ------------------
  951|  36.8k|        return eof_error::eof;
  952|  36.8k|    }
  953|  4.92M|    return eof_error::good;
  954|  4.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.98M|{
  944|  6.98M|    return is_range_eof(r.begin(), r.end());
  945|  6.98M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.98M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.98M|    {
  937|  6.98M|        return begin == end;
  938|  6.98M|    }
  939|  6.98M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.39M|    {
  296|  3.39M|        ++x;
  297|  3.39M|        return x;
  298|  3.39M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.30M|{
 3141|  1.30M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.30M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 999k, False: 305k]
  ------------------
 3143|   999k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 999k, False: 336]
  ------------------
 3144|   999k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   999k|        }
 3146|    336|        return unexpected(eof_error::eof);
 3147|   999k|    }
 3148|       |
 3149|   305k|    auto& it = *r;
 3150|   305k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 127k, False: 178k]
  ------------------
 3151|   127k|        return std::pair{it, sign_type::minus_sign};
 3152|   127k|    }
 3153|   178k|    return std::pair{it, sign_type::plus_sign};
 3154|   305k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.27M|{
 2272|  2.27M|    auto it = read_code_unit(range);
 2273|  2.27M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 2.26M]
  |  |  ------------------
  ------------------
 2274|  10.7k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  10.7k|    }
 2276|       |
 2277|  4.29M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.29M, False: 1.85M]
  ------------------
 2278|  4.29M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 417k, False: 3.87M]
  ------------------
 2279|   417k|            return *it;
 2280|   417k|        }
 2281|  4.29M|    }
 2282|       |
 2283|  1.85M|    return unexpected(parse_error::error);
 2284|  2.26M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.18M|{
 2231|  3.18M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.18M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.18M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.18M|        if (range.size() < str.size()) {
 2236|  3.18M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.18M|        }
 2238|  3.18M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.18M|            return unexpected(parse_error::error);
 2240|  3.18M|        }
 2241|  3.18M|        return ranges::next(range.begin(), str.size());
 2242|  3.18M|    }
 2243|  3.18M|    else {
 2244|  3.18M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.18M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.18M|                return ch;
 2247|  3.18M|            }
 2248|  3.18M|            return static_cast<char_type>(ch +
 2249|  3.18M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.18M|        };
 2251|       |
 2252|  3.18M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.18M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.1k, False: 3.14M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.1k|    }                                                  \
  |  |  |  | 3671|  3.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.14M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.14M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.14M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.04M, False: 104k]
  |  |  ------------------
  ------------------
 2257|  3.14M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.14M|                    return ascii_tolower(a) ==
 2259|  3.14M|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.14M|                }))) {
 2261|  3.04M|            return unexpected(parse_error::error);
 2262|  3.04M|        }
 2263|       |
 2264|   104k|        return it;
 2265|  3.14M|    }
 2266|  3.18M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.63M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.63M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.28M, False: 351k]
  |  Branch (2245:29): [True: 295k, False: 55.3k]
  ------------------
 2246|  3.57M|                return ch;
 2247|  3.57M|            }
 2248|  55.3k|            return static_cast<char_type>(ch +
 2249|  55.3k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.63M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.13M|{
 2146|  1.13M|    auto it = read_code_unit(range);
 2147|  1.13M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.78k, False: 1.12M]
  |  |  ------------------
  ------------------
 2148|  7.78k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  7.78k|    }
 2150|       |
 2151|  1.12M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 922k, False: 207k]
  |  |  ------------------
  ------------------
 2152|  1.12M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   922k|        return unexpected(parse_error::error);
 2154|   922k|    }
 2155|       |
 2156|   207k|    return *it;
 2157|  1.12M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.32M|{
 1996|  2.32M|    auto it = read_while_code_unit(range, pred);
 1997|  2.32M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 946k, False: 1.38M]
  ------------------
 1998|   946k|        return unexpected(parse_error::error);
 1999|   946k|    }
 2000|  1.38M|    return it;
 2001|  2.32M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.07M|    {
 1621|  1.07M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.07M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.07M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.07M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.07M|            m_storage.reset();
 1627|  1.07M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.07M|        }
 1629|  1.07M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.07M|                                          std::basic_string<CharT>>) {
 1631|  1.07M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.07M|            m_view = string_view_type{*m_storage};
 1633|  1.07M|        }
 1634|  1.07M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.07M|                                          typename detail::basic_scan_buffer<
 1636|  1.07M|                                              value_t>::forward_iterator> &&
 1637|  1.07M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.07M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.07M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.07M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 147k, False: 930k]
  |  |  ------------------
  ------------------
 1641|  1.07M|                             detail::to_address(end_seg.end()))) {
 1642|   147k|                auto& str = m_storage.emplace();
 1643|   147k|                str.reserve(range.end().position() - range.begin().position());
 1644|   147k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   147k|                m_view = string_view_type{str};
 1646|   147k|                return;
 1647|   147k|            }
 1648|       |
 1649|   930k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   930k|                                                            end_seg.data());
 1651|   930k|            m_storage.reset();
 1652|   930k|        }
 1653|  1.07M|        else {
 1654|  1.07M|            auto& str = m_storage.emplace();
 1655|  1.07M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.07M|                str.reserve(range.size());
 1657|  1.07M|            }
 1658|  1.07M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.07M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.07M|                          std::back_inserter(str));
 1661|  1.07M|            }
 1662|  1.07M|            else {
 1663|  1.07M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.07M|                     ++it) {
 1665|  1.07M|                    str.push_back(*it);
 1666|  1.07M|                }
 1667|  1.07M|            }
 1668|  1.07M|            m_view = string_view_type{str};
 1669|  1.07M|        }
 1670|  1.07M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.40M|    {
 1582|  7.40M|        return m_view;
 1583|  7.40M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.48M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   800k|    {
 6079|   800k|        const bool need_skipped_width =
 6080|   800k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 800k]
  |  Branch (6080:33): [True: 0, False: 800k]
  ------------------
 6081|   800k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   800k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 800k]
  ------------------
 6084|   800k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 800k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   800k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 800k, False: 0]
  ------------------
 6093|   800k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 800k]
  ------------------
 6094|   800k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   800k|        return result_type{rng.begin(), 0};
 6118|   800k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.57M|{
 1846|  1.57M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 1.57M]
  |  |  ------------------
  ------------------
 1847|  4.70k|        return unexpected(e);
 1848|  4.70k|    }
 1849|       |
 1850|  1.57M|    return ranges::next(range.begin());
 1851|  1.57M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.95M|{
  950|  2.95M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 2.93M]
  |  |  ------------------
  ------------------
  951|  20.7k|        return eof_error::eof;
  952|  20.7k|    }
  953|  2.93M|    return eof_error::good;
  954|  2.95M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.95M|{
  944|  2.95M|    return is_range_eof(r.begin(), r.end());
  945|  2.95M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.95M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.95M|    {
  937|  2.95M|        return begin == end;
  938|  2.95M|    }
  939|  2.95M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.57M|    {
  296|  1.57M|        ++x;
  297|  1.57M|        return x;
  298|  1.57M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.07M|{
 3141|  1.07M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.07M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 816k, False: 262k]
  ------------------
 3143|   816k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 816k, False: 108]
  ------------------
 3144|   816k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   816k|        }
 3146|    108|        return unexpected(eof_error::eof);
 3147|   816k|    }
 3148|       |
 3149|   262k|    auto& it = *r;
 3150|   262k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 120k, False: 141k]
  ------------------
 3151|   120k|        return std::pair{it, sign_type::minus_sign};
 3152|   120k|    }
 3153|   141k|    return std::pair{it, sign_type::plus_sign};
 3154|   262k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.25M|{
 2272|  1.25M|    auto it = read_code_unit(range);
 2273|  1.25M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 1.24M]
  |  |  ------------------
  ------------------
 2274|  2.01k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.01k|    }
 2276|       |
 2277|  2.34M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.34M, False: 959k]
  ------------------
 2278|  2.34M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 290k, False: 2.04M]
  ------------------
 2279|   290k|            return *it;
 2280|   290k|        }
 2281|  2.34M|    }
 2282|       |
 2283|   959k|    return unexpected(parse_error::error);
 2284|  1.24M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.79M|{
 2231|  2.79M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.79M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.79M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.79M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.5k, False: 2.76M]
  ------------------
 2236|  35.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.5k|        }
 2238|  2.76M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.65M, False: 102k]
  ------------------
 2239|  2.65M|            return unexpected(parse_error::error);
 2240|  2.65M|        }
 2241|   102k|        return ranges::next(range.begin(), str.size());
 2242|  2.76M|    }
 2243|  2.79M|    else {
 2244|  2.79M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.79M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.79M|                return ch;
 2247|  2.79M|            }
 2248|  2.79M|            return static_cast<char_type>(ch +
 2249|  2.79M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.79M|        };
 2251|       |
 2252|  2.79M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.79M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.79M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.79M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.79M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.79M|                    return ascii_tolower(a) ==
 2259|  2.79M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.79M|                }))) {
 2261|  2.79M|            return unexpected(parse_error::error);
 2262|  2.79M|        }
 2263|       |
 2264|  2.79M|        return it;
 2265|  2.79M|    }
 2266|  2.79M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   323k|{
 2146|   323k|    auto it = read_code_unit(range);
 2147|   323k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.69k, False: 320k]
  |  |  ------------------
  ------------------
 2148|  2.69k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.69k|    }
 2150|       |
 2151|   320k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266k, False: 54.1k]
  |  |  ------------------
  ------------------
 2152|   320k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   266k|        return unexpected(parse_error::error);
 2154|   266k|    }
 2155|       |
 2156|  54.1k|    return *it;
 2157|   320k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  4.04M|    {
 1503|  4.04M|        return sv;
 1504|  4.04M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   595k|{
 1976|   595k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   595k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   595k|{
 1957|   595k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   595k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   595k|    }
 1960|   595k|    else {
 1961|   595k|        auto first = range.begin();
 1962|   595k|        for (; first != range.end(); ++first) {
 1963|   595k|            if (pred(*first)) {
 1964|   595k|                return first;
 1965|   595k|            }
 1966|   595k|        }
 1967|   595k|        return first;
 1968|   595k|    }
 1969|   595k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.06M|{
 2951|  1.06M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.06M, False: 0]
  ------------------
 2952|  1.06M|        auto it = read_while_classic_space(range);
 2953|  1.06M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.06M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 1.05M]
  |  |  ------------------
  ------------------
 2955|  12.0k|            return unexpected(e);
 2956|  12.0k|        }
 2957|       |
 2958|  1.05M|        return it;
 2959|  1.06M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.06M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.06M|{
 2117|  1.06M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.06M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.06M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.06M|        auto buf = make_contiguous_buffer(range);
 2121|  1.06M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.06M|        return ranges::next(range.begin(),
 2123|  1.06M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.06M|    }
 2125|  1.06M|    else {
 2126|  1.06M|        auto it = range.begin();
 2127|       |
 2128|  1.06M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.06M|            auto seg = get_contiguous_beginning(range);
 2130|  1.06M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.06M|                seg_it != seg.end()) {
 2132|  1.06M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.06M|            }
 2134|  1.06M|            ranges::advance(it, seg.size());
 2135|  1.06M|        }
 2136|       |
 2137|  1.06M|        return read_while_code_point(
 2138|  1.06M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.06M|    }
 2140|  1.06M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.06M|{
 1683|  1.06M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.06M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.06M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.06M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.06M|    }
 1688|  1.06M|    else {
 1689|  1.06M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.06M|    }
 1691|  1.06M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.06M|    {
 1490|  1.06M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.22M|    {
  304|  3.22M|        ranges::advance(x, n);
  305|  3.22M|        return x;
  306|  3.22M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.29M|    {
  268|  4.29M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.29M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.29M|    {
  181|  19.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.5M, False: 4.29M]
  ------------------
  182|  15.5M|            ++i;
  183|  15.5M|        }
  184|  4.29M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   281k|    {
 6193|   281k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   281k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   281k|            auto rd = make_reader<T, char_type>();
 6198|   281k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   281k|                return unexpected(e);
 6200|   281k|            }
 6201|       |
 6202|   281k|            return impl(rd, range, value);
 6203|   281k|        }
 6204|   281k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   281k|            auto rd = make_reader<T, char_type>();
 6206|   281k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 281k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   281k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 281k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   281k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   281k|                return impl(rd, range, value);
 6213|   281k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   281k|        else {
 6221|   281k|            SCN_EXPECT(false);
 6222|   281k|            SCN_UNREACHABLE;
 6223|   281k|        }
 6224|   281k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.62M|    {
 3040|  1.62M|        reader_error_handler eh{};
 3041|  1.62M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.62M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.62M|        return {};
 3046|  1.62M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.62M|    {
 3051|  1.62M|        return static_cast<Derived&>(*this);
 3052|  1.62M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.62M|    {
 4145|  1.62M|        detail::check_float_type_specs(specs, eh);
 4146|  1.62M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   281k|    {
 6124|   281k|        const bool need_skipped_width =
 6125|   281k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 281k]
  |  Branch (6125:33): [True: 0, False: 281k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   281k|        auto it = rng.begin();
 6129|   281k|        std::ptrdiff_t prefix_width = 0;
 6130|   281k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 281k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   281k|        else {
 6138|   281k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.14k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.14k|    }                                                  \
  |  |  |  | 3671|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   277k|            std::tie(it, prefix_width) = prefix_result;
 6140|   277k|        }
 6141|   277k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   277k|        std::ptrdiff_t value_width = 0;
 6145|   277k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 277k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   277k|        else {
 6161|   277k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 260k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.6k|    }                                                  \
  |  | 3671|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   260k|                                             specs, value, loc));
 6163|       |
 6164|   260k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 260k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   260k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   260k|        std::ptrdiff_t postfix_width = 0;
 6173|   260k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 257k, False: 3.34k]
  ------------------
 6174|   257k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   257k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   257k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   257k|                                 value_width));
 6178|   257k|            std::tie(it, postfix_width) = postfix_result;
 6179|   257k|        }
 6180|       |
 6181|   260k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   260k|                                                 value_width, postfix_width);
 6183|   260k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 260k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   260k|        return it;
 6188|   260k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.75M|    {
 3035|  3.75M|        return true;
 3036|  3.75M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.59M|    {
 4217|  1.59M|        unsigned options{};
 4218|  1.59M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 451k, False: 1.14M]
  ------------------
 4219|   451k|            options |= float_reader_base::allow_thsep;
 4220|   451k|        }
 4221|       |
 4222|  1.59M|        SCN_GCC_COMPAT_PUSH
 4223|  1.59M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.59M|        switch (specs.type) {
 4226|   237k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 237k, False: 1.36M]
  ------------------
 4227|   237k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  38.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 38.6k, False: 1.56M]
  ------------------
 4230|  38.6k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   487k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 487k, False: 1.11M]
  ------------------
 4233|   487k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   385k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 385k, False: 1.21M]
  ------------------
 4236|   385k|                return options | float_reader_base::allow_scientific |
 4237|   385k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   451k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 451k, False: 1.14M]
  ------------------
 4240|   451k|                return options | float_reader_base::allow_scientific |
 4241|   451k|                       float_reader_base::allow_fixed |
 4242|   451k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.59M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.59M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.59M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.59M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.59M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.24M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.48M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   695k|    {
 3691|   695k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   695k|        const std::ptrdiff_t sign_len =
 3694|   695k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 167k, False: 527k]
  ------------------
 3695|       |
 3696|   695k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   695k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   695k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   695k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   695k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.7k, False: 680k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.7k|    }                                                  \
  |  |  |  | 3671|   695k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   680k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   680k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   695k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.15M|    {
 4057|  2.15M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.15M, False: 0]
  ------------------
 4058|  2.15M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.15M, False: 0]
  ------------------
 4059|  2.15M|            return;
 4060|  2.15M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.45M|    {
 1587|  2.45M|        return m_storage.has_value();
 1588|  2.45M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.44M|    {
 1592|  1.44M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.44M|        return *m_storage;
 1594|  1.44M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   277k|    {
 4170|   277k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   277k|#if !SCN_DISABLE_LOCALE
 4173|   277k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 78.0k, False: 199k]
  ------------------
 4174|  78.0k|            return read_impl<Range>(
 4175|  78.0k|                range, rd,
 4176|  78.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  78.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  78.0k|                },
 4179|  78.0k|                value, loc);
 4180|  78.0k|        }
 4181|   199k|#endif
 4182|       |
 4183|   199k|        return read_impl<Range>(
 4184|   199k|            range, rd,
 4185|   199k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   199k|                return r.read_source(SCN_FWD(args)...);
 4187|   199k|            },
 4188|   199k|            value);
 4189|   277k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   384k|    {
 4206|   384k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   384k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 366k]
  |  |  ------------------
  ------------------
 4208|  18.3k|            return unexpected(r.error());
 4209|  18.3k|        }
 4210|       |
 4211|   366k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.21k, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.21k|    }                                                  \
  |  |  |  | 3671|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   363k|        return ranges::next(range.begin(), n);
 4213|   366k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.19M|    {
  763|  1.19M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.19M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  78.0k|    {
  754|  78.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  78.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.0k|              cvref<T> obj = *get<T>(fn);
  745|  78.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  78.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.0k|              }
  748|  78.0k|              else {
  749|  78.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.0k|              }
  751|  78.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  78.0k|    {
  684|  78.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  78.0k|            return static_cast<T*>(s.m_cp);
  686|  78.0k|        }
  687|  78.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  78.0k|            return static_cast<T*>(s.m_p);
  689|  78.0k|        }
  690|  78.0k|        else {
  691|  78.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  78.0k|        }
  693|  78.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  78.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  78.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  78.0k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   244k|    {
 3679|   244k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   244k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   244k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 244k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   244k|        return read_source_impl(range);
 3685|   244k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.19M|    {
 3705|  1.19M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.19M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.19M|        auto it = sign_result.first;
 3708|  1.19M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.19M|        auto digits_begin = it;
 3711|  1.19M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.19M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.19M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.19M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.19M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.19M|                SCN_TRY_ASSIGN(
 3717|  1.19M|                    it,
 3718|  1.19M|                    do_read_source_impl(
 3719|  1.19M|                        r,
 3720|  1.19M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.19M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.19M|            }
 3723|  1.19M|            else {
 3724|  1.19M|                auto cb = [&](const auto& rr)
 3725|  1.19M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.19M|                    auto res = read_all(rr);
 3727|  1.19M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.19M|                        return unexpected_scan_error(
 3729|  1.19M|                            scan_error::invalid_scanned_value,
 3730|  1.19M|                            "Invalid float value");
 3731|  1.19M|                    }
 3732|  1.19M|                    return res;
 3733|  1.19M|                };
 3734|  1.19M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.19M|            }
 3736|  1.19M|        }
 3737|  1.19M|        else {
 3738|  1.19M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 57.7k, False: 1.13M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  57.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  57.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  57.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  57.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  57.7k|    }                                                  \
  |  | 3671|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.13M|                it,
 3740|  1.13M|                do_read_source_impl(
 3741|  1.13M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.13M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.13M|        }
 3744|       |
 3745|  1.13M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.13M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.12M, False: 6.73k]
  |  Branch (3747:48): [True: 1.12M, False: 6.17k]
  ------------------
 3748|  1.13M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.07M, False: 46.8k]
  ------------------
 3749|  1.13M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.07M, False: 1.39k]
  ------------------
 3750|  1.07M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.07M|        }
 3752|       |
 3753|  1.13M|        handle_separators();
 3754|       |
 3755|  1.13M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.13M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.13M|        return it;
 3768|  1.13M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.19M|    {
 4000|  1.19M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.19M|        const bool allowed_nonhex =
 4002|  1.19M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.19M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.19M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.18M, False: 12.9k]
  |  Branch (4005:45): [True: 0, False: 1.18M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.19M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.9k, False: 1.18M]
  ------------------
 4011|  12.9k|            return *r;
 4012|  12.9k|        }
 4013|       |
 4014|  1.18M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.13M, False: 48.2k]
  |  Branch (4014:45): [True: 1.08k, False: 1.13M]
  ------------------
 4015|  1.08k|            return unexpected(r.error());
 4016|  1.08k|        }
 4017|  1.17M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 48.2k, False: 1.13M]
  ------------------
 4018|  48.2k|            return *r;
 4019|  48.2k|        }
 4020|       |
 4021|  1.13M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 795k, False: 335k]
  |  Branch (4021:28): [True: 249k, False: 546k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   249k|            auto it = range.begin();
 4025|       |
 4026|   249k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 11.2k, False: 238k]
  ------------------
 4027|  11.2k|                m_kind = float_kind::hex_with_prefix;
 4028|  11.2k|                it = *r;
 4029|  11.2k|            }
 4030|   238k|            else {
 4031|   238k|                m_kind = float_kind::hex_without_prefix;
 4032|   238k|            }
 4033|       |
 4034|   249k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   249k|        }
 4036|   882k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 335k, False: 546k]
  |  Branch (4036:29): [True: 335k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   335k|            m_kind = float_kind::generic;
 4040|   335k|            return read_regular_float(range);
 4041|   335k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   546k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 521k]
  |  |  ------------------
  ------------------
 4047|  25.0k|            m_kind = float_kind::hex_with_prefix;
 4048|  25.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  25.0k|        }
 4050|       |
 4051|   521k|        m_kind = float_kind::generic;
 4052|   521k|        return read_regular(range);
 4053|   546k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.19M|    {
 3811|  1.19M|        auto it = range.begin();
 3812|  1.19M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.18M, False: 12.9k]
  ------------------
 3813|  1.18M|            return unexpected(r.error());
 3814|  1.18M|        }
 3815|  12.9k|        else {
 3816|  12.9k|            it = *r;
 3817|  12.9k|        }
 3818|       |
 3819|  12.9k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.9k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.9k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.73k, False: 6.17k]
  ------------------
 3822|  6.73k|            m_kind = float_kind::inf_short;
 3823|  6.73k|            return it;
 3824|  6.73k|        }
 3825|  6.17k|        else {
 3826|  6.17k|            m_kind = float_kind::inf_long;
 3827|  6.17k|            return *r;
 3828|  6.17k|        }
 3829|  12.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.18M|    {
 3834|  1.18M|        auto it = range.begin();
 3835|  1.18M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.13M, False: 49.3k]
  ------------------
 3836|  1.13M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.13M|                scan_error::invalid_scanned_value,
 3838|  1.13M|                "Invalid floating-point NaN value"));
 3839|  1.13M|        }
 3840|  49.3k|        else {
 3841|  49.3k|            it = *r;
 3842|  49.3k|        }
 3843|       |
 3844|  49.3k|        if (auto r =
 3845|  49.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  49.3k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 46.8k, False: 2.47k]
  ------------------
 3847|  46.8k|            m_kind = float_kind::nan_simple;
 3848|  46.8k|            return it;
 3849|  46.8k|        }
 3850|  2.47k|        else {
 3851|  2.47k|            it = *r;
 3852|  2.47k|        }
 3853|       |
 3854|  2.47k|        auto payload_beg_it = it;
 3855|  2.47k|        it = read_while_code_unit(
 3856|  2.47k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.47k|                return is_ascii_char(ch) &&
 3858|  2.47k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.47k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.47k|            });
 3861|  2.47k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.47k|        m_kind = float_kind::nan_with_payload;
 3864|  2.47k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.39k, False: 1.08k]
  ------------------
 3865|  2.47k|                                             ')')) {
 3866|  1.39k|            return *r;
 3867|  1.39k|        }
 3868|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.08k|                                     "Invalid floating-point NaN payload");
 3870|  2.47k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.47k|    {
  754|  2.47k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  21.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.0k|              cvref<T> obj = *get<T>(fn);
  745|  21.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.0k|              }
  748|  21.0k|              else {
  749|  21.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.0k|              }
  751|  21.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  21.0k|    {
  684|  21.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.0k|            return static_cast<T*>(s.m_cp);
  686|  21.0k|        }
  687|  21.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.0k|            return static_cast<T*>(s.m_p);
  689|  21.0k|        }
  690|  21.0k|        else {
  691|  21.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.0k|        }
  693|  21.0k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  21.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  21.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.9k, False: 89]
  ------------------
 3858|  21.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.4k, False: 1.46k]
  |  Branch (3858:39): [True: 11.6k, False: 7.79k]
  |  Branch (3858:54): [True: 2.54k, False: 6.71k]
  |  Branch (3858:67): [True: 2.46k, False: 83]
  ------------------
 3859|  20.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 1.46k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.54k]
  ------------------
 3860|  21.0k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.47k|        {
  662|  2.47k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   795k|    {
 3804|   795k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   795k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   274k|    {
 3904|   274k|        auto it = range.begin();
 3905|       |
 3906|   274k|        std::ptrdiff_t digits_count = 0;
 3907|   274k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   274k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.03k, False: 267k]
  |  |  ------------------
  ------------------
 3909|  7.03k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  7.03k|                scan_error::invalid_scanned_value,
 3911|  7.03k|                "Invalid hexadecimal floating-point value"));
 3912|  7.03k|        }
 3913|   267k|        else {
 3914|   267k|            digits_count += ranges::distance(it, *r);
 3915|   267k|            it = *r;
 3916|   267k|        }
 3917|       |
 3918|   267k|        m_integral_part_length = digits_count;
 3919|   267k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 42.2k, False: 225k]
  ------------------
 3920|   267k|                                             m_locale_options.decimal_point)) {
 3921|  42.2k|            it = *r;
 3922|  42.2k|        }
 3923|       |
 3924|   267k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 38.2k, False: 229k]
  ------------------
 3925|   267k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  38.2k|            digits_count += ranges::distance(it, *r);
 3927|  38.2k|            it = *r;
 3928|  38.2k|        }
 3929|       |
 3930|   267k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 267k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   267k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   267k|        return it;
 3938|   267k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   541k|    {
 3789|   541k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   541k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 541k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   541k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   541k|        return read_while1_code_unit(
 3798|   541k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   541k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   541k|    {
  754|   541k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.75M|              cvref<T> obj = *get<T>(fn);
  745|  2.75M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.75M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.75M|              }
  748|  2.75M|              else {
  749|  2.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.75M|              }
  751|  2.75M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.75M|    {
  684|  2.75M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.75M|            return static_cast<T*>(s.m_cp);
  686|  2.75M|        }
  687|  2.75M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.75M|            return static_cast<T*>(s.m_p);
  689|  2.75M|        }
  690|  2.75M|        else {
  691|  2.75M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.75M|        }
  693|  2.75M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.75M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   541k|        {
  662|   541k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   974k|    {
 3876|   974k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 111k, False: 863k]
  ------------------
 3877|   111k|            auto beg_exp_it = range.begin();
 3878|   111k|            auto it = *r;
 3879|       |
 3880|   111k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 111k, False: 336]
  ------------------
 3881|   111k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   111k|                it = r_sign->first;
 3883|   111k|            }
 3884|       |
 3885|   111k|            if (auto r_exp = read_while1_code_unit(
 3886|   111k|                    ranges::subrange{it, range.end()},
 3887|   111k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   111k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 109k]
  |  |  ------------------
  ------------------
 3889|  1.80k|                it = beg_exp_it;
 3890|  1.80k|            }
 3891|   109k|            else {
 3892|   109k|                it = *r_exp;
 3893|   109k|            }
 3894|       |
 3895|   111k|            return it;
 3896|   111k|        }
 3897|   863k|        return range.begin();
 3898|   974k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   351k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   351k|              cvref<T> obj = *get<T>(fn);
  745|   351k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   351k|                  obj(static_cast<decltype(args)>(args)...);
  747|   351k|              }
  748|   351k|              else {
  749|   351k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   351k|              }
  751|   351k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   351k|    {
  684|   351k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   351k|            return static_cast<T*>(s.m_cp);
  686|   351k|        }
  687|   351k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   351k|            return static_cast<T*>(s.m_p);
  689|   351k|        }
  690|   351k|        else {
  691|   351k|            return reinterpret_cast<T*>(s.m_fp);
  692|   351k|        }
  693|   351k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   351k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   857k|    {
 3944|   857k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   857k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 735k, False: 121k]
  |  Branch (3945:50): [True: 19.1k, False: 716k]
  ------------------
 3946|       |
 3947|   857k|        auto it = ranges::begin(range);
 3948|   857k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   857k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   857k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   857k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 818k]
  |  |  ------------------
  ------------------
 3952|  39.1k|            return r.transform_error(
 3953|  39.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  39.1k|                                              "Invalid floating-point value"));
 3955|  39.1k|        }
 3956|   818k|        else {
 3957|   818k|            digits_count += ranges::distance(it, *r);
 3958|   818k|            it = *r;
 3959|   818k|        }
 3960|       |
 3961|   818k|        m_integral_part_length = digits_count;
 3962|   818k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 161k, False: 656k]
  ------------------
 3963|   818k|                                             m_locale_options.decimal_point)) {
 3964|   161k|            it = *r;
 3965|   161k|        }
 3966|       |
 3967|   818k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 149k, False: 668k]
  ------------------
 3968|   818k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   149k|            digits_count += ranges::distance(it, *r);
 3970|   149k|            it = *r;
 3971|   149k|        }
 3972|       |
 3973|   818k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 818k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   818k|        auto beg_exp_it = it;
 3979|   818k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 707k, False: 110k]
  ------------------
 3980|   707k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   707k|        }
 3982|   818k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 18.4k, False: 799k]
  |  Branch (3982:29): [True: 10.4k, False: 8.01k]
  ------------------
 3983|  10.4k|            return unexpected_scan_error(
 3984|  10.4k|                scan_error::invalid_scanned_value,
 3985|  10.4k|                "No exponent given to scientific float");
 3986|  10.4k|        }
 3987|       |
 3988|   807k|        m_kind =
 3989|   807k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 698k, False: 108k]
  ------------------
 3990|       |
 3991|   807k|        return it;
 3992|   818k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.67M|    {
 3774|  1.67M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  |  Branch (859:45): [True: 0, False: 1.67M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.67M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.67M|        return read_while1_code_unit(
 3783|  1.67M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.67M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.67M|    {
  754|  1.67M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.15M|              cvref<T> obj = *get<T>(fn);
  745|  9.15M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.15M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.15M|              }
  748|  9.15M|              else {
  749|  9.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.15M|              }
  751|  9.15M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  9.15M|    {
  684|  9.15M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.15M|            return static_cast<T*>(s.m_cp);
  686|  9.15M|        }
  687|  9.15M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.15M|            return static_cast<T*>(s.m_p);
  689|  9.15M|        }
  690|  9.15M|        else {
  691|  9.15M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.15M|        }
  693|  9.15M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  9.15M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.67M|        {
  662|  1.67M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.07M|    {
 1577|  1.07M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.07M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  78.0k|        {
  662|  78.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   199k|    {
  754|   199k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   199k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   199k|              cvref<T> obj = *get<T>(fn);
  745|   199k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   199k|                  obj(static_cast<decltype(args)>(args)...);
  747|   199k|              }
  748|   199k|              else {
  749|   199k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   199k|              }
  751|   199k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   199k|    {
  684|   199k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   199k|            return static_cast<T*>(s.m_cp);
  686|   199k|        }
  687|   199k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   199k|            return static_cast<T*>(s.m_p);
  689|   199k|        }
  690|   199k|        else {
  691|   199k|            return reinterpret_cast<T*>(s.m_fp);
  692|   199k|        }
  693|   199k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   199k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   199k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   199k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   949k|    {
 3665|   949k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   949k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 949k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   949k|        return read_source_impl(range);
 3671|   949k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   199k|        {
  662|   199k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   239k|    {
 4170|   239k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   239k|#if !SCN_DISABLE_LOCALE
 4173|   239k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 66.3k, False: 173k]
  ------------------
 4174|  66.3k|            return read_impl<Range>(
 4175|  66.3k|                range, rd,
 4176|  66.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  66.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  66.3k|                },
 4179|  66.3k|                value, loc);
 4180|  66.3k|        }
 4181|   173k|#endif
 4182|       |
 4183|   173k|        return read_impl<Range>(
 4184|   173k|            range, rd,
 4185|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   173k|                return r.read_source(SCN_FWD(args)...);
 4187|   173k|            },
 4188|   173k|            value);
 4189|   239k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   339k|    {
 4206|   339k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   339k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 328k]
  |  |  ------------------
  ------------------
 4208|  10.6k|            return unexpected(r.error());
 4209|  10.6k|        }
 4210|       |
 4211|   328k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   328k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   328k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   328k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.5k|    }                                                  \
  |  |  |  | 3671|   328k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   317k|        return ranges::next(range.begin(), n);
 4213|   328k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.05M|    {
  763|  1.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  66.3k|    {
  754|  66.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  66.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.3k|              cvref<T> obj = *get<T>(fn);
  745|  66.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  66.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  66.3k|              }
  748|  66.3k|              else {
  749|  66.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.3k|              }
  751|  66.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  66.3k|    {
  684|  66.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  66.3k|            return static_cast<T*>(s.m_cp);
  686|  66.3k|        }
  687|  66.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  66.3k|            return static_cast<T*>(s.m_p);
  689|  66.3k|        }
  690|  66.3k|        else {
  691|  66.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  66.3k|        }
  693|  66.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  66.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  66.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  66.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  66.3k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   206k|    {
 3679|   206k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   206k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   206k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 206k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   206k|        return read_source_impl(range);
 3685|   206k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.05M|    {
 3705|  1.05M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.05M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.05M|        auto it = sign_result.first;
 3708|  1.05M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.05M|        auto digits_begin = it;
 3711|  1.05M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.05M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.05M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.05M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  |  Branch (859:45): [True: 0, False: 1.05M]
  |  |  |  Branch (859:45): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 3715|  1.05M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.05M|            else {
 3724|  1.05M|                auto cb = [&](const auto& rr)
 3725|  1.05M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.05M|                    auto res = read_all(rr);
 3727|  1.05M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.05M|                        return unexpected_scan_error(
 3729|  1.05M|                            scan_error::invalid_scanned_value,
 3730|  1.05M|                            "Invalid float value");
 3731|  1.05M|                    }
 3732|  1.05M|                    return res;
 3733|  1.05M|                };
 3734|  1.05M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 33.0k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  33.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  33.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  33.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  33.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  33.0k|    }                                                  \
  |  | 3671|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.01M|            }
 3736|  1.05M|        }
 3737|  1.01M|        else {
 3738|  1.01M|            SCN_TRY_ASSIGN(
 3739|  1.01M|                it,
 3740|  1.01M|                do_read_source_impl(
 3741|  1.01M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.01M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.01M|        }
 3744|       |
 3745|  1.01M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.01M, False: 6.49k]
  |  Branch (3747:48): [True: 1.00M, False: 5.80k]
  ------------------
 3748|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 958k, False: 46.1k]
  ------------------
 3749|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 957k, False: 1.38k]
  ------------------
 3750|   957k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   957k|        }
 3752|       |
 3753|  1.01M|        handle_separators();
 3754|       |
 3755|  1.01M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.01M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.01M|        return it;
 3768|  1.01M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.05M|    {
 3811|  1.05M|        auto it = range.begin();
 3812|  1.05M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.03M, False: 12.2k]
  ------------------
 3813|  1.03M|            return unexpected(r.error());
 3814|  1.03M|        }
 3815|  12.2k|        else {
 3816|  12.2k|            it = *r;
 3817|  12.2k|        }
 3818|       |
 3819|  12.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.49k, False: 5.80k]
  ------------------
 3822|  6.49k|            m_kind = float_kind::inf_short;
 3823|  6.49k|            return it;
 3824|  6.49k|        }
 3825|  5.80k|        else {
 3826|  5.80k|            m_kind = float_kind::inf_long;
 3827|  5.80k|            return *r;
 3828|  5.80k|        }
 3829|  12.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.03M|    {
 3834|  1.03M|        auto it = range.begin();
 3835|  1.03M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 989k, False: 48.5k]
  ------------------
 3836|   989k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   989k|                scan_error::invalid_scanned_value,
 3838|   989k|                "Invalid floating-point NaN value"));
 3839|   989k|        }
 3840|  48.5k|        else {
 3841|  48.5k|            it = *r;
 3842|  48.5k|        }
 3843|       |
 3844|  48.5k|        if (auto r =
 3845|  48.5k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.5k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 46.1k, False: 2.46k]
  ------------------
 3847|  46.1k|            m_kind = float_kind::nan_simple;
 3848|  46.1k|            return it;
 3849|  46.1k|        }
 3850|  2.46k|        else {
 3851|  2.46k|            it = *r;
 3852|  2.46k|        }
 3853|       |
 3854|  2.46k|        auto payload_beg_it = it;
 3855|  2.46k|        it = read_while_code_unit(
 3856|  2.46k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.46k|                return is_ascii_char(ch) &&
 3858|  2.46k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.46k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.46k|            });
 3861|  2.46k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.46k|        m_kind = float_kind::nan_with_payload;
 3864|  2.46k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.38k, False: 1.07k]
  ------------------
 3865|  2.46k|                                             ')')) {
 3866|  1.38k|            return *r;
 3867|  1.38k|        }
 3868|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.07k|                                     "Invalid floating-point NaN payload");
 3870|  2.46k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.46k|    {
  754|  2.46k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  20.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.9k, False: 83]
  ------------------
 3858|  20.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.4k, False: 1.45k]
  |  Branch (3858:39): [True: 11.6k, False: 7.77k]
  |  Branch (3858:54): [True: 2.52k, False: 6.70k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  20.9k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 1.45k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.53k]
  ------------------
 3860|  20.9k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.46k|        {
  662|  2.46k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   696k|    {
 3804|   696k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   696k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   593k|{
 1996|   593k|    auto it = read_while_code_unit(range, pred);
 1997|   593k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 247k, False: 345k]
  ------------------
 1998|   247k|        return unexpected(parse_error::error);
 1999|   247k|    }
 2000|   345k|    return it;
 2001|   593k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   173k|    {
 3876|   173k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 28.3k, False: 145k]
  ------------------
 3877|  28.3k|            auto beg_exp_it = range.begin();
 3878|  28.3k|            auto it = *r;
 3879|       |
 3880|  28.3k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 28.2k, False: 108]
  ------------------
 3881|  28.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  28.2k|                it = r_sign->first;
 3883|  28.2k|            }
 3884|       |
 3885|  28.3k|            if (auto r_exp = read_while1_code_unit(
 3886|  28.3k|                    ranges::subrange{it, range.end()},
 3887|  28.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  28.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 648, False: 27.7k]
  |  |  ------------------
  ------------------
 3889|    648|                it = beg_exp_it;
 3890|    648|            }
 3891|  27.7k|            else {
 3892|  27.7k|                it = *r_exp;
 3893|  27.7k|            }
 3894|       |
 3895|  28.3k|            return it;
 3896|  28.3k|        }
 3897|   145k|        return range.begin();
 3898|   173k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  28.3k|    {
  754|  28.3k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  82.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.4k|              cvref<T> obj = *get<T>(fn);
  745|  82.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.4k|              }
  748|  82.4k|              else {
  749|  82.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.4k|              }
  751|  82.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  82.4k|    {
  684|  82.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.4k|            return static_cast<T*>(s.m_cp);
  686|  82.4k|        }
  687|  82.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.4k|            return static_cast<T*>(s.m_p);
  689|  82.4k|        }
  690|  82.4k|        else {
  691|  82.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.4k|        }
  693|  82.4k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  82.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  28.3k|        {
  662|  28.3k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   292k|    {
 3944|   292k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   292k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 183k, False: 109k]
  |  Branch (3945:50): [True: 17.3k, False: 165k]
  ------------------
 3946|       |
 3947|   292k|        auto it = ranges::begin(range);
 3948|   292k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   292k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   292k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 272k]
  |  |  ------------------
  ------------------
 3952|  20.7k|            return r.transform_error(
 3953|  20.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  20.7k|                                              "Invalid floating-point value"));
 3955|  20.7k|        }
 3956|   272k|        else {
 3957|   272k|            digits_count += ranges::distance(it, *r);
 3958|   272k|            it = *r;
 3959|   272k|        }
 3960|       |
 3961|   272k|        m_integral_part_length = digits_count;
 3962|   272k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 50.2k, False: 221k]
  ------------------
 3963|   272k|                                             m_locale_options.decimal_point)) {
 3964|  50.2k|            it = *r;
 3965|  50.2k|        }
 3966|       |
 3967|   272k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 45.7k, False: 226k]
  ------------------
 3968|   272k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  45.7k|            digits_count += ranges::distance(it, *r);
 3970|  45.7k|            it = *r;
 3971|  45.7k|        }
 3972|       |
 3973|   272k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 272k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   272k|        auto beg_exp_it = it;
 3979|   272k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 173k, False: 98.8k]
  ------------------
 3980|   173k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   173k|        }
 3982|   272k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 16.4k, False: 255k]
  |  Branch (3982:29): [True: 10.2k, False: 6.12k]
  ------------------
 3983|  10.2k|            return unexpected_scan_error(
 3984|  10.2k|                scan_error::invalid_scanned_value,
 3985|  10.2k|                "No exponent given to scientific float");
 3986|  10.2k|        }
 3987|       |
 3988|   261k|        m_kind =
 3989|   261k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 234k, False: 27.7k]
  ------------------
 3990|       |
 3991|   261k|        return it;
 3992|   272k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   565k|    {
 3774|   565k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 565k]
  |  |  |  Branch (859:45): [True: 0, False: 565k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   565k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   565k|        return read_while1_code_unit(
 3783|   565k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   565k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   565k|    {
  754|   565k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  2.99M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.99M|              cvref<T> obj = *get<T>(fn);
  745|  2.99M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.99M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.99M|              }
  748|  2.99M|              else {
  749|  2.99M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.99M|              }
  751|  2.99M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.99M|    {
  684|  2.99M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.99M|            return static_cast<T*>(s.m_cp);
  686|  2.99M|        }
  687|  2.99M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.99M|            return static_cast<T*>(s.m_p);
  689|  2.99M|        }
  690|  2.99M|        else {
  691|  2.99M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.99M|        }
  693|  2.99M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  2.99M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   565k|        {
  662|   565k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.05M|    {
 4000|  1.05M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.05M|        const bool allowed_nonhex =
 4002|  1.05M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.05M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.05M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.03M, False: 12.2k]
  |  Branch (4005:45): [True: 0, False: 1.03M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.05M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.2k, False: 1.03M]
  ------------------
 4011|  12.2k|            return *r;
 4012|  12.2k|        }
 4013|       |
 4014|  1.03M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 990k, False: 47.5k]
  |  Branch (4014:45): [True: 1.07k, False: 989k]
  ------------------
 4015|  1.07k|            return unexpected(r.error());
 4016|  1.07k|        }
 4017|  1.03M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.5k, False: 989k]
  ------------------
 4018|  47.5k|            return *r;
 4019|  47.5k|        }
 4020|       |
 4021|   989k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 696k, False: 292k]
  |  Branch (4021:28): [True: 210k, False: 485k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   210k|            auto it = range.begin();
 4025|       |
 4026|   210k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 10.3k, False: 200k]
  ------------------
 4027|  10.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  10.3k|                it = *r;
 4029|  10.3k|            }
 4030|   200k|            else {
 4031|   200k|                m_kind = float_kind::hex_without_prefix;
 4032|   200k|            }
 4033|       |
 4034|   210k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   210k|        }
 4036|   778k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 292k, False: 485k]
  |  Branch (4036:29): [True: 292k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   292k|            m_kind = float_kind::generic;
 4040|   292k|            return read_regular_float(range);
 4041|   292k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   485k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1k, False: 460k]
  |  |  ------------------
  ------------------
 4047|  25.1k|            m_kind = float_kind::hex_with_prefix;
 4048|  25.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  25.1k|        }
 4050|       |
 4051|   460k|        m_kind = float_kind::generic;
 4052|   460k|        return read_regular(range);
 4053|   485k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   696k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   696k|                    auto res = read_all(rr);
 3727|   696k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   696k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 874, False: 695k]
  |  |  ------------------
  ------------------
 3728|    874|                        return unexpected_scan_error(
 3729|    874|                            scan_error::invalid_scanned_value,
 3730|    874|                            "Invalid float value");
 3731|    874|                    }
 3732|   695k|                    return res;
 3733|   696k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   696k|{
 1839|   696k|    return ranges::next(range.begin(), range.end());
 1840|   696k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   696k|    {
  313|   696k|        ranges::advance(x, bound);
  314|   696k|        return x;
  315|   696k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   696k|    {
  275|   696k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   696k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   696k|    {
  190|   696k|        i = std::move(bound);
  191|   696k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   959k|    {
 1577|   959k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   959k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   959k|    {
 1621|   959k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   959k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   959k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   959k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   959k|            m_storage.reset();
 1627|   959k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   959k|        }
 1629|   959k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   959k|                                          std::basic_string<CharT>>) {
 1631|   959k|            m_storage.emplace(SCN_FWD(range));
 1632|   959k|            m_view = string_view_type{*m_storage};
 1633|   959k|        }
 1634|   959k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   959k|                                          typename detail::basic_scan_buffer<
 1636|   959k|                                              value_t>::forward_iterator> &&
 1637|   959k|                           ranges::common_range<Range>) {
 1638|   959k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   959k|            auto end_seg = range.end().contiguous_segment();
 1640|   959k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   959k|                             detail::to_address(end_seg.end()))) {
 1642|   959k|                auto& str = m_storage.emplace();
 1643|   959k|                str.reserve(range.end().position() - range.begin().position());
 1644|   959k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   959k|                m_view = string_view_type{str};
 1646|   959k|                return;
 1647|   959k|            }
 1648|       |
 1649|   959k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   959k|                                                            end_seg.data());
 1651|   959k|            m_storage.reset();
 1652|   959k|        }
 1653|   959k|        else {
 1654|   959k|            auto& str = m_storage.emplace();
 1655|   959k|            if constexpr (ranges::sized_range<Range>) {
 1656|   959k|                str.reserve(range.size());
 1657|   959k|            }
 1658|   959k|            if constexpr (ranges::common_range<Range>) {
 1659|   959k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   959k|                          std::back_inserter(str));
 1661|   959k|            }
 1662|   959k|            else {
 1663|   959k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   959k|                     ++it) {
 1665|   959k|                    str.push_back(*it);
 1666|   959k|                }
 1667|   959k|            }
 1668|   959k|            m_view = string_view_type{str};
 1669|   959k|        }
 1670|   959k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  66.3k|        {
  662|  66.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   173k|    {
  684|   173k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   173k|            return static_cast<T*>(s.m_cp);
  686|   173k|        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   173k|            return static_cast<T*>(s.m_p);
  689|   173k|        }
  690|   173k|        else {
  691|   173k|            return reinterpret_cast<T*>(s.m_fp);
  692|   173k|        }
  693|   173k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   173k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   173k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   843k|    {
 3665|   843k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   843k|        return read_source_impl(range);
 3671|   843k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   294k|    {
 6193|   294k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   294k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   294k|            auto rd = make_reader<T, char_type>();
 6198|   294k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   294k|                return unexpected(e);
 6200|   294k|            }
 6201|       |
 6202|   294k|            return impl(rd, range, value);
 6203|   294k|        }
 6204|   294k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   294k|            auto rd = make_reader<T, char_type>();
 6206|   294k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   294k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 294k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   294k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   294k|                return impl(rd, range, value);
 6213|   294k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   294k|        else {
 6221|   294k|            SCN_EXPECT(false);
 6222|   294k|            SCN_UNREACHABLE;
 6223|   294k|        }
 6224|   294k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   294k|    {
 6124|   294k|        const bool need_skipped_width =
 6125|   294k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 294k]
  |  Branch (6125:33): [True: 0, False: 294k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   294k|        auto it = rng.begin();
 6129|   294k|        std::ptrdiff_t prefix_width = 0;
 6130|   294k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 294k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   294k|        else {
 6138|   294k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.68k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.68k|    }                                                  \
  |  |  |  | 3671|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   289k|            std::tie(it, prefix_width) = prefix_result;
 6140|   289k|        }
 6141|   289k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   289k|        std::ptrdiff_t value_width = 0;
 6145|   289k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 289k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   289k|        else {
 6161|   289k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.1k, False: 273k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.1k|    }                                                  \
  |  | 3671|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   273k|                                             specs, value, loc));
 6163|       |
 6164|   273k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 273k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   273k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   273k|        std::ptrdiff_t postfix_width = 0;
 6173|   273k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 269k, False: 3.78k]
  ------------------
 6174|   269k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   269k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   269k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   269k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 269k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   269k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   269k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   269k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   269k|                                 value_width));
 6178|   269k|            std::tie(it, postfix_width) = postfix_result;
 6179|   269k|        }
 6180|       |
 6181|   273k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   273k|                                                 value_width, postfix_width);
 6183|   273k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 273k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   273k|        return it;
 6188|   273k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   725k|    {
 3691|   725k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   725k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   725k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   725k|        const std::ptrdiff_t sign_len =
 3694|   725k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 176k, False: 549k]
  ------------------
 3695|       |
 3696|   725k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   725k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   725k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   725k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   725k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.1k, False: 713k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.1k|    }                                                  \
  |  |  |  | 3671|   725k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   713k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   713k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   725k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   289k|    {
 4170|   289k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   289k|#if !SCN_DISABLE_LOCALE
 4173|   289k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 82.5k, False: 207k]
  ------------------
 4174|  82.5k|            return read_impl<Range>(
 4175|  82.5k|                range, rd,
 4176|  82.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  82.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  82.5k|                },
 4179|  82.5k|                value, loc);
 4180|  82.5k|        }
 4181|   207k|#endif
 4182|       |
 4183|   207k|        return read_impl<Range>(
 4184|   207k|            range, rd,
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
 4187|   207k|            },
 4188|   207k|            value);
 4189|   289k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   402k|    {
 4206|   402k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   402k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   402k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.3k, False: 383k]
  |  |  ------------------
  ------------------
 4208|  19.3k|            return unexpected(r.error());
 4209|  19.3k|        }
 4210|       |
 4211|   383k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 381k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   381k|        return ranges::next(range.begin(), n);
 4213|   383k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  82.5k|    {
  754|  82.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  82.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.5k|              cvref<T> obj = *get<T>(fn);
  745|  82.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.5k|              }
  748|  82.5k|              else {
  749|  82.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.5k|              }
  751|  82.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  82.5k|    {
  684|  82.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.5k|            return static_cast<T*>(s.m_cp);
  686|  82.5k|        }
  687|  82.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.5k|            return static_cast<T*>(s.m_p);
  689|  82.5k|        }
  690|  82.5k|        else {
  691|  82.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.5k|        }
  693|  82.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  82.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  82.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  82.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  82.5k|        {
  662|  82.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   207k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   248k|    {
 4170|   248k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   248k|#if !SCN_DISABLE_LOCALE
 4173|   248k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 69.6k, False: 179k]
  ------------------
 4174|  69.6k|            return read_impl<Range>(
 4175|  69.6k|                range, rd,
 4176|  69.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  69.6k|                },
 4179|  69.6k|                value, loc);
 4180|  69.6k|        }
 4181|   179k|#endif
 4182|       |
 4183|   179k|        return read_impl<Range>(
 4184|   179k|            range, rd,
 4185|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   179k|                return r.read_source(SCN_FWD(args)...);
 4187|   179k|            },
 4188|   179k|            value);
 4189|   248k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   353k|    {
 4206|   353k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   353k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 342k]
  |  |  ------------------
  ------------------
 4208|  11.0k|            return unexpected(r.error());
 4209|  11.0k|        }
 4210|       |
 4211|   342k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.6k, False: 331k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.6k|    }                                                  \
  |  |  |  | 3671|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   331k|        return ranges::next(range.begin(), n);
 4213|   342k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  69.6k|    {
  754|  69.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  69.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.6k|              cvref<T> obj = *get<T>(fn);
  745|  69.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  69.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.6k|              }
  748|  69.6k|              else {
  749|  69.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.6k|              }
  751|  69.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.6k|    {
  684|  69.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  69.6k|            return static_cast<T*>(s.m_cp);
  686|  69.6k|        }
  687|  69.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  69.6k|            return static_cast<T*>(s.m_p);
  689|  69.6k|        }
  690|  69.6k|        else {
  691|  69.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  69.6k|        }
  693|  69.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  69.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  69.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  69.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  69.6k|        {
  662|  69.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   179k|    {
  684|   179k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   179k|            return static_cast<T*>(s.m_cp);
  686|   179k|        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   179k|            return static_cast<T*>(s.m_p);
  689|   179k|        }
  690|   179k|        else {
  691|   179k|            return reinterpret_cast<T*>(s.m_fp);
  692|   179k|        }
  693|   179k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   179k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   179k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   297k|    {
 6193|   297k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   297k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   297k|            auto rd = make_reader<T, char_type>();
 6198|   297k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   297k|                return unexpected(e);
 6200|   297k|            }
 6201|       |
 6202|   297k|            return impl(rd, range, value);
 6203|   297k|        }
 6204|   297k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   297k|            auto rd = make_reader<T, char_type>();
 6206|   297k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 297k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   297k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 297k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   297k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   297k|                return impl(rd, range, value);
 6213|   297k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   297k|        else {
 6221|   297k|            SCN_EXPECT(false);
 6222|   297k|            SCN_UNREACHABLE;
 6223|   297k|        }
 6224|   297k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   297k|    {
 6124|   297k|        const bool need_skipped_width =
 6125|   297k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 297k]
  |  Branch (6125:33): [True: 0, False: 297k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   297k|        auto it = rng.begin();
 6129|   297k|        std::ptrdiff_t prefix_width = 0;
 6130|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 297k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   297k|        else {
 6138|   297k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.99k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.99k|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   292k|            std::tie(it, prefix_width) = prefix_result;
 6140|   292k|        }
 6141|   292k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   292k|        std::ptrdiff_t value_width = 0;
 6145|   292k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 292k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   292k|        else {
 6161|   292k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.8k, False: 277k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.8k|    }                                                  \
  |  | 3671|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   277k|                                             specs, value, loc));
 6163|       |
 6164|   277k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 277k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   277k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   277k|        std::ptrdiff_t postfix_width = 0;
 6173|   277k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 273k, False: 4.05k]
  ------------------
 6174|   273k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   273k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   273k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   273k|                                 value_width));
 6178|   273k|            std::tie(it, postfix_width) = postfix_result;
 6179|   273k|        }
 6180|       |
 6181|   277k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   277k|                                                 value_width, postfix_width);
 6183|   277k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 277k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   277k|        return it;
 6188|   277k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   732k|    {
 3691|   732k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   732k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   732k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   732k|        const std::ptrdiff_t sign_len =
 3694|   732k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 180k, False: 552k]
  ------------------
 3695|       |
 3696|   732k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   732k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   732k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   732k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.3k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.3k|    }                                                  \
  |  |  |  | 3671|   732k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   722k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   732k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   292k|    {
 4170|   292k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   292k|#if !SCN_DISABLE_LOCALE
 4173|   292k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 83.8k, False: 209k]
  ------------------
 4174|  83.8k|            return read_impl<Range>(
 4175|  83.8k|                range, rd,
 4176|  83.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  83.8k|                },
 4179|  83.8k|                value, loc);
 4180|  83.8k|        }
 4181|   209k|#endif
 4182|       |
 4183|   209k|        return read_impl<Range>(
 4184|   209k|            range, rd,
 4185|   209k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   209k|                return r.read_source(SCN_FWD(args)...);
 4187|   209k|            },
 4188|   209k|            value);
 4189|   292k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   406k|    {
 4206|   406k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   406k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 386k]
  |  |  ------------------
  ------------------
 4208|  20.0k|            return unexpected(r.error());
 4209|  20.0k|        }
 4210|       |
 4211|   386k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   386k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   386k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   386k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 375, False: 386k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    375|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    375|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    375|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    375|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    375|    }                                                  \
  |  |  |  | 3671|   386k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   386k|        return ranges::next(range.begin(), n);
 4213|   386k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  83.8k|    {
  754|  83.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  83.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.8k|              cvref<T> obj = *get<T>(fn);
  745|  83.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  83.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.8k|              }
  748|  83.8k|              else {
  749|  83.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.8k|              }
  751|  83.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  83.8k|    {
  684|  83.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  83.8k|            return static_cast<T*>(s.m_cp);
  686|  83.8k|        }
  687|  83.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  83.8k|            return static_cast<T*>(s.m_p);
  689|  83.8k|        }
  690|  83.8k|        else {
  691|  83.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  83.8k|        }
  693|  83.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  83.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  83.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  83.8k|        {
  662|  83.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   209k|    {
  754|   209k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   209k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   209k|              cvref<T> obj = *get<T>(fn);
  745|   209k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   209k|                  obj(static_cast<decltype(args)>(args)...);
  747|   209k|              }
  748|   209k|              else {
  749|   209k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   209k|              }
  751|   209k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   209k|    {
  684|   209k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   209k|            return static_cast<T*>(s.m_cp);
  686|   209k|        }
  687|   209k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   209k|            return static_cast<T*>(s.m_p);
  689|   209k|        }
  690|   209k|        else {
  691|   209k|            return reinterpret_cast<T*>(s.m_fp);
  692|   209k|        }
  693|   209k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   209k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   209k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   209k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   209k|        {
  662|   209k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   251k|    {
 4170|   251k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   251k|#if !SCN_DISABLE_LOCALE
 4173|   251k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 70.8k, False: 180k]
  ------------------
 4174|  70.8k|            return read_impl<Range>(
 4175|  70.8k|                range, rd,
 4176|  70.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  70.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  70.8k|                },
 4179|  70.8k|                value, loc);
 4180|  70.8k|        }
 4181|   180k|#endif
 4182|       |
 4183|   180k|        return read_impl<Range>(
 4184|   180k|            range, rd,
 4185|   180k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   180k|                return r.read_source(SCN_FWD(args)...);
 4187|   180k|            },
 4188|   180k|            value);
 4189|   251k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   357k|    {
 4206|   357k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   357k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 346k]
  |  |  ------------------
  ------------------
 4208|  11.3k|            return unexpected(r.error());
 4209|  11.3k|        }
 4210|       |
 4211|   346k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.96k, False: 336k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.96k|    }                                                  \
  |  |  |  | 3671|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   336k|        return ranges::next(range.begin(), n);
 4213|   346k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  70.8k|    {
  754|  70.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  70.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.8k|              cvref<T> obj = *get<T>(fn);
  745|  70.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  70.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.8k|              }
  748|  70.8k|              else {
  749|  70.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.8k|              }
  751|  70.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  70.8k|    {
  684|  70.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  70.8k|            return static_cast<T*>(s.m_cp);
  686|  70.8k|        }
  687|  70.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  70.8k|            return static_cast<T*>(s.m_p);
  689|  70.8k|        }
  690|  70.8k|        else {
  691|  70.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  70.8k|        }
  693|  70.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  70.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  70.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  70.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  70.8k|        {
  662|  70.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   180k|    {
  754|   180k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|   180k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   180k|                  obj(static_cast<decltype(args)>(args)...);
  747|   180k|              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   180k|    {
  684|   180k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   180k|            return static_cast<T*>(s.m_cp);
  686|   180k|        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   180k|            return static_cast<T*>(s.m_p);
  689|   180k|        }
  690|   180k|        else {
  691|   180k|            return reinterpret_cast<T*>(s.m_fp);
  692|   180k|        }
  693|   180k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   180k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   180k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   180k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   180k|        {
  662|   180k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.20M|{
 1039|  1.20M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.20M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.20M|        return r;
 1042|  1.20M|    }
 1043|  1.20M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.20M|                           ranges::const_iterator_t<Range>,
 1045|  1.20M|                           typename detail::basic_scan_buffer<
 1046|  1.20M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.20M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.20M|            auto seg = r.begin().contiguous_segment();
 1049|  1.20M|            auto dist =
 1050|  1.20M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.20M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.20M|        }
 1053|  1.20M|        else {
 1054|  1.20M|            return r.begin().contiguous_segment();
 1055|  1.20M|        }
 1056|  1.20M|    }
 1057|  1.20M|    else {
 1058|  1.20M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.20M|    }
 1060|  1.20M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.07M|{
 2061|  1.07M|    auto it = range.begin();
 2062|  2.03M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.01M, False: 14.3k]
  ------------------
 2063|  2.01M|        const auto val =
 2064|  2.01M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.01M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.01M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.00M, False: 10.6k]
  |  |  ------------------
  ------------------
 2066|  2.00M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.00M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.00M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.05M, False: 951k]
  ------------------
 2069|  1.05M|                return it;
 2070|  1.05M|            }
 2071|  2.00M|        }
 2072|   961k|        it = val.iterator;
 2073|   961k|    }
 2074|       |
 2075|  14.3k|    return it;
 2076|  1.07M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.01M|{
 1899|  2.01M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.01M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.01M|    auto it = range.begin();
 1903|  2.01M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.01M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 2.00M]
  |  |  ------------------
  ------------------
 1906|  10.6k|        ++it;
 1907|  10.6k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.6k|        return {it, {}};
 1909|  10.6k|    }
 1910|       |
 1911|  2.00M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.98M, False: 21.1k]
  ------------------
 1912|  1.98M|        ++it;
 1913|  1.98M|        return {it, string_type(1, *range.begin())};
 1914|  1.98M|    }
 1915|       |
 1916|  21.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  21.1k|    return {it, string_type{range.begin(), it}};
 1918|  2.00M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.6k|{
 1155|  10.6k|    auto it = input.begin();
 1156|   125k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 124k, False: 1.18k]
  ------------------
 1157|   124k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.44k, False: 115k]
  ------------------
 1158|  9.44k|            break;
 1159|  9.44k|        }
 1160|   124k|    }
 1161|  10.6k|    return it;
 1162|  10.6k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  21.1k|    {
  283|  21.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  21.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  21.1k|    {
  252|  21.1k|        constexpr iter_difference_t<I> zero{0};
  253|  21.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|  64.0k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 43.7k, False: 20.2k]
  |  Branch (255:30): [True: 42.8k, False: 926]
  ------------------
  256|  42.8k|            ++i;
  257|  42.8k|            ++counter;
  258|  42.8k|        }
  259|       |
  260|  21.1k|        return counter;
  261|  21.1k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.01M|    {
 1890|  2.01M|        return !codepoint.empty();
 1891|  2.01M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.07M|{
 2082|  1.07M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.07M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.20M|{
 2951|  1.20M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.20M, False: 0]
  ------------------
 2952|  1.20M|        auto it = read_while_classic_space(range);
 2953|  1.20M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.20M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 1.19M]
  |  |  ------------------
  ------------------
 2955|  14.3k|            return unexpected(e);
 2956|  14.3k|        }
 2957|       |
 2958|  1.19M|        return it;
 2959|  1.20M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.20M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.20M|{
 2117|  1.20M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.20M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.20M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.20M|        auto buf = make_contiguous_buffer(range);
 2121|  1.20M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.20M|        return ranges::next(range.begin(),
 2123|  1.20M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.20M|    }
 2125|  1.20M|    else {
 2126|  1.20M|        auto it = range.begin();
 2127|       |
 2128|  1.20M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.20M|            auto seg = get_contiguous_beginning(range);
 2130|  1.20M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.20M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 135k, False: 1.07M]
  ------------------
 2132|   135k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   135k|            }
 2134|  1.07M|            ranges::advance(it, seg.size());
 2135|  1.07M|        }
 2136|       |
 2137|  1.07M|        return read_while_code_point(
 2138|  1.07M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.20M|    }
 2140|  1.20M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.07M|    {
  754|  1.07M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.00M|              cvref<T> obj = *get<T>(fn);
  745|  2.00M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.00M|              }
  748|  2.00M|              else {
  749|  2.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.00M|              }
  751|  2.00M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.00M|    {
  684|  2.00M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.00M|            return static_cast<T*>(s.m_cp);
  686|  2.00M|        }
  687|  2.00M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.00M|            return static_cast<T*>(s.m_p);
  689|  2.00M|        }
  690|  2.00M|        else {
  691|  2.00M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.00M|        }
  693|  2.00M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.00M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.07M|        {
  662|  1.07M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   399k|{
  981|   399k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   399k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   399k|        return true;
  984|   399k|    }
  985|   399k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   399k|                           ranges::const_iterator_t<Range>,
  987|   399k|                           typename detail::basic_scan_buffer<
  988|   399k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   399k|        auto beg = r.begin();
  990|   399k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 399k, False: 0]
  ------------------
  991|   399k|            return false;
  992|   399k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   399k|    else {
 1006|   399k|        return false;
 1007|   399k|    }
 1008|   399k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.55M|    {
  763|  2.55M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.55M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.03M|{
 1857|  1.03M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.03M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.03M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.03M|        if (sz < count) {
 1862|  1.03M|            return unexpected(eof_error::eof);
 1863|  1.03M|        }
 1864|       |
 1865|  1.03M|        return ranges::next(range.begin(), count);
 1866|  1.03M|    }
 1867|  1.03M|    else {
 1868|  1.03M|        auto it = range.begin();
 1869|  1.03M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 609k, False: 422k]
  ------------------
 1870|   609k|            return ranges::next(it, count);
 1871|   609k|        }
 1872|       |
 1873|  1.61M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.23M, False: 376k]
  ------------------
 1874|  1.23M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 45.9k, False: 1.19M]
  ------------------
 1875|  45.9k|                return unexpected(eof_error::eof);
 1876|  45.9k|            }
 1877|  1.23M|        }
 1878|       |
 1879|   376k|        return it;
 1880|   422k|    }
 1881|  1.03M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.03M|{
 1095|  1.03M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.03M|        return r.size();
 1097|  1.03M|    }
 1098|  1.03M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.03M|                           ranges::const_iterator_t<Range>,
 1100|  1.03M|                           typename detail::basic_scan_buffer<
 1101|  1.03M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.03M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.03M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.03M|        }
 1105|  1.03M|        else {
 1106|  1.03M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.03M, False: 0]
  ------------------
 1107|  1.03M|                return static_cast<size_t>(
 1108|  1.03M|                    r.begin().parent()->chars_available() -
 1109|  1.03M|                    r.begin().position());
 1110|  1.03M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.03M|        }
 1113|  1.03M|    }
 1114|  1.03M|    else {
 1115|  1.03M|        return 0;
 1116|  1.03M|    }
 1117|  1.03M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   891k|    {
  754|   891k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.27M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27M|              cvref<T> obj = *get<T>(fn);
  745|  1.27M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.27M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.27M|              }
  748|  1.27M|              else {
  749|  1.27M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27M|              }
  751|  1.27M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.27M|    {
  684|  1.27M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.27M|            return static_cast<T*>(s.m_cp);
  686|  1.27M|        }
  687|  1.27M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.27M|            return static_cast<T*>(s.m_p);
  689|  1.27M|        }
  690|  1.27M|        else {
  691|  1.27M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.27M|        }
  693|  1.27M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   891k|        {
  662|   891k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   297k|    {
 6037|   297k|        const bool need_skipped_width =
 6038|   297k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 297k]
  |  Branch (6038:33): [True: 0, False: 297k]
  ------------------
 6039|   297k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   297k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 297k]
  ------------------
 6043|   297k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 297k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   297k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 297k, False: 0]
  |  Branch (6047:56): [True: 297k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   297k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 297k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   593k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.24k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.24k|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   593k|                            make_eof_scan_error));
 6058|       |
 6059|   593k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 295k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   295k|            return result_type{it, 0};
 6067|   593k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   297k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   644k|{
 1976|   644k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   644k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   644k|{
 1957|   644k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   644k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   644k|    }
 1960|   644k|    else {
 1961|   644k|        auto first = range.begin();
 1962|   931k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 929k, False: 2.35k]
  ------------------
 1963|   929k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 642k, False: 287k]
  ------------------
 1964|   642k|                return first;
 1965|   642k|            }
 1966|   929k|        }
 1967|  2.35k|        return first;
 1968|   644k|    }
 1969|   644k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   414k|    {
  108|   414k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   414k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   414k|    {
   94|   414k|        iter_difference_t<I> counter{0};
   95|  1.06M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 651k, False: 414k]
  ------------------
   96|   651k|            ++i;
   97|   651k|            ++counter;
   98|   651k|        }
   99|   414k|        return counter;
  100|   414k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   134k|    {
 1780|   134k|        auto stdloc = loc.get<std::locale>();
 1781|   134k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   134k|        grouping = numpunct.grouping();
 1783|   134k|        thousands_sep =
 1784|   134k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 134k]
  ------------------
 1785|   134k|        decimal_point = numpunct.decimal_point();
 1786|   134k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   134k|{
 1717|   134k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 134k, False: 0]
  ------------------
 1718|   134k|        return std::use_facet<Facet>(stdloc);
 1719|   134k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   134k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   845k|{
 1846|   845k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.55k, False: 843k]
  |  |  ------------------
  ------------------
 1847|  1.55k|        return unexpected(e);
 1848|  1.55k|    }
 1849|       |
 1850|   843k|    return ranges::next(range.begin());
 1851|   845k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.34M|{
  950|  1.34M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.55k, False: 1.34M]
  |  |  ------------------
  ------------------
  951|  4.55k|        return eof_error::eof;
  952|  4.55k|    }
  953|  1.34M|    return eof_error::good;
  954|  1.34M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.98M|{
  944|  1.98M|    return is_range_eof(r.begin(), r.end());
  945|  1.98M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.98M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.98M|    {
  937|  1.98M|        return begin == end;
  938|  1.98M|    }
  939|  1.98M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   843k|    {
  296|   843k|        ++x;
  297|   843k|        return x;
  298|   843k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   403k|{
 3141|   403k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   403k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 400k, False: 2.41k]
  ------------------
 3143|   400k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 400k, False: 70]
  ------------------
 3144|   400k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   400k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   400k|    }
 3148|       |
 3149|  2.41k|    auto& it = *r;
 3150|  2.41k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.10k, False: 313]
  ------------------
 3151|  2.10k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.10k|    }
 3153|    313|    return std::pair{it, sign_type::plus_sign};
 3154|  2.41k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   604k|{
 2272|   604k|    auto it = read_code_unit(range);
 2273|   604k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 837, False: 603k]
  |  |  ------------------
  ------------------
 2274|    837|        return unexpected(make_eof_parse_error(it.error()));
 2275|    837|    }
 2276|       |
 2277|  1.20M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.20M, False: 594k]
  ------------------
 2278|  1.20M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 9.13k, False: 1.19M]
  ------------------
 2279|  9.13k|            return *it;
 2280|  9.13k|        }
 2281|  1.20M|    }
 2282|       |
 2283|   594k|    return unexpected(parse_error::error);
 2284|   603k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.03M|{
 2231|  1.03M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.03M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.03M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.03M|        if (range.size() < str.size()) {
 2236|  1.03M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.03M|        }
 2238|  1.03M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.03M|            return unexpected(parse_error::error);
 2240|  1.03M|        }
 2241|  1.03M|        return ranges::next(range.begin(), str.size());
 2242|  1.03M|    }
 2243|  1.03M|    else {
 2244|  1.03M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.03M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.03M|                return ch;
 2247|  1.03M|            }
 2248|  1.03M|            return static_cast<char_type>(ch +
 2249|  1.03M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.03M|        };
 2251|       |
 2252|  1.03M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.9k, False: 985k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.9k|    }                                                  \
  |  |  |  | 3671|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   985k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   985k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   985k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   985k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   985k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 985k, False: 441]
  |  |  ------------------
  ------------------
 2257|   985k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   985k|                    return ascii_tolower(a) ==
 2259|   985k|                           static_cast<detail::char_t<Range>>(b);
 2260|   985k|                }))) {
 2261|   985k|            return unexpected(parse_error::error);
 2262|   985k|        }
 2263|       |
 2264|    441|        return it;
 2265|   985k|    }
 2266|  1.03M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.12M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 858k, False: 266k]
  |  Branch (2245:29): [True: 258k, False: 8.04k]
  ------------------
 2246|  1.11M|                return ch;
 2247|  1.11M|            }
 2248|  8.04k|            return static_cast<char_type>(ch +
 2249|  8.04k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   241k|{
 2146|   241k|    auto it = read_code_unit(range);
 2147|   241k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 719, False: 240k]
  |  |  ------------------
  ------------------
 2148|    719|        return unexpected(make_eof_parse_error(it.error()));
 2149|    719|    }
 2150|       |
 2151|   240k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240k, False: 606]
  |  |  ------------------
  ------------------
 2152|   240k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   240k|        return unexpected(parse_error::error);
 2154|   240k|    }
 2155|       |
 2156|    606|    return *it;
 2157|   240k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   644k|{
 1996|   644k|    auto it = read_while_code_unit(range, pred);
 1997|   644k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 397k, False: 247k]
  ------------------
 1998|   397k|        return unexpected(parse_error::error);
 1999|   397k|    }
 2000|   247k|    return it;
 2001|   644k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   238k|    {
 1621|   238k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   238k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   238k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   238k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   238k|            m_storage.reset();
 1627|   238k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   238k|        }
 1629|   238k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   238k|                                          std::basic_string<CharT>>) {
 1631|   238k|            m_storage.emplace(SCN_FWD(range));
 1632|   238k|            m_view = string_view_type{*m_storage};
 1633|   238k|        }
 1634|   238k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   238k|                                          typename detail::basic_scan_buffer<
 1636|   238k|                                              value_t>::forward_iterator> &&
 1637|   238k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   238k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   238k|            auto end_seg = range.end().contiguous_segment();
 1640|   238k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.97k, False: 230k]
  |  |  ------------------
  ------------------
 1641|   238k|                             detail::to_address(end_seg.end()))) {
 1642|  7.97k|                auto& str = m_storage.emplace();
 1643|  7.97k|                str.reserve(range.end().position() - range.begin().position());
 1644|  7.97k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  7.97k|                m_view = string_view_type{str};
 1646|  7.97k|                return;
 1647|  7.97k|            }
 1648|       |
 1649|   230k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   230k|                                                            end_seg.data());
 1651|   230k|            m_storage.reset();
 1652|   230k|        }
 1653|   238k|        else {
 1654|   238k|            auto& str = m_storage.emplace();
 1655|   238k|            if constexpr (ranges::sized_range<Range>) {
 1656|   238k|                str.reserve(range.size());
 1657|   238k|            }
 1658|   238k|            if constexpr (ranges::common_range<Range>) {
 1659|   238k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   238k|                          std::back_inserter(str));
 1661|   238k|            }
 1662|   238k|            else {
 1663|   238k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   238k|                     ++it) {
 1665|   238k|                    str.push_back(*it);
 1666|   238k|                }
 1667|   238k|            }
 1668|   238k|            m_view = string_view_type{str};
 1669|   238k|        }
 1670|   238k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.16M|    {
 1582|  2.16M|        return m_view;
 1583|  2.16M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.58M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   171k|    {
 6079|   171k|        const bool need_skipped_width =
 6080|   171k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 171k]
  |  Branch (6080:33): [True: 0, False: 171k]
  ------------------
 6081|   171k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   171k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 171k]
  ------------------
 6084|   171k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 171k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   171k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 171k, False: 0]
  ------------------
 6093|   171k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 171k]
  ------------------
 6094|   171k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   171k|        return result_type{rng.begin(), 0};
 6118|   171k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.03M|{
 1857|  1.03M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.03M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.03M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.03M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 45.9k, False: 986k]
  ------------------
 1862|  45.9k|            return unexpected(eof_error::eof);
 1863|  45.9k|        }
 1864|       |
 1865|   986k|        return ranges::next(range.begin(), count);
 1866|  1.03M|    }
 1867|  1.03M|    else {
 1868|  1.03M|        auto it = range.begin();
 1869|  1.03M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.03M|            return ranges::next(it, count);
 1871|  1.03M|        }
 1872|       |
 1873|  1.03M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.03M|            if (it == range.end()) {
 1875|  1.03M|                return unexpected(eof_error::eof);
 1876|  1.03M|            }
 1877|  1.03M|        }
 1878|       |
 1879|  1.03M|        return it;
 1880|  1.03M|    }
 1881|  1.03M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.04M|{
 1899|  1.04M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.04M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.04M|    auto it = range.begin();
 1903|  1.04M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.04M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.04M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.04M, False: 0]
  ------------------
 1912|  1.04M|        ++it;
 1913|  1.04M|        return {it, string_type(1, *range.begin())};
 1914|  1.04M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.04M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.07M|{
  944|  2.07M|    return is_range_eof(r.begin(), r.end());
  945|  2.07M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.07M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.07M|    {
  937|  2.07M|        return begin == end;
  938|  2.07M|    }
  939|  2.07M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   238k|    {
  190|   238k|        i = std::move(bound);
  191|   238k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.04M|    {
 1890|  1.04M|        return !codepoint.empty();
 1891|  1.04M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.03M|{
  950|  1.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.39k, False: 1.03M]
  |  |  ------------------
  ------------------
  951|  3.39k|        return eof_error::eof;
  952|  3.39k|    }
  953|  1.03M|    return eof_error::good;
  954|  1.03M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   532k|{
 1846|   532k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 398, False: 532k]
  |  |  ------------------
  ------------------
 1847|    398|        return unexpected(e);
 1848|    398|    }
 1849|       |
 1850|   532k|    return ranges::next(range.begin());
 1851|   532k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   532k|    {
  296|   532k|        ++x;
  297|   532k|        return x;
  298|   532k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   399k|{
 3141|   399k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   399k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 397k, False: 1.32k]
  ------------------
 3143|   397k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 397k, False: 24]
  ------------------
 3144|   397k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   397k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   397k|    }
 3148|       |
 3149|  1.32k|    auto& it = *r;
 3150|  1.32k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.12k, False: 197]
  ------------------
 3151|  1.12k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.12k|    }
 3153|    197|    return std::pair{it, sign_type::plus_sign};
 3154|  1.32k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   445k|{
 2272|   445k|    auto it = read_code_unit(range);
 2273|   445k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 445k]
  |  |  ------------------
  ------------------
 2274|    190|        return unexpected(make_eof_parse_error(it.error()));
 2275|    190|    }
 2276|       |
 2277|   890k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 890k, False: 441k]
  ------------------
 2278|   890k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.65k, False: 886k]
  ------------------
 2279|  3.65k|            return *it;
 2280|  3.65k|        }
 2281|   890k|    }
 2282|       |
 2283|   441k|    return unexpected(parse_error::error);
 2284|   445k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.03M|{
 2231|  1.03M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.03M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.03M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.03M|        if (range.size() < str.size()) {
 2236|  1.03M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.03M|        }
 2238|  1.03M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.03M|            return unexpected(parse_error::error);
 2240|  1.03M|        }
 2241|  1.03M|        return ranges::next(range.begin(), str.size());
 2242|  1.03M|    }
 2243|  1.03M|    else {
 2244|  1.03M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.03M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.03M|                return ch;
 2247|  1.03M|            }
 2248|  1.03M|            return static_cast<char_type>(ch +
 2249|  1.03M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.03M|        };
 2251|       |
 2252|  1.03M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45.9k, False: 986k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  45.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  45.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  45.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  45.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  45.9k|    }                                                  \
  |  |  |  | 3671|  1.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   986k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   986k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   986k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   986k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 985k, False: 441]
  |  |  ------------------
  ------------------
 2257|   986k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   986k|                    return ascii_tolower(a) ==
 2259|   986k|                           static_cast<detail::char_t<Range>>(b);
 2260|   986k|                }))) {
 2261|   985k|            return unexpected(parse_error::error);
 2262|   985k|        }
 2263|       |
 2264|    441|        return it;
 2265|   986k|    }
 2266|  1.03M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.12M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.12M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 858k, False: 266k]
  |  Branch (2245:29): [True: 258k, False: 8.23k]
  ------------------
 2246|  1.11M|                return ch;
 2247|  1.11M|            }
 2248|  8.23k|            return static_cast<char_type>(ch +
 2249|  8.23k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.12M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  87.0k|{
 2146|  87.0k|    auto it = read_code_unit(range);
 2147|  87.0k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 208, False: 86.8k]
  |  |  ------------------
  ------------------
 2148|    208|        return unexpected(make_eof_parse_error(it.error()));
 2149|    208|    }
 2150|       |
 2151|  86.8k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86.5k, False: 252]
  |  |  ------------------
  ------------------
 2152|  86.8k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  86.5k|        return unexpected(parse_error::error);
 2154|  86.5k|    }
 2155|       |
 2156|    252|    return *it;
 2157|  86.8k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   247k|{
 1976|   247k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   247k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   247k|{
 1957|   247k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   247k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   247k|    }
 1960|   247k|    else {
 1961|   247k|        auto first = range.begin();
 1962|   247k|        for (; first != range.end(); ++first) {
 1963|   247k|            if (pred(*first)) {
 1964|   247k|                return first;
 1965|   247k|            }
 1966|   247k|        }
 1967|   247k|        return first;
 1968|   247k|    }
 1969|   247k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   399k|{
 2951|   399k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 399k, False: 0]
  ------------------
 2952|   399k|        auto it = read_while_classic_space(range);
 2953|   399k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   399k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.68k, False: 396k]
  |  |  ------------------
  ------------------
 2955|  2.68k|            return unexpected(e);
 2956|  2.68k|        }
 2957|       |
 2958|   396k|        return it;
 2959|   399k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   399k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   399k|{
 2117|   399k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   399k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   399k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   399k|        auto buf = make_contiguous_buffer(range);
 2121|   399k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   399k|        return ranges::next(range.begin(),
 2123|   399k|                            ranges::distance(buf.view().begin(), it));
 2124|   399k|    }
 2125|   399k|    else {
 2126|   399k|        auto it = range.begin();
 2127|       |
 2128|   399k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   399k|            auto seg = get_contiguous_beginning(range);
 2130|   399k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   399k|                seg_it != seg.end()) {
 2132|   399k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   399k|            }
 2134|   399k|            ranges::advance(it, seg.size());
 2135|   399k|        }
 2136|       |
 2137|   399k|        return read_while_code_point(
 2138|   399k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   399k|    }
 2140|   399k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   399k|{
 2082|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   399k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   622k|{
 2061|   622k|    auto it = range.begin();
 2062|  1.18M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.04M, False: 143k]
  ------------------
 2063|  1.04M|        const auto val =
 2064|  1.04M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.04M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.04M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.04M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.04M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 478k, False: 567k]
  ------------------
 2069|   478k|                return it;
 2070|   478k|            }
 2071|  1.04M|        }
 2072|   567k|        it = val.iterator;
 2073|   567k|    }
 2074|       |
 2075|   143k|    return it;
 2076|   622k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   641k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   641k|              cvref<T> obj = *get<T>(fn);
  745|   641k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   641k|                  obj(static_cast<decltype(args)>(args)...);
  747|   641k|              }
  748|   641k|              else {
  749|   641k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   641k|              }
  751|   641k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   641k|    {
  684|   641k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   641k|            return static_cast<T*>(s.m_cp);
  686|   641k|        }
  687|   641k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   641k|            return static_cast<T*>(s.m_p);
  689|   641k|        }
  690|   641k|        else {
  691|   641k|            return reinterpret_cast<T*>(s.m_fp);
  692|   641k|        }
  693|   641k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   641k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   399k|        {
  662|   399k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   846k|    {
  304|   846k|        ranges::advance(x, n);
  305|   846k|        return x;
  306|   846k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   846k|    {
  268|   846k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   846k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   846k|    {
  181|  2.72M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.87M, False: 846k]
  ------------------
  182|  1.87M|            ++i;
  183|  1.87M|        }
  184|   846k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  97.6k|    {
 6193|  97.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.6k|            auto rd = make_reader<T, char_type>();
 6198|  97.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  97.6k|                return unexpected(e);
 6200|  97.6k|            }
 6201|       |
 6202|  97.6k|            return impl(rd, range, value);
 6203|  97.6k|        }
 6204|  97.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  97.6k|            auto rd = make_reader<T, char_type>();
 6206|  97.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.6k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  97.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 97.6k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  97.6k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  97.6k|                return impl(rd, range, value);
 6213|  97.6k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  97.6k|        else {
 6221|  97.6k|            SCN_EXPECT(false);
 6222|  97.6k|            SCN_UNREACHABLE;
 6223|  97.6k|        }
 6224|  97.6k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   595k|    {
 3040|   595k|        reader_error_handler eh{};
 3041|   595k|        get_derived().check_specs_impl(specs, eh);
 3042|   595k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 595k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   595k|        return {};
 3046|   595k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   595k|    {
 3051|   595k|        return static_cast<Derived&>(*this);
 3052|   595k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   595k|    {
 4145|   595k|        detail::check_float_type_specs(specs, eh);
 4146|   595k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  97.6k|    {
 6124|  97.6k|        const bool need_skipped_width =
 6125|  97.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.6k]
  |  Branch (6125:33): [True: 0, False: 97.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.6k|        auto it = rng.begin();
 6129|  97.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.6k|        else {
 6138|  97.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 710, False: 96.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    710|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    710|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    710|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    710|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    710|    }                                                  \
  |  |  |  | 3671|  97.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.9k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.9k|        }
 6141|  96.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.9k|        std::ptrdiff_t value_width = 0;
 6145|  96.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.9k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.9k|        else {
 6161|  96.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.9k, False: 55.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.9k|    }                                                  \
  |  | 3671|  96.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  55.9k|                                             specs, value, loc));
 6163|       |
 6164|  55.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 55.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  55.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  55.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  55.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 55.6k, False: 278]
  ------------------
 6174|  55.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  55.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  55.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  55.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  55.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  55.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  55.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  55.6k|                                 value_width));
 6178|  55.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  55.6k|        }
 6180|       |
 6181|  55.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  55.9k|                                                 value_width, postfix_width);
 6183|  55.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 55.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  55.9k|        return it;
 6188|  55.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.14M|    {
 3035|  1.14M|        return true;
 3036|  1.14M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   590k|    {
 4217|   590k|        unsigned options{};
 4218|   590k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 134k, False: 456k]
  ------------------
 4219|   134k|            options |= float_reader_base::allow_thsep;
 4220|   134k|        }
 4221|       |
 4222|   590k|        SCN_GCC_COMPAT_PUSH
 4223|   590k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   590k|        switch (specs.type) {
 4226|   130k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 130k, False: 460k]
  ------------------
 4227|   130k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  50.3k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 50.3k, False: 540k]
  ------------------
 4230|  50.3k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   140k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 140k, False: 450k]
  ------------------
 4233|   140k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   134k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 134k, False: 456k]
  ------------------
 4236|   134k|                return options | float_reader_base::allow_scientific |
 4237|   134k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   134k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 134k, False: 456k]
  ------------------
 4240|   134k|                return options | float_reader_base::allow_scientific |
 4241|   134k|                       float_reader_base::allow_fixed |
 4242|   134k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 590k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   590k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   590k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   590k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   590k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   793k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.58M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   182k|    {
 3691|   182k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   182k|        const std::ptrdiff_t sign_len =
 3694|   182k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 363, False: 182k]
  ------------------
 3695|       |
 3696|   182k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.0k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.0k|    }                                                  \
  |  |  |  | 3671|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   152k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   182k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   562k|    {
 4057|   562k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 562k, False: 0]
  ------------------
 4058|   562k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 562k, False: 0]
  ------------------
 4059|   562k|            return;
 4060|   562k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   547k|    {
 1587|   547k|        return m_storage.has_value();
 1588|   547k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   319k|    {
 1592|   319k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   319k|        return *m_storage;
 1594|   319k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  96.9k|    {
 4170|  96.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.9k|#if !SCN_DISABLE_LOCALE
 4173|  96.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.6k, False: 75.2k]
  ------------------
 4174|  21.6k|            return read_impl<Range>(
 4175|  21.6k|                range, rd,
 4176|  21.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.6k|                },
 4179|  21.6k|                value, loc);
 4180|  21.6k|        }
 4181|  75.2k|#endif
 4182|       |
 4183|  75.2k|        return read_impl<Range>(
 4184|  75.2k|            range, rd,
 4185|  75.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.2k|            },
 4188|  75.2k|            value);
 4189|  96.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   129k|    {
 4206|   129k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   129k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.0k, False: 77.4k]
  |  |  ------------------
  ------------------
 4208|  52.0k|            return unexpected(r.error());
 4209|  52.0k|        }
 4210|       |
 4211|  77.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  77.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  77.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  77.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.16k, False: 76.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.16k|    }                                                  \
  |  |  |  | 3671|  77.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  76.2k|        return ranges::next(range.begin(), n);
 4213|  77.4k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   396k|    {
  763|   396k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   396k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  21.6k|    {
  754|  21.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  21.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.6k|              cvref<T> obj = *get<T>(fn);
  745|  21.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.6k|              }
  748|  21.6k|              else {
  749|  21.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.6k|              }
  751|  21.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.6k|    {
  684|  21.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.6k|            return static_cast<T*>(s.m_cp);
  686|  21.6k|        }
  687|  21.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.6k|            return static_cast<T*>(s.m_p);
  689|  21.6k|        }
  690|  21.6k|        else {
  691|  21.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.6k|        }
  693|  21.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  21.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.6k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  67.3k|    {
 3679|  67.3k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  67.3k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  67.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 67.3k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  67.3k|        return read_source_impl(range);
 3685|  67.3k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   396k|    {
 3705|   396k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   396k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   396k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   396k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   396k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   396k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   396k|        auto it = sign_result.first;
 3708|   396k|        m_sign = sign_result.second;
 3709|       |
 3710|   396k|        auto digits_begin = it;
 3711|   396k|        auto r = ranges::subrange{it, range.end()};
 3712|   396k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   396k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   396k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   396k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   396k|                SCN_TRY_ASSIGN(
 3717|   396k|                    it,
 3718|   396k|                    do_read_source_impl(
 3719|   396k|                        r,
 3720|   396k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   396k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   396k|            }
 3723|   396k|            else {
 3724|   396k|                auto cb = [&](const auto& rr)
 3725|   396k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   396k|                    auto res = read_all(rr);
 3727|   396k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   396k|                        return unexpected_scan_error(
 3729|   396k|                            scan_error::invalid_scanned_value,
 3730|   396k|                            "Invalid float value");
 3731|   396k|                    }
 3732|   396k|                    return res;
 3733|   396k|                };
 3734|   396k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   396k|            }
 3736|   396k|        }
 3737|   396k|        else {
 3738|   396k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   396k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   396k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 157k, False: 238k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   157k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   157k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   157k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   157k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   157k|    }                                                  \
  |  | 3671|   396k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   238k|                it,
 3740|   238k|                do_read_source_impl(
 3741|   238k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   238k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   238k|        }
 3744|       |
 3745|   238k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   238k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 238k, False: 0]
  |  Branch (3747:48): [True: 238k, False: 0]
  ------------------
 3748|   238k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 238k, False: 0]
  ------------------
 3749|   238k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 238k, False: 0]
  ------------------
 3750|   238k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   238k|        }
 3752|       |
 3753|   238k|        handle_separators();
 3754|       |
 3755|   238k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 238k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   238k|        return it;
 3768|   238k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   396k|    {
 4000|   396k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   396k|        const bool allowed_nonhex =
 4002|   396k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   396k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   396k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 396k, False: 0]
  |  Branch (4005:45): [True: 0, False: 396k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   396k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 396k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   396k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 396k, False: 0]
  |  Branch (4014:45): [True: 0, False: 396k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   396k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 396k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   396k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 238k, False: 157k]
  |  Branch (4021:28): [True: 70.1k, False: 168k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  70.1k|            auto it = range.begin();
 4025|       |
 4026|  70.1k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 126, False: 70.0k]
  ------------------
 4027|    126|                m_kind = float_kind::hex_with_prefix;
 4028|    126|                it = *r;
 4029|    126|            }
 4030|  70.0k|            else {
 4031|  70.0k|                m_kind = float_kind::hex_without_prefix;
 4032|  70.0k|            }
 4033|       |
 4034|  70.1k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  70.1k|        }
 4036|   326k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 157k, False: 168k]
  |  Branch (4036:29): [True: 157k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   157k|            m_kind = float_kind::generic;
 4040|   157k|            return read_regular_float(range);
 4041|   157k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   168k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 315, False: 168k]
  |  |  ------------------
  ------------------
 4047|    315|            m_kind = float_kind::hex_with_prefix;
 4048|    315|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    315|        }
 4050|       |
 4051|   168k|        m_kind = float_kind::generic;
 4052|   168k|        return read_regular(range);
 4053|   168k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   396k|    {
 3811|   396k|        auto it = range.begin();
 3812|   396k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 396k, False: 0]
  ------------------
 3813|   396k|            return unexpected(r.error());
 3814|   396k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   396k|    {
 3834|   396k|        auto it = range.begin();
 3835|   396k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 396k, False: 0]
  ------------------
 3836|   396k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   396k|                scan_error::invalid_scanned_value,
 3838|   396k|                "Invalid floating-point NaN value"));
 3839|   396k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   238k|    {
 3804|   238k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   238k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  70.4k|    {
 3904|  70.4k|        auto it = range.begin();
 3905|       |
 3906|  70.4k|        std::ptrdiff_t digits_count = 0;
 3907|  70.4k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  70.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 46.1k]
  |  |  ------------------
  ------------------
 3909|  24.3k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  24.3k|                scan_error::invalid_scanned_value,
 3911|  24.3k|                "Invalid hexadecimal floating-point value"));
 3912|  24.3k|        }
 3913|  46.1k|        else {
 3914|  46.1k|            digits_count += ranges::distance(it, *r);
 3915|  46.1k|            it = *r;
 3916|  46.1k|        }
 3917|       |
 3918|  46.1k|        m_integral_part_length = digits_count;
 3919|  46.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 114, False: 46.0k]
  ------------------
 3920|  46.1k|                                             m_locale_options.decimal_point)) {
 3921|    114|            it = *r;
 3922|    114|        }
 3923|       |
 3924|  46.1k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 72, False: 46.0k]
  ------------------
 3925|  46.1k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|     72|            digits_count += ranges::distance(it, *r);
 3927|     72|            it = *r;
 3928|     72|        }
 3929|       |
 3930|  46.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.1k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  46.1k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  46.1k|        return it;
 3938|  46.1k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   116k|    {
 3789|   116k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   116k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   116k|        return read_while1_code_unit(
 3798|   116k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   116k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   172k|    {
  684|   172k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   172k|            return static_cast<T*>(s.m_cp);
  686|   172k|        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   172k|            return static_cast<T*>(s.m_p);
  689|   172k|        }
  690|   172k|        else {
  691|   172k|            return reinterpret_cast<T*>(s.m_fp);
  692|   172k|        }
  693|   172k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   172k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   200k|    {
 3876|   200k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 6.71k, False: 194k]
  ------------------
 3877|  6.71k|            auto beg_exp_it = range.begin();
 3878|  6.71k|            auto it = *r;
 3879|       |
 3880|  6.71k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.64k, False: 70]
  ------------------
 3881|  6.71k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.64k|                it = r_sign->first;
 3883|  6.64k|            }
 3884|       |
 3885|  6.71k|            if (auto r_exp = read_while1_code_unit(
 3886|  6.71k|                    ranges::subrange{it, range.end()},
 3887|  6.71k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  6.71k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  6.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 5.69k]
  |  |  ------------------
  ------------------
 3889|  1.01k|                it = beg_exp_it;
 3890|  1.01k|            }
 3891|  5.69k|            else {
 3892|  5.69k|                it = *r_exp;
 3893|  5.69k|            }
 3894|       |
 3895|  6.71k|            return it;
 3896|  6.71k|        }
 3897|   194k|        return range.begin();
 3898|   200k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  6.71k|    {
  754|  6.71k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  21.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.0k|              cvref<T> obj = *get<T>(fn);
  745|  21.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.0k|              }
  748|  21.0k|              else {
  749|  21.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.0k|              }
  751|  21.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  21.0k|    {
  684|  21.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.0k|            return static_cast<T*>(s.m_cp);
  686|  21.0k|        }
  687|  21.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.0k|            return static_cast<T*>(s.m_p);
  689|  21.0k|        }
  690|  21.0k|        else {
  691|  21.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.0k|        }
  693|  21.0k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  21.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  6.71k|        {
  662|  6.71k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   325k|    {
 3944|   325k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   325k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 260k, False: 65.2k]
  |  Branch (3945:50): [True: 25.1k, False: 235k]
  ------------------
 3946|       |
 3947|   325k|        auto it = ranges::begin(range);
 3948|   325k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   325k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   325k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130k, False: 195k]
  |  |  ------------------
  ------------------
 3952|   130k|            return r.transform_error(
 3953|   130k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   130k|                                              "Invalid floating-point value"));
 3955|   130k|        }
 3956|   195k|        else {
 3957|   195k|            digits_count += ranges::distance(it, *r);
 3958|   195k|            it = *r;
 3959|   195k|        }
 3960|       |
 3961|   195k|        m_integral_part_length = digits_count;
 3962|   195k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 492, False: 194k]
  ------------------
 3963|   195k|                                             m_locale_options.decimal_point)) {
 3964|    492|            it = *r;
 3965|    492|        }
 3966|       |
 3967|   195k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 327, False: 194k]
  ------------------
 3968|   195k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    327|            digits_count += ranges::distance(it, *r);
 3970|    327|            it = *r;
 3971|    327|        }
 3972|       |
 3973|   195k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 195k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   195k|        auto beg_exp_it = it;
 3979|   195k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 154k, False: 40.6k]
  ------------------
 3980|   154k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   154k|        }
 3982|   195k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.98k, False: 192k]
  |  Branch (3982:29): [True: 2.52k, False: 462]
  ------------------
 3983|  2.52k|            return unexpected_scan_error(
 3984|  2.52k|                scan_error::invalid_scanned_value,
 3985|  2.52k|                "No exponent given to scientific float");
 3986|  2.52k|        }
 3987|       |
 3988|   192k|        m_kind =
 3989|   192k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 187k, False: 5.57k]
  ------------------
 3990|       |
 3991|   192k|        return it;
 3992|   195k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   521k|    {
 3774|   521k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 521k]
  |  |  |  Branch (859:45): [True: 0, False: 521k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   521k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   521k|        return read_while1_code_unit(
 3783|   521k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   521k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   521k|    {
  754|   521k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   736k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   736k|              cvref<T> obj = *get<T>(fn);
  745|   736k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   736k|                  obj(static_cast<decltype(args)>(args)...);
  747|   736k|              }
  748|   736k|              else {
  749|   736k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   736k|              }
  751|   736k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   736k|    {
  684|   736k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   736k|            return static_cast<T*>(s.m_cp);
  686|   736k|        }
  687|   736k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   736k|            return static_cast<T*>(s.m_p);
  689|   736k|        }
  690|   736k|        else {
  691|   736k|            return reinterpret_cast<T*>(s.m_fp);
  692|   736k|        }
  693|   736k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   736k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   521k|        {
  662|   521k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   238k|    {
 1577|   238k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   238k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.6k|        {
  662|  21.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  75.2k|    {
  754|  75.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  75.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.2k|              cvref<T> obj = *get<T>(fn);
  745|  75.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.2k|              }
  748|  75.2k|              else {
  749|  75.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.2k|              }
  751|  75.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.2k|    {
  684|  75.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.2k|            return static_cast<T*>(s.m_cp);
  686|  75.2k|        }
  687|  75.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.2k|            return static_cast<T*>(s.m_p);
  689|  75.2k|        }
  690|  75.2k|        else {
  691|  75.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.2k|        }
  693|  75.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  75.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.2k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   329k|    {
 3665|   329k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   329k|        return read_source_impl(range);
 3671|   329k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  75.2k|        {
  662|  75.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  96.9k|    {
 4170|  96.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.9k|#if !SCN_DISABLE_LOCALE
 4173|  96.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.7k, False: 75.2k]
  ------------------
 4174|  21.7k|            return read_impl<Range>(
 4175|  21.7k|                range, rd,
 4176|  21.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.7k|                },
 4179|  21.7k|                value, loc);
 4180|  21.7k|        }
 4181|  75.2k|#endif
 4182|       |
 4183|  75.2k|        return read_impl<Range>(
 4184|  75.2k|            range, rd,
 4185|  75.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.2k|            },
 4188|  75.2k|            value);
 4189|  96.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   129k|    {
 4206|   129k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   129k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 105k]
  |  |  ------------------
  ------------------
 4208|  24.3k|            return unexpected(r.error());
 4209|  24.3k|        }
 4210|       |
 4211|   105k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.8k, False: 76.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.8k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  76.3k|        return ranges::next(range.begin(), n);
 4213|   105k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   396k|    {
  763|   396k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   396k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  21.7k|    {
  754|  21.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  21.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.7k|              cvref<T> obj = *get<T>(fn);
  745|  21.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.7k|              }
  748|  21.7k|              else {
  749|  21.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.7k|              }
  751|  21.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.7k|    {
  684|  21.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.7k|            return static_cast<T*>(s.m_cp);
  686|  21.7k|        }
  687|  21.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.7k|            return static_cast<T*>(s.m_p);
  689|  21.7k|        }
  690|  21.7k|        else {
  691|  21.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.7k|        }
  693|  21.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  21.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.7k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  67.4k|    {
 3679|  67.4k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  67.4k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  67.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 67.4k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  67.4k|        return read_source_impl(range);
 3685|  67.4k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   396k|    {
 3705|   396k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   396k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   396k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   396k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   396k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   396k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   396k|        auto it = sign_result.first;
 3708|   396k|        m_sign = sign_result.second;
 3709|       |
 3710|   396k|        auto digits_begin = it;
 3711|   396k|        auto r = ranges::subrange{it, range.end()};
 3712|   396k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   396k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   396k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 396k]
  |  |  |  Branch (859:45): [True: 0, False: 396k]
  |  |  |  Branch (859:45): [True: 0, False: 396k]
  |  |  ------------------
  ------------------
 3715|   396k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   396k|            else {
 3724|   396k|                auto cb = [&](const auto& rr)
 3725|   396k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   396k|                    auto res = read_all(rr);
 3727|   396k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   396k|                        return unexpected_scan_error(
 3729|   396k|                            scan_error::invalid_scanned_value,
 3730|   396k|                            "Invalid float value");
 3731|   396k|                    }
 3732|   396k|                    return res;
 3733|   396k|                };
 3734|   396k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   396k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   396k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   396k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 73.4k, False: 323k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  73.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  73.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  73.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  73.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  73.4k|    }                                                  \
  |  | 3671|   396k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   323k|            }
 3736|   396k|        }
 3737|   323k|        else {
 3738|   323k|            SCN_TRY_ASSIGN(
 3739|   323k|                it,
 3740|   323k|                do_read_source_impl(
 3741|   323k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   323k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   323k|        }
 3744|       |
 3745|   323k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   323k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 323k, False: 0]
  |  Branch (3747:48): [True: 323k, False: 0]
  ------------------
 3748|   323k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 323k, False: 0]
  ------------------
 3749|   323k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 323k, False: 0]
  ------------------
 3750|   323k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   323k|        }
 3752|       |
 3753|   323k|        handle_separators();
 3754|       |
 3755|   323k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 323k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   323k|        return it;
 3768|   323k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   396k|    {
 3811|   396k|        auto it = range.begin();
 3812|   396k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 396k, False: 0]
  ------------------
 3813|   396k|            return unexpected(r.error());
 3814|   396k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   396k|    {
 3834|   396k|        auto it = range.begin();
 3835|   396k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 396k, False: 0]
  ------------------
 3836|   396k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   396k|                scan_error::invalid_scanned_value,
 3838|   396k|                "Invalid floating-point NaN value"));
 3839|   396k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   238k|    {
 3804|   238k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   238k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   247k|{
 1996|   247k|    auto it = read_while_code_unit(range, pred);
 1997|   247k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 158k, False: 89.1k]
  ------------------
 1998|   158k|        return unexpected(parse_error::error);
 1999|   158k|    }
 2000|  89.1k|    return it;
 2001|   247k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  46.4k|    {
 3876|  46.4k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.33k, False: 44.0k]
  ------------------
 3877|  2.33k|            auto beg_exp_it = range.begin();
 3878|  2.33k|            auto it = *r;
 3879|       |
 3880|  2.33k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.31k, False: 24]
  ------------------
 3881|  2.33k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.31k|                it = r_sign->first;
 3883|  2.31k|            }
 3884|       |
 3885|  2.33k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.33k|                    ranges::subrange{it, range.end()},
 3887|  2.33k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.33k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 1.92k]
  |  |  ------------------
  ------------------
 3889|    410|                it = beg_exp_it;
 3890|    410|            }
 3891|  1.92k|            else {
 3892|  1.92k|                it = *r_exp;
 3893|  1.92k|            }
 3894|       |
 3895|  2.33k|            return it;
 3896|  2.33k|        }
 3897|  44.0k|        return range.begin();
 3898|  46.4k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.33k|    {
  754|  2.33k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  7.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.08k|              cvref<T> obj = *get<T>(fn);
  745|  7.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.08k|              }
  748|  7.08k|              else {
  749|  7.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.08k|              }
  751|  7.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  7.08k|    {
  684|  7.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.08k|            return static_cast<T*>(s.m_cp);
  686|  7.08k|        }
  687|  7.08k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.08k|            return static_cast<T*>(s.m_p);
  689|  7.08k|        }
  690|  7.08k|        else {
  691|  7.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.08k|        }
  693|  7.08k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  7.08k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.33k|        {
  662|  2.33k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   157k|    {
 3944|   157k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   157k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 92.6k, False: 65.2k]
  |  Branch (3945:50): [True: 25.1k, False: 67.4k]
  ------------------
 3946|       |
 3947|   157k|        auto it = ranges::begin(range);
 3948|   157k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   157k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   157k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70.8k, False: 87.0k]
  |  |  ------------------
  ------------------
 3952|  70.8k|            return r.transform_error(
 3953|  70.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  70.8k|                                              "Invalid floating-point value"));
 3955|  70.8k|        }
 3956|  87.0k|        else {
 3957|  87.0k|            digits_count += ranges::distance(it, *r);
 3958|  87.0k|            it = *r;
 3959|  87.0k|        }
 3960|       |
 3961|  87.0k|        m_integral_part_length = digits_count;
 3962|  87.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 252, False: 86.7k]
  ------------------
 3963|  87.0k|                                             m_locale_options.decimal_point)) {
 3964|    252|            it = *r;
 3965|    252|        }
 3966|       |
 3967|  87.0k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 162, False: 86.8k]
  ------------------
 3968|  87.0k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    162|            digits_count += ranges::distance(it, *r);
 3970|    162|            it = *r;
 3971|    162|        }
 3972|       |
 3973|  87.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.0k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  87.0k|        auto beg_exp_it = it;
 3979|  87.0k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 46.4k, False: 40.6k]
  ------------------
 3980|  46.4k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  46.4k|        }
 3982|  87.0k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 2.98k, False: 84.0k]
  |  Branch (3982:29): [True: 2.52k, False: 462]
  ------------------
 3983|  2.52k|            return unexpected_scan_error(
 3984|  2.52k|                scan_error::invalid_scanned_value,
 3985|  2.52k|                "No exponent given to scientific float");
 3986|  2.52k|        }
 3987|       |
 3988|  84.5k|        m_kind =
 3989|  84.5k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 82.5k, False: 1.92k]
  ------------------
 3990|       |
 3991|  84.5k|        return it;
 3992|  87.0k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   244k|    {
 3774|   244k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 244k]
  |  |  |  Branch (859:45): [True: 0, False: 244k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   244k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   244k|        return read_while1_code_unit(
 3783|   244k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   244k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   244k|    {
  754|   244k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   341k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   341k|              cvref<T> obj = *get<T>(fn);
  745|   341k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   341k|                  obj(static_cast<decltype(args)>(args)...);
  747|   341k|              }
  748|   341k|              else {
  749|   341k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   341k|              }
  751|   341k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   341k|    {
  684|   341k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   341k|            return static_cast<T*>(s.m_cp);
  686|   341k|        }
  687|   341k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   341k|            return static_cast<T*>(s.m_p);
  689|   341k|        }
  690|   341k|        else {
  691|   341k|            return reinterpret_cast<T*>(s.m_fp);
  692|   341k|        }
  693|   341k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   341k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   244k|        {
  662|   244k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   396k|    {
 4000|   396k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   396k|        const bool allowed_nonhex =
 4002|   396k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   396k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   396k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 396k, False: 0]
  |  Branch (4005:45): [True: 0, False: 396k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   396k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 396k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   396k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 396k, False: 0]
  |  Branch (4014:45): [True: 0, False: 396k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   396k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 396k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   396k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 238k, False: 157k]
  |  Branch (4021:28): [True: 70.2k, False: 168k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  70.2k|            auto it = range.begin();
 4025|       |
 4026|  70.2k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 126, False: 70.1k]
  ------------------
 4027|    126|                m_kind = float_kind::hex_with_prefix;
 4028|    126|                it = *r;
 4029|    126|            }
 4030|  70.1k|            else {
 4031|  70.1k|                m_kind = float_kind::hex_without_prefix;
 4032|  70.1k|            }
 4033|       |
 4034|  70.2k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  70.2k|        }
 4036|   326k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 157k, False: 168k]
  |  Branch (4036:29): [True: 157k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   157k|            m_kind = float_kind::generic;
 4040|   157k|            return read_regular_float(range);
 4041|   157k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   168k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 315, False: 168k]
  |  |  ------------------
  ------------------
 4047|    315|            m_kind = float_kind::hex_with_prefix;
 4048|    315|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    315|        }
 4050|       |
 4051|   168k|        m_kind = float_kind::generic;
 4052|   168k|        return read_regular(range);
 4053|   168k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   238k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   238k|                    auto res = read_all(rr);
 3727|   238k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 238k]
  |  |  ------------------
  ------------------
 3728|     98|                        return unexpected_scan_error(
 3729|     98|                            scan_error::invalid_scanned_value,
 3730|     98|                            "Invalid float value");
 3731|     98|                    }
 3732|   238k|                    return res;
 3733|   238k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   238k|{
 1839|   238k|    return ranges::next(range.begin(), range.end());
 1840|   238k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   238k|    {
  313|   238k|        ranges::advance(x, bound);
  314|   238k|        return x;
  315|   238k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   238k|    {
  275|   238k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   238k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   323k|    {
 1577|   323k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   323k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   323k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   323k|    {
 1621|   323k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   323k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   323k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   323k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   323k|            m_storage.reset();
 1627|   323k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   323k|        }
 1629|   323k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   323k|                                          std::basic_string<CharT>>) {
 1631|   323k|            m_storage.emplace(SCN_FWD(range));
 1632|   323k|            m_view = string_view_type{*m_storage};
 1633|   323k|        }
 1634|   323k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   323k|                                          typename detail::basic_scan_buffer<
 1636|   323k|                                              value_t>::forward_iterator> &&
 1637|   323k|                           ranges::common_range<Range>) {
 1638|   323k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   323k|            auto end_seg = range.end().contiguous_segment();
 1640|   323k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   323k|                             detail::to_address(end_seg.end()))) {
 1642|   323k|                auto& str = m_storage.emplace();
 1643|   323k|                str.reserve(range.end().position() - range.begin().position());
 1644|   323k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   323k|                m_view = string_view_type{str};
 1646|   323k|                return;
 1647|   323k|            }
 1648|       |
 1649|   323k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   323k|                                                            end_seg.data());
 1651|   323k|            m_storage.reset();
 1652|   323k|        }
 1653|   323k|        else {
 1654|   323k|            auto& str = m_storage.emplace();
 1655|   323k|            if constexpr (ranges::sized_range<Range>) {
 1656|   323k|                str.reserve(range.size());
 1657|   323k|            }
 1658|   323k|            if constexpr (ranges::common_range<Range>) {
 1659|   323k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   323k|                          std::back_inserter(str));
 1661|   323k|            }
 1662|   323k|            else {
 1663|   323k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   323k|                     ++it) {
 1665|   323k|                    str.push_back(*it);
 1666|   323k|                }
 1667|   323k|            }
 1668|   323k|            m_view = string_view_type{str};
 1669|   323k|        }
 1670|   323k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.7k|        {
  662|  21.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  75.2k|    {
  754|  75.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  75.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.2k|              cvref<T> obj = *get<T>(fn);
  745|  75.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.2k|              }
  748|  75.2k|              else {
  749|  75.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.2k|              }
  751|  75.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.2k|    {
  684|  75.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.2k|            return static_cast<T*>(s.m_cp);
  686|  75.2k|        }
  687|  75.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.2k|            return static_cast<T*>(s.m_p);
  689|  75.2k|        }
  690|  75.2k|        else {
  691|  75.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.2k|        }
  693|  75.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  75.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.2k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   329k|    {
 3665|   329k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   329k|        return read_source_impl(range);
 3671|   329k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  75.2k|        {
  662|  75.2k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  99.5k|    {
 6193|  99.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  99.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  99.5k|            auto rd = make_reader<T, char_type>();
 6198|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  99.5k|                return unexpected(e);
 6200|  99.5k|            }
 6201|       |
 6202|  99.5k|            return impl(rd, range, value);
 6203|  99.5k|        }
 6204|  99.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  99.5k|            auto rd = make_reader<T, char_type>();
 6206|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.5k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  99.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 99.5k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  99.5k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  99.5k|                return impl(rd, range, value);
 6213|  99.5k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  99.5k|        else {
 6221|  99.5k|            SCN_EXPECT(false);
 6222|  99.5k|            SCN_UNREACHABLE;
 6223|  99.5k|        }
 6224|  99.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  99.5k|    {
 6124|  99.5k|        const bool need_skipped_width =
 6125|  99.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 99.5k]
  |  Branch (6125:33): [True: 0, False: 99.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  99.5k|        auto it = rng.begin();
 6129|  99.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  99.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 99.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  99.5k|        else {
 6138|  99.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  99.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 756, False: 98.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    756|    }                                                  \
  |  |  |  | 3671|  99.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  98.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  98.7k|        }
 6141|  98.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  98.7k|        std::ptrdiff_t value_width = 0;
 6145|  98.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 98.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  98.7k|        else {
 6161|  98.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  98.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  98.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.8k, False: 57.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.8k|    }                                                  \
  |  | 3671|  98.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  57.8k|                                             specs, value, loc));
 6163|       |
 6164|  57.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 57.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  57.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  57.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  57.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 57.5k, False: 304]
  ------------------
 6174|  57.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  57.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  57.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  57.5k|                                 value_width));
 6178|  57.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  57.5k|        }
 6180|       |
 6181|  57.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  57.8k|                                                 value_width, postfix_width);
 6183|  57.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 57.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  57.8k|        return it;
 6188|  57.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   188k|    {
 3691|   188k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   188k|        const std::ptrdiff_t sign_len =
 3694|   188k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 363, False: 188k]
  ------------------
 3695|       |
 3696|   188k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.2k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.2k|    }                                                  \
  |  |  |  | 3671|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   159k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   188k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  98.7k|    {
 4170|  98.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  98.7k|#if !SCN_DISABLE_LOCALE
 4173|  98.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.6k, False: 76.1k]
  ------------------
 4174|  22.6k|            return read_impl<Range>(
 4175|  22.6k|                range, rd,
 4176|  22.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.6k|                },
 4179|  22.6k|                value, loc);
 4180|  22.6k|        }
 4181|  76.1k|#endif
 4182|       |
 4183|  76.1k|        return read_impl<Range>(
 4184|  76.1k|            range, rd,
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.1k|            },
 4188|  76.1k|            value);
 4189|  98.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   132k|    {
 4206|   132k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   132k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.4k, False: 80.1k]
  |  |  ------------------
  ------------------
 4208|  52.4k|            return unexpected(r.error());
 4209|  52.4k|        }
 4210|       |
 4211|  80.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  80.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  80.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  80.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 629, False: 79.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    629|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    629|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    629|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    629|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    629|    }                                                  \
  |  |  |  | 3671|  80.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  79.5k|        return ranges::next(range.begin(), n);
 4213|  80.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  22.6k|    {
  754|  22.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  22.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.6k|              cvref<T> obj = *get<T>(fn);
  745|  22.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.6k|              }
  748|  22.6k|              else {
  749|  22.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.6k|              }
  751|  22.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.6k|    {
  684|  22.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.6k|            return static_cast<T*>(s.m_cp);
  686|  22.6k|        }
  687|  22.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.6k|            return static_cast<T*>(s.m_p);
  689|  22.6k|        }
  690|  22.6k|        else {
  691|  22.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.6k|        }
  693|  22.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  22.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.6k|        {
  662|  22.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  76.1k|    {
  754|  76.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|  76.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.1k|              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.1k|    {
  684|  76.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.1k|            return static_cast<T*>(s.m_cp);
  686|  76.1k|        }
  687|  76.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.1k|            return static_cast<T*>(s.m_p);
  689|  76.1k|        }
  690|  76.1k|        else {
  691|  76.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.1k|        }
  693|  76.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  76.1k|        {
  662|  76.1k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  98.8k|    {
 4170|  98.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  98.8k|#if !SCN_DISABLE_LOCALE
 4173|  98.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.6k, False: 76.1k]
  ------------------
 4174|  22.6k|            return read_impl<Range>(
 4175|  22.6k|                range, rd,
 4176|  22.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.6k|                },
 4179|  22.6k|                value, loc);
 4180|  22.6k|        }
 4181|  76.1k|#endif
 4182|       |
 4183|  76.1k|        return read_impl<Range>(
 4184|  76.1k|            range, rd,
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.1k|            },
 4188|  76.1k|            value);
 4189|  98.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   132k|    {
 4206|   132k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   132k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.4k, False: 108k]
  |  |  ------------------
  ------------------
 4208|  24.4k|            return unexpected(r.error());
 4209|  24.4k|        }
 4210|       |
 4211|   108k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.6k, False: 79.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.6k|    }                                                  \
  |  |  |  | 3671|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  79.6k|        return ranges::next(range.begin(), n);
 4213|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  22.6k|    {
  754|  22.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  22.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.6k|              cvref<T> obj = *get<T>(fn);
  745|  22.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.6k|              }
  748|  22.6k|              else {
  749|  22.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.6k|              }
  751|  22.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.6k|    {
  684|  22.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.6k|            return static_cast<T*>(s.m_cp);
  686|  22.6k|        }
  687|  22.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.6k|            return static_cast<T*>(s.m_p);
  689|  22.6k|        }
  690|  22.6k|        else {
  691|  22.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.6k|        }
  693|  22.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  22.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.6k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.6k|        {
  662|  22.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  76.1k|    {
  754|  76.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  76.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.1k|              cvref<T> obj = *get<T>(fn);
  745|  76.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.1k|              }
  748|  76.1k|              else {
  749|  76.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.1k|              }
  751|  76.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.1k|    {
  684|  76.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.1k|            return static_cast<T*>(s.m_cp);
  686|  76.1k|        }
  687|  76.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.1k|            return static_cast<T*>(s.m_p);
  689|  76.1k|        }
  690|  76.1k|        else {
  691|  76.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.1k|        }
  693|  76.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  76.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  76.1k|        {
  662|  76.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   100k|    {
 6193|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   100k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   100k|            auto rd = make_reader<T, char_type>();
 6198|   100k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   100k|                return unexpected(e);
 6200|   100k|            }
 6201|       |
 6202|   100k|            return impl(rd, range, value);
 6203|   100k|        }
 6204|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   100k|            auto rd = make_reader<T, char_type>();
 6206|   100k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   100k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 100k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   100k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   100k|                return impl(rd, range, value);
 6213|   100k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   100k|        else {
 6221|   100k|            SCN_EXPECT(false);
 6222|   100k|            SCN_UNREACHABLE;
 6223|   100k|        }
 6224|   100k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   100k|    {
 6124|   100k|        const bool need_skipped_width =
 6125|   100k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 100k]
  |  Branch (6125:33): [True: 0, False: 100k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   100k|        auto it = rng.begin();
 6129|   100k|        std::ptrdiff_t prefix_width = 0;
 6130|   100k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 100k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   100k|        else {
 6138|   100k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 780, False: 99.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    780|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    780|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    780|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    780|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    780|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  99.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  99.7k|        }
 6141|  99.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  99.7k|        std::ptrdiff_t value_width = 0;
 6145|  99.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 99.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  99.7k|        else {
 6161|  99.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  99.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  99.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.8k, False: 58.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.8k|    }                                                  \
  |  | 3671|  99.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  58.8k|                                             specs, value, loc));
 6163|       |
 6164|  58.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 58.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  58.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  58.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  58.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 58.5k, False: 314]
  ------------------
 6174|  58.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  58.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  58.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  58.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  58.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  58.5k|                                 value_width));
 6178|  58.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  58.5k|        }
 6180|       |
 6181|  58.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  58.8k|                                                 value_width, postfix_width);
 6183|  58.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 58.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  58.8k|        return it;
 6188|  58.8k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   191k|    {
 3691|   191k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   191k|        const std::ptrdiff_t sign_len =
 3694|   191k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 368, False: 190k]
  ------------------
 3695|       |
 3696|   191k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.4k|    }                                                  \
  |  |  |  | 3671|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   162k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   191k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  99.7k|    {
 4170|  99.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  99.7k|#if !SCN_DISABLE_LOCALE
 4173|  99.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.0k, False: 76.6k]
  ------------------
 4174|  23.0k|            return read_impl<Range>(
 4175|  23.0k|                range, rd,
 4176|  23.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.0k|                },
 4179|  23.0k|                value, loc);
 4180|  23.0k|        }
 4181|  76.6k|#endif
 4182|       |
 4183|  76.6k|        return read_impl<Range>(
 4184|  76.6k|            range, rd,
 4185|  76.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.6k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.6k|            },
 4188|  76.6k|            value);
 4189|  99.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   134k|    {
 4206|   134k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   134k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.0k, False: 81.3k]
  |  |  ------------------
  ------------------
 4208|  53.0k|            return unexpected(r.error());
 4209|  53.0k|        }
 4210|       |
 4211|  81.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  81.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  81.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  81.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     64|    }                                                  \
  |  |  |  | 3671|  81.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  81.2k|        return ranges::next(range.begin(), n);
 4213|  81.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  23.0k|    {
  754|  23.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  23.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.0k|              cvref<T> obj = *get<T>(fn);
  745|  23.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.0k|              }
  748|  23.0k|              else {
  749|  23.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.0k|              }
  751|  23.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.0k|    {
  684|  23.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.0k|            return static_cast<T*>(s.m_cp);
  686|  23.0k|        }
  687|  23.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.0k|            return static_cast<T*>(s.m_p);
  689|  23.0k|        }
  690|  23.0k|        else {
  691|  23.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.0k|        }
  693|  23.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  23.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  23.0k|        {
  662|  23.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  76.6k|    {
  754|  76.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  76.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.6k|              cvref<T> obj = *get<T>(fn);
  745|  76.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.6k|              }
  748|  76.6k|              else {
  749|  76.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.6k|              }
  751|  76.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.6k|    {
  684|  76.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.6k|            return static_cast<T*>(s.m_cp);
  686|  76.6k|        }
  687|  76.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.6k|            return static_cast<T*>(s.m_p);
  689|  76.6k|        }
  690|  76.6k|        else {
  691|  76.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.6k|        }
  693|  76.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  76.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  76.6k|        {
  662|  76.6k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  99.7k|    {
 4170|  99.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  99.7k|#if !SCN_DISABLE_LOCALE
 4173|  99.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 23.1k, False: 76.6k]
  ------------------
 4174|  23.1k|            return read_impl<Range>(
 4175|  23.1k|                range, rd,
 4176|  23.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  23.1k|                },
 4179|  23.1k|                value, loc);
 4180|  23.1k|        }
 4181|  76.6k|#endif
 4182|       |
 4183|  76.6k|        return read_impl<Range>(
 4184|  76.6k|            range, rd,
 4185|  76.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.6k|                return r.read_source(SCN_FWD(args)...);
 4187|  76.6k|            },
 4188|  76.6k|            value);
 4189|  99.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   134k|    {
 4206|   134k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   134k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.6k, False: 109k]
  |  |  ------------------
  ------------------
 4208|  24.6k|            return unexpected(r.error());
 4209|  24.6k|        }
 4210|       |
 4211|   109k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 81.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.4k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  81.3k|        return ranges::next(range.begin(), n);
 4213|   109k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  23.1k|    {
  754|  23.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  23.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.1k|              cvref<T> obj = *get<T>(fn);
  745|  23.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.1k|              }
  748|  23.1k|              else {
  749|  23.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.1k|              }
  751|  23.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.1k|    {
  684|  23.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.1k|            return static_cast<T*>(s.m_cp);
  686|  23.1k|        }
  687|  23.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.1k|            return static_cast<T*>(s.m_p);
  689|  23.1k|        }
  690|  23.1k|        else {
  691|  23.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.1k|        }
  693|  23.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  23.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  23.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  23.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  23.1k|        {
  662|  23.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  76.6k|    {
  754|  76.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  76.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.6k|              cvref<T> obj = *get<T>(fn);
  745|  76.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  76.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.6k|              }
  748|  76.6k|              else {
  749|  76.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.6k|              }
  751|  76.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  76.6k|    {
  684|  76.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  76.6k|            return static_cast<T*>(s.m_cp);
  686|  76.6k|        }
  687|  76.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  76.6k|            return static_cast<T*>(s.m_p);
  689|  76.6k|        }
  690|  76.6k|        else {
  691|  76.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  76.6k|        }
  693|  76.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  76.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  76.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  76.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  76.6k|        {
  662|  76.6k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   399k|{
 2061|   399k|    auto it = range.begin();
 2062|   643k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 640k, False: 2.68k]
  ------------------
 2063|   640k|        const auto val =
 2064|   640k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   640k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   640k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 640k, False: 0]
  |  |  ------------------
  ------------------
 2066|   640k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   640k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   640k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 396k, False: 244k]
  ------------------
 2069|   396k|                return it;
 2070|   396k|            }
 2071|   640k|        }
 2072|   244k|        it = val.iterator;
 2073|   244k|    }
 2074|       |
 2075|  2.68k|    return it;
 2076|   399k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   640k|{
 1899|   640k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   640k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   640k|    auto it = range.begin();
 1903|   640k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   640k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   640k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 640k, False: 0]
  ------------------
 1912|   640k|        ++it;
 1913|   640k|        return {it, string_type(1, *range.begin())};
 1914|   640k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   640k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   640k|    {
 1890|   640k|        return !codepoint.empty();
 1891|   640k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   399k|{
 2082|   399k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   399k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   399k|{
 2951|   399k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 399k, False: 0]
  ------------------
 2952|   399k|        auto it = read_while_classic_space(range);
 2953|   399k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   399k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.68k, False: 396k]
  |  |  ------------------
  ------------------
 2955|  2.68k|            return unexpected(e);
 2956|  2.68k|        }
 2957|       |
 2958|   396k|        return it;
 2959|   399k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   399k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   399k|{
 2117|   399k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   399k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   399k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   399k|        auto buf = make_contiguous_buffer(range);
 2121|   399k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   399k|        return ranges::next(range.begin(),
 2123|   399k|                            ranges::distance(buf.view().begin(), it));
 2124|   399k|    }
 2125|   399k|    else {
 2126|   399k|        auto it = range.begin();
 2127|       |
 2128|   399k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   399k|            auto seg = get_contiguous_beginning(range);
 2130|   399k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   399k|                seg_it != seg.end()) {
 2132|   399k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   399k|            }
 2134|   399k|            ranges::advance(it, seg.size());
 2135|   399k|        }
 2136|       |
 2137|   399k|        return read_while_code_point(
 2138|   399k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   399k|    }
 2140|   399k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   640k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   640k|              cvref<T> obj = *get<T>(fn);
  745|   640k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   640k|                  obj(static_cast<decltype(args)>(args)...);
  747|   640k|              }
  748|   640k|              else {
  749|   640k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   640k|              }
  751|   640k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   640k|    {
  684|   640k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   640k|            return static_cast<T*>(s.m_cp);
  686|   640k|        }
  687|   640k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   640k|            return static_cast<T*>(s.m_p);
  689|   640k|        }
  690|   640k|        else {
  691|   640k|            return reinterpret_cast<T*>(s.m_fp);
  692|   640k|        }
  693|   640k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   640k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   959k|{
 2088|   959k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   959k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   959k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   959k|        auto buf = make_contiguous_buffer(range);
 2092|   959k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   959k|        return ranges::next(range.begin(),
 2094|   959k|                            ranges::distance(buf.view().begin(), it));
 2095|   959k|    }
 2096|   959k|    else {
 2097|   959k|        auto it = range.begin();
 2098|       |
 2099|   959k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   959k|            auto seg = get_contiguous_beginning(range);
 2101|   959k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   959k|                seg_it != seg.end()) {
 2103|   959k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   959k|            }
 2105|   959k|            ranges::advance(it, seg.size());
 2106|   959k|        }
 2107|       |
 2108|   959k|        return read_until_code_point(
 2109|   959k|            ranges::subrange{it, range.end()},
 2110|   959k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   959k|    }
 2112|   959k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   959k|{
 1683|   959k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   959k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   959k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   959k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   959k|    }
 1688|   959k|    else {
 1689|   959k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   959k|    }
 1691|   959k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   959k|    {
 1490|   959k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   959k|    {
 1577|   959k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   959k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   959k|    {
 1621|   959k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   959k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   959k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   959k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   959k|            m_storage.reset();
 1627|   959k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   959k|        }
 1629|   959k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   959k|                                          std::basic_string<CharT>>) {
 1631|   959k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   959k|            m_view = string_view_type{*m_storage};
 1633|   959k|        }
 1634|   959k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   959k|                                          typename detail::basic_scan_buffer<
 1636|   959k|                                              value_t>::forward_iterator> &&
 1637|   959k|                           ranges::common_range<Range>) {
 1638|   959k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   959k|            auto end_seg = range.end().contiguous_segment();
 1640|   959k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   959k|                             detail::to_address(end_seg.end()))) {
 1642|   959k|                auto& str = m_storage.emplace();
 1643|   959k|                str.reserve(range.end().position() - range.begin().position());
 1644|   959k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   959k|                m_view = string_view_type{str};
 1646|   959k|                return;
 1647|   959k|            }
 1648|       |
 1649|   959k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   959k|                                                            end_seg.data());
 1651|   959k|            m_storage.reset();
 1652|   959k|        }
 1653|   959k|        else {
 1654|   959k|            auto& str = m_storage.emplace();
 1655|   959k|            if constexpr (ranges::sized_range<Range>) {
 1656|   959k|                str.reserve(range.size());
 1657|   959k|            }
 1658|   959k|            if constexpr (ranges::common_range<Range>) {
 1659|   959k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   959k|                          std::back_inserter(str));
 1661|   959k|            }
 1662|   959k|            else {
 1663|   959k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   959k|                     ++it) {
 1665|   959k|                    str.push_back(*it);
 1666|   959k|                }
 1667|   959k|            }
 1668|   959k|            m_view = string_view_type{str};
 1669|   959k|        }
 1670|   959k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   695k|    {
 4100|   695k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 76.7k, False: 618k]
  ------------------
 4101|  76.7k|            return std::copysign(value, T{-1.0});
 4102|  76.7k|        }
 4103|   618k|        return std::copysign(value, T{1.0});
 4104|   695k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   222k|{
 2088|   222k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   222k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   222k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   222k|        auto buf = make_contiguous_buffer(range);
 2092|   222k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   222k|        return ranges::next(range.begin(),
 2094|   222k|                            ranges::distance(buf.view().begin(), it));
 2095|   222k|    }
 2096|   222k|    else {
 2097|   222k|        auto it = range.begin();
 2098|       |
 2099|   222k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   222k|            auto seg = get_contiguous_beginning(range);
 2101|   222k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   222k|                seg_it != seg.end()) {
 2103|   222k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   222k|            }
 2105|   222k|            ranges::advance(it, seg.size());
 2106|   222k|        }
 2107|       |
 2108|   222k|        return read_until_code_point(
 2109|   222k|            ranges::subrange{it, range.end()},
 2110|   222k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   222k|    }
 2112|   222k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   222k|    {
  754|   222k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   404k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   404k|              cvref<T> obj = *get<T>(fn);
  745|   404k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   404k|                  obj(static_cast<decltype(args)>(args)...);
  747|   404k|              }
  748|   404k|              else {
  749|   404k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   404k|              }
  751|   404k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   404k|    {
  684|   404k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   404k|            return static_cast<T*>(s.m_cp);
  686|   404k|        }
  687|   404k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   404k|            return static_cast<T*>(s.m_p);
  689|   404k|        }
  690|   404k|        else {
  691|   404k|            return reinterpret_cast<T*>(s.m_fp);
  692|   404k|        }
  693|   404k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   404k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   222k|        {
  662|   222k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   222k|    {
 1577|   222k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   222k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   222k|    {
 1621|   222k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   222k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   222k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   222k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   222k|            m_storage.reset();
 1627|   222k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   222k|        }
 1629|   222k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   222k|                                          std::basic_string<CharT>>) {
 1631|   222k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   222k|            m_view = string_view_type{*m_storage};
 1633|   222k|        }
 1634|   222k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   222k|                                          typename detail::basic_scan_buffer<
 1636|   222k|                                              value_t>::forward_iterator> &&
 1637|   222k|                           ranges::common_range<Range>) {
 1638|   222k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   222k|            auto end_seg = range.end().contiguous_segment();
 1640|   222k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   222k|                             detail::to_address(end_seg.end()))) {
 1642|   222k|                auto& str = m_storage.emplace();
 1643|   222k|                str.reserve(range.end().position() - range.begin().position());
 1644|   222k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   222k|                m_view = string_view_type{str};
 1646|   222k|                return;
 1647|   222k|            }
 1648|       |
 1649|   222k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   222k|                                                            end_seg.data());
 1651|   222k|            m_storage.reset();
 1652|   222k|        }
 1653|   222k|        else {
 1654|   222k|            auto& str = m_storage.emplace();
 1655|   222k|            if constexpr (ranges::sized_range<Range>) {
 1656|   222k|                str.reserve(range.size());
 1657|   222k|            }
 1658|   222k|            if constexpr (ranges::common_range<Range>) {
 1659|   222k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   222k|                          std::back_inserter(str));
 1661|   222k|            }
 1662|   222k|            else {
 1663|   222k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   222k|                     ++it) {
 1665|   222k|                    str.push_back(*it);
 1666|   222k|                }
 1667|   222k|            }
 1668|   222k|            m_view = string_view_type{str};
 1669|   222k|        }
 1670|   222k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   182k|    {
 4100|   182k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 330, False: 182k]
  ------------------
 4101|    330|            return std::copysign(value, T{-1.0});
 4102|    330|        }
 4103|   182k|        return std::copysign(value, T{1.0});
 4104|   182k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   725k|    {
 4100|   725k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 79.6k, False: 645k]
  ------------------
 4101|  79.6k|            return std::copysign(value, T{-1.0});
 4102|  79.6k|        }
 4103|   645k|        return std::copysign(value, T{1.0});
 4104|   725k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   188k|    {
 4100|   188k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 330, False: 188k]
  ------------------
 4101|    330|            return std::copysign(value, T{-1.0});
 4102|    330|        }
 4103|   188k|        return std::copysign(value, T{1.0});
 4104|   188k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   732k|    {
 4100|   732k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 82.0k, False: 650k]
  ------------------
 4101|  82.0k|            return std::copysign(value, T{-1.0});
 4102|  82.0k|        }
 4103|   650k|        return std::copysign(value, T{1.0});
 4104|   732k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   191k|    {
 4100|   191k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 335, False: 190k]
  ------------------
 4101|    335|            return std::copysign(value, T{-1.0});
 4102|    335|        }
 4103|   190k|        return std::copysign(value, T{1.0});
 4104|   191k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   314k|{
 5795|   314k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.01k, False: 310k]
  |  |  ------------------
  ------------------
 5796|  4.01k|        return unexpected(e);
 5797|  4.01k|    }
 5798|       |
 5799|   310k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 310k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   310k|    return skip_classic_whitespace(range);
 5804|   310k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   100k|    {
 5871|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   100k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   100k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   100k|            auto rd = make_reader<T, char_type>();
 5876|   100k|            return impl(rd, range, value);
 5877|   100k|        }
 5878|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   100k|            auto rd = make_reader<T, char_type>();
 5880|   100k|            if (!is_segment_contiguous(range)) {
 5881|   100k|                return impl(rd, range, value);
 5882|   100k|            }
 5883|   100k|            auto crange = get_as_contiguous(range);
 5884|   100k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   100k|            return ranges::next(range.begin(),
 5886|   100k|                                ranges::distance(crange.begin(), it));
 5887|   100k|        }
 5888|   100k|        else {
 5889|   100k|            SCN_EXPECT(false);
 5890|   100k|            SCN_UNREACHABLE;
 5891|   100k|        }
 5892|   100k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   100k|    {
 5863|   100k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 99.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.32k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  99.4k|                        .transform_error(make_eof_scan_error));
 5865|  99.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   100k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  99.4k|    {
 4152|  99.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  99.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  99.4k|        float_reader<CharT> rd{};
 4155|  99.4k|        return read_impl<Range>(
 4156|  99.4k|            range, rd,
 4157|  99.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  99.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  99.4k|            },
 4160|  99.4k|            value);
 4161|  99.4k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   644k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   846k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  99.4k|    {
  754|  99.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  99.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.4k|              cvref<T> obj = *get<T>(fn);
  745|  99.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  99.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.4k|              }
  748|  99.4k|              else {
  749|  99.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.4k|              }
  751|  99.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  99.4k|    {
  684|  99.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  99.4k|            return static_cast<T*>(s.m_cp);
  686|  99.4k|        }
  687|  99.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  99.4k|            return static_cast<T*>(s.m_p);
  689|  99.4k|        }
  690|  99.4k|        else {
  691|  99.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  99.4k|        }
  693|  99.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  99.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  99.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  99.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  99.4k|        {
  662|  99.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   106k|    {
 5871|   106k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   106k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   106k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   106k|            auto rd = make_reader<T, char_type>();
 5876|   106k|            return impl(rd, range, value);
 5877|   106k|        }
 5878|   106k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   106k|            auto rd = make_reader<T, char_type>();
 5880|   106k|            if (!is_segment_contiguous(range)) {
 5881|   106k|                return impl(rd, range, value);
 5882|   106k|            }
 5883|   106k|            auto crange = get_as_contiguous(range);
 5884|   106k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   106k|            return ranges::next(range.begin(),
 5886|   106k|                                ranges::distance(crange.begin(), it));
 5887|   106k|        }
 5888|   106k|        else {
 5889|   106k|            SCN_EXPECT(false);
 5890|   106k|            SCN_UNREACHABLE;
 5891|   106k|        }
 5892|   106k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   106k|    {
 5863|   106k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.52k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.52k|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   104k|                        .transform_error(make_eof_scan_error));
 5865|   104k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   106k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   104k|    {
 4152|   104k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   104k|        float_reader<CharT> rd{};
 4155|   104k|        return read_impl<Range>(
 4156|   104k|            range, rd,
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
 4159|   104k|            },
 4160|   104k|            value);
 4161|   104k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|   104k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   104k|            return static_cast<T*>(s.m_cp);
  686|   104k|        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   104k|            return static_cast<T*>(s.m_p);
  689|   104k|        }
  690|   104k|        else {
  691|   104k|            return reinterpret_cast<T*>(s.m_fp);
  692|   104k|        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   107k|    {
 5871|   107k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   107k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   107k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   107k|            auto rd = make_reader<T, char_type>();
 5876|   107k|            return impl(rd, range, value);
 5877|   107k|        }
 5878|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   107k|            auto rd = make_reader<T, char_type>();
 5880|   107k|            if (!is_segment_contiguous(range)) {
 5881|   107k|                return impl(rd, range, value);
 5882|   107k|            }
 5883|   107k|            auto crange = get_as_contiguous(range);
 5884|   107k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   107k|            return ranges::next(range.begin(),
 5886|   107k|                                ranges::distance(crange.begin(), it));
 5887|   107k|        }
 5888|   107k|        else {
 5889|   107k|            SCN_EXPECT(false);
 5890|   107k|            SCN_UNREACHABLE;
 5891|   107k|        }
 5892|   107k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   107k|    {
 5863|   107k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.65k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   106k|                        .transform_error(make_eof_scan_error));
 5865|   106k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   106k|    {
 4152|   106k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   106k|        float_reader<CharT> rd{};
 4155|   106k|        return read_impl<Range>(
 4156|   106k|            range, rd,
 4157|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   106k|                return r.read_source(SCN_FWD(args)...);
 4159|   106k|            },
 4160|   106k|            value);
 4161|   106k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|   106k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   106k|            return static_cast<T*>(s.m_cp);
  686|   106k|        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   106k|            return static_cast<T*>(s.m_p);
  689|   106k|        }
  690|   106k|        else {
  691|   106k|            return reinterpret_cast<T*>(s.m_fp);
  692|   106k|        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   106k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   338k|{
 5795|   338k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 334k]
  |  |  ------------------
  ------------------
 5796|  4.07k|        return unexpected(e);
 5797|  4.07k|    }
 5798|       |
 5799|   334k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 334k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   334k|    return skip_classic_whitespace(range);
 5804|   334k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   108k|    {
 5871|   108k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   108k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   108k|            auto rd = make_reader<T, char_type>();
 5876|   108k|            return impl(rd, range, value);
 5877|   108k|        }
 5878|   108k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   108k|            auto rd = make_reader<T, char_type>();
 5880|   108k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 108k, False: 0]
  ------------------
 5881|   108k|                return impl(rd, range, value);
 5882|   108k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   108k|        else {
 5889|   108k|            SCN_EXPECT(false);
 5890|   108k|            SCN_UNREACHABLE;
 5891|   108k|        }
 5892|   108k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   108k|    {
 5863|   108k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.35k|    }                                                  \
  |  |  |  | 3671|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   107k|                        .transform_error(make_eof_scan_error));
 5865|   107k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   108k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   107k|    {
 4152|   107k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   107k|        float_reader<CharT> rd{};
 4155|   107k|        return read_impl<Range>(
 4156|   107k|            range, rd,
 4157|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   107k|                return r.read_source(SCN_FWD(args)...);
 4159|   107k|            },
 4160|   107k|            value);
 4161|   107k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   107k|    {
  684|   107k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   107k|            return static_cast<T*>(s.m_cp);
  686|   107k|        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   107k|            return static_cast<T*>(s.m_p);
  689|   107k|        }
  690|   107k|        else {
  691|   107k|            return reinterpret_cast<T*>(s.m_fp);
  692|   107k|        }
  693|   107k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   107k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   114k|    {
 5871|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   114k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   114k|            auto rd = make_reader<T, char_type>();
 5876|   114k|            return impl(rd, range, value);
 5877|   114k|        }
 5878|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   114k|            auto rd = make_reader<T, char_type>();
 5880|   114k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 114k, False: 0]
  ------------------
 5881|   114k|                return impl(rd, range, value);
 5882|   114k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   114k|        else {
 5889|   114k|            SCN_EXPECT(false);
 5890|   114k|            SCN_UNREACHABLE;
 5891|   114k|        }
 5892|   114k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   114k|    {
 5863|   114k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.54k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.54k|    }                                                  \
  |  |  |  | 3671|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   112k|                        .transform_error(make_eof_scan_error));
 5865|   112k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   114k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   112k|    {
 4152|   112k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   112k|        float_reader<CharT> rd{};
 4155|   112k|        return read_impl<Range>(
 4156|   112k|            range, rd,
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
 4159|   112k|            },
 4160|   112k|            value);
 4161|   112k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   112k|    {
  754|   112k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|   112k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   112k|                  obj(static_cast<decltype(args)>(args)...);
  747|   112k|              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   112k|    {
  684|   112k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   112k|            return static_cast<T*>(s.m_cp);
  686|   112k|        }
  687|   112k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   112k|            return static_cast<T*>(s.m_p);
  689|   112k|        }
  690|   112k|        else {
  691|   112k|            return reinterpret_cast<T*>(s.m_fp);
  692|   112k|        }
  693|   112k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   112k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   112k|        {
  662|   112k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   115k|    {
 5871|   115k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   115k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   115k|            auto rd = make_reader<T, char_type>();
 5876|   115k|            return impl(rd, range, value);
 5877|   115k|        }
 5878|   115k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   115k|            auto rd = make_reader<T, char_type>();
 5880|   115k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 115k, False: 0]
  ------------------
 5881|   115k|                return impl(rd, range, value);
 5882|   115k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   115k|        else {
 5889|   115k|            SCN_EXPECT(false);
 5890|   115k|            SCN_UNREACHABLE;
 5891|   115k|        }
 5892|   115k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   115k|    {
 5863|   115k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.66k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.66k|    }                                                  \
  |  |  |  | 3671|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   113k|                        .transform_error(make_eof_scan_error));
 5865|   113k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   115k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   113k|    {
 4152|   113k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   113k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   113k|        float_reader<CharT> rd{};
 4155|   113k|        return read_impl<Range>(
 4156|   113k|            range, rd,
 4157|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   113k|                return r.read_source(SCN_FWD(args)...);
 4159|   113k|            },
 4160|   113k|            value);
 4161|   113k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   113k|    {
  684|   113k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   113k|            return static_cast<T*>(s.m_cp);
  686|   113k|        }
  687|   113k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   113k|            return static_cast<T*>(s.m_p);
  689|   113k|        }
  690|   113k|        else {
  691|   113k|            return reinterpret_cast<T*>(s.m_fp);
  692|   113k|        }
  693|   113k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   113k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   113k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   113k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   751k|    {
 2879|   751k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.19M|    {
 2883|  2.19M|        return m_current;
 2884|  2.19M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.44M|    {
 2888|  1.44M|        return m_range.end();
 2889|  1.44M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   689k|    {
 2903|   689k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   689k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   689k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 689k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   689k|        }
 2909|   689k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   689k|    static_cast<    \
  |  |  929|   689k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   689k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   751k|    {
 2893|   751k|        return ranges::subrange{begin(), end()};
 2894|   751k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   751k|    {
 6037|   751k|        const bool need_skipped_width =
 6038|   751k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 751k]
  |  Branch (6038:33): [True: 0, False: 751k]
  ------------------
 6039|   751k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   751k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 751k]
  ------------------
 6043|   751k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 751k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   751k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 751k, False: 0]
  |  Branch (6047:56): [True: 751k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   751k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 751k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.49M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   751k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   751k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   751k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 740k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.5k|    }                                                  \
  |  |  |  | 3671|   751k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.49M|                            make_eof_scan_error));
 6058|       |
 6059|  1.49M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 740k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   740k|            return result_type{it, 0};
 6067|  1.49M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   751k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   678k|    {
 6079|   678k|        const bool need_skipped_width =
 6080|   678k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 678k]
  |  Branch (6080:33): [True: 0, False: 678k]
  ------------------
 6081|   678k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   678k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 678k]
  ------------------
 6084|   678k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 678k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   678k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 678k, False: 0]
  ------------------
 6093|   678k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 678k]
  ------------------
 6094|   678k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   678k|        return result_type{rng.begin(), 0};
 6118|   678k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   243k|    {
 6193|   243k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   243k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   243k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   243k|            auto rd = make_reader<T, char_type>();
 6198|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   243k|            return impl(rd, range, value);
 6203|   243k|        }
 6204|   243k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   243k|            auto rd = make_reader<T, char_type>();
 6206|   243k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   243k|                return unexpected(e);
 6208|   243k|            }
 6209|       |
 6210|   243k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   243k|                specs.width != 0) {
 6212|   243k|                return impl(rd, range, value);
 6213|   243k|            }
 6214|       |
 6215|   243k|            auto crange = get_as_contiguous(range);
 6216|   243k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   243k|            return ranges::next(range.begin(),
 6218|   243k|                                ranges::distance(crange.begin(), it));
 6219|   243k|        }
 6220|   243k|        else {
 6221|   243k|            SCN_EXPECT(false);
 6222|   243k|            SCN_UNREACHABLE;
 6223|   243k|        }
 6224|   243k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   243k|    {
 6124|   243k|        const bool need_skipped_width =
 6125|   243k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 243k]
  |  Branch (6125:33): [True: 0, False: 243k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   243k|        auto it = rng.begin();
 6129|   243k|        std::ptrdiff_t prefix_width = 0;
 6130|   243k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 243k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   243k|        else {
 6138|   243k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   243k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   243k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   243k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.50k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.50k|    }                                                  \
  |  |  |  | 3671|   243k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   239k|            std::tie(it, prefix_width) = prefix_result;
 6140|   239k|        }
 6141|   239k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   239k|        std::ptrdiff_t value_width = 0;
 6145|   239k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 239k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   239k|        else {
 6161|   239k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 222k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.3k|    }                                                  \
  |  | 3671|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   222k|                                             specs, value, loc));
 6163|       |
 6164|   222k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 222k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   222k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   222k|        std::ptrdiff_t postfix_width = 0;
 6173|   222k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 219k, False: 3.08k]
  ------------------
 6174|   219k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   219k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   219k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   219k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   219k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   219k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   219k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   219k|                                 value_width));
 6178|   219k|            std::tie(it, postfix_width) = postfix_result;
 6179|   219k|        }
 6180|       |
 6181|   222k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   222k|                                                 value_width, postfix_width);
 6183|   222k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 222k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   222k|        return it;
 6188|   222k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   252k|    {
 6193|   252k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   252k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   252k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   252k|            auto rd = make_reader<T, char_type>();
 6198|   252k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   252k|            return impl(rd, range, value);
 6203|   252k|        }
 6204|   252k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   252k|            auto rd = make_reader<T, char_type>();
 6206|   252k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   252k|                return unexpected(e);
 6208|   252k|            }
 6209|       |
 6210|   252k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   252k|                specs.width != 0) {
 6212|   252k|                return impl(rd, range, value);
 6213|   252k|            }
 6214|       |
 6215|   252k|            auto crange = get_as_contiguous(range);
 6216|   252k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   252k|            return ranges::next(range.begin(),
 6218|   252k|                                ranges::distance(crange.begin(), it));
 6219|   252k|        }
 6220|   252k|        else {
 6221|   252k|            SCN_EXPECT(false);
 6222|   252k|            SCN_UNREACHABLE;
 6223|   252k|        }
 6224|   252k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   252k|    {
 6124|   252k|        const bool need_skipped_width =
 6125|   252k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 252k]
  |  Branch (6125:33): [True: 0, False: 252k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   252k|        auto it = rng.begin();
 6129|   252k|        std::ptrdiff_t prefix_width = 0;
 6130|   252k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 252k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   252k|        else {
 6138|   252k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.88k, False: 248k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.88k|    }                                                  \
  |  |  |  | 3671|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   248k|            std::tie(it, prefix_width) = prefix_result;
 6140|   248k|        }
 6141|   248k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   248k|        std::ptrdiff_t value_width = 0;
 6145|   248k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 248k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   248k|        else {
 6161|   248k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   248k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   248k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 231k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.9k|    }                                                  \
  |  | 3671|   248k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   231k|                                             specs, value, loc));
 6163|       |
 6164|   231k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 231k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   231k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   231k|        std::ptrdiff_t postfix_width = 0;
 6173|   231k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 228k, False: 3.41k]
  ------------------
 6174|   228k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   228k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   228k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   228k|                                 value_width));
 6178|   228k|            std::tie(it, postfix_width) = postfix_result;
 6179|   228k|        }
 6180|       |
 6181|   231k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   231k|                                                 value_width, postfix_width);
 6183|   231k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 231k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   231k|        return it;
 6188|   231k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   255k|    {
 6193|   255k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   255k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   255k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   255k|            auto rd = make_reader<T, char_type>();
 6198|   255k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 255k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   255k|            return impl(rd, range, value);
 6203|   255k|        }
 6204|   255k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   255k|            auto rd = make_reader<T, char_type>();
 6206|   255k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   255k|                return unexpected(e);
 6208|   255k|            }
 6209|       |
 6210|   255k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   255k|                specs.width != 0) {
 6212|   255k|                return impl(rd, range, value);
 6213|   255k|            }
 6214|       |
 6215|   255k|            auto crange = get_as_contiguous(range);
 6216|   255k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   255k|            return ranges::next(range.begin(),
 6218|   255k|                                ranges::distance(crange.begin(), it));
 6219|   255k|        }
 6220|   255k|        else {
 6221|   255k|            SCN_EXPECT(false);
 6222|   255k|            SCN_UNREACHABLE;
 6223|   255k|        }
 6224|   255k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   255k|    {
 6124|   255k|        const bool need_skipped_width =
 6125|   255k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 255k]
  |  Branch (6125:33): [True: 0, False: 255k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   255k|        auto it = rng.begin();
 6129|   255k|        std::ptrdiff_t prefix_width = 0;
 6130|   255k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 255k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   255k|        else {
 6138|   255k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.14k, False: 251k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.14k|    }                                                  \
  |  |  |  | 3671|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   251k|            std::tie(it, prefix_width) = prefix_result;
 6140|   251k|        }
 6141|   251k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   251k|        std::ptrdiff_t value_width = 0;
 6145|   251k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 251k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   251k|        else {
 6161|   251k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 234k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.6k|    }                                                  \
  |  | 3671|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   234k|                                             specs, value, loc));
 6163|       |
 6164|   234k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 234k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   234k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   234k|        std::ptrdiff_t postfix_width = 0;
 6173|   234k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 230k, False: 3.65k]
  ------------------
 6174|   230k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   230k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   230k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   230k|                                 value_width));
 6178|   230k|            std::tie(it, postfix_width) = postfix_result;
 6179|   230k|        }
 6180|       |
 6181|   234k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   234k|                                                 value_width, postfix_width);
 6183|   234k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 234k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   234k|        return it;
 6188|   234k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   101k|{
 5795|   101k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 315, False: 101k]
  |  |  ------------------
  ------------------
 5796|    315|        return unexpected(e);
 5797|    315|    }
 5798|       |
 5799|   101k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 101k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   101k|    return skip_classic_whitespace(range);
 5804|   101k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  32.8k|    {
 5871|  32.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  32.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.8k|            auto rd = make_reader<T, char_type>();
 5876|  32.8k|            return impl(rd, range, value);
 5877|  32.8k|        }
 5878|  32.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  32.8k|            auto rd = make_reader<T, char_type>();
 5880|  32.8k|            if (!is_segment_contiguous(range)) {
 5881|  32.8k|                return impl(rd, range, value);
 5882|  32.8k|            }
 5883|  32.8k|            auto crange = get_as_contiguous(range);
 5884|  32.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  32.8k|            return ranges::next(range.begin(),
 5886|  32.8k|                                ranges::distance(crange.begin(), it));
 5887|  32.8k|        }
 5888|  32.8k|        else {
 5889|  32.8k|            SCN_EXPECT(false);
 5890|  32.8k|            SCN_UNREACHABLE;
 5891|  32.8k|        }
 5892|  32.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  32.8k|    {
 5863|  32.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    228|    }                                                  \
  |  |  |  | 3671|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  32.5k|                        .transform_error(make_eof_scan_error));
 5865|  32.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  32.5k|    {
 4152|  32.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  32.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  32.5k|        float_reader<CharT> rd{};
 4155|  32.5k|        return read_impl<Range>(
 4156|  32.5k|            range, rd,
 4157|  32.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  32.5k|            },
 4160|  32.5k|            value);
 4161|  32.5k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   202k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  32.5k|    {
  754|  32.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  32.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.5k|              cvref<T> obj = *get<T>(fn);
  745|  32.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.5k|              }
  748|  32.5k|              else {
  749|  32.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.5k|              }
  751|  32.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.5k|    {
  684|  32.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.5k|            return static_cast<T*>(s.m_cp);
  686|  32.5k|        }
  687|  32.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.5k|            return static_cast<T*>(s.m_p);
  689|  32.5k|        }
  690|  32.5k|        else {
  691|  32.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.5k|        }
  693|  32.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  32.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  32.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  32.5k|        {
  662|  32.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  34.2k|    {
 5871|  34.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  34.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.2k|            auto rd = make_reader<T, char_type>();
 5876|  34.2k|            return impl(rd, range, value);
 5877|  34.2k|        }
 5878|  34.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  34.2k|            auto rd = make_reader<T, char_type>();
 5880|  34.2k|            if (!is_segment_contiguous(range)) {
 5881|  34.2k|                return impl(rd, range, value);
 5882|  34.2k|            }
 5883|  34.2k|            auto crange = get_as_contiguous(range);
 5884|  34.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  34.2k|            return ranges::next(range.begin(),
 5886|  34.2k|                                ranges::distance(crange.begin(), it));
 5887|  34.2k|        }
 5888|  34.2k|        else {
 5889|  34.2k|            SCN_EXPECT(false);
 5890|  34.2k|            SCN_UNREACHABLE;
 5891|  34.2k|        }
 5892|  34.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  34.2k|    {
 5863|  34.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 255, False: 33.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    255|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    255|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    255|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    255|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    255|    }                                                  \
  |  |  |  | 3671|  34.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  33.9k|                        .transform_error(make_eof_scan_error));
 5865|  33.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  33.9k|    {
 4152|  33.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  33.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  33.9k|        float_reader<CharT> rd{};
 4155|  33.9k|        return read_impl<Range>(
 4156|  33.9k|            range, rd,
 4157|  33.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  33.9k|            },
 4160|  33.9k|            value);
 4161|  33.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  33.9k|    {
  754|  33.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  33.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.9k|              cvref<T> obj = *get<T>(fn);
  745|  33.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.9k|              }
  748|  33.9k|              else {
  749|  33.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.9k|              }
  751|  33.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.9k|    {
  684|  33.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.9k|            return static_cast<T*>(s.m_cp);
  686|  33.9k|        }
  687|  33.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.9k|            return static_cast<T*>(s.m_p);
  689|  33.9k|        }
  690|  33.9k|        else {
  691|  33.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.9k|        }
  693|  33.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  33.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  33.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  33.9k|        {
  662|  33.9k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  34.9k|    {
 5871|  34.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.9k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  34.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.9k|            auto rd = make_reader<T, char_type>();
 5876|  34.9k|            return impl(rd, range, value);
 5877|  34.9k|        }
 5878|  34.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  34.9k|            auto rd = make_reader<T, char_type>();
 5880|  34.9k|            if (!is_segment_contiguous(range)) {
 5881|  34.9k|                return impl(rd, range, value);
 5882|  34.9k|            }
 5883|  34.9k|            auto crange = get_as_contiguous(range);
 5884|  34.9k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  34.9k|            return ranges::next(range.begin(),
 5886|  34.9k|                                ranges::distance(crange.begin(), it));
 5887|  34.9k|        }
 5888|  34.9k|        else {
 5889|  34.9k|            SCN_EXPECT(false);
 5890|  34.9k|            SCN_UNREACHABLE;
 5891|  34.9k|        }
 5892|  34.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  34.9k|    {
 5863|  34.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 34.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|  34.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  34.6k|                        .transform_error(make_eof_scan_error));
 5865|  34.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  34.6k|    {
 4152|  34.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  34.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  34.6k|        float_reader<CharT> rd{};
 4155|  34.6k|        return read_impl<Range>(
 4156|  34.6k|            range, rd,
 4157|  34.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  34.6k|            },
 4160|  34.6k|            value);
 4161|  34.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  34.6k|    {
  754|  34.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|  34.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  34.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.6k|              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.6k|    {
  684|  34.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  34.6k|            return static_cast<T*>(s.m_cp);
  686|  34.6k|        }
  687|  34.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  34.6k|            return static_cast<T*>(s.m_p);
  689|  34.6k|        }
  690|  34.6k|        else {
  691|  34.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  34.6k|        }
  693|  34.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  34.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  34.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  34.6k|        {
  662|  34.6k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   297k|    {
 2879|   297k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   768k|    {
 2883|   768k|        return m_current;
 2884|   768k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   470k|    {
 2888|   470k|        return m_range.end();
 2889|   470k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   172k|    {
 2903|   172k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   172k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   172k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 172k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   172k|        }
 2909|   172k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   172k|    static_cast<    \
  |  |  929|   172k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   172k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   297k|    {
 2893|   297k|        return ranges::subrange{begin(), end()};
 2894|   297k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   297k|    {
 6037|   297k|        const bool need_skipped_width =
 6038|   297k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 297k]
  |  Branch (6038:33): [True: 0, False: 297k]
  ------------------
 6039|   297k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   297k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 297k]
  ------------------
 6043|   297k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 297k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   297k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 297k, False: 0]
  |  Branch (6047:56): [True: 297k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   297k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 297k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   593k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.24k, False: 295k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.24k|    }                                                  \
  |  |  |  | 3671|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   593k|                            make_eof_scan_error));
 6058|       |
 6059|   593k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 295k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   295k|            return result_type{it, 0};
 6067|   593k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   297k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   171k|    {
 6079|   171k|        const bool need_skipped_width =
 6080|   171k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 171k]
  |  Branch (6080:33): [True: 0, False: 171k]
  ------------------
 6081|   171k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   171k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 171k]
  ------------------
 6084|   171k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 171k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   171k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 171k, False: 0]
  ------------------
 6093|   171k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 171k]
  ------------------
 6094|   171k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   171k|        return result_type{rng.begin(), 0};
 6118|   171k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|  97.6k|    {
 6193|  97.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  97.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  97.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  97.6k|            auto rd = make_reader<T, char_type>();
 6198|  97.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 97.6k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  97.6k|            return impl(rd, range, value);
 6203|  97.6k|        }
 6204|  97.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  97.6k|            auto rd = make_reader<T, char_type>();
 6206|  97.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  97.6k|                return unexpected(e);
 6208|  97.6k|            }
 6209|       |
 6210|  97.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  97.6k|                specs.width != 0) {
 6212|  97.6k|                return impl(rd, range, value);
 6213|  97.6k|            }
 6214|       |
 6215|  97.6k|            auto crange = get_as_contiguous(range);
 6216|  97.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  97.6k|            return ranges::next(range.begin(),
 6218|  97.6k|                                ranges::distance(crange.begin(), it));
 6219|  97.6k|        }
 6220|  97.6k|        else {
 6221|  97.6k|            SCN_EXPECT(false);
 6222|  97.6k|            SCN_UNREACHABLE;
 6223|  97.6k|        }
 6224|  97.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  97.6k|    {
 6124|  97.6k|        const bool need_skipped_width =
 6125|  97.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 97.6k]
  |  Branch (6125:33): [True: 0, False: 97.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  97.6k|        auto it = rng.begin();
 6129|  97.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  97.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 97.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  97.6k|        else {
 6138|  97.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  97.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  97.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  97.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 710, False: 96.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    710|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    710|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    710|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    710|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    710|    }                                                  \
  |  |  |  | 3671|  97.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.9k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.9k|        }
 6141|  96.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.9k|        std::ptrdiff_t value_width = 0;
 6145|  96.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.9k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.9k|        else {
 6161|  96.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.9k, False: 56.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.9k|    }                                                  \
  |  | 3671|  96.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  56.0k|                                             specs, value, loc));
 6163|       |
 6164|  56.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 56.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  56.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  56.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  56.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 55.7k, False: 278]
  ------------------
 6174|  55.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  55.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  55.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  55.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  55.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  55.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  55.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  55.7k|                                 value_width));
 6178|  55.7k|            std::tie(it, postfix_width) = postfix_result;
 6179|  55.7k|        }
 6180|       |
 6181|  56.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  56.0k|                                                 value_width, postfix_width);
 6183|  56.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 56.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  56.0k|        return it;
 6188|  56.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  99.5k|    {
 6193|  99.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  99.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  99.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  99.5k|            auto rd = make_reader<T, char_type>();
 6198|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.5k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  99.5k|            return impl(rd, range, value);
 6203|  99.5k|        }
 6204|  99.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  99.5k|            auto rd = make_reader<T, char_type>();
 6206|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  99.5k|                return unexpected(e);
 6208|  99.5k|            }
 6209|       |
 6210|  99.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  99.5k|                specs.width != 0) {
 6212|  99.5k|                return impl(rd, range, value);
 6213|  99.5k|            }
 6214|       |
 6215|  99.5k|            auto crange = get_as_contiguous(range);
 6216|  99.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  99.5k|            return ranges::next(range.begin(),
 6218|  99.5k|                                ranges::distance(crange.begin(), it));
 6219|  99.5k|        }
 6220|  99.5k|        else {
 6221|  99.5k|            SCN_EXPECT(false);
 6222|  99.5k|            SCN_UNREACHABLE;
 6223|  99.5k|        }
 6224|  99.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  99.5k|    {
 6124|  99.5k|        const bool need_skipped_width =
 6125|  99.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 99.5k]
  |  Branch (6125:33): [True: 0, False: 99.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  99.5k|        auto it = rng.begin();
 6129|  99.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  99.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 99.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  99.5k|        else {
 6138|  99.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  99.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 756, False: 98.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    756|    }                                                  \
  |  |  |  | 3671|  99.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  98.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  98.8k|        }
 6141|  98.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  98.8k|        std::ptrdiff_t value_width = 0;
 6145|  98.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 98.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  98.8k|        else {
 6161|  98.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  98.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.8k, False: 57.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.8k|    }                                                  \
  |  | 3671|  98.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  57.9k|                                             specs, value, loc));
 6163|       |
 6164|  57.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 57.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  57.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  57.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  57.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 57.6k, False: 304]
  ------------------
 6174|  57.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  57.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  57.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  57.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  57.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  57.6k|                                 value_width));
 6178|  57.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  57.6k|        }
 6180|       |
 6181|  57.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  57.9k|                                                 value_width, postfix_width);
 6183|  57.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 57.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  57.9k|        return it;
 6188|  57.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   100k|    {
 6193|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   100k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   100k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   100k|            auto rd = make_reader<T, char_type>();
 6198|   100k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   100k|            return impl(rd, range, value);
 6203|   100k|        }
 6204|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   100k|            auto rd = make_reader<T, char_type>();
 6206|   100k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   100k|                return unexpected(e);
 6208|   100k|            }
 6209|       |
 6210|   100k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   100k|                specs.width != 0) {
 6212|   100k|                return impl(rd, range, value);
 6213|   100k|            }
 6214|       |
 6215|   100k|            auto crange = get_as_contiguous(range);
 6216|   100k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   100k|            return ranges::next(range.begin(),
 6218|   100k|                                ranges::distance(crange.begin(), it));
 6219|   100k|        }
 6220|   100k|        else {
 6221|   100k|            SCN_EXPECT(false);
 6222|   100k|            SCN_UNREACHABLE;
 6223|   100k|        }
 6224|   100k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   100k|    {
 6124|   100k|        const bool need_skipped_width =
 6125|   100k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 100k]
  |  Branch (6125:33): [True: 0, False: 100k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   100k|        auto it = rng.begin();
 6129|   100k|        std::ptrdiff_t prefix_width = 0;
 6130|   100k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 100k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   100k|        else {
 6138|   100k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 780, False: 99.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    780|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    780|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    780|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    780|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    780|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  99.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  99.7k|        }
 6141|  99.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  99.7k|        std::ptrdiff_t value_width = 0;
 6145|  99.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 99.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  99.7k|        else {
 6161|  99.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  99.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  99.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  99.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 40.8k, False: 58.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  40.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  40.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  40.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  40.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  40.8k|    }                                                  \
  |  | 3671|  99.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  99.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  58.9k|                                             specs, value, loc));
 6163|       |
 6164|  58.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 58.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  58.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  58.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  58.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 58.6k, False: 314]
  ------------------
 6174|  58.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  58.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  58.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  58.6k|                                 value_width));
 6178|  58.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  58.6k|        }
 6180|       |
 6181|  58.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  58.9k|                                                 value_width, postfix_width);
 6183|  58.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 58.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  58.9k|        return it;
 6188|  58.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   101k|{
 5795|   101k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 315, False: 101k]
  |  |  ------------------
  ------------------
 5796|    315|        return unexpected(e);
 5797|    315|    }
 5798|       |
 5799|   101k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 101k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   101k|    return skip_classic_whitespace(range);
 5804|   101k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  32.7k|    {
 5871|  32.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.7k|            auto rd = make_reader<T, char_type>();
 5876|  32.7k|            return impl(rd, range, value);
 5877|  32.7k|        }
 5878|  32.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  32.7k|            auto rd = make_reader<T, char_type>();
 5880|  32.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 32.7k, False: 0]
  ------------------
 5881|  32.7k|                return impl(rd, range, value);
 5882|  32.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  32.7k|        else {
 5889|  32.7k|            SCN_EXPECT(false);
 5890|  32.7k|            SCN_UNREACHABLE;
 5891|  32.7k|        }
 5892|  32.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  32.7k|    {
 5863|  32.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 228, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    228|    }                                                  \
  |  |  |  | 3671|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  32.5k|                        .transform_error(make_eof_scan_error));
 5865|  32.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  32.5k|    {
 4152|  32.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  32.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  32.5k|        float_reader<CharT> rd{};
 4155|  32.5k|        return read_impl<Range>(
 4156|  32.5k|            range, rd,
 4157|  32.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  32.5k|            },
 4160|  32.5k|            value);
 4161|  32.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  32.5k|    {
  754|  32.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  32.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.5k|              cvref<T> obj = *get<T>(fn);
  745|  32.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.5k|              }
  748|  32.5k|              else {
  749|  32.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.5k|              }
  751|  32.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.5k|    {
  684|  32.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.5k|            return static_cast<T*>(s.m_cp);
  686|  32.5k|        }
  687|  32.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.5k|            return static_cast<T*>(s.m_p);
  689|  32.5k|        }
  690|  32.5k|        else {
  691|  32.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.5k|        }
  693|  32.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  32.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  32.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  32.5k|        {
  662|  32.5k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  34.1k|    {
 5871|  34.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.1k|            auto rd = make_reader<T, char_type>();
 5876|  34.1k|            return impl(rd, range, value);
 5877|  34.1k|        }
 5878|  34.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  34.1k|            auto rd = make_reader<T, char_type>();
 5880|  34.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 34.1k, False: 0]
  ------------------
 5881|  34.1k|                return impl(rd, range, value);
 5882|  34.1k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  34.1k|        else {
 5889|  34.1k|            SCN_EXPECT(false);
 5890|  34.1k|            SCN_UNREACHABLE;
 5891|  34.1k|        }
 5892|  34.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  34.1k|    {
 5863|  34.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 255, False: 33.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    255|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    255|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    255|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    255|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    255|    }                                                  \
  |  |  |  | 3671|  34.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  33.9k|                        .transform_error(make_eof_scan_error));
 5865|  33.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  33.9k|    {
 4152|  33.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  33.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  33.9k|        float_reader<CharT> rd{};
 4155|  33.9k|        return read_impl<Range>(
 4156|  33.9k|            range, rd,
 4157|  33.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  33.9k|            },
 4160|  33.9k|            value);
 4161|  33.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  33.9k|    {
  754|  33.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  33.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.9k|              cvref<T> obj = *get<T>(fn);
  745|  33.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.9k|              }
  748|  33.9k|              else {
  749|  33.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.9k|              }
  751|  33.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.9k|    {
  684|  33.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.9k|            return static_cast<T*>(s.m_cp);
  686|  33.9k|        }
  687|  33.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.9k|            return static_cast<T*>(s.m_p);
  689|  33.9k|        }
  690|  33.9k|        else {
  691|  33.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.9k|        }
  693|  33.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  33.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  33.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  33.9k|        {
  662|  33.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  34.8k|    {
 5871|  34.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.8k|            auto rd = make_reader<T, char_type>();
 5876|  34.8k|            return impl(rd, range, value);
 5877|  34.8k|        }
 5878|  34.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  34.8k|            auto rd = make_reader<T, char_type>();
 5880|  34.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 34.8k, False: 0]
  ------------------
 5881|  34.8k|                return impl(rd, range, value);
 5882|  34.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  34.8k|        else {
 5889|  34.8k|            SCN_EXPECT(false);
 5890|  34.8k|            SCN_UNREACHABLE;
 5891|  34.8k|        }
 5892|  34.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  34.8k|    {
 5863|  34.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 34.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    270|    }                                                  \
  |  |  |  | 3671|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  34.6k|                        .transform_error(make_eof_scan_error));
 5865|  34.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  34.6k|    {
 4152|  34.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  34.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  34.6k|        float_reader<CharT> rd{};
 4155|  34.6k|        return read_impl<Range>(
 4156|  34.6k|            range, rd,
 4157|  34.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  34.6k|            },
 4160|  34.6k|            value);
 4161|  34.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  34.6k|    {
  754|  34.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  34.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.6k|              cvref<T> obj = *get<T>(fn);
  745|  34.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  34.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.6k|              }
  748|  34.6k|              else {
  749|  34.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.6k|              }
  751|  34.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.6k|    {
  684|  34.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  34.6k|            return static_cast<T*>(s.m_cp);
  686|  34.6k|        }
  687|  34.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  34.6k|            return static_cast<T*>(s.m_p);
  689|  34.6k|        }
  690|  34.6k|        else {
  691|  34.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  34.6k|        }
  693|  34.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  34.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  34.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  34.6k|        {
  662|  34.6k|        }

LLVMFuzzerTestOneInput:
   54|  2.08k|{
   55|  2.08k|    scn::fuzz::run(data, size);
   56|  2.08k|    return 0;
   57|  2.08k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.08k|{
   33|  2.08k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.08k]
  |  Branch (33:35): [True: 0, False: 2.08k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.08k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.08k|    const auto& f =
   40|  2.08k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.08k|    do_basic_run(sv, f);
   42|       |
   43|  2.08k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.08k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.08k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.08k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.08k, False: 0]
  ------------------
   47|  2.08k|        do_basic_run(wsv_transcode, wf);
   48|  2.08k|    }
   49|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.08k|{
   25|  2.08k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.08k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.08k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.08k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.16k|{
   25|  4.16k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.16k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.16k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.16k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.16k|{
   25|  4.16k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.16k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.16k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.16k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.08k|{
   52|  2.08k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.08k|    string_buffer.resize(size);
   56|  2.08k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.08k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.08k|    const auto wsv_reinterpret_size =
   61|  2.08k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 62, False: 2.02k]
  ------------------
   62|  2.08k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.08k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.08k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.08k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.08k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.08k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.08k|{
  108|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.08k|        return format_string_view_buffer;
  110|  2.08k|    }
  111|  2.08k|    else {
  112|  2.08k|        return wformat_string_view_buffer;
  113|  2.08k|    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.08k|{
  185|  2.08k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.08k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.08k|                                   format_strings);
  188|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   155k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   155k|            auto result = scn::scan<T>(
  139|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   155k|                scn::runtime_format(f));
  141|   155k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 142k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   142k|            it = result->begin();
  145|   142k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   155k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   155k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   155k|            auto result = scn::scan<T>(
  154|   155k|                global_locale,
  155|   155k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   155k|                scn::runtime_format(f));
  157|   155k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 142k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   142k|            it = result->begin();
  161|   142k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  33.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.6k|            auto result = scn::scan_value<T>(
  170|  33.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 31.5k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  31.5k|            it = result->begin();
  175|  31.5k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   161k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   161k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   161k|            auto result = scn::scan<T>(
  139|   161k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   161k|                scn::runtime_format(f));
  141|   161k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 149k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   149k|            it = result->begin();
  145|   149k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   161k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   161k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   161k|            auto result = scn::scan<T>(
  154|   161k|                global_locale,
  155|   161k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   161k|                scn::runtime_format(f));
  157|   161k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 149k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   149k|            it = result->begin();
  161|   149k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  35.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.3k|            auto result = scn::scan_value<T>(
  170|  35.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 33.2k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  33.2k|            it = result->begin();
  175|  33.2k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   163k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   163k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   163k|            auto result = scn::scan<T>(
  139|   163k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   163k|                scn::runtime_format(f));
  141|   163k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 151k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   151k|            it = result->begin();
  145|   151k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   163k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   163k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   163k|            auto result = scn::scan<T>(
  154|   163k|                global_locale,
  155|   163k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   163k|                scn::runtime_format(f));
  157|   163k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 151k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   151k|            it = result->begin();
  161|   151k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  35.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.9k|            auto result = scn::scan_value<T>(
  170|  35.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 33.8k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  33.8k|            it = result->begin();
  175|  33.8k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   176k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   176k|            auto result = scn::scan<T>(
  139|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   176k|                scn::runtime_format(f));
  141|   176k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 164k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   164k|            it = result->begin();
  145|   164k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   176k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   176k|            auto result = scn::scan<T>(
  154|   176k|                global_locale,
  155|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   176k|                scn::runtime_format(f));
  157|   176k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 164k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   164k|            it = result->begin();
  161|   164k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  36.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.2k|            auto result = scn::scan_value<T>(
  170|  36.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 34.1k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  34.1k|            it = result->begin();
  175|  34.1k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   185k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   185k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   185k|            auto result = scn::scan<T>(
  139|   185k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   185k|                scn::runtime_format(f));
  141|   185k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 172k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   172k|            it = result->begin();
  145|   172k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   185k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   185k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   185k|            auto result = scn::scan<T>(
  154|   185k|                global_locale,
  155|   185k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   185k|                scn::runtime_format(f));
  157|   185k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 172k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   172k|            it = result->begin();
  161|   172k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  38.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  38.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  38.0k|            auto result = scn::scan_value<T>(
  170|  38.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  38.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 36.0k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  36.0k|            it = result->begin();
  175|  36.0k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.08k|{
  133|       |    // Regular scan
  134|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.4k, False: 2.08k]
  ------------------
  135|  12.4k|        auto it = scn::ranges::begin(source);
  136|   187k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   187k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   187k|            auto result = scn::scan<T>(
  139|   187k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   187k|                scn::runtime_format(f));
  141|   187k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.4k, False: 174k]
  ------------------
  142|  12.4k|                break;
  143|  12.4k|            }
  144|   174k|            it = result->begin();
  145|   174k|        }
  146|  12.4k|    }
  147|       |
  148|       |    // scan localized
  149|  12.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.4k, False: 2.08k]
  ------------------
  150|  12.4k|        auto it = scn::ranges::begin(source);
  151|   187k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   187k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   187k|            auto result = scn::scan<T>(
  154|   187k|                global_locale,
  155|   187k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   187k|                scn::runtime_format(f));
  157|   187k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.4k, False: 174k]
  ------------------
  158|  12.4k|                break;
  159|  12.4k|            }
  160|   174k|            it = result->begin();
  161|   174k|        }
  162|  12.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.08k|    {
  166|  2.08k|        auto it = scn::ranges::begin(source);
  167|  38.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  38.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  38.5k|            auto result = scn::scan_value<T>(
  170|  38.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  38.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.08k, False: 36.4k]
  ------------------
  172|  2.08k|                break;
  173|  2.08k|            }
  174|  36.4k|            it = result->begin();
  175|  36.4k|        }
  176|  2.08k|    }
  177|  2.08k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.08k|{
   90|  2.08k|    using char_type = ranges::range_value_t<Source>;
   91|  2.08k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.08k|    deque.clear();
   93|  2.08k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.08k|              std::back_inserter(deque));
   95|  2.08k|    return deque;
   96|  2.08k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.08k|{
   79|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.08k|        return noncontiguous_buffer;
   81|  2.08k|    }
   82|  2.08k|    else {
   83|  2.08k|        return wnoncontiguous_buffer;
   84|  2.08k|    }
   85|  2.08k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.08k|{
  122|  2.08k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.08k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.08k|    buf.resize(sizeof...(Args));
  125|  2.08k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.08k|    return buf;
  127|  2.08k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.08k|{
  108|  2.08k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.08k|        return format_string_view_buffer;
  110|  2.08k|    }
  111|  2.08k|    else {
  112|  2.08k|        return wformat_string_view_buffer;
  113|  2.08k|    }
  114|  2.08k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.16k|{
  185|  4.16k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.16k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.16k|                                   format_strings);
  188|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  59.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.7k|            auto result = scn::scan<T>(
  139|  59.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.7k|                scn::runtime_format(f));
  141|  59.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 34.7k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  34.7k|            it = result->begin();
  145|  34.7k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  59.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.7k|            auto result = scn::scan<T>(
  154|  59.7k|                global_locale,
  155|  59.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.7k|                scn::runtime_format(f));
  157|  59.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 34.7k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  34.7k|            it = result->begin();
  161|  34.7k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  10.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.9k|            auto result = scn::scan_value<T>(
  170|  10.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 6.77k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  6.77k|            it = result->begin();
  175|  6.77k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  61.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.1k|            auto result = scn::scan<T>(
  139|  61.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.1k|                scn::runtime_format(f));
  141|  61.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 36.1k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  36.1k|            it = result->begin();
  145|  36.1k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  61.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.1k|            auto result = scn::scan<T>(
  154|  61.1k|                global_locale,
  155|  61.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.1k|                scn::runtime_format(f));
  157|  61.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 36.1k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  36.1k|            it = result->begin();
  161|  36.1k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  11.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.4k|            auto result = scn::scan_value<T>(
  170|  11.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 7.23k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  7.23k|            it = result->begin();
  175|  7.23k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  61.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.9k|            auto result = scn::scan<T>(
  139|  61.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.9k|                scn::runtime_format(f));
  141|  61.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 36.9k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  36.9k|            it = result->begin();
  145|  36.9k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  61.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.9k|            auto result = scn::scan<T>(
  154|  61.9k|                global_locale,
  155|  61.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.9k|                scn::runtime_format(f));
  157|  61.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 36.9k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  36.9k|            it = result->begin();
  161|  36.9k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  11.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.6k|            auto result = scn::scan_value<T>(
  170|  11.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 7.47k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  7.47k|            it = result->begin();
  175|  7.47k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  59.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.7k|            auto result = scn::scan<T>(
  139|  59.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.7k|                scn::runtime_format(f));
  141|  59.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 34.7k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  34.7k|            it = result->begin();
  145|  34.7k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  59.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.7k|            auto result = scn::scan<T>(
  154|  59.7k|                global_locale,
  155|  59.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.7k|                scn::runtime_format(f));
  157|  59.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 34.7k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  34.7k|            it = result->begin();
  161|  34.7k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  10.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.9k|            auto result = scn::scan_value<T>(
  170|  10.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 6.75k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  6.75k|            it = result->begin();
  175|  6.75k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  61.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.1k|            auto result = scn::scan<T>(
  139|  61.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.1k|                scn::runtime_format(f));
  141|  61.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 36.1k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  36.1k|            it = result->begin();
  145|  36.1k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  61.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.1k|            auto result = scn::scan<T>(
  154|  61.1k|                global_locale,
  155|  61.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.1k|                scn::runtime_format(f));
  157|  61.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 36.1k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  36.1k|            it = result->begin();
  161|  36.1k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  11.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.3k|            auto result = scn::scan_value<T>(
  170|  11.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 7.22k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  7.22k|            it = result->begin();
  175|  7.22k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.16k|{
  133|       |    // Regular scan
  134|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 24.9k, False: 4.16k]
  ------------------
  135|  24.9k|        auto it = scn::ranges::begin(source);
  136|  61.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.8k|            auto result = scn::scan<T>(
  139|  61.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.8k|                scn::runtime_format(f));
  141|  61.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 24.9k, False: 36.9k]
  ------------------
  142|  24.9k|                break;
  143|  24.9k|            }
  144|  36.9k|            it = result->begin();
  145|  36.9k|        }
  146|  24.9k|    }
  147|       |
  148|       |    // scan localized
  149|  24.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 24.9k, False: 4.16k]
  ------------------
  150|  24.9k|        auto it = scn::ranges::begin(source);
  151|  61.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.8k|            auto result = scn::scan<T>(
  154|  61.8k|                global_locale,
  155|  61.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.8k|                scn::runtime_format(f));
  157|  61.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 24.9k, False: 36.9k]
  ------------------
  158|  24.9k|                break;
  159|  24.9k|            }
  160|  36.9k|            it = result->begin();
  161|  36.9k|        }
  162|  24.9k|    }
  163|       |
  164|       |    // scan_value
  165|  4.16k|    {
  166|  4.16k|        auto it = scn::ranges::begin(source);
  167|  11.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.6k|            auto result = scn::scan_value<T>(
  170|  11.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.16k, False: 7.46k]
  ------------------
  172|  4.16k|                break;
  173|  4.16k|            }
  174|  7.46k|            it = result->begin();
  175|  7.46k|        }
  176|  4.16k|    }
  177|  4.16k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.16k|{
   90|  4.16k|    using char_type = ranges::range_value_t<Source>;
   91|  4.16k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.16k|    deque.clear();
   93|  4.16k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.16k|              std::back_inserter(deque));
   95|  4.16k|    return deque;
   96|  4.16k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.16k|{
   79|  4.16k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.16k|        return noncontiguous_buffer;
   81|  4.16k|    }
   82|  4.16k|    else {
   83|  4.16k|        return wnoncontiguous_buffer;
   84|  4.16k|    }
   85|  4.16k|}

