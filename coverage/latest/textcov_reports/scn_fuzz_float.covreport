_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1039|  3.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  3.18M|{
 4086|  3.18M|    if constexpr (sizeof(U) == 1) {
 4087|  3.18M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  3.18M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  3.18M|{
 4050|  3.18M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  3.18M|    SCN_GCC_COMPAT_PUSH
 4053|  3.18M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  3.18M|    constexpr char lengths[] =
 4055|  3.18M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  3.18M|        "\1\1\1\1\1\1\1\1"
 4057|  3.18M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  3.18M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  3.18M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  3.18M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  3.18M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  3.18M|    SCN_GCC_COMPAT_POP
 4064|  3.18M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  2.81M|{
 4292|  2.81M|    if constexpr (sizeof(CharT) == 1) {
 4293|  2.81M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  2.81M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  2.81M|{
 4105|  2.81M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  2.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  2.81M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  2.81M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  2.81M|    };
 4110|       |
 4111|  2.81M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 2.73M, False: 76.1k]
  ------------------
 4112|  2.73M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 707, False: 2.73M]
  ------------------
 4113|    707|            SCN_UNLIKELY_ATTR
 4114|    707|            return invalid_code_point;
 4115|    707|        }
 4116|  2.73M|        return static_cast<char32_t>(input[0]);
 4117|  2.73M|    }
 4118|       |
 4119|  76.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 69.2k, False: 6.92k]
  ------------------
 4120|  69.2k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 142, False: 69.1k]
  ------------------
 4121|    142|            SCN_UNLIKELY_ATTR
 4122|    142|            return invalid_code_point;
 4123|    142|        }
 4124|  69.1k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 7.02k, False: 62.0k]
  ------------------
 4125|  7.02k|            SCN_UNLIKELY_ATTR
 4126|  7.02k|            return invalid_code_point;
 4127|  7.02k|        }
 4128|       |
 4129|  62.0k|        char32_t cp{};
 4130|  62.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  62.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  62.0k|        return cp;
 4133|  69.1k|    }
 4134|       |
 4135|  6.92k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 2.99k, False: 3.93k]
  ------------------
 4136|  2.99k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 185, False: 2.81k]
  ------------------
 4137|    185|            SCN_UNLIKELY_ATTR
 4138|    185|            return invalid_code_point;
 4139|    185|        }
 4140|  2.81k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 600, False: 2.21k]
  ------------------
 4141|  2.81k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 1.30k, False: 902]
  ------------------
 4142|  1.90k|            SCN_UNLIKELY_ATTR
 4143|  1.90k|            return invalid_code_point;
 4144|  1.90k|        }
 4145|       |
 4146|    902|        char32_t cp{};
 4147|    902|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    902|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    902|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    902|        return cp;
 4151|  2.81k|    }
 4152|       |
 4153|  3.93k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 3.93k, False: 0]
  ------------------
 4154|  3.93k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 3.93k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  3.93k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 641, False: 3.28k]
  ------------------
 4159|    641|            SCN_UNLIKELY_ATTR
 4160|    641|            return invalid_code_point;
 4161|    641|        }
 4162|  3.28k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 684, False: 2.60k]
  ------------------
 4163|  3.28k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 905, False: 1.70k]
  ------------------
 4164|  3.28k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 1.25k, False: 442]
  ------------------
 4165|  2.84k|            SCN_UNLIKELY_ATTR
 4166|  2.84k|            return invalid_code_point;
 4167|  2.84k|        }
 4168|       |
 4169|    442|        char32_t cp{};
 4170|    442|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    442|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    442|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    442|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    442|        return cp;
 4175|  3.28k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  81.7k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  81.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  81.7k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  6.49M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  6.49M|    else {
 3984|  6.49M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  6.49M|                                       to_address(first), to_address(last)))};
 3986|  6.49M|    }
 3987|  6.49M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  19.7M|{
  331|  19.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  19.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  19.7M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  28.2M|{
  309|  28.2M|    return p;
  310|  28.2M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  9.75M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  9.75M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  9.75M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  9.75M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  9.75M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  9.75M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  96.2k|    {
 2883|  96.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  96.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  96.2k|    {
 2864|  96.2k|        return decay_copy(t.begin());
 2865|  96.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  11.4M|{
 2108|  11.4M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  11.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  11.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.90M|    {
 2940|  1.90M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.90M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.90M|    {
 2922|  1.90M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.90M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|   139k|{
 9893|   139k|    auto result = make_scan_result<Source, Args...>();
 9894|   139k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   139k|                                   make_scan_args(result->values())));
 9896|   139k|    return result;
 9897|   139k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9848|   308k|{
 9849|   308k|    return scan_result_type<Source, Args...>();
 9850|   308k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   308k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   308k|        : m_value(T{}), m_has_value(true)
  442|   308k|    {
  443|   308k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6692|   308k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   953k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   953k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6466|  1.04M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   308k|{
 9834|   308k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 276k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   276k|    else {
 9838|   276k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   276k|    static_cast<    \
  |  | 1109|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   276k|    }
 9840|   308k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   953k|    {
 1754|   953k|        return has_value();
 1755|   953k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.90M|    {
  505|  1.90M|        return m_has_value;
  506|  1.90M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  93.8k|    {
 1760|  93.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  93.8k|        return this->get_unexpected().error();
 1762|  93.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  93.8k|    {
  488|  93.8k|        return m_unexpected;
  489|  93.8k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  14.7M|    {
  380|  14.7M|        return m_unexpected;
  381|  14.7M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  3.65M|        : m_unexpected(std::forward<Err>(e))
  365|  3.65M|    {
  366|  3.65M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  3.65M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  10.8M|        : m_unexpected(std::forward<Args>(args)...)
  374|  10.8M|    {
  375|  10.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  10.8M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.23M|    {
  505|  1.23M|        return m_has_value;
  506|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   862k|    {
  471|   862k|        return m_value;
  472|   862k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   563k|{
  411|   563k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   563k|        T(std::forward<Args>(args)...);
  413|   563k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   859k|    {
 6567|   859k|        m_range = std::forward<Other>(r);
 6568|   859k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   859k|    {
 1809|   859k|        return value();
 1810|   859k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   859k|    {
 1783|   859k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   859k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   859k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   859k|        return this->get_value();
 1785|   859k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   859k|    {
  471|   859k|        return m_value;
  472|   859k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|   430k|{
 9655|   430k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   430k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   430k|{
 9592|   430k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   430k|    auto result = vscan_impl(buffer, format, args);
 9595|   430k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.3k, False: 386k]
  |  |  ------------------
  ------------------
 9596|  43.3k|        return unexpected(result.error());
 9597|  43.3k|    }
 9598|   386k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   430k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   953k|{
 5399|   953k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   953k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   953k|                  "\n"
 5403|   953k|                  "Unsupported range type given as input to a scanning "
 5404|   953k|                  "function.\n"
 5405|   953k|                  "A range needs to have a character type (value type) "
 5406|   953k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   953k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   953k|                  "to be included.\n"
 5409|   953k|                  "See the scnlib documentation for more details.");
 5410|   953k|    static_assert(
 5411|   953k|        !std::is_same_v<T, custom_char_traits>,
 5412|   953k|        "\n"
 5413|   953k|        "Unsupported range type given as input to a scanning "
 5414|   953k|        "function.\n"
 5415|   953k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   953k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   953k|        "not supported.");
 5418|   953k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   953k|                  "\n"
 5420|   953k|                  "Unsupported range type given as input to a scanning "
 5421|   953k|                  "function.\n"
 5422|   953k|                  "file_marker_found cannot be used as an "
 5423|   953k|                  "source range type to scn::scan.\n"
 5424|   953k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   953k|                  "and do not provide an explicit source range, "
 5426|   953k|                  "or use scn::scan with a FILE* directly.");
 5427|   953k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   953k|                  "\n"
 5429|   953k|                  "Unsupported range type given as input to a scanning "
 5430|   953k|                  "function.\n"
 5431|   953k|                  "In order to be scannable, a range needs to satisfy "
 5432|   953k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   953k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   953k|                  "\n"
 5435|   953k|                  "Unsupported range type given as input to a scanning "
 5436|   953k|                  "function.\n"
 5437|   953k|                  "A range needs to model forward_range and have a valid "
 5438|   953k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   953k|                  "Examples of scannable ranges are std::string, "
 5440|   953k|                  "std::string_view, "
 5441|   953k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   953k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   953k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   953k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   953k|{
 5338|   953k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   953k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   953k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   953k|    {
 3014|   953k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   953k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   953k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   953k|    {
 2995|   953k|        return t.data();
 2996|   953k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   953k|    {
 3397|   953k|        return detail::to_address(ranges::begin(derived()));
 3398|   953k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  8.49M|{
  331|  8.49M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  8.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  8.49M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.81M|    {
 2883|  1.81M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.81M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.81M|    {
 2864|  1.81M|        return decay_copy(t.begin());
 2865|  1.81M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  24.2M|    {
 3494|  24.2M|        return m_iterator;
 3495|  24.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   953k|    {
 3353|   953k|        return static_cast<const D&>(*this);
 3354|   953k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   953k|    {
 3089|   953k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   953k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   953k|    {
 3055|   953k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   953k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   953k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  5.45M|{
 2108|  5.45M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.45M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  5.93M|    {
 3510|  5.93M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  5.93M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  13.6M|    {
 1754|  13.6M|        return has_value();
 1755|  13.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  24.5M|    {
  505|  24.5M|        return m_has_value;
  506|  24.5M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|  1.14M|    {
 1760|  1.14M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.14M|        return this->get_unexpected().error();
 1762|  1.14M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.14M|    {
  488|  1.14M|        return m_unexpected;
  489|  1.14M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  93.8k|        : base(unexpect, std::move(e.error())),
 1630|  93.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  93.8k|    {
 1632|  93.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  93.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  93.8k|          m_has_value(false)
  466|  93.8k|    {
  467|  93.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   953k|    {
 1330|   953k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   859k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   859k|                      ranges::iterator_t<SourceRange>>) {
 6799|   859k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   859k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  6.73M|    {
 2883|  6.73M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  6.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  6.73M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  6.73M|    {
 2864|  6.73M|        return decay_copy(t.begin());
 2865|  6.73M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   859k|{
 6784|   859k|    return ranges::end(source);
 6785|   859k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   859k|    {
 2940|   859k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   859k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   859k|    {
 2922|   859k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   859k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   859k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  11.1M|    {
 3498|  11.1M|        return m_sentinel;
 3499|  11.1M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  4.18M|    {
 1809|  4.18M|        return value();
 1810|  4.18M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  9.66M|    {
 1783|  9.66M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  9.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  9.66M|        return this->get_value();
 1785|  9.66M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  9.66M|    {
  471|  9.66M|        return m_value;
  472|  9.66M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   859k|        : base(std::in_place, std::forward<U>(val)),
 1584|   859k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   859k|    {
 1586|   859k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   859k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   859k|    {
  457|   859k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   278k|    {
 8855|   278k|        return m_str;
 8856|   278k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   597k|{
 6196|   597k|    detail::check_scan_arg_types<Args...>();
 6197|   597k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   597k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5910|  1.04M|{
 5911|  1.04M|    constexpr bool default_constructible_constraint =
 5912|  1.04M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  1.04M|    static_assert(default_constructible_constraint,
 5914|  1.04M|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  1.04M|    constexpr bool destructible_constraint =
 5917|  1.04M|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  1.04M|    static_assert(destructible_constraint,
 5919|  1.04M|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  1.04M|    constexpr bool non_reference_constraint =
 5922|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  1.04M|    static_assert(non_reference_constraint,
 5924|  1.04M|                  "Scan argument types must not be references");
 5925|       |
 5926|  1.04M|    constexpr bool movable_constraint =
 5927|  1.04M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  1.04M|    static_assert(movable_constraint,
 5929|  1.04M|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  1.04M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  1.04M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  1.04M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   597k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   597k|    {
 6173|   597k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   597k|    {
 6181|   597k|        return {detail::make_arg<
 6182|   597k|            kind, Context,
 6183|   597k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   597k|                                 typename Context::char_type>::value>(args)...};
 6185|   597k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   597k|{
 5961|   597k|    return make_value<Context>(value).ref_value;
 5962|   597k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5895|   660k|{
 5896|   660k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   660k|                                  needs_context_tag>) {
 5900|   660k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   660k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5702|   660k|    {                                                                        \
 5703|   660k|        return val;                                                          \
 5704|   660k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5864|  1.04M|{
 5865|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  1.04M|    constexpr bool scannable_char =
 5869|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  1.04M|    static_assert(scannable_char,
 5871|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5872|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  1.04M|    constexpr bool scannable_const =
 5875|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  1.04M|    constexpr bool scannable_disabled =
 5879|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  1.04M|    static_assert(scannable_disabled,
 5881|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5882|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  1.04M|    static_assert(
 5886|  1.04M|        scannable,
 5887|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  1.04M|    return arg_value{arg};
 5891|  1.04M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5645|  1.04M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  1.04M|    {
 5647|  1.04M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6475|   948k|    {
 6476|   948k|        return m_values;
 6477|   948k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   597k|        : basic_scan_args(store.desc, store.args.data())
 6222|   597k|    {
 6223|   597k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  1.85M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.85M|    {
 6275|  1.85M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  9.63M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  9.63M|    static_cast<    \
  |  | 1109|  9.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  9.63M|    static_cast<    \
  |  | 1109|  9.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  9.63M|    {
 3480|  9.63M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  1.85M|{
 8532|  1.85M|    return s;
 8533|  1.85M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  1.85M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   278k|        : m_str(r.str)
 8850|   278k|    {
 8851|   278k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   308k|    {
 1754|   308k|        return has_value();
 1755|   308k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   862k|    {
 1829|   862k|        return &value();
 1830|   862k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   862k|    {
 1783|   862k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   862k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   862k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   862k|        return this->get_value();
 1785|   862k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   859k|    {
 6556|   859k|        return ranges::begin(m_range);
 6557|   859k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|   139k|{
 9962|   139k|    auto result = make_scan_result<Source, Args...>();
 9963|   139k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   139k|                                   make_scan_args(result->values())));
 9965|   139k|    return result;
 9966|   139k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|   430k|{
 9673|   430k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   430k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   430k|{
 9608|   430k|#if !SCN_DISABLE_LOCALE
 9609|   430k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   430k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   430k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   430k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   430k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.3k, False: 386k]
  |  |  ------------------
  ------------------
 9616|  43.3k|        return unexpected(result.error());
 9617|  43.3k|    }
 9618|   386k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   430k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  30.0k|{
10003|  30.0k|    auto result = make_scan_result<Source, T>();
10004|  30.0k|    fill_scan_result(
10005|  30.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  30.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  30.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  30.0k|    return result;
10008|  30.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  93.5k|{
 9686|  93.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  93.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  93.5k|{
 9632|  93.5k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  93.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  93.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.22k, False: 86.3k]
  |  |  ------------------
  ------------------
 9636|  7.22k|        return unexpected(result.error());
 9637|  7.22k|    }
 9638|  86.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  86.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  93.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  62.5k|{
 5946|  62.5k|    check_scan_arg_types<T>();
 5947|       |
 5948|  62.5k|    basic_scan_arg<Context> arg;
 5949|  62.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  62.5k|    arg.m_value = make_value<Context>(value);
 5951|  62.5k|    return arg;
 5952|  62.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  2.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  3.30M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  95.0k|    {
 6498|  95.0k|        return std::get<0>(m_values);
 6499|  95.0k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|   144k|{
 9893|   144k|    auto result = make_scan_result<Source, Args...>();
 9894|   144k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   144k|                                   make_scan_args(result->values())));
 9896|   144k|    return result;
 9897|   144k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9848|   320k|{
 9849|   320k|    return scan_result_type<Source, Args...>();
 9850|   320k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   320k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   320k|        : m_value(T{}), m_has_value(true)
  442|   320k|    {
  443|   320k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|   320k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|  1.12M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   320k|{
 9834|   320k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 288k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   288k|    else {
 9838|   288k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   288k|    static_cast<    \
  |  | 1109|   288k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   288k|    }
 9840|   320k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.28M|    {
  505|  1.28M|        return m_has_value;
  506|  1.28M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   898k|    {
  471|   898k|        return m_value;
  472|   898k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   288k|    {
 8855|   288k|        return m_str;
 8856|   288k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   625k|{
 6196|   625k|    detail::check_scan_arg_types<Args...>();
 6197|   625k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   625k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|  1.12M|{
 5911|  1.12M|    constexpr bool default_constructible_constraint =
 5912|  1.12M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  1.12M|    static_assert(default_constructible_constraint,
 5914|  1.12M|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  1.12M|    constexpr bool destructible_constraint =
 5917|  1.12M|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  1.12M|    static_assert(destructible_constraint,
 5919|  1.12M|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  1.12M|    constexpr bool non_reference_constraint =
 5922|  1.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  1.12M|    static_assert(non_reference_constraint,
 5924|  1.12M|                  "Scan argument types must not be references");
 5925|       |
 5926|  1.12M|    constexpr bool movable_constraint =
 5927|  1.12M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  1.12M|    static_assert(movable_constraint,
 5929|  1.12M|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  1.12M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  1.12M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  1.12M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   625k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   625k|    {
 6173|   625k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   625k|    {
 6181|   625k|        return {detail::make_arg<
 6182|   625k|            kind, Context,
 6183|   625k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   625k|                                 typename Context::char_type>::value>(args)...};
 6185|   625k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   625k|{
 5961|   625k|    return make_value<Context>(value).ref_value;
 5962|   625k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|   691k|{
 5896|   691k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   691k|                                  needs_context_tag>) {
 5900|   691k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   691k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|   691k|    {                                                                        \
 5703|   691k|        return val;                                                          \
 5704|   691k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|  1.12M|{
 5865|  1.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  1.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  1.12M|    constexpr bool scannable_char =
 5869|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  1.12M|    static_assert(scannable_char,
 5871|  1.12M|                  "Cannot scan an argument of an unsupported character "
 5872|  1.12M|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  1.12M|    constexpr bool scannable_const =
 5875|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  1.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  1.12M|    constexpr bool scannable_disabled =
 5879|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  1.12M|    static_assert(scannable_disabled,
 5881|  1.12M|                  "Cannot scan an argument that has been disabled by "
 5882|  1.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  1.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  1.12M|    static_assert(
 5886|  1.12M|        scannable,
 5887|  1.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  1.12M|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  1.12M|    return arg_value{arg};
 5891|  1.12M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|  1.12M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  1.12M|    {
 5647|  1.12M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|  1.01M|    {
 6476|  1.01M|        return m_values;
 6477|  1.01M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   625k|        : basic_scan_args(store.desc, store.args.data())
 6222|   625k|    {
 6223|   625k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   288k|        : m_str(r.str)
 8850|   288k|    {
 8851|   288k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   320k|    {
 1754|   320k|        return has_value();
 1755|   320k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   898k|    {
 1829|   898k|        return &value();
 1830|   898k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   898k|    {
 1783|   898k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   898k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   898k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   898k|        return this->get_value();
 1785|   898k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|   144k|{
 9962|   144k|    auto result = make_scan_result<Source, Args...>();
 9963|   144k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   144k|                                   make_scan_args(result->values())));
 9965|   144k|    return result;
 9966|   144k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  31.4k|{
10003|  31.4k|    auto result = make_scan_result<Source, T>();
10004|  31.4k|    fill_scan_result(
10005|  31.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  31.4k|                            detail::make_arg<scan_context>(result->value())));
10007|  31.4k|    return result;
10008|  31.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  66.0k|{
 5946|  66.0k|    check_scan_arg_types<T>();
 5947|       |
 5948|  66.0k|    basic_scan_arg<Context> arg;
 5949|  66.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  66.0k|    arg.m_value = make_value<Context>(value);
 5951|  66.0k|    return arg;
 5952|  66.0k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   105k|    {
 6498|   105k|        return std::get<0>(m_values);
 6499|   105k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|   146k|{
 9893|   146k|    auto result = make_scan_result<Source, Args...>();
 9894|   146k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   146k|                                   make_scan_args(result->values())));
 9896|   146k|    return result;
 9897|   146k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9848|   325k|{
 9849|   325k|    return scan_result_type<Source, Args...>();
 9850|   325k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   325k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   325k|        : m_value(T{}), m_has_value(true)
  442|   325k|    {
  443|   325k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6692|   325k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6466|  1.13M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   325k|{
 9834|   325k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 293k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   293k|    else {
 9838|   293k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   293k|    static_cast<    \
  |  | 1109|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   293k|    }
 9840|   325k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.30M|    {
  505|  1.30M|        return m_has_value;
  506|  1.30M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   913k|    {
  471|   913k|        return m_value;
  472|   913k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   293k|    {
 8855|   293k|        return m_str;
 8856|   293k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   634k|{
 6196|   634k|    detail::check_scan_arg_types<Args...>();
 6197|   634k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   634k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5910|  1.13M|{
 5911|  1.13M|    constexpr bool default_constructible_constraint =
 5912|  1.13M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  1.13M|    static_assert(default_constructible_constraint,
 5914|  1.13M|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  1.13M|    constexpr bool destructible_constraint =
 5917|  1.13M|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  1.13M|    static_assert(destructible_constraint,
 5919|  1.13M|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  1.13M|    constexpr bool non_reference_constraint =
 5922|  1.13M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  1.13M|    static_assert(non_reference_constraint,
 5924|  1.13M|                  "Scan argument types must not be references");
 5925|       |
 5926|  1.13M|    constexpr bool movable_constraint =
 5927|  1.13M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  1.13M|    static_assert(movable_constraint,
 5929|  1.13M|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  1.13M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  1.13M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  1.13M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   634k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   634k|    {
 6173|   634k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   634k|    {
 6181|   634k|        return {detail::make_arg<
 6182|   634k|            kind, Context,
 6183|   634k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   634k|                                 typename Context::char_type>::value>(args)...};
 6185|   634k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   634k|{
 5961|   634k|    return make_value<Context>(value).ref_value;
 5962|   634k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5895|   701k|{
 5896|   701k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   701k|                                  needs_context_tag>) {
 5900|   701k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   701k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   701k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5702|   701k|    {                                                                        \
 5703|   701k|        return val;                                                          \
 5704|   701k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5864|  1.13M|{
 5865|  1.13M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  1.13M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  1.13M|    constexpr bool scannable_char =
 5869|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  1.13M|    static_assert(scannable_char,
 5871|  1.13M|                  "Cannot scan an argument of an unsupported character "
 5872|  1.13M|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  1.13M|    constexpr bool scannable_const =
 5875|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  1.13M|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  1.13M|    constexpr bool scannable_disabled =
 5879|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  1.13M|    static_assert(scannable_disabled,
 5881|  1.13M|                  "Cannot scan an argument that has been disabled by "
 5882|  1.13M|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  1.13M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  1.13M|    static_assert(
 5886|  1.13M|        scannable,
 5887|  1.13M|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  1.13M|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  1.13M|    return arg_value{arg};
 5891|  1.13M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5645|  1.13M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  1.13M|    {
 5647|  1.13M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6475|  1.03M|    {
 6476|  1.03M|        return m_values;
 6477|  1.03M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   634k|        : basic_scan_args(store.desc, store.args.data())
 6222|   634k|    {
 6223|   634k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   293k|        : m_str(r.str)
 8850|   293k|    {
 8851|   293k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   325k|    {
 1754|   325k|        return has_value();
 1755|   325k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   913k|    {
 1829|   913k|        return &value();
 1830|   913k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   913k|    {
 1783|   913k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   913k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   913k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   913k|        return this->get_value();
 1785|   913k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|   146k|{
 9962|   146k|    auto result = make_scan_result<Source, Args...>();
 9963|   146k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   146k|                                   make_scan_args(result->values())));
 9965|   146k|    return result;
 9966|   146k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  32.1k|{
10003|  32.1k|    auto result = make_scan_result<Source, T>();
10004|  32.1k|    fill_scan_result(
10005|  32.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  32.1k|                            detail::make_arg<scan_context>(result->value())));
10007|  32.1k|    return result;
10008|  32.1k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  67.2k|{
 5946|  67.2k|    check_scan_arg_types<T>();
 5947|       |
 5948|  67.2k|    basic_scan_arg<Context> arg;
 5949|  67.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  67.2k|    arg.m_value = make_value<Context>(value);
 5951|  67.2k|    return arg;
 5952|  67.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   107k|    {
 6498|   107k|        return std::get<0>(m_values);
 6499|   107k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  93.8k|    {
 2883|  93.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  93.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  93.8k|    {
 2864|  93.8k|        return decay_copy(t.begin());
 2865|  93.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  48.4M|{
 2108|  48.4M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  48.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  48.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.20M|    {
 2940|  2.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.20M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.20M|    {
 2922|  2.20M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.20M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|   159k|{
 9893|   159k|    auto result = make_scan_result<Source, Args...>();
 9894|   159k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   159k|                                   make_scan_args(result->values())));
 9896|   159k|    return result;
 9897|   159k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9848|   352k|{
 9849|   352k|    return scan_result_type<Source, Args...>();
 9850|   352k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   352k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   352k|        : m_value(T{}), m_has_value(true)
  442|   352k|    {
  443|   352k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6692|   352k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|  1.10M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|  1.10M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   352k|{
 9834|   352k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 320k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   320k|    else {
 9838|   320k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   320k|    static_cast<    \
  |  | 1109|   320k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   320k|    }
 9840|   352k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|  1.10M|    {
 1754|  1.10M|        return has_value();
 1755|  1.10M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.20M|    {
  505|  2.20M|        return m_has_value;
  506|  2.20M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  93.8k|    {
 1760|  93.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  93.8k|        return this->get_unexpected().error();
 1762|  93.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  93.8k|    {
  488|  93.8k|        return m_unexpected;
  489|  93.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.40M|    {
  505|  1.40M|        return m_has_value;
  506|  1.40M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   993k|    {
  471|   993k|        return m_value;
  472|   993k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  1.00M|    {
 6567|  1.00M|        m_range = std::forward<Other>(r);
 6568|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  1.00M|    {
 1809|  1.00M|        return value();
 1810|  1.00M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  1.00M|    {
 1783|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.00M|        return this->get_value();
 1785|  1.00M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.00M|    {
  471|  1.00M|        return m_value;
  472|  1.00M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|   499k|{
 9655|   499k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   499k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   499k|{
 9592|   499k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   499k|    auto result = vscan_impl(buffer, format, args);
 9595|   499k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.3k, False: 455k]
  |  |  ------------------
  ------------------
 9596|  43.3k|        return unexpected(result.error());
 9597|  43.3k|    }
 9598|   455k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   499k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|  1.10M|{
 5399|  1.10M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  1.10M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  1.10M|                  "\n"
 5403|  1.10M|                  "Unsupported range type given as input to a scanning "
 5404|  1.10M|                  "function.\n"
 5405|  1.10M|                  "A range needs to have a character type (value type) "
 5406|  1.10M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  1.10M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  1.10M|                  "to be included.\n"
 5409|  1.10M|                  "See the scnlib documentation for more details.");
 5410|  1.10M|    static_assert(
 5411|  1.10M|        !std::is_same_v<T, custom_char_traits>,
 5412|  1.10M|        "\n"
 5413|  1.10M|        "Unsupported range type given as input to a scanning "
 5414|  1.10M|        "function.\n"
 5415|  1.10M|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  1.10M|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  1.10M|        "not supported.");
 5418|  1.10M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  1.10M|                  "\n"
 5420|  1.10M|                  "Unsupported range type given as input to a scanning "
 5421|  1.10M|                  "function.\n"
 5422|  1.10M|                  "file_marker_found cannot be used as an "
 5423|  1.10M|                  "source range type to scn::scan.\n"
 5424|  1.10M|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  1.10M|                  "and do not provide an explicit source range, "
 5426|  1.10M|                  "or use scn::scan with a FILE* directly.");
 5427|  1.10M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  1.10M|                  "\n"
 5429|  1.10M|                  "Unsupported range type given as input to a scanning "
 5430|  1.10M|                  "function.\n"
 5431|  1.10M|                  "In order to be scannable, a range needs to satisfy "
 5432|  1.10M|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  1.10M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  1.10M|                  "\n"
 5435|  1.10M|                  "Unsupported range type given as input to a scanning "
 5436|  1.10M|                  "function.\n"
 5437|  1.10M|                  "A range needs to model forward_range and have a valid "
 5438|  1.10M|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  1.10M|                  "Examples of scannable ranges are std::string, "
 5440|  1.10M|                  "std::string_view, "
 5441|  1.10M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  1.10M|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  1.10M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  1.10M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|  1.10M|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|  1.10M|    else {
 5384|  1.10M|        return make_forward_scan_buffer(r);
 5385|  1.10M|    }
 5386|  1.10M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|  1.10M|{
 5203|  1.10M|    return basic_scan_forward_buffer_impl(range);
 5204|  1.10M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|  1.10M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|  1.10M|          m_cursor(ranges::begin(*m_range))
 4784|  1.10M|    {
 4785|  1.10M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|  1.10M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|  1.10M|    {
 4756|  1.10M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|  1.10M|        : m_current_view(sv), m_is_contiguous(false)
 4446|  1.10M|    {
 4447|  1.10M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|  1.10M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.10M|    {
 2883|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.10M|    {
 2864|  2.10M|        return decay_copy(t.begin());
 2865|  2.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|  3.11M|    {
 3494|  3.11M|        return m_iterator;
 3495|  3.11M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  14.2M|    {
 4789|  14.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 292k, False: 13.9M]
  ------------------
 4790|   292k|            return false;
 4791|   292k|        }
 4792|  13.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  13.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  13.9M|        }
 4795|  13.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 12.8M, False: 1.08M]
  ------------------
 4796|  12.8M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  12.8M|                                          this->m_current_view.begin(),
 4798|  12.8M|                                          this->m_current_view.end());
 4799|  12.8M|        }
 4800|  13.9M|        m_latest = *m_cursor;
 4801|  13.9M|        ++m_cursor;
 4802|  13.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  13.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  13.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  13.9M|        }
 4806|  13.9M|        return true;
 4807|  14.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  42.0M|    {
 2940|  42.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  42.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  42.0M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  42.0M|    {
 2922|  42.0M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  42.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  42.0M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  43.0M|    {
 3498|  43.0M|        return m_sentinel;
 3499|  43.0M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|  1.10M|    {
 4364|  1.10M|        SCN_UNUSED(position);
  ------------------
  |  | 1089|  1.10M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|  1.10M|        return true;
 4366|  1.10M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  93.8k|        : base(unexpect, std::move(e.error())),
 1630|  93.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  93.8k|    {
 1632|  93.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  93.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  93.8k|          m_has_value(false)
  466|  93.8k|    {
  467|  93.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.10M|    {
 1330|  1.10M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  1.00M|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  1.00M|                      ranges::iterator_t<SourceRange>>) {
 6799|  1.00M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  1.00M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.00M|    {
 2883|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.00M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.00M|    {
 2864|  1.00M|        return decay_copy(t.begin());
 2865|  1.00M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|  1.00M|{
 6784|  1.00M|    return ranges::end(source);
 6785|  1.00M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.00M|    {
 2940|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.00M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.00M|    {
 2922|  1.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.00M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  1.00M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.00M|    {
 1586|  1.00M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  1.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.00M|    {
  457|  1.00M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   319k|    {
 8855|   319k|        return m_str;
 8856|   319k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  2.10M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.10M|    static_cast<    \
  |  | 1109|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.10M|    static_cast<    \
  |  | 1109|  2.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  2.10M|    {
 3480|  2.10M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   319k|        : m_str(r.str)
 8850|   319k|    {
 8851|   319k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   352k|    {
 1754|   352k|        return has_value();
 1755|   352k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   993k|    {
 1829|   993k|        return &value();
 1830|   993k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   993k|    {
 1783|   993k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   993k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   993k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   993k|        return this->get_value();
 1785|   993k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|  1.00M|    {
 6556|  1.00M|        return ranges::begin(m_range);
 6557|  1.00M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|   159k|{
 9962|   159k|    auto result = make_scan_result<Source, Args...>();
 9963|   159k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   159k|                                   make_scan_args(result->values())));
 9965|   159k|    return result;
 9966|   159k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|   499k|{
 9673|   499k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   499k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   499k|{
 9608|   499k|#if !SCN_DISABLE_LOCALE
 9609|   499k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   499k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   499k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   499k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   499k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.3k, False: 455k]
  |  |  ------------------
  ------------------
 9616|  43.3k|        return unexpected(result.error());
 9617|  43.3k|    }
 9618|   455k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   455k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   499k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  32.5k|{
10003|  32.5k|    auto result = make_scan_result<Source, T>();
10004|  32.5k|    fill_scan_result(
10005|  32.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  32.5k|                            detail::make_arg<scan_context>(result->value())));
10007|  32.5k|    return result;
10008|  32.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|   102k|{
 9686|   102k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|   102k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|   102k|{
 9632|   102k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|   102k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.22k, False: 95.0k]
  |  |  ------------------
  ------------------
 9636|  7.22k|        return unexpected(result.error());
 9637|  7.22k|    }
 9638|  95.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  95.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|   102k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|   168k|{
 9893|   168k|    auto result = make_scan_result<Source, Args...>();
 9894|   168k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   168k|                                   make_scan_args(result->values())));
 9896|   168k|    return result;
 9897|   168k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9848|   371k|{
 9849|   371k|    return scan_result_type<Source, Args...>();
 9850|   371k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   371k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   371k|        : m_value(T{}), m_has_value(true)
  442|   371k|    {
  443|   371k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6692|   371k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   371k|{
 9834|   371k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 340k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   340k|    else {
 9838|   340k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   340k|    static_cast<    \
  |  | 1109|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   340k|    }
 9840|   371k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.48M|    {
  505|  1.48M|        return m_has_value;
  506|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.05M|    {
  471|  1.05M|        return m_value;
  472|  1.05M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   337k|    {
 8855|   337k|        return m_str;
 8856|   337k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   337k|        : m_str(r.str)
 8850|   337k|    {
 8851|   337k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   371k|    {
 1754|   371k|        return has_value();
 1755|   371k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|  1.05M|    {
 1829|  1.05M|        return &value();
 1830|  1.05M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  1.05M|    {
 1783|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.05M|        return this->get_value();
 1785|  1.05M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|   168k|{
 9962|   168k|    auto result = make_scan_result<Source, Args...>();
 9963|   168k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   168k|                                   make_scan_args(result->values())));
 9965|   168k|    return result;
 9966|   168k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  34.6k|{
10003|  34.6k|    auto result = make_scan_result<Source, T>();
10004|  34.6k|    fill_scan_result(
10005|  34.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  34.6k|                            detail::make_arg<scan_context>(result->value())));
10007|  34.6k|    return result;
10008|  34.6k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|   170k|{
 9893|   170k|    auto result = make_scan_result<Source, Args...>();
 9894|   170k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|   170k|                                   make_scan_args(result->values())));
 9896|   170k|    return result;
 9897|   170k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9848|   376k|{
 9849|   376k|    return scan_result_type<Source, Args...>();
 9850|   376k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   376k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   376k|        : m_value(T{}), m_has_value(true)
  442|   376k|    {
  443|   376k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6692|   376k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   376k|{
 9834|   376k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.2k, False: 345k]
  |  |  ------------------
  ------------------
 9835|  31.2k|        out = unexpected(in.error());
 9836|  31.2k|    }
 9837|   345k|    else {
 9838|   345k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   345k|    static_cast<    \
  |  | 1109|   345k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   345k|    }
 9840|   376k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  31.2k|        : base(unexpect, std::move(e.error())),
 1630|  31.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  31.2k|    {
 1632|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  31.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  31.2k|          m_has_value(false)
  466|  31.2k|    {
  467|  31.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  31.2k|    {
 1330|  31.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  31.2k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  31.2k|    {
  917|  31.2k|        assign_common(std::move(other));
  918|  31.2k|        return *this;
  919|  31.2k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  31.2k|    {
  964|  31.2k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 31.2k, False: 0]
  ------------------
  965|  31.2k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 31.2k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  31.2k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  31.2k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.50M|    {
  505|  1.50M|        return m_has_value;
  506|  1.50M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.06M|    {
  471|  1.06M|        return m_value;
  472|  1.06M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  31.2k|    {
 1060|  31.2k|        this->destroy_value();
 1061|  31.2k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  31.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  31.2k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  31.2k|    {
  519|  31.2k|        scn::detail::construct_at(&get_unexpected(),
  520|  31.2k|                                  std::forward<Args>(args)...);
  521|  31.2k|        m_has_value = false;
  522|  31.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  31.2k|    {
  488|  31.2k|        return m_unexpected;
  489|  31.2k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  31.2k|    {
  496|  31.2k|        return std::move(m_unexpected);
  497|  31.2k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   341k|    {
 8855|   341k|        return m_str;
 8856|   341k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   341k|        : m_str(r.str)
 8850|   341k|    {
 8851|   341k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   376k|    {
 1754|   376k|        return has_value();
 1755|   376k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|  1.06M|    {
 1829|  1.06M|        return &value();
 1830|  1.06M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|  1.06M|    {
 1783|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.06M|        return this->get_value();
 1785|  1.06M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|   170k|{
 9962|   170k|    auto result = make_scan_result<Source, Args...>();
 9963|   170k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|   170k|                                   make_scan_args(result->values())));
 9965|   170k|    return result;
 9966|   170k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  35.1k|{
10003|  35.1k|    auto result = make_scan_result<Source, T>();
10004|  35.1k|    fill_scan_result(
10005|  35.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  35.1k|                            detail::make_arg<scan_context>(result->value())));
10007|  35.1k|    return result;
10008|  35.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   192k|    {
 2883|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   192k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   192k|    {
 2864|   192k|        return decay_copy(t.begin());
 2865|   192k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  5.05M|{
 2108|  5.05M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.05M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.25M|    {
 2940|  1.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.25M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.25M|    {
 2922|  1.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.25M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9848|   191k|{
 9849|   191k|    return scan_result_type<Source, Args...>();
 9850|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   191k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   191k|        : m_value(T{}), m_has_value(true)
  442|   191k|    {
  443|   191k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6692|   191k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   625k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   625k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   191k|{
 9834|   191k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 129k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   129k|    else {
 9838|   129k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   129k|    static_cast<    \
  |  | 1109|   129k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   129k|    }
 9840|   191k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   625k|    {
 1754|   625k|        return has_value();
 1755|   625k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   187k|    {
 1760|   187k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   187k|        return this->get_unexpected().error();
 1762|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   187k|    {
  488|   187k|        return m_unexpected;
  489|   187k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   766k|    {
  505|   766k|        return m_has_value;
  506|   766k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   449k|    {
  471|   449k|        return m_value;
  472|   449k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|   437k|    {
 6567|   437k|        m_range = std::forward<Other>(r);
 6568|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   437k|    {
 1809|   437k|        return value();
 1810|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   437k|    {
 1783|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   437k|        return this->get_value();
 1785|   437k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   437k|    {
  471|   437k|        return m_value;
  472|   437k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   284k|{
 9592|   284k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   284k|    auto result = vscan_impl(buffer, format, args);
 9595|   284k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 86.6k, False: 198k]
  |  |  ------------------
  ------------------
 9596|  86.6k|        return unexpected(result.error());
 9597|  86.6k|    }
 9598|   198k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   284k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|   625k|{
 5399|   625k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   625k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   625k|                  "\n"
 5403|   625k|                  "Unsupported range type given as input to a scanning "
 5404|   625k|                  "function.\n"
 5405|   625k|                  "A range needs to have a character type (value type) "
 5406|   625k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   625k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   625k|                  "to be included.\n"
 5409|   625k|                  "See the scnlib documentation for more details.");
 5410|   625k|    static_assert(
 5411|   625k|        !std::is_same_v<T, custom_char_traits>,
 5412|   625k|        "\n"
 5413|   625k|        "Unsupported range type given as input to a scanning "
 5414|   625k|        "function.\n"
 5415|   625k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   625k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   625k|        "not supported.");
 5418|   625k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   625k|                  "\n"
 5420|   625k|                  "Unsupported range type given as input to a scanning "
 5421|   625k|                  "function.\n"
 5422|   625k|                  "file_marker_found cannot be used as an "
 5423|   625k|                  "source range type to scn::scan.\n"
 5424|   625k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   625k|                  "and do not provide an explicit source range, "
 5426|   625k|                  "or use scn::scan with a FILE* directly.");
 5427|   625k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   625k|                  "\n"
 5429|   625k|                  "Unsupported range type given as input to a scanning "
 5430|   625k|                  "function.\n"
 5431|   625k|                  "In order to be scannable, a range needs to satisfy "
 5432|   625k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   625k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   625k|                  "\n"
 5435|   625k|                  "Unsupported range type given as input to a scanning "
 5436|   625k|                  "function.\n"
 5437|   625k|                  "A range needs to model forward_range and have a valid "
 5438|   625k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   625k|                  "Examples of scannable ranges are std::string, "
 5440|   625k|                  "std::string_view, "
 5441|   625k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   625k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   625k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   625k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   625k|{
 5338|   625k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   625k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   625k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   625k|    {
 3014|   625k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   625k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   625k|    {
 2995|   625k|        return t.data();
 2996|   625k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|   625k|    {
 3397|   625k|        return detail::to_address(ranges::begin(derived()));
 3398|   625k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  2.95M|{
  331|  2.95M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  2.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  2.95M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  2.95M|{
  309|  2.95M|    return p;
  310|  2.95M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.06M|    {
 2883|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.06M|    {
 2864|  1.06M|        return decay_copy(t.begin());
 2865|  1.06M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  25.6M|    {
 3494|  25.6M|        return m_iterator;
 3495|  25.6M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|   625k|    {
 3353|   625k|        return static_cast<const D&>(*this);
 3354|   625k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   625k|    {
 3089|   625k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   625k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   625k|    {
 3055|   625k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   625k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.26M|    {
 3510|  3.26M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.26M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   187k|        : base(unexpect, std::move(e.error())),
 1630|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   187k|    {
 1632|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   187k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   187k|          m_has_value(false)
  466|   187k|    {
  467|   187k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   625k|    {
 1330|   625k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   437k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   437k|                      ranges::iterator_t<SourceRange>>) {
 6799|   437k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   437k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.10M|    {
 2883|  2.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.10M|    {
 2864|  2.10M|        return decay_copy(t.begin());
 2865|  2.10M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|   437k|{
 6784|   437k|    return ranges::end(source);
 6785|   437k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   437k|    {
 2940|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   437k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   437k|    {
 2922|   437k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   437k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  15.3M|    {
 3498|  15.3M|        return m_sentinel;
 3499|  15.3M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   437k|        : base(std::in_place, std::forward<U>(val)),
 1584|   437k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   437k|    {
 1586|   437k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   437k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   437k|    {
  457|   437k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   175k|    {
 8855|   175k|        return m_str;
 8856|   175k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   350k|{
 6196|   350k|    detail::check_scan_arg_types<Args...>();
 6197|   350k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   350k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   350k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   350k|    {
 6173|   350k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   350k|    {
 6181|   350k|        return {detail::make_arg<
 6182|   350k|            kind, Context,
 6183|   350k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   350k|                                 typename Context::char_type>::value>(args)...};
 6185|   350k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   350k|{
 5961|   350k|    return make_value<Context>(value).ref_value;
 5962|   350k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5895|   383k|{
 5896|   383k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   383k|                                  needs_context_tag>) {
 5900|   383k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   383k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5702|   383k|    {                                                                        \
 5703|   383k|        return val;                                                          \
 5704|   383k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   350k|        : basic_scan_args(store.desc, store.args.data())
 6222|   350k|    {
 6223|   350k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|  1.13M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.13M|    {
 6275|  1.13M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  9.53M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  9.53M|    static_cast<    \
  |  | 1109|  9.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  9.53M|    static_cast<    \
  |  | 1109|  9.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  9.53M|    {
 3480|  9.53M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|  1.13M|{
 8537|  1.13M|    return s;
 8538|  1.13M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|  1.13M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   175k|        : m_str(r.str)
 8850|   175k|    {
 8851|   175k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   449k|    {
 1829|   449k|        return &value();
 1830|   449k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   449k|    {
 1783|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   449k|        return this->get_value();
 1785|   449k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|   437k|    {
 6556|   437k|        return ranges::begin(m_range);
 6557|   437k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   284k|{
 9608|   284k|#if !SCN_DISABLE_LOCALE
 9609|   284k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   284k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   284k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   284k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   284k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 86.6k, False: 198k]
  |  |  ------------------
  ------------------
 9616|  86.6k|        return unexpected(result.error());
 9617|  86.6k|    }
 9618|   198k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   284k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  56.0k|{
 9632|  56.0k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  56.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  56.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 41.6k]
  |  |  ------------------
  ------------------
 9636|  14.4k|        return unexpected(result.error());
 9637|  14.4k|    }
 9638|  41.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  41.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  56.0k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  32.5k|{
 5946|  32.5k|    check_scan_arg_types<T>();
 5947|       |
 5948|  32.5k|    basic_scan_arg<Context> arg;
 5949|  32.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  32.5k|    arg.m_value = make_value<Context>(value);
 5951|  32.5k|    return arg;
 5952|  32.5k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  1.25M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9848|   214k|{
 9849|   214k|    return scan_result_type<Source, Args...>();
 9850|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   214k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   214k|        : m_value(T{}), m_has_value(true)
  442|   214k|    {
  443|   214k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|   214k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   214k|{
 9834|   214k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 152k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   152k|    else {
 9838|   152k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   152k|    static_cast<    \
  |  | 1109|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   152k|    }
 9840|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   858k|    {
  505|   858k|        return m_has_value;
  506|   858k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   518k|    {
  471|   518k|        return m_value;
  472|   518k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   195k|    {
 8855|   195k|        return m_str;
 8856|   195k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   390k|{
 6196|   390k|    detail::check_scan_arg_types<Args...>();
 6197|   390k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   390k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   390k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   390k|    {
 6173|   390k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   390k|    {
 6181|   390k|        return {detail::make_arg<
 6182|   390k|            kind, Context,
 6183|   390k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   390k|                                 typename Context::char_type>::value>(args)...};
 6185|   390k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   390k|{
 5961|   390k|    return make_value<Context>(value).ref_value;
 5962|   390k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|   429k|{
 5896|   429k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   429k|                                  needs_context_tag>) {
 5900|   429k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   429k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|   429k|    {                                                                        \
 5703|   429k|        return val;                                                          \
 5704|   429k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   390k|        : basic_scan_args(store.desc, store.args.data())
 6222|   390k|    {
 6223|   390k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   195k|        : m_str(r.str)
 8850|   195k|    {
 8851|   195k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   214k|    {
 1754|   214k|        return has_value();
 1755|   214k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   518k|    {
 1829|   518k|        return &value();
 1830|   518k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   518k|    {
 1783|   518k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   518k|        return this->get_value();
 1785|   518k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  39.1k|{
 5946|  39.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  39.1k|    basic_scan_arg<Context> arg;
 5949|  39.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  39.1k|    arg.m_value = make_value<Context>(value);
 5951|  39.1k|    return arg;
 5952|  39.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9848|   219k|{
 9849|   219k|    return scan_result_type<Source, Args...>();
 9850|   219k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   219k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   219k|        : m_value(T{}), m_has_value(true)
  442|   219k|    {
  443|   219k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6692|   219k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   219k|{
 9834|   219k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 156k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   156k|    else {
 9838|   156k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   156k|    static_cast<    \
  |  | 1109|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   156k|    }
 9840|   219k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   876k|    {
  505|   876k|        return m_has_value;
  506|   876k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   532k|    {
  471|   532k|        return m_value;
  472|   532k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   198k|    {
 8855|   198k|        return m_str;
 8856|   198k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   397k|{
 6196|   397k|    detail::check_scan_arg_types<Args...>();
 6197|   397k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   397k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   397k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   397k|    {
 6173|   397k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   397k|    {
 6181|   397k|        return {detail::make_arg<
 6182|   397k|            kind, Context,
 6183|   397k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   397k|                                 typename Context::char_type>::value>(args)...};
 6185|   397k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   397k|{
 5961|   397k|    return make_value<Context>(value).ref_value;
 5962|   397k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5895|   438k|{
 5896|   438k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   438k|                                  needs_context_tag>) {
 5900|   438k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   438k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   438k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5702|   438k|    {                                                                        \
 5703|   438k|        return val;                                                          \
 5704|   438k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   397k|        : basic_scan_args(store.desc, store.args.data())
 6222|   397k|    {
 6223|   397k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   198k|        : m_str(r.str)
 8850|   198k|    {
 8851|   198k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   219k|    {
 1754|   219k|        return has_value();
 1755|   219k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   532k|    {
 1829|   532k|        return &value();
 1830|   532k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   532k|    {
 1783|   532k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   532k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   532k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   532k|        return this->get_value();
 1785|   532k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  40.3k|{
 5946|  40.3k|    check_scan_arg_types<T>();
 5947|       |
 5948|  40.3k|    basic_scan_arg<Context> arg;
 5949|  40.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  40.3k|    arg.m_value = make_value<Context>(value);
 5951|  40.3k|    return arg;
 5952|  40.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   187k|    {
 2883|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   187k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   187k|    {
 2864|   187k|        return decay_copy(t.begin());
 2865|   187k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  12.5M|{
 2108|  12.5M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  12.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  12.5M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.25M|    {
 2940|  1.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.25M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.25M|    {
 2922|  1.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.25M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9848|   191k|{
 9849|   191k|    return scan_result_type<Source, Args...>();
 9850|   191k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   191k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   191k|        : m_value(T{}), m_has_value(true)
  442|   191k|    {
  443|   191k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6692|   191k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   625k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   625k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   191k|{
 9834|   191k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 128k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   128k|    else {
 9838|   128k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   128k|    static_cast<    \
  |  | 1109|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   128k|    }
 9840|   191k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   625k|    {
 1754|   625k|        return has_value();
 1755|   625k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|   187k|    {
 1760|   187k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   187k|        return this->get_unexpected().error();
 1762|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   187k|    {
  488|   187k|        return m_unexpected;
  489|   187k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   765k|    {
  505|   765k|        return m_has_value;
  506|   765k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   449k|    {
  471|   449k|        return m_value;
  472|   449k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   437k|    {
 6567|   437k|        m_range = std::forward<Other>(r);
 6568|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   437k|    {
 1809|   437k|        return value();
 1810|   437k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   437k|    {
 1783|   437k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   437k|        return this->get_value();
 1785|   437k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   437k|    {
  471|   437k|        return m_value;
  472|   437k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   284k|{
 9592|   284k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   284k|    auto result = vscan_impl(buffer, format, args);
 9595|   284k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 86.6k, False: 197k]
  |  |  ------------------
  ------------------
 9596|  86.6k|        return unexpected(result.error());
 9597|  86.6k|    }
 9598|   197k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   284k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   625k|{
 5399|   625k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   625k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   625k|                  "\n"
 5403|   625k|                  "Unsupported range type given as input to a scanning "
 5404|   625k|                  "function.\n"
 5405|   625k|                  "A range needs to have a character type (value type) "
 5406|   625k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   625k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   625k|                  "to be included.\n"
 5409|   625k|                  "See the scnlib documentation for more details.");
 5410|   625k|    static_assert(
 5411|   625k|        !std::is_same_v<T, custom_char_traits>,
 5412|   625k|        "\n"
 5413|   625k|        "Unsupported range type given as input to a scanning "
 5414|   625k|        "function.\n"
 5415|   625k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   625k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   625k|        "not supported.");
 5418|   625k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   625k|                  "\n"
 5420|   625k|                  "Unsupported range type given as input to a scanning "
 5421|   625k|                  "function.\n"
 5422|   625k|                  "file_marker_found cannot be used as an "
 5423|   625k|                  "source range type to scn::scan.\n"
 5424|   625k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   625k|                  "and do not provide an explicit source range, "
 5426|   625k|                  "or use scn::scan with a FILE* directly.");
 5427|   625k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   625k|                  "\n"
 5429|   625k|                  "Unsupported range type given as input to a scanning "
 5430|   625k|                  "function.\n"
 5431|   625k|                  "In order to be scannable, a range needs to satisfy "
 5432|   625k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   625k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   625k|                  "\n"
 5435|   625k|                  "Unsupported range type given as input to a scanning "
 5436|   625k|                  "function.\n"
 5437|   625k|                  "A range needs to model forward_range and have a valid "
 5438|   625k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   625k|                  "Examples of scannable ranges are std::string, "
 5440|   625k|                  "std::string_view, "
 5441|   625k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   625k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   625k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   625k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   625k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   625k|    else {
 5384|   625k|        return make_forward_scan_buffer(r);
 5385|   625k|    }
 5386|   625k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   625k|{
 5203|   625k|    return basic_scan_forward_buffer_impl(range);
 5204|   625k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   625k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   625k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   625k|          m_cursor(ranges::begin(*m_range))
 4784|   625k|    {
 4785|   625k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   625k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   625k|    {
 4756|   625k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   625k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   625k|    {
 4447|   625k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   625k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.06M|    {
 2883|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.06M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.06M|    {
 2864|  1.06M|        return decay_copy(t.begin());
 2865|  1.06M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  1.49M|    {
 3494|  1.49M|        return m_iterator;
 3495|  1.49M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  3.19M|    {
 4789|  3.19M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 206k, False: 2.98M]
  ------------------
 4790|   206k|            return false;
 4791|   206k|        }
 4792|  2.98M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  2.98M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  2.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  2.98M|        }
 4795|  2.98M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 2.36M, False: 622k]
  ------------------
 4796|  2.36M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  2.36M|                                          this->m_current_view.begin(),
 4798|  2.36M|                                          this->m_current_view.end());
 4799|  2.36M|        }
 4800|  2.98M|        m_latest = *m_cursor;
 4801|  2.98M|        ++m_cursor;
 4802|  2.98M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  2.98M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  2.98M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  2.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  2.98M|        }
 4806|  2.98M|        return true;
 4807|  3.19M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  9.17M|    {
 2940|  9.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  9.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  9.17M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  9.17M|    {
 2922|  9.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  9.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  9.17M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  9.61M|    {
 3498|  9.61M|        return m_sentinel;
 3499|  9.61M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   625k|    {
 4364|   625k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   625k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   625k|        return true;
 4366|   625k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|   187k|        : base(unexpect, std::move(e.error())),
 1630|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   187k|    {
 1632|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|   187k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   187k|          m_has_value(false)
  466|   187k|    {
  467|   187k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   625k|    {
 1330|   625k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   437k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   437k|                      ranges::iterator_t<SourceRange>>) {
 6799|   437k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   437k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   437k|    {
 2883|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   437k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   437k|    {
 2864|   437k|        return decay_copy(t.begin());
 2865|   437k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   437k|{
 6784|   437k|    return ranges::end(source);
 6785|   437k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   437k|    {
 2940|   437k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   437k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   437k|    {
 2922|   437k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   437k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   437k|        : base(std::in_place, std::forward<U>(val)),
 1584|   437k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   437k|    {
 1586|   437k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   437k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   437k|    {
  457|   437k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   175k|    {
 8855|   175k|        return m_str;
 8856|   175k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.06M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.06M|    static_cast<    \
  |  | 1109|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.06M|    static_cast<    \
  |  | 1109|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.06M|    {
 3480|  1.06M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   175k|        : m_str(r.str)
 8850|   175k|    {
 8851|   175k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   449k|    {
 1829|   449k|        return &value();
 1830|   449k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   449k|    {
 1783|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   449k|        return this->get_value();
 1785|   449k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   437k|    {
 6556|   437k|        return ranges::begin(m_range);
 6557|   437k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   284k|{
 9608|   284k|#if !SCN_DISABLE_LOCALE
 9609|   284k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   284k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   284k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   284k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   284k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 86.6k, False: 197k]
  |  |  ------------------
  ------------------
 9616|  86.6k|        return unexpected(result.error());
 9617|  86.6k|    }
 9618|   197k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   284k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  55.9k|{
 9632|  55.9k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  55.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  55.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.4k, False: 41.5k]
  |  |  ------------------
  ------------------
 9636|  14.4k|        return unexpected(result.error());
 9637|  14.4k|    }
 9638|  41.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  55.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9848|   214k|{
 9849|   214k|    return scan_result_type<Source, Args...>();
 9850|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   214k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   214k|        : m_value(T{}), m_has_value(true)
  442|   214k|    {
  443|   214k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6692|   214k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   214k|{
 9834|   214k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 151k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   151k|    else {
 9838|   151k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   151k|    static_cast<    \
  |  | 1109|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   151k|    }
 9840|   214k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   858k|    {
  505|   858k|        return m_has_value;
  506|   858k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   518k|    {
  471|   518k|        return m_value;
  472|   518k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   194k|    {
 8855|   194k|        return m_str;
 8856|   194k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   194k|        : m_str(r.str)
 8850|   194k|    {
 8851|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   214k|    {
 1754|   214k|        return has_value();
 1755|   214k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   518k|    {
 1829|   518k|        return &value();
 1830|   518k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   518k|    {
 1783|   518k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   518k|        return this->get_value();
 1785|   518k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9848|   219k|{
 9849|   219k|    return scan_result_type<Source, Args...>();
 9850|   219k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   219k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   219k|        : m_value(T{}), m_has_value(true)
  442|   219k|    {
  443|   219k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6692|   219k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   219k|{
 9834|   219k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.5k, False: 156k]
  |  |  ------------------
  ------------------
 9835|  62.5k|        out = unexpected(in.error());
 9836|  62.5k|    }
 9837|   156k|    else {
 9838|   156k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   156k|    static_cast<    \
  |  | 1109|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   156k|    }
 9840|   219k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  62.5k|        : base(unexpect, std::move(e.error())),
 1630|  62.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  62.5k|    {
 1632|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  62.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  62.5k|          m_has_value(false)
  466|  62.5k|    {
  467|  62.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  62.5k|    {
 1330|  62.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  62.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  62.5k|    {
  917|  62.5k|        assign_common(std::move(other));
  918|  62.5k|        return *this;
  919|  62.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  62.5k|    {
  964|  62.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 62.5k, False: 0]
  ------------------
  965|  62.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 62.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  62.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  62.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   876k|    {
  505|   876k|        return m_has_value;
  506|   876k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   531k|    {
  471|   531k|        return m_value;
  472|   531k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  62.5k|    {
 1060|  62.5k|        this->destroy_value();
 1061|  62.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  62.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  62.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  62.5k|    {
  519|  62.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  62.5k|                                  std::forward<Args>(args)...);
  521|  62.5k|        m_has_value = false;
  522|  62.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  62.5k|    {
  488|  62.5k|        return m_unexpected;
  489|  62.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  62.5k|    {
  496|  62.5k|        return std::move(m_unexpected);
  497|  62.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   198k|    {
 8855|   198k|        return m_str;
 8856|   198k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   198k|        : m_str(r.str)
 8850|   198k|    {
 8851|   198k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   219k|    {
 1754|   219k|        return has_value();
 1755|   219k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   531k|    {
 1829|   531k|        return &value();
 1830|   531k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   531k|    {
 1783|   531k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   531k|        return this->get_value();
 1785|   531k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|  3.71M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|  3.71M|    {
 3760|  3.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  3.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|  3.71M|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|   292k|    {
 3771|   292k|        return m_code;
 3772|   292k|    }
_ZNK3scn2v410scan_error3msgEv:
 3775|  2.62k|    {
 3776|  2.62k|        return m_msg;
 3777|  2.62k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   827k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   827k|    else {
 3999|   827k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   827k|    }
 4001|   827k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  49.3M|    {
 3494|  49.3M|        return m_iterator;
 3495|  49.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  26.2M|    {
 3494|  26.2M|        return m_iterator;
 3495|  26.2M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  20.4M|    {
  587|  20.4M|        return m_has_value;
  588|  20.4M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  3.92M|    {
  570|  3.92M|        return m_unexpected;
  571|  3.92M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   448k|    {
 1760|   448k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   448k|        return this->get_unexpected().error();
 1762|   448k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  2.38M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.74M|    {
 7141|  1.74M|        m_specs.type = type;
 7142|  1.74M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  2.38M|    {
 7214|  2.38M|        return m_error;
 7215|  2.38M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|  3.66M|{
 3936|  3.66M|    return unexpected(scan_error{c, m});
 3937|  3.66M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  5.88M|{
 4326|       |    // Pattern_White_Space property
 4327|  5.88M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 5.65M, False: 227k]
  |  Branch (4327:27): [True: 804k, False: 4.85M]
  ------------------
 4328|  5.88M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 54.0k, False: 5.02M]
  ------------------
 4329|  5.88M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 63.3k, False: 4.96M]
  ------------------
 4330|  5.88M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 4.86k, False: 4.95M]
  ------------------
 4331|  5.88M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 24.3k, False: 4.93M]
  ------------------
 4332|  5.88M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 1.15M, False: 3.77M]
  ------------------
 4333|  5.88M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 348, False: 3.77M]
  ------------------
 4334|  5.88M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|   636k|{
 7897|   636k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 636k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 636k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 636k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 636k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 636k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 636k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 636k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 636k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 636k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 636k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 636k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 636k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 636k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 636k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 636k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 636k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 636k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 636k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|   196k|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 196k, False: 440k]
  ------------------
 7927|   413k|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 217k, False: 419k]
  ------------------
 7928|   636k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 223k, False: 413k]
  ------------------
 7929|   636k|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 636k]
  ------------------
 7930|   636k|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 636k]
  ------------------
 7931|   636k|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 636k]
  ------------------
 7932|   636k|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 636k]
  ------------------
 7933|   636k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 636k]
  ------------------
 7934|   636k|            return arg_type_category::floating;
 7935|       |
 7936|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 0, False: 636k]
  ------------------
 7937|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 0, False: 636k]
  ------------------
 7938|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 0, False: 636k]
  ------------------
 7939|      0|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 636k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 636k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|   636k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|   636k|            SCN_CLANG_POP
 7950|   636k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|   636k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  3.48M|    {
 1770|  3.48M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  3.48M|        return std::move(this->get_unexpected().error());
 1772|  3.48M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  2.74M|    {
 3055|  2.74M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  2.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  2.74M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|  2.74M|    {
 3089|  2.74M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  2.74M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|  2.74M|    {
 3112|  2.74M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|  2.74M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|  2.74M|    {
 3121|  2.74M|        return fn::impl(std::forward<T>(t));
 3122|  2.74M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  2.38M|{
 8033|  2.38M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 1.74M, False: 636k]
  ------------------
 8034|  2.38M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 0, False: 1.74M]
  ------------------
 8035|  1.74M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 0, False: 1.74M]
  ------------------
 8036|      0|        SCN_UNLIKELY_ATTR
 8037|      0|        return handler.on_error("Invalid type specifier for float type");
 8038|      0|    }
 8039|  2.38M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  16.4M|    {
 1754|  16.4M|        return has_value();
 1755|  16.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|   318M|    {
 4491|   318M|        assert(m_begin);
 4492|   318M|        return m_end == nullptr;
 4493|   318M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|  4.12M|    {
 4508|  4.12M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 4.12M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  4.12M|        return parent()->get_segment_starting_at(position());
 4514|  4.12M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|   177M|    {
 4502|   177M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|   177M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   177M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|   177M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|   177M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  4.12M|    {
 4395|  4.12M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  4.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.77M, False: 2.34M]
  |  |  ------------------
  ------------------
 4396|  4.12M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|  1.77M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|  1.77M|        }
 4399|  2.34M|        const auto start = pos - m_putback_buffer.size();
 4400|  2.34M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  2.34M|        return m_current_view.substr(start);
 4402|  2.34M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4496|  2.88M|    {
 4497|  2.88M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  2.88M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  2.88M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|  7.57M|    {
 4486|  7.57M|        return m_position;
 4487|  7.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|  3.30M|    {
 4417|  3.30M|        return m_is_contiguous;
 4418|  3.30M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  85.4M|    {
 4491|  85.4M|        assert(m_begin);
 4492|  85.4M|        return m_end == nullptr;
 4493|  85.4M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   419k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   419k|    else {
 3999|   419k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   419k|    }
 4001|   419k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  1.50M|    {
 4508|  1.50M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 1.50M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  1.50M|        return parent()->get_segment_starting_at(position());
 4514|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  45.7M|    {
 4502|  45.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  45.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  45.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  45.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  1.50M|    {
 4395|  1.50M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 858k, False: 646k]
  |  |  ------------------
  ------------------
 4396|  1.50M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   858k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   858k|        }
 4399|   646k|        const auto start = pos - m_putback_buffer.size();
 4400|   646k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   646k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   646k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   646k|        return m_current_view.substr(start);
 4402|   646k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4496|  1.64M|    {
 4497|  1.64M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.64M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.64M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  3.31M|    {
 4486|  3.31M|        return m_position;
 4487|  3.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  1.87M|    {
 4417|  1.87M|        return m_is_contiguous;
 4418|  1.87M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|  5.61M|    {
 3348|  5.61M|        return static_cast<D&>(*this);
 3349|  5.61M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|  5.61M|    {
 3389|  5.61M|        return detail::to_address(ranges::begin(derived()));
 3390|  5.61M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  1.45M|    {
 3348|  1.45M|        return static_cast<D&>(*this);
 3349|  1.45M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  1.45M|    {
 3389|  1.45M|        return detail::to_address(ranges::begin(derived()));
 3390|  1.45M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   793k|    {
 9052|   793k|        return ranges::subrange{begin(), end()};
 9053|   793k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   793k|    {
 9044|   793k|        return ranges::default_sentinel;
 9045|   793k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  12.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  12.0M|    static_cast<    \
  |  | 1109|  12.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  12.0M|    static_cast<    \
  |  | 1109|  12.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  12.0M|    {
 3480|  12.0M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  5.06M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.10M|    {
 1993|  1.10M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.10M|                                            std::forward<F>(f));
 1995|  1.10M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.10M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.10M|    else {
 1486|  1.10M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.10M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.08M, False: 19.6k]
  |  |  ------------------
  ------------------
 1488|  1.10M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.10M|                   : result(unexpect,
 1490|  19.6k|                            trivial_invoke(std::forward<F>(f),
 1491|  19.6k|                                           std::forward<Exp>(exp).error()));
 1492|  1.10M|    }
 1493|  1.10M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  11.6M|    {
  505|  11.6M|        return m_has_value;
  506|  11.6M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  3.92M|    {
 1819|  3.92M|        return std::move(value());
 1820|  3.92M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  4.51M|    {
 1783|  4.51M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  4.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  4.51M|        return this->get_value();
 1785|  4.51M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  4.51M|    {
  471|  4.51M|        return m_value;
  472|  4.51M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  4.81M|        : base(std::in_place, std::forward<U>(val)),
 1584|  4.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  4.81M|    {
 1586|  4.81M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  4.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  4.81M|    {
  457|  4.81M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.21M|    {
 1330|  6.21M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  46.8k|{
 1364|  46.8k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  46.8k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  55.0k|    {
 1770|  55.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  55.0k|        return std::move(this->get_unexpected().error());
 1772|  55.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  74.9k|    {
  488|  74.9k|        return m_unexpected;
  489|  74.9k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|   468k|    {
  380|   468k|        return m_unexpected;
  381|   468k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.09M|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.09M|    {
 1642|  1.09M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.33M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.33M|          m_has_value(false)
  466|  1.33M|    {
  467|  1.33M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   457k|    {
 9052|   457k|        return ranges::subrange{begin(), end()};
 9053|   457k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   457k|    {
 9044|   457k|        return ranges::default_sentinel;
 9045|   457k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  6.38M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.38M|    static_cast<    \
  |  | 1109|  6.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.38M|    static_cast<    \
  |  | 1109|  6.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  6.38M|    {
 3480|  6.38M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   625k|    {
 1993|   625k|        return detail::transform_error_impl(std::move(*this),
 1994|   625k|                                            std::forward<F>(f));
 1995|   625k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   625k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   625k|    else {
 1486|   625k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   625k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   625k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 620k, False: 4.74k]
  |  |  ------------------
  ------------------
 1488|   625k|                   ? result(*std::forward<Exp>(exp))
 1489|   625k|                   : result(unexpect,
 1490|  4.74k|                            trivial_invoke(std::forward<F>(f),
 1491|  4.74k|                                           std::forward<Exp>(exp).error()));
 1492|   625k|    }
 1493|   625k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  6.03M|    {
  505|  6.03M|        return m_has_value;
  506|  6.03M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.20M|    {
 1819|  2.20M|        return std::move(value());
 1820|  2.20M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.23M|    {
 1783|  2.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.23M|        return this->get_value();
 1785|  2.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  2.23M|    {
  471|  2.23M|        return m_value;
  472|  2.23M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  2.25M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.25M|    {
 1586|  2.25M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.25M|    {
  457|  2.25M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.56M|    {
 1330|  3.56M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  64.5k|    {
 1770|  64.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  64.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  64.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  64.5k|        return std::move(this->get_unexpected().error());
 1772|  64.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  67.4k|    {
  488|  67.4k|        return m_unexpected;
  489|  67.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   801k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   801k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   801k|    {
 1642|   801k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.31M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.31M|          m_has_value(false)
  466|  1.31M|    {
  467|  1.31M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  3.66M|        : m_unexpected(std::forward<Err>(e))
  365|  3.66M|    {
  366|  3.66M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  3.66M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   857k|        : base(unexpect, std::move(e.error())),
 1630|   857k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   857k|    {
 1632|   857k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   857k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   857k|          m_has_value(false)
  466|   857k|    {
  467|   857k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  9.08M|    {
 1330|  9.08M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   213k|        : base(unexpect, std::move(e.error())),
 1630|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   213k|    {
 1632|   213k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  1.13M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.13M|          m_has_value(false)
  466|  1.13M|    {
  467|  1.13M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.41M|    {
 1330|  5.41M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  4.21M|        : base(std::in_place, std::forward<U>(val)),
 1584|  4.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  4.21M|    {
 1586|  4.21M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  4.21M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  4.21M|    {
  457|  4.21M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  6.34M|    {
 1754|  6.34M|        return has_value();
 1755|  6.34M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|  9.96M|    {
  505|  9.96M|        return m_has_value;
  506|  9.96M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|   254k|    {
 1760|   254k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   254k|        return this->get_unexpected().error();
 1762|   254k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   254k|    {
  488|   254k|        return m_unexpected;
  489|   254k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  2.72M|    {
 1819|  2.72M|        return std::move(value());
 1820|  2.72M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  3.37M|    {
 1783|  3.37M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.37M|        return this->get_value();
 1785|  3.37M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  3.37M|    {
  471|  3.37M|        return m_value;
  472|  3.37M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   417k|        : base(unexpect, std::move(e.error())),
 1630|   417k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   417k|    {
 1632|   417k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  1.12M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.12M|          m_has_value(false)
  466|  1.12M|    {
  467|  1.12M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.56M|    {
 1330|  3.56M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.44M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.44M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.44M|    {
 1586|  2.44M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.44M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.44M|    {
  457|  2.44M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  4.18M|    {
 1754|  4.18M|        return has_value();
 1755|  4.18M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  6.59M|    {
  505|  6.59M|        return m_has_value;
  506|  6.59M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|   502k|    {
 1760|   502k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   502k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   502k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   502k|        return this->get_unexpected().error();
 1762|   502k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   502k|    {
  488|   502k|        return m_unexpected;
  489|   502k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.59M|    {
 1819|  1.59M|        return std::move(value());
 1820|  1.59M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  1.90M|    {
 1783|  1.90M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.90M|        return this->get_value();
 1785|  1.90M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.90M|    {
  471|  1.90M|        return m_value;
  472|  1.90M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   953k|    {
 1993|   953k|        return detail::transform_error_impl(std::move(*this),
 1994|   953k|                                            std::forward<F>(f));
 1995|   953k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   953k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   953k|    else {
 1486|   953k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   953k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   953k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 937k, False: 15.9k]
  |  |  ------------------
  ------------------
 1488|   953k|                   ? result(*std::forward<Exp>(exp))
 1489|   953k|                   : result(unexpect,
 1490|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1491|  15.9k|                                           std::forward<Exp>(exp).error()));
 1492|   953k|    }
 1493|   953k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  3.64M|    {
  505|  3.64M|        return m_has_value;
  506|  3.64M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   937k|    {
 1819|   937k|        return std::move(value());
 1820|   937k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.25M|    {
 1783|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.25M|        return this->get_value();
 1785|  1.25M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.25M|    {
  471|  1.25M|        return m_value;
  472|  1.25M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  15.9k|    {
 1770|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  15.9k|        return std::move(this->get_unexpected().error());
 1772|  15.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  22.5k|    {
  488|  22.5k|        return m_unexpected;
  489|  22.5k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   921k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   921k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   921k|    {
 1642|   921k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|  2.30M|    {
 9036|  2.30M|        return m_current;
 9037|  2.30M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|  1.46M|    {
 8929|  1.46M|        return m_locale;
 8930|  1.46M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|  1.46M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  1.46M|    static_cast<    \
  |  | 1109|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  1.46M|    static_cast<    \
  |  | 1109|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|  1.46M|    {
 8936|  1.46M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.62M|    {
 3014|  1.62M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.62M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.62M|    {
 2995|  1.62M|        return t.data();
 2996|  1.62M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   235k|        : base(unexpect, std::move(e.error())),
 1630|   235k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   235k|    {
 1632|   235k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  63.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  63.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  63.4k|    {
 1586|  63.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  63.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  63.4k|    {
  457|  63.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|  1.22M|    {
 9036|  1.22M|        return m_current;
 9037|  1.22M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   914k|    {
 8929|   914k|        return m_locale;
 8930|   914k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   914k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   914k|    static_cast<    \
  |  | 1109|   914k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   914k|    static_cast<    \
  |  | 1109|   914k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   914k|    {
 8936|   914k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   512k|        : base(unexpect, std::move(e.error())),
 1630|   512k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   512k|    {
 1632|   512k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|  3.92M|        : base(unexpect, std::move(e.error())),
 1630|  3.92M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.92M|    {
 1632|  3.92M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|  3.92M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|  3.92M|          m_has_value(false)
  565|  3.92M|    {
  566|  3.92M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.92M|    {
 1330|  3.92M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  14.0M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  14.0M|        : m_deferred_init(), m_has_value(true)
  544|  14.0M|    {
  545|  14.0M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  9.57M|    {
 4577|  9.57M|        return x.is_at_end();
 4578|  9.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  23.9M|    {
 4621|  23.9M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 23.9M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  23.9M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 23.9M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  23.9M|        return !read_at_position();
 4628|  23.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|   104M|    {
 4601|   104M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|   104M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   104M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|   104M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 104M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|   104M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|   104M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 90.0M, False: 14.2M]
  |  |  ------------------
  ------------------
 4608|  90.0M|            return true;
 4609|  90.0M|        }
 4610|       |
 4611|  28.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 14.2M, False: 13.9M]
  ------------------
 4612|  14.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 292k, False: 13.9M]
  ------------------
 4613|   292k|                return false;
 4614|   292k|            }
 4615|  14.2M|        }
 4616|  13.9M|        return true;
 4617|  14.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  26.9M|    {
 4536|  26.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  26.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 26.9M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  26.9M|        auto res = read_at_position();
 4545|  26.9M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  26.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  26.9M|        return parent()->get_character_at(m_position);
 4547|  26.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  26.9M|    {
 4406|  26.9M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  26.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.7M, False: 10.2M]
  |  |  ------------------
  ------------------
 4407|  26.9M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  16.7M|            return m_putback_buffer[pos];
 4409|  16.7M|        }
 4410|  10.2M|        const auto start = pos - m_putback_buffer.size();
 4411|  10.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  10.2M|        return m_current_view[start];
 4413|  10.2M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  6.98M|        : base(std::in_place, std::forward<U>(val)),
 1584|  6.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  6.98M|    {
 1586|  6.98M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  6.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  6.98M|    {
  457|  6.98M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.06M|    {
 1330|  7.06M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|   157k|        : m_unexpected(std::forward<Err>(e))
  365|   157k|    {
  366|   157k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   157k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  74.9k|        : base(unexpect, std::move(e.error())),
 1630|  74.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  74.9k|    {
 1632|  74.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  74.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  74.9k|          m_has_value(false)
  466|  74.9k|    {
  467|  74.9k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|   234k|        : m_unexpected(std::forward<Args>(args)...)
  374|   234k|    {
  375|   234k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   234k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   234k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  53.3M|    {
 4522|  53.3M|        ++m_position;
 4523|  53.3M|        (void)read_at_position();
 4524|  53.3M|        return *this;
 4525|  53.3M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  3.07M|    {
 1754|  3.07M|        return has_value();
 1755|  3.07M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   584k|    {
 1809|   584k|        return value();
 1810|   584k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  25.6M|    {
 4571|  25.6M|        return !(lhs == rhs);
 4572|  25.6M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  28.4M|    {
 4566|  28.4M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 28.4M, False: 0]
  |  Branch (4566:46): [True: 3.61M, False: 24.8M]
  ------------------
 4567|  28.4M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  76.8k|        : m_unexpected(std::forward<Err>(e))
  365|  76.8k|    {
  366|  76.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  76.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  76.8k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  14.8k|        : base(unexpect, std::move(e.error())),
 1630|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.8k|    {
 1632|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.8k|          m_has_value(false)
  466|  14.8k|    {
  467|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.50M|    {
 1330|  1.50M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  1.48M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.48M|    {
 1586|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|  1.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.48M|    {
  457|  1.48M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|  1.50M|    {
 1754|  1.50M|        return has_value();
 1755|  1.50M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.00M|    {
  505|  3.00M|        return m_has_value;
  506|  3.00M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  14.8k|    {
 1760|  14.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  14.8k|        return this->get_unexpected().error();
 1762|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.8k|    {
  488|  14.8k|        return m_unexpected;
  489|  14.8k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.48M|    {
 1819|  1.48M|        return std::move(value());
 1820|  1.48M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  1.48M|    {
 1783|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.48M|        return this->get_value();
 1785|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.48M|    {
  471|  1.48M|        return m_value;
  472|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  34.0M|    {
 3498|  34.0M|        return m_sentinel;
 3499|  34.0M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|  65.4k|        : m_unexpected(std::forward<Err>(e))
  365|  65.4k|    {
  366|  65.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  65.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  65.4k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  13.2M|    {
  380|  13.2M|        return m_unexpected;
  381|  13.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  3.61M|        : m_unexpected(std::forward<Args>(args)...)
  374|  3.61M|    {
  375|  3.61M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.61M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  3.61M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  16.0M|        : m_unexpected(std::forward<Err>(e))
  365|  16.0M|    {
  366|  16.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  16.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  16.0M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  16.0M|    {
  380|  16.0M|        return m_unexpected;
  381|  16.0M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  16.0M|        : m_unexpected(std::forward<Args>(args)...)
  374|  16.0M|    {
  375|  16.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  16.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  16.0M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|   155k|{
 1364|   155k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|   155k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  3.39M|        : m_unexpected(std::forward<Err>(e))
  365|  3.39M|    {
  366|  3.39M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  3.39M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  19.8k|    {
 1760|  19.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  19.8k|        return this->get_unexpected().error();
 1762|  19.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.12M|        : base(unexpect, std::move(e.error())),
 1630|  1.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.12M|    {
 1632|  1.12M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  1.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.16M|          m_has_value(false)
  466|  1.16M|    {
  467|  1.16M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.0M|    {
 1330|  12.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|   589k|        : base(std::in_place, std::forward<U>(val)),
 1584|   589k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   589k|    {
 1586|   589k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|   589k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   589k|    {
  457|   589k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  6.07M|        : base(unexpect, std::move(e.error())),
 1630|  6.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.07M|    {
 1632|  6.07M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  6.07M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.07M|          m_has_value(false)
  466|  6.07M|    {
  467|  6.07M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  13.1M|    {
 1754|  13.1M|        return has_value();
 1755|  13.1M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  23.1M|    {
  505|  23.1M|        return m_has_value;
  506|  23.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  3.08M|    {
 1760|  3.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.08M|        return this->get_unexpected().error();
 1762|  3.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  3.08M|    {
  488|  3.08M|        return m_unexpected;
  489|  3.08M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|  1.18M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.18M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.18M|    {
 1586|  1.18M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|  1.18M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.18M|    {
  457|  1.18M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.18M|    {
 1330|  1.18M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    279|        : base(unexpect, std::move(e.error())),
 1630|    279|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    279|    {
 1632|    279|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|    279|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    279|          m_has_value(false)
  466|    279|    {
  467|    279|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  3.06M|    {
 1809|  3.06M|        return value();
 1810|  3.06M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  5.91M|    {
 1783|  5.91M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  5.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  5.91M|        return this->get_value();
 1785|  5.91M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  5.91M|    {
  471|  5.91M|        return m_value;
  472|  5.91M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|   106k|    {
 1754|   106k|        return has_value();
 1755|   106k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  2.37M|    {
  505|  2.37M|        return m_has_value;
  506|  2.37M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.08M|    {
 1819|  1.08M|        return std::move(value());
 1820|  1.08M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.18M|    {
 1783|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.18M|        return this->get_value();
 1785|  1.18M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|  1.18M|    {
  471|  1.18M|        return m_value;
  472|  1.18M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  2.88M|    {
 1993|  2.88M|        return detail::transform_error_impl(std::move(*this),
 1994|  2.88M|                                            std::forward<F>(f));
 1995|  2.88M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  2.88M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.88M|    else {
 1486|  2.88M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.88M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.84M, False: 35.4k]
  |  |  ------------------
  ------------------
 1488|  2.88M|                   ? result(*std::forward<Exp>(exp))
 1489|  2.88M|                   : result(unexpect,
 1490|  35.4k|                            trivial_invoke(std::forward<F>(f),
 1491|  35.4k|                                           std::forward<Exp>(exp).error()));
 1492|  2.88M|    }
 1493|  2.88M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  4.19M|        : base(std::in_place, std::forward<U>(val)),
 1584|  4.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  4.19M|    {
 1586|  4.19M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  4.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  4.19M|    {
  457|  4.19M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  35.4k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  35.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  35.4k|    {
 1642|  35.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.84M|    {
 1819|  2.84M|        return std::move(value());
 1820|  2.84M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  7.27M|    {
 1754|  7.27M|        return has_value();
 1755|  7.27M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  11.4M|    {
  505|  11.4M|        return m_has_value;
  506|  11.4M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   310k|    {
 1760|   310k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   310k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   310k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   310k|        return this->get_unexpected().error();
 1762|   310k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   310k|    {
  488|   310k|        return m_unexpected;
  489|   310k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  3.09M|    {
 1819|  3.09M|        return std::move(value());
 1820|  3.09M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  3.86M|    {
 1783|  3.86M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.86M|        return this->get_value();
 1785|  3.86M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  3.86M|    {
  471|  3.86M|        return m_value;
  472|  3.86M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|  1.24M|    {
 3494|  1.24M|        return m_iterator;
 3495|  1.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|  1.24M|    {
 3498|  1.24M|        return m_sentinel;
 3499|  1.24M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   961k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   961k|    static_cast<    \
  |  | 1109|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   961k|    static_cast<    \
  |  | 1109|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   961k|    {
 3480|   961k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  14.4M|    {
 4588|  14.4M|        return !x.is_at_end();
 4589|  14.4M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  22.5k|        : base(unexpect, std::move(e.error())),
 1630|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.5k|    {
 1632|  22.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.5k|          m_has_value(false)
  466|  22.5k|    {
  467|  22.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.37M|    {
 1330|  2.37M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  2.34M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.34M|    {
 1586|  2.34M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.34M|    {
  457|  2.34M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|  1.41M|    {
 1754|  1.41M|        return has_value();
 1755|  1.41M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   313k|    {
 1809|   313k|        return value();
 1810|   313k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  11.5k|        : base(unexpect, std::move(e.error())),
 1630|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.5k|    {
 1632|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.5k|          m_has_value(false)
  466|  11.5k|    {
  467|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.26M|    {
 1330|  1.26M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.25M|    {
 1586|  1.25M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.25M|    {
  457|  1.25M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|  1.26M|    {
 1754|  1.26M|        return has_value();
 1755|  1.26M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.52M|    {
  505|  2.52M|        return m_has_value;
  506|  2.52M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  11.5k|    {
 1760|  11.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  11.5k|        return this->get_unexpected().error();
 1762|  11.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  11.5k|    {
  488|  11.5k|        return m_unexpected;
  489|  11.5k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.25M|    {
 1819|  1.25M|        return std::move(value());
 1820|  1.25M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.25M|    {
 1783|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.25M|        return this->get_value();
 1785|  1.25M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.25M|    {
  471|  1.25M|        return m_value;
  472|  1.25M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1759|  6.58k|    {
 1760|  6.58k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  6.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  6.58k|        return this->get_unexpected().error();
 1762|  6.58k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   969k|        : base(unexpect, std::move(e.error())),
 1630|   969k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   969k|    {
 1632|   969k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   969k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   969k|          m_has_value(false)
  466|   969k|    {
  467|   969k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.37M|    {
 1330|  5.37M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|   317k|        : base(std::in_place, std::forward<U>(val)),
 1584|   317k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   317k|    {
 1586|   317k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|   317k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   317k|    {
  457|   317k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  3.68M|        : base(unexpect, std::move(e.error())),
 1630|  3.68M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.68M|    {
 1632|  3.68M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.68M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.68M|          m_has_value(false)
  466|  3.68M|    {
  467|  3.68M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  6.31M|    {
 1754|  6.31M|        return has_value();
 1755|  6.31M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  10.7M|    {
  505|  10.7M|        return m_has_value;
  506|  10.7M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  2.57M|    {
 1760|  2.57M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.57M|        return this->get_unexpected().error();
 1762|  2.57M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  2.57M|    {
  488|  2.57M|        return m_unexpected;
  489|  2.57M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   972k|        : base(std::in_place, std::forward<U>(val)),
 1584|   972k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   972k|    {
 1586|   972k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   972k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   972k|    {
  457|   972k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   974k|    {
 1330|   974k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  1.78k|        : base(unexpect, std::move(e.error())),
 1630|  1.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.78k|    {
 1632|  1.78k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  1.78k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.78k|          m_has_value(false)
  466|  1.78k|    {
  467|  1.78k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   998k|    {
 1809|   998k|        return value();
 1810|   998k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   998k|    {
 1783|   998k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   998k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   998k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   998k|        return this->get_value();
 1785|   998k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   998k|    {
  471|   998k|        return m_value;
  472|   998k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  37.0k|    {
 1754|  37.0k|        return has_value();
 1755|  37.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.94M|    {
  505|  1.94M|        return m_has_value;
  506|  1.94M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.69k|        : base(unexpect, std::move(e.error())),
 1630|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.69k|    {
 1632|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.7k|    {
 1330|  11.7k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   947k|    {
 1819|   947k|        return std::move(value());
 1820|   947k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   972k|    {
 1783|   972k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   972k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   972k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   972k|        return this->get_value();
 1785|   972k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   972k|    {
  471|   972k|        return m_value;
  472|   972k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|   404k|        : base(std::in_place, std::forward<U>(val)),
 1584|   404k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   404k|    {
 1586|   404k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   404k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   404k|    {
  457|   404k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  10.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.0k|    {
 1586|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.0k|    {
  457|  10.0k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  11.7k|    {
 1993|  11.7k|        return detail::transform_error_impl(std::move(*this),
 1994|  11.7k|                                            std::forward<F>(f));
 1995|  11.7k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  11.7k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  11.7k|    else {
 1486|  11.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  11.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  11.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 10.0k, False: 1.69k]
  |  |  ------------------
  ------------------
 1488|  11.7k|                   ? result(*std::forward<Exp>(exp))
 1489|  11.7k|                   : result(unexpect,
 1490|  1.69k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.69k|                                           std::forward<Exp>(exp).error()));
 1492|  11.7k|    }
 1493|  11.7k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  23.5k|    {
  505|  23.5k|        return m_has_value;
  506|  23.5k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.0k|    {
 1819|  10.0k|        return std::move(value());
 1820|  10.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.0k|    {
 1783|  10.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.0k|        return this->get_value();
 1785|  10.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  10.0k|    {
  471|  10.0k|        return m_value;
  472|  10.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  10.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  10.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  10.0k|    {
 1586|  10.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  10.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  10.0k|    {
  457|  10.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.7k|    {
 1330|  11.7k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1769|  1.69k|    {
 1770|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.69k|        return std::move(this->get_unexpected().error());
 1772|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.69k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.69k|    {
 1642|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  11.7k|    {
 1754|  11.7k|        return has_value();
 1755|  11.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  23.5k|    {
  505|  23.5k|        return m_has_value;
  506|  23.5k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  10.0k|    {
 1819|  10.0k|        return std::move(value());
 1820|  10.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  10.0k|    {
 1783|  10.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  10.0k|        return this->get_value();
 1785|  10.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  10.0k|    {
  471|  10.0k|        return m_value;
  472|  10.0k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  3.15M|    {
 3014|  3.15M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  3.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  3.15M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  3.15M|    {
 2995|  3.15M|        return t.data();
 2996|  3.15M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  8.12M|        : base(std::in_place, std::forward<U>(val)),
 1584|  8.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  8.12M|    {
 1586|  8.12M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  8.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  8.12M|    {
  457|  8.12M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|  5.48M|    {
 1819|  5.48M|        return std::move(value());
 1820|  5.48M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  3.48M|{
 1364|  3.48M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  3.48M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|  1.08M|    {
 1993|  1.08M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.08M|                                            std::forward<F>(f));
 1995|  1.08M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|  1.08M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.08M|    else {
 1486|  1.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.08M, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.08M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.08M|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.08M|    }
 1493|  1.08M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|  1.08M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.08M|    {
 1586|  1.08M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|  1.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.08M|    {
  457|  1.08M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.08M|    {
 1330|  1.08M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|  1.08M|    {
 1754|  1.08M|        return has_value();
 1755|  1.08M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.16M|    {
  505|  2.16M|        return m_has_value;
  506|  2.16M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.08M|    {
 1819|  1.08M|        return std::move(value());
 1820|  1.08M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.08M|    {
 1783|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.08M|        return this->get_value();
 1785|  1.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.08M|    {
  471|  1.08M|        return m_value;
  472|  1.08M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  1.07M|    {
 1979|  1.07M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|  1.07M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|  1.07M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.07M|    else {
 1486|  1.07M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.07M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 1488|  1.07M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.07M|                   : result(unexpect,
 1490|  1.07M|                            trivial_invoke(std::forward<F>(f),
 1491|  1.07M|                                           std::forward<Exp>(exp).error()));
 1492|  1.07M|    }
 1493|  1.07M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   768k|    {
 1809|   768k|        return value();
 1810|   768k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   256k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|   105k|    {
 1829|   105k|        return &value();
 1830|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   765k|    {
 2883|   765k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   765k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   765k|    {
 2864|   765k|        return decay_copy(t.begin());
 2865|   765k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   765k|{
 2108|   765k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   765k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   465k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   937k|    {
 1993|   937k|        return detail::transform_error_impl(std::move(*this),
 1994|   937k|                                            std::forward<F>(f));
 1995|   937k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   937k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   937k|    else {
 1486|   937k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   937k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   937k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 937k, False: 0]
  |  |  ------------------
  ------------------
 1488|   937k|                   ? result(*std::forward<Exp>(exp))
 1489|   937k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   937k|    }
 1493|   937k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   937k|        : base(std::in_place, std::forward<U>(val)),
 1584|   937k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   937k|    {
 1586|   937k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   937k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   937k|    {
  457|   937k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   937k|    {
 1330|   937k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   937k|    {
 1754|   937k|        return has_value();
 1755|   937k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.87M|    {
  505|  1.87M|        return m_has_value;
  506|  1.87M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   937k|    {
 1819|   937k|        return std::move(value());
 1820|   937k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   937k|    {
 1783|   937k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   937k|        return this->get_value();
 1785|   937k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   937k|    {
  471|   937k|        return m_value;
  472|   937k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   906k|    {
 1979|   906k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   906k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   906k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   906k|    else {
 1486|   906k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   906k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   906k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
 1488|   906k|                   ? result(*std::forward<Exp>(exp))
 1489|   906k|                   : result(unexpect,
 1490|   906k|                            trivial_invoke(std::forward<F>(f),
 1491|   906k|                                           std::forward<Exp>(exp).error()));
 1492|   906k|    }
 1493|   906k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|  60.7k|        : base(std::in_place, std::forward<U>(val)),
 1584|  60.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  60.7k|    {
 1586|  60.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  60.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  60.7k|    {
  457|  60.7k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   906k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   906k|    static_cast<    \
  |  | 1109|   906k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   906k|    {
 3930|   906k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   646k|    {
 1809|   646k|        return value();
 1810|   646k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  25.1k|    {
 1829|  25.1k|        return &value();
 1830|  25.1k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|  1.07M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.07M|    static_cast<    \
  |  | 1109|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.07M|    {
 3930|  1.07M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  5.25M|    {
 4577|  5.25M|        return x.is_at_end();
 4578|  5.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  8.35M|    {
 4621|  8.35M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 8.35M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  8.35M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 8.35M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  8.35M|        return !read_at_position();
 4628|  8.35M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  26.5M|    {
 4601|  26.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  26.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  26.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 26.5M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  26.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  26.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 23.4M, False: 3.19M]
  |  |  ------------------
  ------------------
 4608|  23.4M|            return true;
 4609|  23.4M|        }
 4610|       |
 4611|  6.18M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 3.19M, False: 2.98M]
  ------------------
 4612|  3.19M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 206k, False: 2.98M]
  ------------------
 4613|   206k|                return false;
 4614|   206k|            }
 4615|  3.19M|        }
 4616|  2.98M|        return true;
 4617|  3.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  34.4M|    {
 4375|  34.4M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  34.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  8.30M|    {
 4536|  8.30M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  8.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  8.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 8.30M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  8.30M|        auto res = read_at_position();
 4545|  8.30M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  8.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  8.30M|        return parent()->get_character_at(m_position);
 4547|  8.30M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  8.30M|    {
 4406|  8.30M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  8.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.00M, False: 1.29M]
  |  |  ------------------
  ------------------
 4407|  8.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  7.00M|            return m_putback_buffer[pos];
 4409|  7.00M|        }
 4410|  1.29M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.29M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.29M|        return m_current_view[start];
 4413|  1.29M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  3.66M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.66M|    {
 1586|  3.66M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  3.66M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.66M|    {
  457|  3.66M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.73M|    {
 1330|  3.73M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  67.4k|        : base(unexpect, std::move(e.error())),
 1630|  67.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  67.4k|    {
 1632|  67.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  67.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  67.4k|          m_has_value(false)
  466|  67.4k|    {
  467|  67.4k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  9.94M|    {
 4522|  9.94M|        ++m_position;
 4523|  9.94M|        (void)read_at_position();
 4524|  9.94M|        return *this;
 4525|  9.94M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.46M|    {
 1754|  1.46M|        return has_value();
 1755|  1.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  30.4k|    {
 1809|  30.4k|        return value();
 1810|  30.4k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  4.09M|    {
 4571|  4.09M|        return !(lhs == rhs);
 4572|  4.09M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  5.52M|    {
 4566|  5.52M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 5.52M, False: 0]
  |  Branch (4566:46): [True: 1.73M, False: 3.79M]
  ------------------
 4567|  5.52M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|  3.71M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|  3.71M|    else {
 4093|       |        // utf-32
 4094|  3.71M|        static_assert(sizeof(U) == 4);
 4095|  3.71M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|  3.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|  3.71M|        return 1;
 4097|  3.71M|    }
 4098|  3.71M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.71M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|  3.71M|    else {
 4299|  3.71M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|  3.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|  3.71M|        auto cp = static_cast<char32_t>(input.front());
 4301|  3.71M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 208k, False: 3.50M]
  |  |  ------------------
  ------------------
 4302|   208k|            return invalid_code_point;
 4303|   208k|        }
 4304|  3.50M|        return cp;
 4305|  3.71M|    }
 4306|  3.71M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  3.51k|        : base(unexpect, std::move(e.error())),
 1630|  3.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.51k|    {
 1632|  3.51k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  3.51k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.51k|          m_has_value(false)
  466|  3.51k|    {
  467|  3.51k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   767k|    {
 1330|   767k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   764k|        : base(std::in_place, std::forward<U>(val)),
 1584|   764k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   764k|    {
 1586|   764k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   764k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   764k|    {
  457|   764k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   767k|    {
 1754|   767k|        return has_value();
 1755|   767k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.53M|    {
  505|  1.53M|        return m_has_value;
  506|  1.53M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  3.51k|    {
 1760|  3.51k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.51k|        return this->get_unexpected().error();
 1762|  3.51k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  3.51k|    {
  488|  3.51k|        return m_unexpected;
  489|  3.51k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   764k|    {
 1819|   764k|        return std::move(value());
 1820|   764k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   764k|    {
 1783|   764k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   764k|        return this->get_value();
 1785|   764k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   764k|    {
  471|   764k|        return m_value;
  472|   764k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  13.6M|    {
 3498|  13.6M|        return m_sentinel;
 3499|  13.6M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  2.87k|    {
 1760|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.87k|        return this->get_unexpected().error();
 1762|  2.87k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   682k|        : base(unexpect, std::move(e.error())),
 1630|   682k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   682k|    {
 1632|   682k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   742k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   742k|          m_has_value(false)
  466|   742k|    {
  467|   742k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.44M|    {
 1330|  6.44M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|  30.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  30.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  30.4k|    {
 1586|  30.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  30.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  30.4k|    {
  457|  30.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  3.62M|        : base(unexpect, std::move(e.error())),
 1630|  3.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.62M|    {
 1632|  3.62M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.62M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.62M|          m_has_value(false)
  466|  3.62M|    {
  467|  3.62M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  7.06M|    {
 1754|  7.06M|        return has_value();
 1755|  7.06M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  12.5M|    {
  505|  12.5M|        return m_has_value;
  506|  12.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  2.10M|    {
 1760|  2.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.10M|        return this->get_unexpected().error();
 1762|  2.10M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  2.10M|    {
  488|  2.10M|        return m_unexpected;
  489|  2.10M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   636k|        : base(std::in_place, std::forward<U>(val)),
 1584|   636k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   636k|    {
 1586|   636k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   636k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   636k|    {
  457|   636k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   636k|    {
 1330|   636k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|     72|        : base(unexpect, std::move(e.error())),
 1630|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     72|    {
 1632|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     72|          m_has_value(false)
  466|     72|    {
  467|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   947k|    {
 1809|   947k|        return value();
 1810|   947k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.52M|    {
 1783|  2.52M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.52M|        return this->get_value();
 1785|  2.52M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  2.52M|    {
  471|  2.52M|        return m_value;
  472|  2.52M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  16.4k|    {
 1754|  16.4k|        return has_value();
 1755|  16.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.27M|    {
  505|  1.27M|        return m_has_value;
  506|  1.27M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   620k|    {
 1819|   620k|        return std::move(value());
 1820|   620k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   636k|    {
 1783|   636k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   636k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   636k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   636k|        return this->get_value();
 1785|   636k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   636k|    {
  471|   636k|        return m_value;
  472|   636k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.64M|    {
 1993|  1.64M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.64M|                                            std::forward<F>(f));
 1995|  1.64M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.64M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.64M|    else {
 1486|  1.64M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.64M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.58M, False: 59.8k]
  |  |  ------------------
  ------------------
 1488|  1.64M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.64M|                   : result(unexpect,
 1490|  59.8k|                            trivial_invoke(std::forward<F>(f),
 1491|  59.8k|                                           std::forward<Exp>(exp).error()));
 1492|  1.64M|    }
 1493|  1.64M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  2.04M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.04M|    {
 1586|  2.04M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.04M|    {
  457|  2.04M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  59.8k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  59.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  59.8k|    {
 1642|  59.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.58M|    {
 1819|  1.58M|        return std::move(value());
 1820|  1.58M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  4.18M|    {
 1754|  4.18M|        return has_value();
 1755|  4.18M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.68M|    {
  505|  6.68M|        return m_has_value;
  506|  6.68M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   693k|    {
 1760|   693k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   693k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   693k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   693k|        return this->get_unexpected().error();
 1762|   693k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   693k|    {
  488|   693k|        return m_unexpected;
  489|   693k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.49M|    {
 1819|  1.49M|        return std::move(value());
 1820|  1.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.81M|    {
 1783|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.81M|        return this->get_value();
 1785|  1.81M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.81M|    {
  471|  1.81M|        return m_value;
  472|  1.81M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   481k|    {
 3494|   481k|        return m_iterator;
 3495|   481k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   481k|    {
 3498|   481k|        return m_sentinel;
 3499|   481k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   440k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   440k|    static_cast<    \
  |  | 1109|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   440k|    static_cast<    \
  |  | 1109|   440k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   440k|    {
 3480|   440k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  3.09M|    {
 4588|  3.09M|        return !x.is_at_end();
 4589|  3.09M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  65.5k|        : base(unexpect, std::move(e.error())),
 1630|  65.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  65.5k|    {
 1632|  65.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  65.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  65.5k|          m_has_value(false)
  466|  65.5k|    {
  467|  65.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.11M|    {
 1330|  3.11M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  3.04M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.04M|    {
 1586|  3.04M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  3.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.04M|    {
  457|  3.04M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|   847k|    {
 1754|   847k|        return has_value();
 1755|   847k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  5.39M|    {
  505|  5.39M|        return m_has_value;
  506|  5.39M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  13.2k|    {
 1809|  13.2k|        return value();
 1810|  13.2k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  2.21M|    {
 1783|  2.21M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.21M|        return this->get_value();
 1785|  2.21M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  2.21M|    {
  471|  2.21M|        return m_value;
  472|  2.21M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  3.51k|        : base(unexpect, std::move(e.error())),
 1630|  3.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.51k|    {
 1632|  3.51k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  3.51k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.51k|          m_has_value(false)
  466|  3.51k|    {
  467|  3.51k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   768k|    {
 1330|   768k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   764k|        : base(std::in_place, std::forward<U>(val)),
 1584|   764k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   764k|    {
 1586|   764k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   764k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   764k|    {
  457|   764k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   625k|    {
 1993|   625k|        return detail::transform_error_impl(std::move(*this),
 1994|   625k|                                            std::forward<F>(f));
 1995|   625k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   625k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   625k|    else {
 1486|   625k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   625k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   625k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 620k, False: 4.74k]
  |  |  ------------------
  ------------------
 1488|   625k|                   ? result(*std::forward<Exp>(exp))
 1489|   625k|                   : result(unexpect,
 1490|  4.74k|                            trivial_invoke(std::forward<F>(f),
 1491|  4.74k|                                           std::forward<Exp>(exp).error()));
 1492|   625k|    }
 1493|   625k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  2.20M|    {
 1819|  2.20M|        return std::move(value());
 1820|  2.20M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  64.8k|    {
 1770|  64.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  64.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  64.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  64.8k|        return std::move(this->get_unexpected().error());
 1772|  64.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  65.5k|    {
  488|  65.5k|        return m_unexpected;
  489|  65.5k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   705k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   705k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   705k|    {
 1642|   705k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|   768k|    {
 1754|   768k|        return has_value();
 1755|   768k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.53M|    {
  505|  1.53M|        return m_has_value;
  506|  1.53M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  3.51k|    {
 1760|  3.51k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.51k|        return this->get_unexpected().error();
 1762|  3.51k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  3.51k|    {
  488|  3.51k|        return m_unexpected;
  489|  3.51k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   764k|    {
 1819|   764k|        return std::move(value());
 1820|   764k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   764k|    {
 1783|   764k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   764k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   764k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   764k|        return this->get_value();
 1785|   764k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|   764k|    {
  471|   764k|        return m_value;
  472|   764k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1759|    720|    {
 1760|    720|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    720|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    720|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    720|        return this->get_unexpected().error();
 1762|    720|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   681k|        : base(unexpect, std::move(e.error())),
 1630|   681k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   681k|    {
 1632|   681k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   741k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   741k|          m_has_value(false)
  466|   741k|    {
  467|   741k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.11M|    {
 1330|  5.11M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|  13.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  13.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  13.2k|    {
 1586|  13.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  13.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  13.2k|    {
  457|  13.2k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.63M|        : base(unexpect, std::move(e.error())),
 1630|  2.63M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.63M|    {
 1632|  2.63M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.63M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.63M|          m_has_value(false)
  466|  2.63M|    {
  467|  2.63M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  5.73M|    {
 1754|  5.73M|        return has_value();
 1755|  5.73M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  10.3M|    {
  505|  10.3M|        return m_has_value;
  506|  10.3M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  2.00M|    {
 1760|  2.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.00M|        return this->get_unexpected().error();
 1762|  2.00M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  2.00M|    {
  488|  2.00M|        return m_unexpected;
  489|  2.00M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   626k|        : base(std::in_place, std::forward<U>(val)),
 1584|   626k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   626k|    {
 1586|   626k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   626k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   626k|    {
  457|   626k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   626k|    {
 1330|   626k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     24|          m_has_value(false)
  466|     24|    {
  467|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   304k|    {
 1809|   304k|        return value();
 1810|   304k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.88M|    {
 1783|  1.88M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.88M|        return this->get_value();
 1785|  1.88M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  1.88M|    {
  471|  1.88M|        return m_value;
  472|  1.88M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  5.92k|    {
 1754|  5.92k|        return has_value();
 1755|  5.92k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.25M|    {
  505|  1.25M|        return m_has_value;
  506|  1.25M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   620k|    {
 1819|   620k|        return std::move(value());
 1820|   620k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   626k|    {
 1783|   626k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   626k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   626k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   626k|        return this->get_value();
 1785|   626k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   626k|    {
  471|   626k|        return m_value;
  472|   626k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.64M|    {
 1993|  1.64M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.64M|                                            std::forward<F>(f));
 1995|  1.64M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.64M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.64M|    else {
 1486|  1.64M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.64M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.58M, False: 60.0k]
  |  |  ------------------
  ------------------
 1488|  1.64M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.64M|                   : result(unexpect,
 1490|  60.0k|                            trivial_invoke(std::forward<F>(f),
 1491|  60.0k|                                           std::forward<Exp>(exp).error()));
 1492|  1.64M|    }
 1493|  1.64M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  1.73M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.73M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.73M|    {
 1586|  1.73M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.73M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.73M|    {
  457|  1.73M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|  60.0k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  60.0k|    {
 1642|  60.0k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.58M|    {
 1819|  1.58M|        return std::move(value());
 1820|  1.58M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.45M|    {
 3014|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.45M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.45M|    {
 2995|  1.45M|        return t.data();
 2996|  1.45M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   620k|    {
 1993|   620k|        return detail::transform_error_impl(std::move(*this),
 1994|   620k|                                            std::forward<F>(f));
 1995|   620k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   620k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   620k|    else {
 1486|   620k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   620k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   620k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 620k, False: 0]
  |  |  ------------------
  ------------------
 1488|   620k|                   ? result(*std::forward<Exp>(exp))
 1489|   620k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   620k|    }
 1493|   620k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   620k|        : base(std::in_place, std::forward<U>(val)),
 1584|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   620k|    {
 1586|   620k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   620k|    {
  457|   620k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   620k|    {
 1330|   620k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   620k|    {
 1754|   620k|        return has_value();
 1755|   620k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.24M|    {
  505|  1.24M|        return m_has_value;
  506|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   620k|    {
 1819|   620k|        return std::move(value());
 1820|   620k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   620k|    {
 1783|   620k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   620k|        return this->get_value();
 1785|   620k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   620k|    {
  471|   620k|        return m_value;
  472|   620k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   796k|    {
 1979|   796k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   796k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   796k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   796k|    else {
 1486|   796k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   796k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   796k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 796k]
  |  |  ------------------
  ------------------
 1488|   796k|                   ? result(*std::forward<Exp>(exp))
 1489|   796k|                   : result(unexpect,
 1490|   796k|                            trivial_invoke(std::forward<F>(f),
 1491|   796k|                                           std::forward<Exp>(exp).error()));
 1492|   796k|    }
 1493|   796k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   312k|    {
 1809|   312k|        return value();
 1810|   312k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   122k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  16.3k|    {
 1829|  16.3k|        return &value();
 1830|  16.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   497k|    {
 2883|   497k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   497k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   497k|    {
 2864|   497k|        return decay_copy(t.begin());
 2865|   497k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   497k|{
 2108|   497k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   497k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   497k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   277k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   620k|    {
 1993|   620k|        return detail::transform_error_impl(std::move(*this),
 1994|   620k|                                            std::forward<F>(f));
 1995|   620k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   620k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   620k|    else {
 1486|   620k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   620k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   620k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 620k, False: 0]
  |  |  ------------------
  ------------------
 1488|   620k|                   ? result(*std::forward<Exp>(exp))
 1489|   620k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   620k|    }
 1493|   620k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   620k|        : base(std::in_place, std::forward<U>(val)),
 1584|   620k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   620k|    {
 1586|   620k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   620k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   620k|    {
  457|   620k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   620k|    {
 1330|   620k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   620k|    {
 1754|   620k|        return has_value();
 1755|   620k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.24M|    {
  505|  1.24M|        return m_has_value;
  506|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   620k|    {
 1819|   620k|        return std::move(value());
 1820|   620k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   620k|    {
 1783|   620k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   620k|        return this->get_value();
 1785|   620k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   620k|    {
  471|   620k|        return m_value;
  472|   620k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   700k|    {
 1979|   700k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   700k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   700k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   700k|    else {
 1486|   700k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   700k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   700k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 700k]
  |  |  ------------------
  ------------------
 1488|   700k|                   ? result(*std::forward<Exp>(exp))
 1489|   700k|                   : result(unexpect,
 1490|   700k|                            trivial_invoke(std::forward<F>(f),
 1491|   700k|                                           std::forward<Exp>(exp).error()));
 1492|   700k|    }
 1493|   700k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   700k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   700k|    static_cast<    \
  |  | 1109|   700k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   700k|    {
 3930|   700k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   312k|    {
 1809|   312k|        return value();
 1810|   312k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  5.90k|    {
 1829|  5.90k|        return &value();
 1830|  5.90k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   796k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   796k|    static_cast<    \
  |  | 1109|   796k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   796k|    {
 3930|   796k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|   135M|    {
 4375|   135M|        return m_putback_buffer.size() + m_current_view.size();
 4376|   135M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1583|   100k|        : base(std::in_place, std::forward<U>(val)),
 1584|   100k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   100k|    {
 1586|   100k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  455|   100k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   100k|    {
  457|   100k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  1.85M|    {
 6263|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.85M|        return static_cast<std::size_t>(m_desc &
 6268|  1.85M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|  3.71M|    {
 6289|  3.71M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  3.71M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  1.85M|    {
 6231|  1.85M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.85M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.85M|        const auto t = type(id);
 6243|  1.85M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.85M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.85M|        basic_scan_arg<Context> arg;
 6248|  1.85M|        arg.m_type = t;
 6249|  1.85M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.85M, False: 0]
  ------------------
 6250|  1.85M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.85M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.85M|        return arg;
 6256|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  1.85M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.85M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.85M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.85M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.85M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  1.85M|    {
 6293|  1.85M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.85M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  3.52M|    {
 6047|  3.52M|        return m_type != detail::arg_type::none_type;
 6048|  3.52M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   280k|{
 9494|   280k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   280k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   280k|{
 9353|   280k|#define SCN_VISIT(Type)                                                \
 9354|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   280k|    }                                                                  \
 9357|   280k|    else {                                                             \
 9358|   280k|        return vis(monostate_val);                                     \
 9359|   280k|    }
 9360|       |
 9361|   280k|    monostate monostate_val{};
 9362|       |
 9363|   280k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 280k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 280k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 280k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 280k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 280k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 280k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 280k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 280k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 280k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 280k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 280k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 280k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 280k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 280k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 280k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 280k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 280k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  90.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 90.0k, False: 190k]
  ------------------
 9407|  90.0k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  90.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  90.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  90.0k|    }                                                                  \
  |  | 9357|  90.0k|    else {                                                             \
  |  | 9358|  90.0k|        return vis(monostate_val);                                     \
  |  | 9359|  90.0k|    }
  ------------------
 9408|   184k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 94.2k, False: 186k]
  ------------------
 9409|   184k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   184k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   184k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   184k|    }                                                                  \
  |  | 9357|   184k|    else {                                                             \
  |  | 9358|   184k|        return vis(monostate_val);                                     \
  |  | 9359|   184k|    }
  ------------------
 9410|   280k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 96.3k, False: 184k]
  ------------------
 9411|   280k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   280k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   280k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   280k|    }                                                                  \
  |  | 9357|   280k|    else {                                                             \
  |  | 9358|   280k|        return vis(monostate_val);                                     \
  |  | 9359|   280k|    }
  ------------------
 9412|   280k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 280k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   280k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 280k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 280k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 280k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 280k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 280k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 280k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 280k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 280k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 280k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 280k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   280k|            SCN_CLANG_POP
 9473|   280k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  4.98M|{
 6092|  4.98M|    return arg.m_type;
 6093|  4.98M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  2.05M|{
 6104|  2.05M|    return arg.m_value;
 6105|  2.05M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   793k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   793k|    {
 9021|   793k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|  1.10M|{
 4709|  1.10M|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 1.10M]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|  1.10M|    return ranges::subrange{forward_iterator{this, 0},
 4714|  1.10M|                            ranges::default_sentinel};
 4715|  1.10M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|  1.10M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|  1.10M|    {
 4473|  1.10M|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|  1.10M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|  1.10M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   306k|{
 9494|   306k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   306k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   306k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   306k|{
 9353|   306k|#define SCN_VISIT(Type)                                                \
 9354|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   306k|    }                                                                  \
 9357|   306k|    else {                                                             \
 9358|   306k|        return vis(monostate_val);                                     \
 9359|   306k|    }
 9360|       |
 9361|   306k|    monostate monostate_val{};
 9362|       |
 9363|   306k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 306k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 306k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 306k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 306k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 306k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 306k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 306k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 306k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 306k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 306k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 306k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 306k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 306k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 306k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 306k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 306k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 306k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  97.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 97.6k, False: 209k]
  ------------------
 9407|  97.6k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  97.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  97.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  97.6k|    }                                                                  \
  |  | 9357|  97.6k|    else {                                                             \
  |  | 9358|  97.6k|        return vis(monostate_val);                                     \
  |  | 9359|  97.6k|    }
  ------------------
 9408|   201k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 103k, False: 202k]
  ------------------
 9409|   201k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   201k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   201k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   201k|    }                                                                  \
  |  | 9357|   201k|    else {                                                             \
  |  | 9358|   201k|        return vis(monostate_val);                                     \
  |  | 9359|   201k|    }
  ------------------
 9410|   306k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 105k, False: 201k]
  ------------------
 9411|   306k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   306k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   306k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   306k|    }                                                                  \
  |  | 9357|   306k|    else {                                                             \
  |  | 9358|   306k|        return vis(monostate_val);                                     \
  |  | 9359|   306k|    }
  ------------------
 9412|   306k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 306k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   306k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 306k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 306k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 306k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 306k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 306k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 306k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 306k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 306k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 306k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 306k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   306k|            SCN_CLANG_POP
 9473|   306k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|   673k|        : m_format{format},
 6362|   673k|          m_next_arg_id{next_arg_id},
 6363|   673k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   673k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   673k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   673k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   673k|    {
 6369|   673k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   673k|    {
 3089|   673k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   673k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   673k|    {
 3055|   673k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   673k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   673k|{
 7878|   673k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   673k|    handler.check_args_exhausted();
 7880|   673k|    return handler.get_error();
 7881|   673k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   673k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   673k|    auto begin = format.data();
 7846|   673k|    auto it = begin;
 7847|   673k|    const auto end = format.data() + format.size();
 7848|       |
 7849|  1.27M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 673k, False: 600k]
  ------------------
 7850|   673k|        const auto ch = *it++;
 7851|   673k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 673k, False: 0]
  ------------------
 7852|   673k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   673k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   673k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 72.2k, False: 600k]
  ------------------
 7856|  72.2k|                return;
 7857|  72.2k|            }
 7858|   673k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   673k|    }
 7869|       |
 7870|   600k|    handler.on_literal_text(begin, end);
 7871|   600k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|   673k|{
 7775|   673k|    struct id_adapter {
 7776|   673k|        constexpr void operator()()
 7777|   673k|        {
 7778|   673k|            arg_id = handler.on_arg_id();
 7779|   673k|        }
 7780|   673k|        constexpr void operator()(std::size_t id)
 7781|   673k|        {
 7782|   673k|            arg_id = handler.on_arg_id(id);
 7783|   673k|        }
 7784|       |
 7785|   673k|        constexpr void on_error(const char* msg)
 7786|   673k|        {
 7787|   673k|            SCN_UNLIKELY_ATTR
 7788|   673k|            handler.on_error(msg);
 7789|   673k|        }
 7790|       |
 7791|   673k|        Handler& handler;
 7792|   673k|        std::size_t arg_id;
 7793|   673k|    };
 7794|       |
 7795|   673k|    ++begin;
 7796|   673k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   673k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 673k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   673k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 673k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   673k|    else {
 7808|   673k|        auto adapter = id_adapter{handler, 0};
 7809|   673k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   673k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   673k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 673k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   673k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 673k, False: 0]
  ------------------
 7820|   673k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   673k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   673k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  |  Branch (1039:45): [True: 0, False: 673k]
  |  |  |  Branch (1039:45): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   673k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   673k|    }
 7836|   673k|    return begin + 1;
 7837|   673k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|  1.46M|    {
 8919|  1.46M|        return m_args.get(id);
 8920|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|  1.46M|    {
 6397|  1.46M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|  1.46M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|  1.46M|        do_check_arg_id(id);
 6405|  1.46M|        return id;
 6406|  1.46M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|  1.46M|{
 6891|  1.46M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|  1.46M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|  1.46M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   673k|{
 7276|   673k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   673k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 673k, False: 0]
  |  Branch (7277:26): [True: 0, False: 673k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   673k|    handler();
 7282|   673k|    return begin;
 7283|   673k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   673k|        {
 7778|   673k|            arg_id = handler.on_arg_id();
 7779|   673k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|  1.46M|    {
 6392|  1.46M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|  1.46M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  2.93M|    {
 6381|  2.93M|        return m_format.data();
 6382|  2.93M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   673k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   673k|    {
 7962|   673k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   673k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   673k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   673k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|   673k|{
 7691|   673k|    auto do_presentation = [&]() -> const CharT* {
 7692|   673k|        if (*begin == CharT{'['}) {
 7693|   673k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   673k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   673k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   673k|                return begin;
 7699|   673k|            }
 7700|   673k|            handler.on_character_set_string(set);
 7701|   673k|            return begin;
 7702|   673k|        }
 7703|   673k|        if (*begin == CharT{'/'}) {
 7704|   673k|            return parse_presentation_regex(begin, end, handler);
 7705|   673k|        }
 7706|   673k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   673k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   673k|            handler.on_error("Invalid type specifier in format string");
 7709|   673k|            return begin;
 7710|   673k|        }
 7711|   673k|        handler.on_type(type);
 7712|   673k|        return begin;
 7713|   673k|    };
 7714|       |
 7715|   673k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 673k, False: 0]
  |  Branch (7715:28): [True: 673k, False: 0]
  ------------------
 7716|   673k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 673k, False: 0]
  |  Branch (7716:36): [True: 485k, False: 187k]
  ------------------
 7717|   485k|        return do_presentation();
 7718|   485k|    }
 7719|       |
 7720|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   187k|    begin = parse_align(begin, end, handler);
 7726|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   187k|    begin = parse_width(begin, end, handler);
 7732|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   187k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 187k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   187k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 187k, False: 0]
  ------------------
 7751|   187k|        handler.on_localized();
 7752|   187k|        ++begin;
 7753|   187k|    }
 7754|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   187k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 187k, False: 0]
  |  Branch (7759:25): [True: 0, False: 187k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   187k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   187k|    return begin;
 7768|   187k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|  1.46M|{
 7340|  1.46M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 1.05M, False: 412k]
  |  Branch (7340:33): [True: 1.05M, False: 0]
  ------------------
 7341|  1.46M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 412k, False: 0]
  |  Branch (7341:33): [True: 412k, False: 0]
  ------------------
 7342|  1.46M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   485k|    auto do_presentation = [&]() -> const CharT* {
 7692|   485k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 485k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   485k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 485k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   485k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   485k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   485k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 485k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   485k|        handler.on_type(type);
 7712|   485k|        return begin;
 7713|   485k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|  1.05M|{
 7288|  1.05M|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 1.05M]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 1.05M]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 1.05M]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 1.05M]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 1.05M]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 1.05M]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 1.05M]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 1.05M]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 1.05M]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 1.05M]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   447k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 447k, False: 605k]
  ------------------
 7307|   447k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 1.05M]
  ------------------
 7308|   447k|            return presentation_type::float_hex;
 7309|  43.6k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 43.6k, False: 1.01M]
  ------------------
 7310|  43.6k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 1.05M]
  ------------------
 7311|  43.6k|            return presentation_type::float_scientific;
 7312|   219k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 219k, False: 834k]
  ------------------
 7313|   219k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 1.05M]
  ------------------
 7314|   219k|            return presentation_type::float_fixed;
 7315|   342k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 342k, False: 710k]
  ------------------
 7316|   342k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 1.05M]
  ------------------
 7317|   342k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 1.05M]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 1.05M]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 1.05M]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 1.05M]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 1.05M]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 1.05M]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 1.05M]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|  1.05M|    }
 7335|  1.05M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|   187k|{
 7365|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   187k|    auto check_align = [](wchar_t ch) {
 7368|   187k|        switch (ch) {
 7369|   187k|            case L'<':
 7370|   187k|                return align_type::left;
 7371|   187k|            case L'>':
 7372|   187k|                return align_type::right;
 7373|   187k|            case L'^':
 7374|   187k|                return align_type::center;
 7375|   187k|            default:
 7376|   187k|                return align_type::none;
 7377|   187k|        }
 7378|   187k|    };
 7379|       |
 7380|   187k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   187k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  |  Branch (1039:45): [True: 0, False: 187k]
  |  |  |  Branch (1039:45): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7382|   187k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   187k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   187k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   187k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   187k|    const auto begin_before_fill = begin;
 7392|   187k|    begin += potential_fill_len;
 7393|       |
 7394|   187k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 187k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   187k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   187k|    const auto begin_after_fill = begin;
 7400|   187k|    ++begin;
 7401|       |
 7402|   187k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 187k, False: 0]
  ------------------
 7403|   187k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   187k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 187k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   187k|    }
 7411|       |
 7412|   187k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 187k, False: 0]
  ------------------
 7413|   187k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 187k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   187k|        return begin_before_fill;
 7418|   187k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   187k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|   412k|{
 7347|   412k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|   412k|    else {
 7352|   412k|        const auto lengths =
 7353|   412k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|   412k|            "\3\4";
 7355|   412k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|   412k|        return len;
 7357|   412k|    }
 7358|   412k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   374k|    auto check_align = [](wchar_t ch) {
 7368|   374k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 374k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 374k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 374k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   374k|            default:
  ------------------
  |  Branch (7375:13): [True: 374k, False: 0]
  ------------------
 7376|   374k|                return align_type::none;
 7377|   374k|        }
 7378|   374k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|   187k|{
 7430|   187k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   187k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 187k, False: 0]
  |  Branch (7432:33): [True: 0, False: 187k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   187k|    return begin;
 7443|   187k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|   187k|    {
 7967|   187k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   187k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 187k, False: 0]
  ------------------
 7969|   187k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 187k, False: 0]
  ------------------
 7970|   187k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 187k]
  ------------------
 7971|   187k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   187k|        Handler::on_localized();
 7979|   187k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|   636k|    {
 7110|   636k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|   636k|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|   636k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   673k|{
 9494|   673k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   673k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   673k|{
 9353|   673k|#define SCN_VISIT(Type)                                                \
 9354|   673k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   673k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   673k|    }                                                                  \
 9357|   673k|    else {                                                             \
 9358|   673k|        return vis(monostate_val);                                     \
 9359|   673k|    }
 9360|       |
 9361|   673k|    monostate monostate_val{};
 9362|       |
 9363|   673k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 673k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 673k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 673k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 673k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 673k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 673k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 673k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 673k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 673k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 673k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 673k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 673k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 673k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 673k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 673k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 673k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 673k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   218k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 218k, False: 454k]
  ------------------
 9407|   218k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   218k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   218k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   218k|    }                                                                  \
  |  | 9357|   218k|    else {                                                             \
  |  | 9358|   218k|        return vis(monostate_val);                                     \
  |  | 9359|   218k|    }
  ------------------
 9408|   444k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 225k, False: 447k]
  ------------------
 9409|   444k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   444k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   444k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   444k|    }                                                                  \
  |  | 9357|   444k|    else {                                                             \
  |  | 9358|   444k|        return vis(monostate_val);                                     \
  |  | 9359|   444k|    }
  ------------------
 9410|   673k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 228k, False: 444k]
  ------------------
 9411|   673k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   673k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   673k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   673k|    }                                                                  \
  |  | 9357|   673k|    else {                                                             \
  |  | 9358|   673k|        return vis(monostate_val);                                     \
  |  | 9359|   673k|    }
  ------------------
 9412|   673k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 673k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   673k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 673k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 673k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 673k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 673k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 673k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 673k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 673k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 673k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 673k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 673k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   673k|            SCN_CLANG_POP
 9473|   673k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|   793k|        : m_format{format},
 6362|   793k|          m_next_arg_id{next_arg_id},
 6363|   793k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   793k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   793k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   793k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   793k|    {
 6369|   793k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   793k|{
 7878|   793k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   793k|    handler.check_args_exhausted();
 7880|   793k|    return handler.get_error();
 7881|   793k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   793k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   793k|    auto begin = format.data();
 7846|   793k|    auto it = begin;
 7847|   793k|    const auto end = format.data() + format.size();
 7848|       |
 7849|  1.51M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 793k, False: 721k]
  ------------------
 7850|   793k|        const auto ch = *it++;
 7851|   793k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 793k, False: 0]
  ------------------
 7852|   793k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   793k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   793k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 72.2k, False: 721k]
  ------------------
 7856|  72.2k|                return;
 7857|  72.2k|            }
 7858|   793k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   793k|    }
 7869|       |
 7870|   721k|    handler.on_literal_text(begin, end);
 7871|   721k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   721k|    {
 9058|   721k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   721k|    static_cast<    \
  |  | 1109|   721k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   721k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|   793k|{
 7775|   793k|    struct id_adapter {
 7776|   793k|        constexpr void operator()()
 7777|   793k|        {
 7778|   793k|            arg_id = handler.on_arg_id();
 7779|   793k|        }
 7780|   793k|        constexpr void operator()(std::size_t id)
 7781|   793k|        {
 7782|   793k|            arg_id = handler.on_arg_id(id);
 7783|   793k|        }
 7784|       |
 7785|   793k|        constexpr void on_error(const char* msg)
 7786|   793k|        {
 7787|   793k|            SCN_UNLIKELY_ATTR
 7788|   793k|            handler.on_error(msg);
 7789|   793k|        }
 7790|       |
 7791|   793k|        Handler& handler;
 7792|   793k|        std::size_t arg_id;
 7793|   793k|    };
 7794|       |
 7795|   793k|    ++begin;
 7796|   793k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   793k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 793k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   793k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 793k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   793k|    else {
 7808|   793k|        auto adapter = id_adapter{handler, 0};
 7809|   793k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   793k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   793k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 793k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   793k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 793k, False: 0]
  ------------------
 7820|   793k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   793k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   793k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  |  Branch (1039:45): [True: 0, False: 793k]
  |  |  |  Branch (1039:45): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   793k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   793k|    }
 7836|   793k|    return begin + 1;
 7837|   793k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   793k|{
 7276|   793k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   793k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 793k, False: 0]
  |  Branch (7277:26): [True: 0, False: 793k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   793k|    handler();
 7282|   793k|    return begin;
 7283|   793k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   793k|        {
 7778|   793k|            arg_id = handler.on_arg_id();
 7779|   793k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   793k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   793k|    {
 7962|   793k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   793k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   793k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   793k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|   793k|{
 7691|   793k|    auto do_presentation = [&]() -> const CharT* {
 7692|   793k|        if (*begin == CharT{'['}) {
 7693|   793k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   793k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   793k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   793k|                return begin;
 7699|   793k|            }
 7700|   793k|            handler.on_character_set_string(set);
 7701|   793k|            return begin;
 7702|   793k|        }
 7703|   793k|        if (*begin == CharT{'/'}) {
 7704|   793k|            return parse_presentation_regex(begin, end, handler);
 7705|   793k|        }
 7706|   793k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   793k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   793k|            handler.on_error("Invalid type specifier in format string");
 7709|   793k|            return begin;
 7710|   793k|        }
 7711|   793k|        handler.on_type(type);
 7712|   793k|        return begin;
 7713|   793k|    };
 7714|       |
 7715|   793k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 793k, False: 0]
  |  Branch (7715:28): [True: 793k, False: 0]
  ------------------
 7716|   793k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 793k, False: 0]
  |  Branch (7716:36): [True: 567k, False: 225k]
  ------------------
 7717|   567k|        return do_presentation();
 7718|   567k|    }
 7719|       |
 7720|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   225k|    begin = parse_align(begin, end, handler);
 7726|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   225k|    begin = parse_width(begin, end, handler);
 7732|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   225k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 225k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   225k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 225k, False: 0]
  ------------------
 7751|   225k|        handler.on_localized();
 7752|   225k|        ++begin;
 7753|   225k|    }
 7754|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   225k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 225k, False: 0]
  |  Branch (7759:25): [True: 0, False: 225k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   225k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   225k|    return begin;
 7768|   225k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   567k|    auto do_presentation = [&]() -> const CharT* {
 7692|   567k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 567k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   567k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 567k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   567k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   567k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 567k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   567k|        handler.on_type(type);
 7712|   567k|        return begin;
 7713|   567k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|   225k|{
 7365|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   225k|    auto check_align = [](wchar_t ch) {
 7368|   225k|        switch (ch) {
 7369|   225k|            case L'<':
 7370|   225k|                return align_type::left;
 7371|   225k|            case L'>':
 7372|   225k|                return align_type::right;
 7373|   225k|            case L'^':
 7374|   225k|                return align_type::center;
 7375|   225k|            default:
 7376|   225k|                return align_type::none;
 7377|   225k|        }
 7378|   225k|    };
 7379|       |
 7380|   225k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   225k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  |  Branch (1039:45): [True: 0, False: 225k]
  |  |  |  Branch (1039:45): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7382|   225k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   225k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   225k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   225k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   225k|    const auto begin_before_fill = begin;
 7392|   225k|    begin += potential_fill_len;
 7393|       |
 7394|   225k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 225k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   225k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   225k|    const auto begin_after_fill = begin;
 7400|   225k|    ++begin;
 7401|       |
 7402|   225k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 225k, False: 0]
  ------------------
 7403|   225k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   225k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 225k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   225k|    }
 7411|       |
 7412|   225k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 225k, False: 0]
  ------------------
 7413|   225k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 225k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   225k|        return begin_before_fill;
 7418|   225k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   225k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   451k|    auto check_align = [](wchar_t ch) {
 7368|   451k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 451k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 451k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 451k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   451k|            default:
  ------------------
  |  Branch (7375:13): [True: 451k, False: 0]
  ------------------
 7376|   451k|                return align_type::none;
 7377|   451k|        }
 7378|   451k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|   225k|{
 7430|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   225k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 225k, False: 0]
  |  Branch (7432:33): [True: 0, False: 225k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   225k|    return begin;
 7443|   225k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|   225k|    {
 7967|   225k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   225k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 225k, False: 0]
  ------------------
 7969|   225k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 225k, False: 0]
  ------------------
 7970|   225k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 225k]
  ------------------
 7971|   225k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   225k|        Handler::on_localized();
 7979|   225k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   793k|{
 9494|   793k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   793k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   793k|{
 9353|   793k|#define SCN_VISIT(Type)                                                \
 9354|   793k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   793k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   793k|    }                                                                  \
 9357|   793k|    else {                                                             \
 9358|   793k|        return vis(monostate_val);                                     \
 9359|   793k|    }
 9360|       |
 9361|   793k|    monostate monostate_val{};
 9362|       |
 9363|   793k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 793k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 793k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 793k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 793k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 793k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 793k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 793k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 793k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 793k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 793k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 793k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 793k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 793k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 793k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 793k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 793k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 793k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   254k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 254k, False: 538k]
  ------------------
 9407|   254k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   254k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   254k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   254k|    }                                                                  \
  |  | 9357|   254k|    else {                                                             \
  |  | 9358|   254k|        return vis(monostate_val);                                     \
  |  | 9359|   254k|    }
  ------------------
 9408|   522k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 267k, False: 525k]
  ------------------
 9409|   522k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   522k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   522k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   522k|    }                                                                  \
  |  | 9357|   522k|    else {                                                             \
  |  | 9358|   522k|        return vis(monostate_val);                                     \
  |  | 9359|   522k|    }
  ------------------
 9410|   793k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 271k, False: 522k]
  ------------------
 9411|   793k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   793k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   793k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   793k|    }                                                                  \
  |  | 9357|   793k|    else {                                                             \
  |  | 9358|   793k|        return vis(monostate_val);                                     \
  |  | 9359|   793k|    }
  ------------------
 9412|   793k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 793k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   793k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 793k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 793k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 793k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 793k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 793k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 793k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 793k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 793k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 793k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 793k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   793k|            SCN_CLANG_POP
 9473|   793k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  93.8k|    {
 4370|  93.8k|        return sync(0);
 4371|  93.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|  1.13M|    {
 6263|  1.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.13M|        return static_cast<std::size_t>(m_desc &
 6268|  1.13M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.13M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  2.27M|    {
 6289|  2.27M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  2.27M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|  1.13M|    {
 6231|  1.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.13M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.13M|        const auto t = type(id);
 6243|  1.13M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.13M|        basic_scan_arg<Context> arg;
 6248|  1.13M|        arg.m_type = t;
 6249|  1.13M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.13M, False: 0]
  ------------------
 6250|  1.13M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.13M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.13M|        return arg;
 6256|  1.13M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|  1.13M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.13M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.13M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.13M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.13M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|  1.13M|    {
 6293|  1.13M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.13M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  2.16M|    {
 6047|  2.16M|        return m_type != detail::arg_type::none_type;
 6048|  2.16M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   168k|{
 9494|   168k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   168k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   168k|{
 9353|   168k|#define SCN_VISIT(Type)                                                \
 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   168k|    }                                                                  \
 9357|   168k|    else {                                                             \
 9358|   168k|        return vis(monostate_val);                                     \
 9359|   168k|    }
 9360|       |
 9361|   168k|    monostate monostate_val{};
 9362|       |
 9363|   168k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 168k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 168k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 168k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 168k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 168k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 168k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 168k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 168k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 168k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 168k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 168k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 168k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 168k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 168k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 168k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 168k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 168k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  48.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 48.8k, False: 119k]
  ------------------
 9407|  48.8k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  48.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  48.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  48.8k|    }                                                                  \
  |  | 9357|  48.8k|    else {                                                             \
  |  | 9358|  48.8k|        return vis(monostate_val);                                     \
  |  | 9359|  48.8k|    }
  ------------------
 9408|   107k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 58.7k, False: 109k]
  ------------------
 9409|   107k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   107k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   107k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   107k|    }                                                                  \
  |  | 9357|   107k|    else {                                                             \
  |  | 9358|   107k|        return vis(monostate_val);                                     \
  |  | 9359|   107k|    }
  ------------------
 9410|   168k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 60.5k, False: 107k]
  ------------------
 9411|   168k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   168k|    }                                                                  \
  |  | 9357|   168k|    else {                                                             \
  |  | 9358|   168k|        return vis(monostate_val);                                     \
  |  | 9359|   168k|    }
  ------------------
 9412|   168k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 168k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   168k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 168k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 168k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 168k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 168k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 168k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 168k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 168k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 168k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 168k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 168k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   168k|            SCN_CLANG_POP
 9473|   168k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  3.07M|{
 6092|  3.07M|    return arg.m_type;
 6093|  3.07M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.25M|{
 6104|  1.25M|    return arg.m_value;
 6105|  1.25M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   457k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   457k|    {
 9021|   457k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   457k|        : m_format{format},
 6362|   457k|          m_next_arg_id{next_arg_id},
 6363|   457k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   457k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   457k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   457k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   457k|    {
 6369|   457k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   457k|    {
 3089|   457k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   457k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   457k|    {
 3055|   457k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   457k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   457k|{
 7878|   457k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   457k|    handler.check_args_exhausted();
 7880|   457k|    return handler.get_error();
 7881|   457k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   457k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   457k|    auto begin = format.data();
 7846|   457k|    auto it = begin;
 7847|   457k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   770k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 457k, False: 312k]
  ------------------
 7850|   457k|        const auto ch = *it++;
 7851|   457k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 457k, False: 0]
  ------------------
 7852|   457k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   457k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   457k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 144k, False: 312k]
  ------------------
 7856|   144k|                return;
 7857|   144k|            }
 7858|   457k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   457k|    }
 7869|       |
 7870|   312k|    handler.on_literal_text(begin, end);
 7871|   312k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   457k|{
 7775|   457k|    struct id_adapter {
 7776|   457k|        constexpr void operator()()
 7777|   457k|        {
 7778|   457k|            arg_id = handler.on_arg_id();
 7779|   457k|        }
 7780|   457k|        constexpr void operator()(std::size_t id)
 7781|   457k|        {
 7782|   457k|            arg_id = handler.on_arg_id(id);
 7783|   457k|        }
 7784|       |
 7785|   457k|        constexpr void on_error(const char* msg)
 7786|   457k|        {
 7787|   457k|            SCN_UNLIKELY_ATTR
 7788|   457k|            handler.on_error(msg);
 7789|   457k|        }
 7790|       |
 7791|   457k|        Handler& handler;
 7792|   457k|        std::size_t arg_id;
 7793|   457k|    };
 7794|       |
 7795|   457k|    ++begin;
 7796|   457k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   457k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 457k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   457k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 457k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   457k|    else {
 7808|   457k|        auto adapter = id_adapter{handler, 0};
 7809|   457k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   457k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   457k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 457k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   457k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 457k, False: 0]
  ------------------
 7820|   457k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   457k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   457k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  |  Branch (1039:45): [True: 0, False: 457k]
  |  |  |  Branch (1039:45): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   457k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   457k|    }
 7836|   457k|    return begin + 1;
 7837|   457k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   914k|    {
 8919|   914k|        return m_args.get(id);
 8920|   914k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   914k|    {
 6397|   914k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   914k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   914k|        do_check_arg_id(id);
 6405|   914k|        return id;
 6406|   914k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   914k|{
 6891|   914k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   914k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   914k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   457k|{
 7276|   457k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   457k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 457k, False: 0]
  |  Branch (7277:26): [True: 0, False: 457k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   457k|    handler();
 7282|   457k|    return begin;
 7283|   457k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   457k|        {
 7778|   457k|            arg_id = handler.on_arg_id();
 7779|   457k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   914k|    {
 6392|   914k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   914k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   625k|{
 4709|   625k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 625k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   625k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   625k|                            ranges::default_sentinel};
 4715|   625k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   625k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   625k|    {
 4473|   625k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   625k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   625k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   625k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   625k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.82M|    {
 6381|  1.82M|        return m_format.data();
 6382|  1.82M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   457k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   457k|    {
 7962|   457k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   457k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   457k|{
 7691|   457k|    auto do_presentation = [&]() -> const CharT* {
 7692|   457k|        if (*begin == CharT{'['}) {
 7693|   457k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   457k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   457k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   457k|                return begin;
 7699|   457k|            }
 7700|   457k|            handler.on_character_set_string(set);
 7701|   457k|            return begin;
 7702|   457k|        }
 7703|   457k|        if (*begin == CharT{'/'}) {
 7704|   457k|            return parse_presentation_regex(begin, end, handler);
 7705|   457k|        }
 7706|   457k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   457k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   457k|            handler.on_error("Invalid type specifier in format string");
 7709|   457k|            return begin;
 7710|   457k|        }
 7711|   457k|        handler.on_type(type);
 7712|   457k|        return begin;
 7713|   457k|    };
 7714|       |
 7715|   457k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 457k, False: 0]
  |  Branch (7715:28): [True: 457k, False: 0]
  ------------------
 7716|   457k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 457k, False: 0]
  |  Branch (7716:36): [True: 345k, False: 112k]
  ------------------
 7717|   345k|        return do_presentation();
 7718|   345k|    }
 7719|       |
 7720|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   112k|    begin = parse_align(begin, end, handler);
 7726|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   112k|    begin = parse_width(begin, end, handler);
 7732|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   112k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 112k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   112k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 112k, False: 0]
  ------------------
 7751|   112k|        handler.on_localized();
 7752|   112k|        ++begin;
 7753|   112k|    }
 7754|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   112k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 112k, False: 0]
  |  Branch (7759:25): [True: 0, False: 112k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   112k|    return begin;
 7768|   112k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   914k|{
 7340|   914k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 690k, False: 224k]
  |  Branch (7340:33): [True: 690k, False: 0]
  ------------------
 7341|   914k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 224k, False: 0]
  |  Branch (7341:33): [True: 224k, False: 0]
  ------------------
 7342|   914k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   345k|    auto do_presentation = [&]() -> const CharT* {
 7692|   345k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 345k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   345k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 345k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   345k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   345k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   345k|        handler.on_type(type);
 7712|   345k|        return begin;
 7713|   345k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   690k|{
 7288|   690k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 690k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 690k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 690k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 690k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 690k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 690k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 690k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 690k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 690k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 690k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   246k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 246k, False: 443k]
  ------------------
 7307|   246k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 690k]
  ------------------
 7308|   246k|            return presentation_type::float_hex;
 7309|  60.6k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 60.6k, False: 629k]
  ------------------
 7310|  60.6k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 690k]
  ------------------
 7311|  60.6k|            return presentation_type::float_scientific;
 7312|   174k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 174k, False: 515k]
  ------------------
 7313|   174k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 690k]
  ------------------
 7314|   174k|            return presentation_type::float_fixed;
 7315|   207k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 207k, False: 482k]
  ------------------
 7316|   207k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 690k]
  ------------------
 7317|   207k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 690k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 690k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 690k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 690k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 690k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 690k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 690k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   690k|    }
 7335|   690k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|   112k|{
 7365|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   112k|    auto check_align = [](wchar_t ch) {
 7368|   112k|        switch (ch) {
 7369|   112k|            case L'<':
 7370|   112k|                return align_type::left;
 7371|   112k|            case L'>':
 7372|   112k|                return align_type::right;
 7373|   112k|            case L'^':
 7374|   112k|                return align_type::center;
 7375|   112k|            default:
 7376|   112k|                return align_type::none;
 7377|   112k|        }
 7378|   112k|    };
 7379|       |
 7380|   112k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   112k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  |  Branch (1039:45): [True: 0, False: 112k]
  |  |  |  Branch (1039:45): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7382|   112k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   112k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   112k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   112k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   112k|    const auto begin_before_fill = begin;
 7392|   112k|    begin += potential_fill_len;
 7393|       |
 7394|   112k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 112k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   112k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   112k|    const auto begin_after_fill = begin;
 7400|   112k|    ++begin;
 7401|       |
 7402|   112k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 112k, False: 0]
  ------------------
 7403|   112k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   112k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 112k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   112k|    }
 7411|       |
 7412|   112k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 112k, False: 0]
  ------------------
 7413|   112k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 112k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   112k|        return begin_before_fill;
 7418|   112k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   112k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|   224k|{
 7347|   224k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|   224k|    if constexpr (sizeof(CharT) != 1) {
 7349|   224k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|   224k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   224k|    auto check_align = [](wchar_t ch) {
 7368|   224k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 224k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 224k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 224k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   224k|            default:
  ------------------
  |  Branch (7375:13): [True: 224k, False: 0]
  ------------------
 7376|   224k|                return align_type::none;
 7377|   224k|        }
 7378|   224k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|   112k|{
 7430|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   112k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 112k, False: 0]
  |  Branch (7432:33): [True: 0, False: 112k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   112k|    return begin;
 7443|   112k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|   112k|    {
 7967|   112k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   112k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 112k, False: 0]
  ------------------
 7969|   112k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 112k, False: 0]
  ------------------
 7970|   112k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 112k]
  ------------------
 7971|   112k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   112k|        Handler::on_localized();
 7979|   112k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   457k|{
 9494|   457k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   457k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   457k|{
 9353|   457k|#define SCN_VISIT(Type)                                                \
 9354|   457k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   457k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   457k|    }                                                                  \
 9357|   457k|    else {                                                             \
 9358|   457k|        return vis(monostate_val);                                     \
 9359|   457k|    }
 9360|       |
 9361|   457k|    monostate monostate_val{};
 9362|       |
 9363|   457k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 457k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 457k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 457k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 457k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 457k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 457k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 457k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 457k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 457k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 457k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 457k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 457k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 457k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 457k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 457k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 457k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 457k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   142k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 142k, False: 314k]
  ------------------
 9407|   142k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   142k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   142k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   142k|    }                                                                  \
  |  | 9357|   142k|    else {                                                             \
  |  | 9358|   142k|        return vis(monostate_val);                                     \
  |  | 9359|   142k|    }
  ------------------
 9408|   298k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 155k, False: 301k]
  ------------------
 9409|   298k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   298k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   298k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   298k|    }                                                                  \
  |  | 9357|   298k|    else {                                                             \
  |  | 9358|   298k|        return vis(monostate_val);                                     \
  |  | 9359|   298k|    }
  ------------------
 9410|   457k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 158k, False: 298k]
  ------------------
 9411|   457k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   457k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   457k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   457k|    }                                                                  \
  |  | 9357|   457k|    else {                                                             \
  |  | 9358|   457k|        return vis(monostate_val);                                     \
  |  | 9359|   457k|    }
  ------------------
 9412|   457k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 457k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   457k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 457k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 457k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 457k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 457k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 457k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 457k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 457k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 457k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 457k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 457k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   457k|            SCN_CLANG_POP
 9473|   457k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   167k|{
 9494|   167k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   167k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   167k|{
 9353|   167k|#define SCN_VISIT(Type)                                                \
 9354|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   167k|    }                                                                  \
 9357|   167k|    else {                                                             \
 9358|   167k|        return vis(monostate_val);                                     \
 9359|   167k|    }
 9360|       |
 9361|   167k|    monostate monostate_val{};
 9362|       |
 9363|   167k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 167k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 167k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 167k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 167k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 167k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 167k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 167k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 167k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 167k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 167k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 167k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 167k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 167k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 167k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 167k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 167k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 167k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  48.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 48.7k, False: 119k]
  ------------------
 9407|  48.7k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  48.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  48.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  48.7k|    }                                                                  \
  |  | 9357|  48.7k|    else {                                                             \
  |  | 9358|  48.7k|        return vis(monostate_val);                                     \
  |  | 9359|  48.7k|    }
  ------------------
 9408|   107k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 58.6k, False: 109k]
  ------------------
 9409|   107k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   107k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   107k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   107k|    }                                                                  \
  |  | 9357|   107k|    else {                                                             \
  |  | 9358|   107k|        return vis(monostate_val);                                     \
  |  | 9359|   107k|    }
  ------------------
 9410|   167k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 60.5k, False: 107k]
  ------------------
 9411|   167k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   167k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   167k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   167k|    }                                                                  \
  |  | 9357|   167k|    else {                                                             \
  |  | 9358|   167k|        return vis(monostate_val);                                     \
  |  | 9359|   167k|    }
  ------------------
 9412|   167k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 167k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   167k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 167k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 167k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 167k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 167k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 167k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 167k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 167k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 167k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 167k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 167k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   167k|            SCN_CLANG_POP
 9473|   167k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   457k|        : m_format{format},
 6362|   457k|          m_next_arg_id{next_arg_id},
 6363|   457k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   457k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   457k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   457k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   457k|    {
 6369|   457k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   457k|{
 7878|   457k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   457k|    handler.check_args_exhausted();
 7880|   457k|    return handler.get_error();
 7881|   457k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   457k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   457k|    auto begin = format.data();
 7846|   457k|    auto it = begin;
 7847|   457k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   769k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 457k, False: 312k]
  ------------------
 7850|   457k|        const auto ch = *it++;
 7851|   457k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 457k, False: 0]
  ------------------
 7852|   457k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   457k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   457k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 144k, False: 312k]
  ------------------
 7856|   144k|                return;
 7857|   144k|            }
 7858|   457k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   457k|    }
 7869|       |
 7870|   312k|    handler.on_literal_text(begin, end);
 7871|   312k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   312k|    {
 9058|   312k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   312k|    static_cast<    \
  |  | 1109|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   312k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   457k|{
 7775|   457k|    struct id_adapter {
 7776|   457k|        constexpr void operator()()
 7777|   457k|        {
 7778|   457k|            arg_id = handler.on_arg_id();
 7779|   457k|        }
 7780|   457k|        constexpr void operator()(std::size_t id)
 7781|   457k|        {
 7782|   457k|            arg_id = handler.on_arg_id(id);
 7783|   457k|        }
 7784|       |
 7785|   457k|        constexpr void on_error(const char* msg)
 7786|   457k|        {
 7787|   457k|            SCN_UNLIKELY_ATTR
 7788|   457k|            handler.on_error(msg);
 7789|   457k|        }
 7790|       |
 7791|   457k|        Handler& handler;
 7792|   457k|        std::size_t arg_id;
 7793|   457k|    };
 7794|       |
 7795|   457k|    ++begin;
 7796|   457k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   457k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 457k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   457k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 457k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   457k|    else {
 7808|   457k|        auto adapter = id_adapter{handler, 0};
 7809|   457k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   457k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   457k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 457k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   457k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 457k, False: 0]
  ------------------
 7820|   457k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   457k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   457k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  |  Branch (1039:45): [True: 0, False: 457k]
  |  |  |  Branch (1039:45): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   457k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   457k|    }
 7836|   457k|    return begin + 1;
 7837|   457k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   457k|{
 7276|   457k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   457k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 457k, False: 0]
  |  Branch (7277:26): [True: 0, False: 457k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   457k|    handler();
 7282|   457k|    return begin;
 7283|   457k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   457k|        {
 7778|   457k|            arg_id = handler.on_arg_id();
 7779|   457k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   457k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   457k|    {
 7962|   457k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   457k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   457k|{
 7691|   457k|    auto do_presentation = [&]() -> const CharT* {
 7692|   457k|        if (*begin == CharT{'['}) {
 7693|   457k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   457k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   457k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   457k|                return begin;
 7699|   457k|            }
 7700|   457k|            handler.on_character_set_string(set);
 7701|   457k|            return begin;
 7702|   457k|        }
 7703|   457k|        if (*begin == CharT{'/'}) {
 7704|   457k|            return parse_presentation_regex(begin, end, handler);
 7705|   457k|        }
 7706|   457k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   457k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   457k|            handler.on_error("Invalid type specifier in format string");
 7709|   457k|            return begin;
 7710|   457k|        }
 7711|   457k|        handler.on_type(type);
 7712|   457k|        return begin;
 7713|   457k|    };
 7714|       |
 7715|   457k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 457k, False: 0]
  |  Branch (7715:28): [True: 457k, False: 0]
  ------------------
 7716|   457k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 457k, False: 0]
  |  Branch (7716:36): [True: 345k, False: 111k]
  ------------------
 7717|   345k|        return do_presentation();
 7718|   345k|    }
 7719|       |
 7720|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   111k|    begin = parse_align(begin, end, handler);
 7726|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   111k|    begin = parse_width(begin, end, handler);
 7732|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   111k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 111k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   111k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 111k, False: 0]
  ------------------
 7751|   111k|        handler.on_localized();
 7752|   111k|        ++begin;
 7753|   111k|    }
 7754|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   111k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 111k, False: 0]
  |  Branch (7759:25): [True: 0, False: 111k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   111k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   111k|    return begin;
 7768|   111k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   345k|    auto do_presentation = [&]() -> const CharT* {
 7692|   345k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 345k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   345k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 345k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   345k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   345k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 345k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   345k|        handler.on_type(type);
 7712|   345k|        return begin;
 7713|   345k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|   111k|{
 7365|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   111k|    auto check_align = [](wchar_t ch) {
 7368|   111k|        switch (ch) {
 7369|   111k|            case L'<':
 7370|   111k|                return align_type::left;
 7371|   111k|            case L'>':
 7372|   111k|                return align_type::right;
 7373|   111k|            case L'^':
 7374|   111k|                return align_type::center;
 7375|   111k|            default:
 7376|   111k|                return align_type::none;
 7377|   111k|        }
 7378|   111k|    };
 7379|       |
 7380|   111k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   111k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  |  Branch (1039:45): [True: 0, False: 111k]
  |  |  |  Branch (1039:45): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7382|   111k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   111k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   111k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   111k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   111k|    const auto begin_before_fill = begin;
 7392|   111k|    begin += potential_fill_len;
 7393|       |
 7394|   111k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 111k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   111k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   111k|    const auto begin_after_fill = begin;
 7400|   111k|    ++begin;
 7401|       |
 7402|   111k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 111k, False: 0]
  ------------------
 7403|   111k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   111k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 111k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   111k|    }
 7411|       |
 7412|   111k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 111k, False: 0]
  ------------------
 7413|   111k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 111k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   111k|        return begin_before_fill;
 7418|   111k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   111k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   223k|    auto check_align = [](wchar_t ch) {
 7368|   223k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 223k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 223k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 223k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   223k|            default:
  ------------------
  |  Branch (7375:13): [True: 223k, False: 0]
  ------------------
 7376|   223k|                return align_type::none;
 7377|   223k|        }
 7378|   223k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|   111k|{
 7430|   111k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   111k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   111k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   111k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 111k, False: 0]
  |  Branch (7432:33): [True: 0, False: 111k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   111k|    return begin;
 7443|   111k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|   111k|    {
 7967|   111k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   111k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 111k, False: 0]
  ------------------
 7969|   111k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 111k, False: 0]
  ------------------
 7970|   111k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 111k]
  ------------------
 7971|   111k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   111k|        Handler::on_localized();
 7979|   111k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   457k|{
 9494|   457k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   457k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   457k|{
 9353|   457k|#define SCN_VISIT(Type)                                                \
 9354|   457k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   457k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   457k|    }                                                                  \
 9357|   457k|    else {                                                             \
 9358|   457k|        return vis(monostate_val);                                     \
 9359|   457k|    }
 9360|       |
 9361|   457k|    monostate monostate_val{};
 9362|       |
 9363|   457k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 457k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 457k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 457k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 457k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 457k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 457k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 457k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 457k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 457k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 457k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 457k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 457k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 457k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 457k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 457k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 457k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 457k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   142k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 142k, False: 314k]
  ------------------
 9407|   142k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   142k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   142k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   142k|    }                                                                  \
  |  | 9357|   142k|    else {                                                             \
  |  | 9358|   142k|        return vis(monostate_val);                                     \
  |  | 9359|   142k|    }
  ------------------
 9408|   298k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 155k, False: 301k]
  ------------------
 9409|   298k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   298k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   298k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   298k|    }                                                                  \
  |  | 9357|   298k|    else {                                                             \
  |  | 9358|   298k|        return vis(monostate_val);                                     \
  |  | 9359|   298k|    }
  ------------------
 9410|   457k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 158k, False: 298k]
  ------------------
 9411|   457k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   457k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   457k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   457k|    }                                                                  \
  |  | 9357|   457k|    else {                                                             \
  |  | 9358|   457k|        return vis(monostate_val);                                     \
  |  | 9359|   457k|    }
  ------------------
 9412|   457k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 457k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   457k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 457k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 457k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 457k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 457k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 457k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 457k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 457k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 457k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 457k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 457k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   457k|            SCN_CLANG_POP
 9473|   457k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|   187k|    {
 4370|   187k|        return sync(0);
 4371|   187k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|   195k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|   112k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  87.6k|{
   89|  87.6k|    auto result = make_scan_result<Source, Args...>();
   90|  87.6k|    fill_scan_result(result,
   91|  87.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  87.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  87.6k|    return result;
   94|  87.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   284k|{
   44|   284k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   284k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  87.6k|{
  131|  87.6k|    auto result = make_scan_result<Source, Args...>();
  132|  87.6k|    fill_scan_result(result,
  133|  87.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  87.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  87.6k|    return result;
  136|  87.6k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   284k|{
   60|   284k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   284k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  56.0k|{
   72|  56.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  56.0k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  97.5k|{
   89|  97.5k|    auto result = make_scan_result<Source, Args...>();
   90|  97.5k|    fill_scan_result(result,
   91|  97.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.5k|    return result;
   94|  97.5k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  97.5k|{
  131|  97.5k|    auto result = make_scan_result<Source, Args...>();
  132|  97.5k|    fill_scan_result(result,
  133|  97.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.5k|    return result;
  136|  97.5k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.5k|{
  171|  19.5k|    auto result = make_scan_result<Source, T>();
  172|  19.5k|    fill_scan_result(
  173|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.5k|    return result;
  176|  19.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  99.4k|{
   89|  99.4k|    auto result = make_scan_result<Source, Args...>();
   90|  99.4k|    fill_scan_result(result,
   91|  99.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  99.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  99.4k|    return result;
   94|  99.4k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  99.4k|{
  131|  99.4k|    auto result = make_scan_result<Source, Args...>();
  132|  99.4k|    fill_scan_result(result,
  133|  99.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  99.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  99.4k|    return result;
  136|  99.4k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  20.1k|{
  171|  20.1k|    auto result = make_scan_result<Source, T>();
  172|  20.1k|    fill_scan_result(
  173|  20.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.1k|    return result;
  176|  20.1k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  87.5k|{
   89|  87.5k|    auto result = make_scan_result<Source, Args...>();
   90|  87.5k|    fill_scan_result(result,
   91|  87.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  87.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  87.5k|    return result;
   94|  87.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   284k|{
   44|   284k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   284k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  87.5k|{
  131|  87.5k|    auto result = make_scan_result<Source, Args...>();
  132|  87.5k|    fill_scan_result(result,
  133|  87.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  87.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  87.5k|    return result;
  136|  87.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   284k|{
   60|   284k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   284k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  55.9k|{
   72|  55.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  55.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  97.4k|{
   89|  97.4k|    auto result = make_scan_result<Source, Args...>();
   90|  97.4k|    fill_scan_result(result,
   91|  97.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  97.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  97.4k|    return result;
   94|  97.4k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  97.4k|{
  131|  97.4k|    auto result = make_scan_result<Source, Args...>();
  132|  97.4k|    fill_scan_result(result,
  133|  97.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  97.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  97.4k|    return result;
  136|  97.4k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.5k|{
  171|  19.5k|    auto result = make_scan_result<Source, T>();
  172|  19.5k|    fill_scan_result(
  173|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.5k|    return result;
  176|  19.5k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  99.4k|{
   89|  99.4k|    auto result = make_scan_result<Source, Args...>();
   90|  99.4k|    fill_scan_result(result,
   91|  99.4k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  99.4k|                           make_scan_args<wscan_context>(result->values())));
   93|  99.4k|    return result;
   94|  99.4k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  99.4k|{
  131|  99.4k|    auto result = make_scan_result<Source, Args...>();
  132|  99.4k|    fill_scan_result(result,
  133|  99.4k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  99.4k|                           make_scan_args<wscan_context>(result->values())));
  135|  99.4k|    return result;
  136|  99.4k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  20.1k|{
  171|  20.1k|    auto result = make_scan_result<Source, T>();
  172|  20.1k|    fill_scan_result(
  173|  20.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  20.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.1k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.1k|    return result;
  176|  20.1k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.49M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.49M|{
  309|  1.49M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.49M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   628k|{
  315|   628k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   628k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 314k, False: 314k]
  ------------------
  317|   628k|                    : std::locale{};
  318|   628k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   614k|{
 1829|   614k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   614k|                                      m_nan_payload_buffer, value);
 1831|   614k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   614k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 597k, False: 16.9k]
  |  |  ------------------
  ------------------
 1832|   597k|        value = this->setsign(value);
 1833|   597k|        return n;
 1834|   597k|    }
 1835|       |
 1836|  16.9k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 4.86k, False: 12.1k]
  ------------------
 1837|  16.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 1.11k, False: 3.74k]
  ------------------
 1838|  1.11k|        return detail::unexpected_scan_error(
 1839|  1.11k|            scan_error::value_negative_overflow, n.error().msg());
 1840|  1.11k|    }
 1841|  15.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 969, False: 14.8k]
  ------------------
 1842|  15.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 124, False: 845]
  ------------------
 1843|    124|        return detail::unexpected_scan_error(
 1844|    124|            scan_error::value_negative_underflow, n.error().msg());
 1845|    124|    }
 1846|  15.7k|    return n;
 1847|  15.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   293k|{
 1829|   293k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   293k|                                      m_nan_payload_buffer, value);
 1831|   293k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   293k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 257k, False: 35.2k]
  |  |  ------------------
  ------------------
 1832|   257k|        value = this->setsign(value);
 1833|   257k|        return n;
 1834|   257k|    }
 1835|       |
 1836|  35.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.99k, False: 32.2k]
  ------------------
 1837|  35.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 2.89k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  35.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 884, False: 34.2k]
  ------------------
 1842|  35.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 50, False: 834]
  ------------------
 1843|     50|        return detail::unexpected_scan_error(
 1844|     50|            scan_error::value_negative_underflow, n.error().msg());
 1845|     50|    }
 1846|  35.1k|    return n;
 1847|  35.1k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   643k|{
 1829|   643k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   643k|                                      m_nan_payload_buffer, value);
 1831|   643k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   643k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 629k, False: 14.4k]
  |  |  ------------------
  ------------------
 1832|   629k|        value = this->setsign(value);
 1833|   629k|        return n;
 1834|   629k|    }
 1835|       |
 1836|  14.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.51k, False: 11.9k]
  ------------------
 1837|  14.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 647, False: 1.87k]
  ------------------
 1838|    647|        return detail::unexpected_scan_error(
 1839|    647|            scan_error::value_negative_overflow, n.error().msg());
 1840|    647|    }
 1841|  13.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 323, False: 13.5k]
  ------------------
 1842|  13.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 107, False: 216]
  ------------------
 1843|    107|        return detail::unexpected_scan_error(
 1844|    107|            scan_error::value_negative_underflow, n.error().msg());
 1845|    107|    }
 1846|  13.7k|    return n;
 1847|  13.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   337k|{
 1829|   337k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   337k|                                      m_nan_payload_buffer, value);
 1831|   337k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   337k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 304k, False: 33.8k]
  |  |  ------------------
  ------------------
 1832|   304k|        value = this->setsign(value);
 1833|   304k|        return n;
 1834|   304k|    }
 1835|       |
 1836|  33.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 1.73k, False: 32.1k]
  ------------------
 1837|  33.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 1.63k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  33.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 206, False: 33.5k]
  ------------------
 1842|  33.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 188]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  33.7k|    return n;
 1847|  33.7k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   651k|{
 1829|   651k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   651k|                                      m_nan_payload_buffer, value);
 1831|   651k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   651k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 639k, False: 12.7k]
  |  |  ------------------
  ------------------
 1832|   639k|        value = this->setsign(value);
 1833|   639k|        return n;
 1834|   639k|    }
 1835|       |
 1836|  12.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 577, False: 12.1k]
  ------------------
 1837|  12.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 252, False: 325]
  ------------------
 1838|    252|        return detail::unexpected_scan_error(
 1839|    252|            scan_error::value_negative_overflow, n.error().msg());
 1840|    252|    }
 1841|  12.4k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 114, False: 12.3k]
  ------------------
 1842|  12.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 54, False: 60]
  ------------------
 1843|     54|        return detail::unexpected_scan_error(
 1844|     54|            scan_error::value_negative_underflow, n.error().msg());
 1845|     54|    }
 1846|  12.4k|    return n;
 1847|  12.4k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   345k|{
 1829|   345k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   345k|                                      m_nan_payload_buffer, value);
 1831|   345k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   345k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 313k, False: 32.6k]
  |  |  ------------------
  ------------------
 1832|   313k|        value = this->setsign(value);
 1833|   313k|        return n;
 1834|   313k|    }
 1835|       |
 1836|  32.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 164, False: 32.4k]
  ------------------
 1837|  32.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 32, False: 132]
  ------------------
 1838|     32|        return detail::unexpected_scan_error(
 1839|     32|            scan_error::value_negative_overflow, n.error().msg());
 1840|     32|    }
 1841|  32.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 82, False: 32.5k]
  ------------------
 1842|  32.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 64]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  32.6k|    return n;
 1847|  32.6k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  10.0k|{
 2185|  10.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  10.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  10.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  10.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  10.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  10.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 96, False: 9.97k]
  ------------------
 2191|     96|        SCN_UNLIKELY_ATTR
 2192|     96|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     96|                                             "Invalid integer value");
 2194|     96|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  9.97k|    auto start = source.data();
 2198|  9.97k|    const auto end = source.data() + source.size();
 2199|  9.97k|    {
 2200|   150k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 149k, False: 552]
  ------------------
 2201|   149k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 9.42k, False: 140k]
  ------------------
 2202|  9.42k|                break;
 2203|  9.42k|            }
 2204|   149k|        }
 2205|  9.97k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 630, False: 9.34k]
  |  |  |  Branch (1039:45): [True: 552, False: 9.42k]
  |  |  |  Branch (1039:45): [True: 78, False: 9.34k]
  |  |  ------------------
  ------------------
 2206|    630|            value = 0;
 2207|    630|            return ranges::next(source.begin(),
 2208|    630|                                ranges::distance(source.data(), start));
 2209|    630|        }
 2210|  9.97k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  9.34k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  9.34k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 9.34k, False: 0]
  ------------------
 2215|  9.34k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  9.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 936, False: 8.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    936|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    936|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    936|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    936|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    936|    }                                                  \
  |  |  |  | 3957|  9.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  8.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  8.41k|                             detail::make_string_view_from_pointers(start, end),
 2217|  8.41k|                             value, sign == sign_type::minus_sign));
 2218|  8.41k|            return ranges::next(source.begin(),
 2219|  8.41k|                                ranges::distance(source.data(), ptr));
 2220|  9.34k|        }
 2221|  9.34k|    }
 2222|       |
 2223|  9.34k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  9.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  9.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  9.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  9.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 9.34k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  9.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  9.34k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  9.34k|                     base, sign == sign_type::minus_sign));
 2226|  9.34k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  9.34k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2935|   430k|{
 2936|   430k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2937|   430k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2943|   499k|{
 2944|   499k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2945|   499k|    return sync_after_vscan(source, n);
 2946|   499k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2953|   284k|{
 2954|   284k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2955|   284k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2961|   284k|{
 2962|   284k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2963|   284k|    return sync_after_vscan(source, n);
 2964|   284k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  1.62M|{
  207|  1.62M|    return find_classic_impl(
  208|  1.62M|        source, [](char ch) { return is_ascii_space(ch); },
  209|  1.62M|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  1.62M|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.04M|{
  215|  2.04M|    return find_classic_impl(
  216|  2.04M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.04M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.04M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2904|   430k|{
 2905|   430k|    return vscan_internal(source, format, args);
 2906|   430k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2910|   499k|{
 2911|   499k|    auto n = vscan_internal(source, format, args);
 2912|   499k|    return sync_after_vscan(source, n);
 2913|   499k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2918|   284k|{
 2919|   284k|    return vscan_internal(source, format, args);
 2920|   284k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2924|   284k|{
 2925|   284k|    auto n = vscan_internal(source, format, args);
 2926|   284k|    return sync_after_vscan(source, n);
 2927|   284k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2990|  93.5k|{
 2991|  93.5k|    return vscan_value_internal(source, arg);
 2992|  93.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2995|   102k|{
 2996|   102k|    auto n = vscan_value_internal(source, arg);
 2997|   102k|    return sync_after_vscan(source, n);
 2998|   102k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3003|  56.0k|{
 3004|  56.0k|    return vscan_value_internal(source, arg);
 3005|  56.0k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|  55.9k|{
 3010|  55.9k|    auto n = vscan_value_internal(source, arg);
 3011|  55.9k|    return sync_after_vscan(source, n);
 3012|  55.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1959|  9.34k|{
 1960|  9.34k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|  9.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1961|  9.34k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1962|  9.34k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2003|     84|{
 2004|     84|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2005|     84|    return min_safe_u64_table[static_cast<size_t>(base)];
 2006|     84|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2013|  9.34k|{
 2014|  9.34k|    auto max_digits = maxdigits_u64(base);
 2015|  9.34k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 852, False: 8.49k]
  ------------------
 2016|    852|        return true;
 2017|    852|    }
 2018|  8.49k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 84, False: 8.41k]
  |  Branch (2018:39): [True: 84, False: 0]
  ------------------
 2019|     84|        return true;
 2020|     84|    }
 2021|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2023|       |                      static_cast<uint64_t>(is_negative)) {
 2024|       |            SCN_UNLIKELY_ATTR
 2025|       |            return true;
 2026|       |        }
 2027|       |    }
 2028|       |
 2029|  8.41k|    return false;
 2030|  8.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2034|  8.41k|{
 2035|  8.41k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 8.41k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  8.41k|    return static_cast<T>(acc);
 2045|  8.41k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1897|  14.8k|{
 1898|  14.8k|    uint64_t val{};
 1899|  14.8k|    std::memcpy(&val, input, sizeof(uint64_t));
 1900|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1901|       |        val = byteswap(val);
 1902|       |    }
 1903|  14.8k|    return val;
 1904|  14.8k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1907|  7.23k|{
 1908|  7.23k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1909|  7.23k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1910|  7.23k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1911|  7.23k|    word -= 0x3030303030303030;
 1912|  7.23k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1913|  7.23k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1914|  7.23k|    return static_cast<uint32_t>(word);
 1915|  7.23k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1918|  7.64k|{
 1919|  7.64k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1920|  7.64k|              0x8080808080808080));
 1921|  7.64k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  1.62M|{
  131|  1.62M|    auto it = source.begin();
  132|       |
  133|  5.24M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 4.14M, False: 1.10M]
  ------------------
  134|  4.14M|        auto sv =
  135|  4.14M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  4.14M|                .substr(0, 8);
  137|       |
  138|  4.14M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 4.04M, False: 102k]
  ------------------
  139|  4.04M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  4.04M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  4.04M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 480k, False: 3.56M]
  ------------------
  142|   480k|                break;
  143|   480k|            }
  144|  3.56M|            continue;
  145|  4.04M|        }
  146|       |
  147|   339k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 278k, False: 61.7k]
  ------------------
  148|   278k|            auto tmp =
  149|   278k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   278k|            auto res = get_next_code_point(tmp);
  151|   278k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 40.6k, False: 237k]
  ------------------
  152|  40.6k|                return it;
  153|  40.6k|            }
  154|   237k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   237k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   237k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   237k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   237k|        }
  158|   102k|    }
  159|       |
  160|  1.58M|    return detail::make_string_view_iterator(source, it);
  161|  1.62M|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  5.39M|{
  118|  5.39M|    static_assert(sizeof(*source.data()) == 1);
  119|  5.39M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  5.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  5.39M|    uint64_t word{};
  121|  5.39M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  5.39M|    return has_byte_greater(word, 127) != 0;
  124|  5.39M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  24.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   278k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.04M|{
  131|  2.04M|    auto it = source.begin();
  132|       |
  133|  2.22M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.25M, False: 976k]
  ------------------
  134|  1.25M|        auto sv =
  135|  1.25M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.25M|                .substr(0, 8);
  137|       |
  138|  1.25M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.16M, False: 81.1k]
  ------------------
  139|  1.16M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.16M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.16M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 994k, False: 175k]
  ------------------
  142|   994k|                break;
  143|   994k|            }
  144|   175k|            continue;
  145|  1.16M|        }
  146|       |
  147|   144k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 137k, False: 6.43k]
  ------------------
  148|   137k|            auto tmp =
  149|   137k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   137k|            auto res = get_next_code_point(tmp);
  151|   137k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 74.7k, False: 63.1k]
  ------------------
  152|  74.7k|                return it;
  153|  74.7k|            }
  154|  63.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  63.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  63.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  63.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  63.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  63.1k|        }
  158|  81.1k|    }
  159|       |
  160|  1.97M|    return detail::make_string_view_iterator(source, it);
  161|  2.04M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.76M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   137k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   614k|{
 1737|   614k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.31k, False: 611k]
  ------------------
 1738|  3.31k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.31k|            value = std::numeric_limits<T>::infinity();
 1740|  3.31k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.31k|    }
 1748|   614k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 2.94k, False: 611k]
  ------------------
 1749|  2.94k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  2.94k|            value = std::numeric_limits<T>::infinity();
 1751|  2.94k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  2.94k|    }
 1759|   614k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 26.3k, False: 588k]
  ------------------
 1760|  26.3k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  26.3k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  26.3k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  26.3k|    }
 1770|   614k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 3.75k, False: 610k]
  ------------------
 1771|  3.75k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  3.75k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  3.75k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  3.75k|#if SCN_HAS_INT128
 1777|  3.75k|                using payload_type =
 1778|  3.75k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  3.75k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  3.75k|                payload_type payload{};
 1784|  3.75k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 2.90k, False: 850]
  ------------------
 1785|  3.75k|                        nan_payload.view(), payload, {})) {
 1786|  2.90k|                    apply_nan_payload(value, payload);
 1787|  2.90k|                }
 1788|    850|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 310, False: 540]
  ------------------
 1789|    850|                         scan_error::value_positive_overflow) {
 1790|    310|                    apply_nan_payload(value,
 1791|    310|                                      std::numeric_limits<payload_type>::max());
 1792|    310|                }
 1793|  3.75k|            }
 1794|       |
 1795|  3.75k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  3.75k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  3.75k|    }
 1804|       |
 1805|   614k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   578k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 124k, False: 453k]
  ------------------
 1807|   124k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.06k, False: 121k]
  |  |  ------------------
  ------------------
 1808|  3.06k|            return detail::unexpected_scan_error(
 1809|  3.06k|                scan_error::invalid_scanned_value,
 1810|  3.06k|                "Invalid floating-point digit");
 1811|  3.06k|        }
 1812|   124k|    }
 1813|   575k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.06k, False: 567k]
  |  |  ------------------
  ------------------
 1814|  8.06k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  8.06k|                                             "Invalid floating-point digit");
 1816|  8.06k|    }
 1817|       |
 1818|   567k|    return dispatch_parse_float_value<
 1819|   567k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   567k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   567k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   575k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1606|  3.21k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.21k|                                  nil_float_traits>) {
 1610|  3.21k|        using traits = float_traits<F>;
 1611|  3.21k|        typename traits::nan_repr bits{};
 1612|  3.21k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.21k|        traits::apply_nan_payload(bits, payload);
 1614|  3.21k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.21k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  376|  3.21k|    {
  377|  3.21k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  378|  3.21k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1104|  3.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  379|  3.21k|        r.mantissa = payload;
  380|  3.21k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   567k|{
 1711|   567k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   567k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   567k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   567k|{
 1711|   567k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   567k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   567k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   567k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   567k|    else {
 1715|   567k|        auto next =
 1716|   567k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   567k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   567k|                if (!err.has_value()) {
 1721|   567k|                    return unexpected(err.error());
 1722|   567k|                }
 1723|   567k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   567k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   567k|        };
 1727|   567k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   567k|    }
 1729|   567k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   567k|{
 1686|   567k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   567k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   567k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   567k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1071|   567k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   567k|    {
 1073|   567k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   567k|    {
 1078|   567k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   567k|                           generic_strtod);
 1080|   567k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   567k|    {
  873|   567k|        CharT* end{};
  874|   567k|        errno = 0;
  875|   567k|        value = strtod_cb(src, &end);
  876|   567k|        const auto saved_errno = errno;
  877|   567k|        auto chars_read = end - src;
  878|       |
  879|   567k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   567k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   567k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 5.83k, False: 561k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  5.83k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  5.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  5.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  5.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  5.83k|    }
  ------------------
  880|       |
  881|   561k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 120k, False: 440k]
  ------------------
  882|   561k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 120k, False: 0]
  ------------------
  883|   120k|            chars_read -= 2;
  884|   120k|        }
  885|       |
  886|   561k|        return chars_read;
  887|   567k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  915|   828k|    {
  916|   828k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 365k, False: 463k]
  |  Branch (916:41): [True: 0, False: 365k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   828k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 25.2k, False: 803k]
  ------------------
  924|   828k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 25.2k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   828k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 9.92k, False: 819k]
  |  Branch (932:34): [True: 1.85k, False: 8.07k]
  ------------------
  933|  1.85k|            SCN_UNLIKELY_ATTR
  934|  1.85k|            return detail::unexpected_scan_error(
  935|  1.85k|                scan_error::value_positive_underflow,
  936|  1.85k|                "strtod failed: Value too small");
  937|  1.85k|        }
  938|   827k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 8.07k, False: 819k]
  |  Branch (938:34): [True: 0, False: 8.07k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   827k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 827k, False: 0]
  ------------------
  948|   827k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 827k, False: 0]
  ------------------
  949|   827k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 7.86k, False: 819k]
  ------------------
  950|  7.86k|            SCN_UNLIKELY_ATTR
  951|  7.86k|            return detail::unexpected_scan_error(
  952|  7.86k|                scan_error::value_positive_overflow,
  953|  7.86k|                "strtod failed: Value too large");
  954|  7.86k|        }
  955|   819k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 819k, False: 0]
  ------------------
  956|   819k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 819k, False: 0]
  ------------------
  957|   819k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 819k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   819k|        return {};
  965|   819k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  754|   828k|{
  755|   828k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 365k, False: 463k]
  |  Branch (755:44): [True: 0, False: 463k]
  ------------------
  756|   828k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  761|  9.92k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  9.92k|    return value == static_cast<T>(0.0);
  773|  9.92k|#endif
  774|  9.92k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  778|  8.07k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  8.07k|    return value == static_cast<T>(-0.0);
  791|  8.07k|#endif
  792|  8.07k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  797|   827k|{
  798|   827k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   827k|        return value == std::numeric_limits<T>::infinity();
  815|   827k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   827k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  824|   819k|{
  825|   819k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   819k|        return value == -std::numeric_limits<T>::infinity();
  843|   819k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   819k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   567k|    {
  893|   567k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 524k, False: 43.1k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   524k|            auto first_space = read_until_classic_space(input.view());
  896|   524k|            input.assign(
  897|   524k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   524k|        }
  899|       |
  900|   567k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 121k, False: 445k]
  ------------------
  901|   121k|            if constexpr (std::is_same_v<CharT, char>) {
  902|   121k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|   121k|        }
  908|       |
  909|   567k|        return input.get_allocated_string().c_str();
  910|   567k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1084|   567k|    {
 1085|   567k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   567k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   567k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  968|   567k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   567k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|   567k|        if constexpr (std::is_same_v<T, float>) {
 1001|   567k|            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   567k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   567k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   567k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   567k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   293k|{
 1737|   293k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 293k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   293k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 293k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   293k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 293k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   293k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 293k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   293k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   293k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 72.1k, False: 221k]
  ------------------
 1807|  72.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.15k, False: 62.9k]
  |  |  ------------------
  ------------------
 1808|  9.15k|            return detail::unexpected_scan_error(
 1809|  9.15k|                scan_error::invalid_scanned_value,
 1810|  9.15k|                "Invalid floating-point digit");
 1811|  9.15k|        }
 1812|  72.1k|    }
 1813|   283k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.2k, False: 261k]
  |  |  ------------------
  ------------------
 1814|  22.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  22.2k|                                             "Invalid floating-point digit");
 1816|  22.2k|    }
 1817|       |
 1818|   261k|    return dispatch_parse_float_value<
 1819|   261k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   261k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   261k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   283k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|   261k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   261k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|   261k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   261k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   261k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   261k|    else {
 1715|   261k|        auto next =
 1716|   261k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   261k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   261k|                if (!err.has_value()) {
 1721|   261k|                    return unexpected(err.error());
 1722|   261k|                }
 1723|   261k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   261k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   261k|        };
 1727|   261k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   261k|    }
 1729|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   261k|{
 1686|   261k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   261k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   261k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   261k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1071|   261k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   261k|    {
 1073|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   261k|    {
 1078|   261k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   261k|                           generic_strtod);
 1080|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   261k|    {
  873|   261k|        CharT* end{};
  874|   261k|        errno = 0;
  875|   261k|        value = strtod_cb(src, &end);
  876|   261k|        const auto saved_errno = errno;
  877|   261k|        auto chars_read = end - src;
  878|       |
  879|   261k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   261k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.88k, False: 257k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.88k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.88k|    }
  ------------------
  880|       |
  881|   257k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 62.8k, False: 195k]
  ------------------
  882|   257k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 62.8k, False: 0]
  ------------------
  883|  62.8k|            chars_read -= 2;
  884|  62.8k|        }
  885|       |
  886|   257k|        return chars_read;
  887|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   261k|    {
  893|   261k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 255k, False: 6.18k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   255k|            auto first_space = read_until_classic_space(input.view());
  896|   255k|            input.assign(
  897|   255k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   255k|        }
  899|       |
  900|   261k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 62.9k, False: 198k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  62.9k|            else {
  905|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  906|  62.9k|            }
  907|  62.9k|        }
  908|       |
  909|   261k|        return input.get_allocated_string().c_str();
  910|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1084|   261k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   261k|        else {
 1089|   261k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   261k|        }
 1091|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1016|   261k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   261k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|   261k|        if constexpr (std::is_same_v<T, float>) {
 1049|   261k|            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   261k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   261k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   643k|{
 1737|   643k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.74k, False: 640k]
  ------------------
 1738|  3.74k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.74k|            value = std::numeric_limits<T>::infinity();
 1740|  3.74k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.74k|    }
 1748|   643k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 3.11k, False: 640k]
  ------------------
 1749|  3.11k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  3.11k|            value = std::numeric_limits<T>::infinity();
 1751|  3.11k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  3.11k|    }
 1759|   643k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 26.9k, False: 616k]
  ------------------
 1760|  26.9k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  26.9k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  26.9k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  26.9k|    }
 1770|   643k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 3.96k, False: 639k]
  ------------------
 1771|  3.96k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  3.96k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  3.96k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  3.96k|#if SCN_HAS_INT128
 1777|  3.96k|                using payload_type =
 1778|  3.96k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  3.96k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  3.96k|                payload_type payload{};
 1784|  3.96k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.04k, False: 920]
  ------------------
 1785|  3.96k|                        nan_payload.view(), payload, {})) {
 1786|  3.04k|                    apply_nan_payload(value, payload);
 1787|  3.04k|                }
 1788|    920|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 310, False: 610]
  ------------------
 1789|    920|                         scan_error::value_positive_overflow) {
 1790|    310|                    apply_nan_payload(value,
 1791|    310|                                      std::numeric_limits<payload_type>::max());
 1792|    310|                }
 1793|  3.96k|            }
 1794|       |
 1795|  3.96k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  3.96k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  3.96k|    }
 1804|       |
 1805|   643k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   606k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 128k, False: 477k]
  ------------------
 1807|   128k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.12k, False: 125k]
  |  |  ------------------
  ------------------
 1808|  3.12k|            return detail::unexpected_scan_error(
 1809|  3.12k|                scan_error::invalid_scanned_value,
 1810|  3.12k|                "Invalid floating-point digit");
 1811|  3.12k|        }
 1812|   128k|    }
 1813|   602k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.52k, False: 594k]
  |  |  ------------------
  ------------------
 1814|  8.52k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  8.52k|                                             "Invalid floating-point digit");
 1816|  8.52k|    }
 1817|       |
 1818|   594k|    return dispatch_parse_float_value<
 1819|   594k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   594k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   594k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   602k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1606|  3.35k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.35k|                                  nil_float_traits>) {
 1610|  3.35k|        using traits = float_traits<F>;
 1611|  3.35k|        typename traits::nan_repr bits{};
 1612|  3.35k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.35k|        traits::apply_nan_payload(bits, payload);
 1614|  3.35k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.35k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  429|  3.35k|    {
  430|  3.35k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  431|  3.35k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1104|  3.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  432|  3.35k|        r.mantissa0 = payload >> 32;
  433|  3.35k|        r.mantissa1 = payload;
  434|  3.35k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   594k|{
 1711|   594k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   594k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   594k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   594k|{
 1711|   594k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   594k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   594k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   594k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   594k|    else {
 1715|   594k|        auto next =
 1716|   594k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   594k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   594k|                if (!err.has_value()) {
 1721|   594k|                    return unexpected(err.error());
 1722|   594k|                }
 1723|   594k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   594k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   594k|        };
 1727|   594k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   594k|    }
 1729|   594k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   594k|{
 1686|   594k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   594k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   594k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   594k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1071|   594k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   594k|    {
 1073|   594k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   594k|    {
 1078|   594k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   594k|                           generic_strtod);
 1080|   594k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   594k|    {
  873|   594k|        CharT* end{};
  874|   594k|        errno = 0;
  875|   594k|        value = strtod_cb(src, &end);
  876|   594k|        const auto saved_errno = errno;
  877|   594k|        auto chars_read = end - src;
  878|       |
  879|   594k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   594k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.84k, False: 591k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.84k|    }
  ------------------
  880|       |
  881|   591k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 125k, False: 466k]
  ------------------
  882|   591k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 125k, False: 0]
  ------------------
  883|   125k|            chars_read -= 2;
  884|   125k|        }
  885|       |
  886|   591k|        return chars_read;
  887|   594k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|   900k|    {
  916|   900k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 402k, False: 497k]
  |  Branch (916:41): [True: 0, False: 402k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   900k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 26.9k, False: 873k]
  ------------------
  924|   900k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 26.9k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   900k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 6.84k, False: 893k]
  |  Branch (932:34): [True: 529, False: 6.31k]
  ------------------
  933|    529|            SCN_UNLIKELY_ATTR
  934|    529|            return detail::unexpected_scan_error(
  935|    529|                scan_error::value_positive_underflow,
  936|    529|                "strtod failed: Value too small");
  937|    529|        }
  938|   899k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 6.31k, False: 893k]
  |  Branch (938:34): [True: 0, False: 6.31k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   899k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 899k, False: 0]
  ------------------
  948|   899k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 899k, False: 0]
  ------------------
  949|   899k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 4.25k, False: 895k]
  ------------------
  950|  4.25k|            SCN_UNLIKELY_ATTR
  951|  4.25k|            return detail::unexpected_scan_error(
  952|  4.25k|                scan_error::value_positive_overflow,
  953|  4.25k|                "strtod failed: Value too large");
  954|  4.25k|        }
  955|   895k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 895k, False: 0]
  ------------------
  956|   895k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 895k, False: 0]
  ------------------
  957|   895k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 895k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   895k|        return {};
  965|   895k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|   900k|{
  755|   900k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 402k, False: 497k]
  |  Branch (755:44): [True: 0, False: 497k]
  ------------------
  756|   900k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  761|  6.84k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  6.84k|    return value == static_cast<T>(0.0);
  773|  6.84k|#endif
  774|  6.84k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  778|  6.31k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  6.31k|    return value == static_cast<T>(-0.0);
  791|  6.31k|#endif
  792|  6.31k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|   899k|{
  798|   899k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   899k|        return value == std::numeric_limits<T>::infinity();
  815|   899k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   899k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|   895k|{
  825|   895k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   895k|        return value == -std::numeric_limits<T>::infinity();
  843|   895k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   895k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   594k|    {
  893|   594k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 547k, False: 46.9k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   547k|            auto first_space = read_until_classic_space(input.view());
  896|   547k|            input.assign(
  897|   547k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   547k|        }
  899|       |
  900|   594k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 125k, False: 469k]
  ------------------
  901|   125k|            if constexpr (std::is_same_v<CharT, char>) {
  902|   125k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|   125k|        }
  908|       |
  909|   594k|        return input.get_allocated_string().c_str();
  910|   594k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1084|   594k|    {
 1085|   594k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   594k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   594k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  968|   594k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   594k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|   594k|        else if constexpr (std::is_same_v<T, double>) {
 1004|   594k|            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   594k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   594k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   337k|{
 1737|   337k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 337k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   337k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 337k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   337k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 337k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   337k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 337k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   337k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   337k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 72.1k, False: 265k]
  ------------------
 1807|  72.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.16k, False: 62.9k]
  |  |  ------------------
  ------------------
 1808|  9.16k|            return detail::unexpected_scan_error(
 1809|  9.16k|                scan_error::invalid_scanned_value,
 1810|  9.16k|                "Invalid floating-point digit");
 1811|  9.16k|        }
 1812|  72.1k|    }
 1813|   328k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.7k, False: 306k]
  |  |  ------------------
  ------------------
 1814|  22.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  22.7k|                                             "Invalid floating-point digit");
 1816|  22.7k|    }
 1817|       |
 1818|   306k|    return dispatch_parse_float_value<
 1819|   306k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   306k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   306k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   328k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|   306k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   306k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|   306k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   306k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   306k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   306k|    else {
 1715|   306k|        auto next =
 1716|   306k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   306k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   306k|                if (!err.has_value()) {
 1721|   306k|                    return unexpected(err.error());
 1722|   306k|                }
 1723|   306k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   306k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   306k|        };
 1727|   306k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   306k|    }
 1729|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   306k|{
 1686|   306k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   306k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   306k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   306k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|   306k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   306k|    {
 1073|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   306k|    {
 1078|   306k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   306k|                           generic_strtod);
 1080|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   306k|    {
  873|   306k|        CharT* end{};
  874|   306k|        errno = 0;
  875|   306k|        value = strtod_cb(src, &end);
  876|   306k|        const auto saved_errno = errno;
  877|   306k|        auto chars_read = end - src;
  878|       |
  879|   306k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   306k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.94k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.94k|    }
  ------------------
  880|       |
  881|   304k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 62.8k, False: 241k]
  ------------------
  882|   304k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 62.8k, False: 0]
  ------------------
  883|  62.8k|            chars_read -= 2;
  884|  62.8k|        }
  885|       |
  886|   304k|        return chars_read;
  887|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   306k|    {
  893|   306k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 298k, False: 7.08k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   298k|            auto first_space = read_until_classic_space(input.view());
  896|   298k|            input.assign(
  897|   298k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   298k|        }
  899|       |
  900|   306k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 62.9k, False: 243k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  62.9k|            else {
  905|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  906|  62.9k|            }
  907|  62.9k|        }
  908|       |
  909|   306k|        return input.get_allocated_string().c_str();
  910|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|   306k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   306k|        else {
 1089|   306k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   306k|        }
 1091|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|   306k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   306k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|   306k|        else if constexpr (std::is_same_v<T, double>) {
 1052|   306k|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   306k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   306k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   306k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   306k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   651k|{
 1737|   651k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.87k, False: 648k]
  ------------------
 1738|  3.87k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.87k|            value = std::numeric_limits<T>::infinity();
 1740|  3.87k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.87k|    }
 1748|   651k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 3.25k, False: 648k]
  ------------------
 1749|  3.25k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  3.25k|            value = std::numeric_limits<T>::infinity();
 1751|  3.25k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  3.25k|    }
 1759|   651k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 27.1k, False: 624k]
  ------------------
 1760|  27.1k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  27.1k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  27.1k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  27.1k|    }
 1770|   651k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.05k, False: 647k]
  ------------------
 1771|  4.05k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.05k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.05k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.05k|#if SCN_HAS_INT128
 1777|  4.05k|                using payload_type =
 1778|  4.05k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.05k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.05k|                payload_type payload{};
 1784|  4.05k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.09k, False: 958]
  ------------------
 1785|  4.05k|                        nan_payload.view(), payload, {})) {
 1786|  3.09k|                    apply_nan_payload(value, payload);
 1787|  3.09k|                }
 1788|    958|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 316, False: 642]
  ------------------
 1789|    958|                         scan_error::value_positive_overflow) {
 1790|    316|                    apply_nan_payload(value,
 1791|    316|                                      std::numeric_limits<payload_type>::max());
 1792|    316|                }
 1793|  4.05k|            }
 1794|       |
 1795|  4.05k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.05k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.05k|    }
 1804|       |
 1805|   651k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   613k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 129k, False: 484k]
  ------------------
 1807|   129k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|   129k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.20k, False: 125k]
  |  |  ------------------
  ------------------
 1808|  3.20k|            return detail::unexpected_scan_error(
 1809|  3.20k|                scan_error::invalid_scanned_value,
 1810|  3.20k|                "Invalid floating-point digit");
 1811|  3.20k|        }
 1812|   129k|    }
 1813|   610k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.81k, False: 601k]
  |  |  ------------------
  ------------------
 1814|  8.81k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  8.81k|                                             "Invalid floating-point digit");
 1816|  8.81k|    }
 1817|       |
 1818|   601k|    return dispatch_parse_float_value<
 1819|   601k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   601k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   601k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   610k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1606|  3.40k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.40k|                                  nil_float_traits>) {
 1610|  3.40k|        using traits = float_traits<F>;
 1611|  3.40k|        typename traits::nan_repr bits{};
 1612|  3.40k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.40k|        traits::apply_nan_payload(bits, payload);
 1614|  3.40k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.40k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  494|  3.40k|    {
  495|  3.40k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  496|  3.40k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1104|  3.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  497|  3.40k|        r.mantissa0 = payload >> 32;
  498|  3.40k|        r.mantissa1 = payload;
  499|  3.40k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   601k|{
 1711|   601k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   601k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   601k|{
 1711|   601k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   601k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   601k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   601k|    else {
 1715|   601k|        auto next =
 1716|   601k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   601k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   601k|                if (!err.has_value()) {
 1721|   601k|                    return unexpected(err.error());
 1722|   601k|                }
 1723|   601k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   601k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   601k|        };
 1727|   601k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   601k|    }
 1729|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   601k|{
 1686|   601k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   601k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   601k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   601k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1071|   601k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   601k|    {
 1073|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   601k|    {
 1078|   601k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   601k|                           generic_strtod);
 1080|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   601k|    {
  873|   601k|        CharT* end{};
  874|   601k|        errno = 0;
  875|   601k|        value = strtod_cb(src, &end);
  876|   601k|        const auto saved_errno = errno;
  877|   601k|        auto chars_read = end - src;
  878|       |
  879|   601k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   601k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 691, False: 600k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    691|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    691|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    691|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    691|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    691|    }
  ------------------
  880|       |
  881|   600k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 125k, False: 475k]
  ------------------
  882|   600k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 125k, False: 0]
  ------------------
  883|   125k|            chars_read -= 2;
  884|   125k|        }
  885|       |
  886|   600k|        return chars_read;
  887|   601k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  915|   914k|    {
  916|   914k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 408k, False: 505k]
  |  Branch (916:41): [True: 0, False: 408k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   914k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 26.9k, False: 887k]
  ------------------
  924|   914k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 26.9k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   914k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 937, False: 913k]
  |  Branch (932:34): [True: 196, False: 741]
  ------------------
  933|    196|            SCN_UNLIKELY_ATTR
  934|    196|            return detail::unexpected_scan_error(
  935|    196|                scan_error::value_positive_underflow,
  936|    196|                "strtod failed: Value too small");
  937|    196|        }
  938|   914k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 741, False: 913k]
  |  Branch (938:34): [True: 0, False: 741]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   914k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 914k, False: 0]
  ------------------
  948|   914k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 914k, False: 0]
  ------------------
  949|   914k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 741, False: 913k]
  ------------------
  950|    741|            SCN_UNLIKELY_ATTR
  951|    741|            return detail::unexpected_scan_error(
  952|    741|                scan_error::value_positive_overflow,
  953|    741|                "strtod failed: Value too large");
  954|    741|        }
  955|   913k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 913k, False: 0]
  ------------------
  956|   913k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 913k, False: 0]
  ------------------
  957|   913k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 913k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   913k|        return {};
  965|   913k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  754|   914k|{
  755|   914k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 408k, False: 505k]
  |  Branch (755:44): [True: 0, False: 505k]
  ------------------
  756|   914k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  761|    937|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|    937|    return value == static_cast<T>(0.0);
  773|    937|#endif
  774|    937|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  778|    741|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    741|    return value == static_cast<T>(-0.0);
  791|    741|#endif
  792|    741|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  797|   914k|{
  798|   914k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   914k|        return value == std::numeric_limits<T>::infinity();
  815|   914k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   914k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  824|   913k|{
  825|   913k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   913k|        return value == -std::numeric_limits<T>::infinity();
  843|   913k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   913k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   601k|    {
  893|   601k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 554k, False: 47.3k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   554k|            auto first_space = read_until_classic_space(input.view());
  896|   554k|            input.assign(
  897|   554k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   554k|        }
  899|       |
  900|   601k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 125k, False: 475k]
  ------------------
  901|   125k|            if constexpr (std::is_same_v<CharT, char>) {
  902|   125k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|   125k|        }
  908|       |
  909|   601k|        return input.get_allocated_string().c_str();
  910|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1084|   601k|    {
 1085|   601k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   601k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  968|   601k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   601k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|   601k|        else if constexpr (std::is_same_v<T, long double>) {
 1007|   601k|            return std::strtold(str, str_end);
 1008|   601k|        }
 1009|      0|#endif
 1010|       |
 1011|   601k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   601k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   345k|{
 1737|   345k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 345k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   345k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 345k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   345k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 345k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   345k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 345k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   345k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   345k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   345k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   345k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 72.1k, False: 273k]
  ------------------
 1807|  72.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  72.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.17k, False: 62.9k]
  |  |  ------------------
  ------------------
 1808|  9.17k|            return detail::unexpected_scan_error(
 1809|  9.17k|                scan_error::invalid_scanned_value,
 1810|  9.17k|                "Invalid floating-point digit");
 1811|  9.17k|        }
 1812|  72.1k|    }
 1813|   336k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.2k, False: 313k]
  |  |  ------------------
  ------------------
 1814|  23.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  23.2k|                                             "Invalid floating-point digit");
 1816|  23.2k|    }
 1817|       |
 1818|   313k|    return dispatch_parse_float_value<
 1819|   313k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   313k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   313k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   336k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   313k|{
 1711|   313k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   313k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   313k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   313k|{
 1711|   313k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   313k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   313k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   313k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   313k|    else {
 1715|   313k|        auto next =
 1716|   313k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   313k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   313k|                if (!err.has_value()) {
 1721|   313k|                    return unexpected(err.error());
 1722|   313k|                }
 1723|   313k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   313k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   313k|        };
 1727|   313k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   313k|    }
 1729|   313k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   313k|{
 1686|   313k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   313k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   313k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   313k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1071|   313k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   313k|    {
 1073|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   313k|    {
 1078|   313k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   313k|                           generic_strtod);
 1080|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   313k|    {
  873|   313k|        CharT* end{};
  874|   313k|        errno = 0;
  875|   313k|        value = strtod_cb(src, &end);
  876|   313k|        const auto saved_errno = errno;
  877|   313k|        auto chars_read = end - src;
  878|       |
  879|   313k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   313k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 246, False: 313k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    246|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    246|    }
  ------------------
  880|       |
  881|   313k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 62.9k, False: 250k]
  ------------------
  882|   313k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 62.9k, False: 0]
  ------------------
  883|  62.9k|            chars_read -= 2;
  884|  62.9k|        }
  885|       |
  886|   313k|        return chars_read;
  887|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   313k|    {
  893|   313k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 305k, False: 7.36k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   305k|            auto first_space = read_until_classic_space(input.view());
  896|   305k|            input.assign(
  897|   305k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   305k|        }
  899|       |
  900|   313k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 62.9k, False: 250k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  62.9k|            else {
  905|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  906|  62.9k|            }
  907|  62.9k|        }
  908|       |
  909|   313k|        return input.get_allocated_string().c_str();
  910|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1084|   313k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   313k|        else {
 1089|   313k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   313k|        }
 1091|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1016|   313k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   313k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|   313k|        else if constexpr (std::is_same_v<T, long double>) {
 1055|   313k|            return std::wcstold(str, str_end);
 1056|   313k|        }
 1057|      0|#endif
 1058|       |
 1059|   313k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   313k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1939|  9.34k|{
 1940|  9.34k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1941|       |
 1942|  34.8k|    while (begin != end) {
  ------------------
  |  Branch (1942:12): [True: 26.0k, False: 8.73k]
  ------------------
 1943|  26.0k|        const auto digit = char_to_int(*begin);
 1944|  26.0k|        if (digit >= 10) {
  ------------------
  |  Branch (1944:13): [True: 610, False: 25.4k]
  ------------------
 1945|    610|            break;
 1946|    610|        }
 1947|  25.4k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1948|  25.4k|        ++begin;
 1949|  25.4k|    }
 1950|       |
 1951|  9.34k|    return begin;
 1952|  9.34k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1926|  9.34k|{
 1927|  9.34k|    while (
 1928|  16.5k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1928:9): [True: 7.64k, False: 8.93k]
  ------------------
 1929|  16.5k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1929:9): [True: 7.23k, False: 412]
  ------------------
 1930|  7.23k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1931|  7.23k|                                      get_eight_digits_word(p));
 1932|  7.23k|        p += 8;
 1933|  7.23k|    }
 1934|  9.34k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  9.34k|{
 2052|  9.34k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  9.34k|    uint64_t u64val{};
 2055|  9.34k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  9.34k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  9.34k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  9.34k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  9.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 936, False: 8.41k]
  |  |  ------------------
  ------------------
 2060|  9.34k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|    936|        return detail::unexpected_scan_error(
 2062|    936|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 936]
  ------------------
 2063|    936|                        : scan_error::value_positive_overflow,
 2064|    936|            "Integer overflow");
 2065|    936|    }
 2066|       |
 2067|  8.41k|    val = store_result<T>(u64val, is_negative);
 2068|  8.41k|    return ptr;
 2069|  9.34k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   998k|{
 2802|   998k|    const auto argcount = args.size();
 2803|   998k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 204k, False: 793k]
  |  Branch (2803:60): [True: 204k, False: 0]
  ------------------
 2804|   204k|        auto arg = args.get(0);
 2805|   204k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   204k|    static_cast<    \
  |  | 1109|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|   204k|    }
 2807|       |
 2808|   793k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 793k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|   793k|    SCN_UNLIKELY_ATTR
 2816|   793k|    {
 2817|   793k|        auto handler = format_handler<false, CharT>{
 2818|   793k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|   793k|        return vscan_parse_format_string(format, handler);
 2820|   793k|    }
 2821|   793k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|  1.85M|{
 2350|  1.85M|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 1.46M, False: 391k]
  ------------------
 2351|  1.46M|        return false;
 2352|  1.46M|    }
 2353|   391k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 391k, False: 0]
  |  Branch (2353:39): [True: 391k, False: 0]
  ------------------
 2354|  1.85M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|   306k|{
 2383|   306k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|   306k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   306k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|   306k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|   306k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   306k|    static_cast<    \
  |  | 1109|   306k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|   306k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 21.6k, False: 285k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  21.6k|    }                                                  \
  |  |  |  | 3957|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|   285k|    return it.position();
 2400|   306k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2625|   673k|        : format_handler_base{argcount},
 2626|   673k|          parse_ctx{source_tag<Source&&>, format},
 2627|   673k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   673k|    static_cast<    \
  |  | 1109|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   673k|    static_cast<    \
  |  | 1109|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   673k|    {
 2629|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2443|  2.38M|    format_handler_base(size_t argcount) : args_count(argcount)
 2444|  2.38M|    {
 2445|  2.38M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.38M]
  |  |  ------------------
  ------------------
 2446|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2447|      0|        }
 2448|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2576|   673k|        : contiguous_ctx(source, args, loc)
 2577|   673k|    {
 2578|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   673k|{
 2767|   673k|    const auto beg = handler.get_ctx().begin();
 2768|   673k|    detail::parse_format_string<false>(format, handler);
 2769|   673k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72.2k, False: 600k]
  |  |  ------------------
  ------------------
 2770|  72.2k|        return unexpected(err.error());
 2771|  72.2k|    }
 2772|   600k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   673k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2750|  4.56M|    {
 2751|  4.56M|        return ctx.get();
 2752|  4.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2581|  4.56M|    {
 2582|  4.56M|        return contiguous_ctx;
 2583|  4.56M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2632|  1.27M|    {
 2633|  1.27M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 1.27M]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|  1.27M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2492|   433k|    {
 2493|   433k|        error = unexpected(err);
 2494|   433k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2404|   673k|{
 2405|   673k|    auto arg = ctx.arg(id);
 2406|   673k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   673k|    return arg;
 2410|   673k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2518|  2.38M|    {
 2519|  2.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.38M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return;
 2523|      0|        }
 2524|       |
 2525|  2.38M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.38M]
  |  |  ------------------
  ------------------
 2526|      0|            on_error({scan_error::invalid_format_string,
 2527|      0|                      "Argument with this ID has already been scanned"});
 2528|      0|        }
 2529|       |
 2530|  2.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  2.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.38M, False: 0]
  |  |  ------------------
  ------------------
 2531|  2.38M|            visited_args_lower64 |= (1ull << id);
 2532|  2.38M|            return;
 2533|  2.38M|        }
 2534|       |
 2535|      0|        id -= 64;
 2536|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2537|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2502|  2.38M|    {
 2503|  2.38M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  2.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.38M]
  |  |  ------------------
  ------------------
 2504|      0|            on_error({scan_error::invalid_format_string,
 2505|      0|                      "Argument ID out-of-range"});
 2506|      0|            return false;
 2507|      0|        }
 2508|       |
 2509|  2.38M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  2.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.38M, False: 0]
  |  |  ------------------
  ------------------
 2510|  2.38M|            return (visited_args_lower64 >> id) & 1ull;
 2511|  2.38M|        }
 2512|       |
 2513|      0|        id -= 64;
 2514|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2515|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2672|   673k|    {
 2673|   673k|        return parse_ctx.next_arg_id();
 2674|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2712|   673k|    {
 2713|   673k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   673k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   673k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 673k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   673k|        auto specs = detail::format_specs{};
 2726|   673k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   673k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   673k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   673k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   673k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 673k]
  |  Branch (2731:29): [True: 0, False: 673k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   673k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 673k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   673k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   673k|        on_visit_scan_arg(
 2743|   673k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   673k|                                           get_ctx().locale()},
 2745|   673k|            arg);
 2746|   673k|        return parse_ctx.begin();
 2747|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2422|   673k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   673k|    {
 2424|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2683|   673k|    {
 2684|   673k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 673k]
  |  Branch (2684:13): [True: 0, False: 673k]
  |  Branch (2684:29): [True: 0, False: 673k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   673k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   673k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   673k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72.2k, False: 600k]
  |  |  ------------------
  ------------------
 2691|  72.2k|            on_error(r.error());
 2692|  72.2k|        }
 2693|   600k|        else {
 2694|   600k|            get_ctx().advance_to(*r);
 2695|   600k|        }
 2696|   673k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2451|  2.38M|    {
 2452|  2.38M|        {
 2453|  2.38M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2453:45): [True: 0, False: 2.38M]
  ------------------
 2454|  2.38M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2454:35): [True: 0, False: 2.38M]
  ------------------
 2455|  2.38M|                                      ? std::numeric_limits<uint64_t>::max()
 2456|  2.38M|                                      : (1ull << args_count_lower64) - 1;
 2457|       |
 2458|  2.38M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2458:17): [True: 0, False: 2.38M]
  ------------------
 2459|      0|                return on_error({scan_error::invalid_format_string,
 2460|      0|                                 "Argument list not exhausted"});
 2461|      0|            }
 2462|  2.38M|        }
 2463|       |
 2464|  2.38M|        if (args_count < 64) {
  ------------------
  |  Branch (2464:13): [True: 2.38M, False: 0]
  ------------------
 2465|  2.38M|            return;
 2466|  2.38M|        }
 2467|       |
 2468|      0|        auto last_args_count = args_count - 64;
 2469|      0|        for (auto it = visited_args_upper.begin();
 2470|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2470:14): [True: 0, False: 0]
  ------------------
 2471|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2471:17): [True: 0, False: 0]
  ------------------
 2472|      0|                return on_error({scan_error::invalid_format_string,
 2473|      0|                                 "Argument list not exhausted"});
 2474|      0|            }
 2475|      0|            last_args_count -= 8;
 2476|      0|        }
 2477|       |
 2478|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2479|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2479:13): [True: 0, False: 0]
  ------------------
 2480|      0|            return on_error({scan_error::invalid_format_string,
 2481|      0|                             "Argument list not exhausted"});
 2482|      0|        }
 2483|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2497|  9.52M|    {
 2498|  9.52M|        return error;
 2499|  9.52M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2625|   793k|        : format_handler_base{argcount},
 2626|   793k|          parse_ctx{source_tag<Source&&>, format},
 2627|   793k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   793k|    {
 2629|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2552|   793k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   793k|    static_cast<    \
  |  | 1109|   793k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|   793k|    {
 2554|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   793k|{
 2767|   793k|    const auto beg = handler.get_ctx().begin();
 2768|   793k|    detail::parse_format_string<false>(format, handler);
 2769|   793k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72.2k, False: 721k]
  |  |  ------------------
  ------------------
 2770|  72.2k|        return unexpected(err.error());
 2771|  72.2k|    }
 2772|   721k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   793k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2750|  5.40M|    {
 2751|  5.40M|        return ctx.get();
 2752|  5.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2557|  5.40M|    {
 2558|  5.40M|        return ctx;
 2559|  5.40M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2632|  1.51M|    {
 2633|  1.51M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 1.51M]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|  1.51M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2404|   793k|{
 2405|   793k|    auto arg = ctx.arg(id);
 2406|   793k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   793k|    return arg;
 2410|   793k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2672|   793k|    {
 2673|   793k|        return parse_ctx.next_arg_id();
 2674|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2712|   793k|    {
 2713|   793k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   793k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   793k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 793k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   793k|        auto specs = detail::format_specs{};
 2726|   793k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   793k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   793k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   793k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   793k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 793k]
  |  Branch (2731:29): [True: 0, False: 793k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   793k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 793k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   793k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   793k|        on_visit_scan_arg(
 2743|   793k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   793k|                                           get_ctx().locale()},
 2745|   793k|            arg);
 2746|   793k|        return parse_ctx.begin();
 2747|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2422|   793k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   793k|    {
 2424|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|   793k|    {
 2684|   793k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 793k]
  |  Branch (2684:13): [True: 0, False: 793k]
  |  Branch (2684:29): [True: 0, False: 793k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   793k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   793k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   793k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 72.2k, False: 721k]
  |  |  ------------------
  ------------------
 2691|  72.2k|            on_error(r.error());
 2692|  72.2k|        }
 2693|   721k|        else {
 2694|   721k|            get_ctx().advance_to(*r);
 2695|   721k|        }
 2696|   793k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   860k|{
 2782|   860k|    const auto argcount = args.size();
 2783|   860k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 187k, False: 673k]
  |  Branch (2783:60): [True: 187k, False: 0]
  ------------------
 2784|   187k|        auto arg = args.get(0);
 2785|   187k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   187k|    static_cast<    \
  |  | 1109|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|   187k|    }
 2787|       |
 2788|   673k|    auto handler = format_handler<true, CharT>{
 2789|   673k|        ranges::subrange<const CharT*>{source.data(),
 2790|   673k|                                       source.data() + source.size()},
 2791|   673k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   673k|    static_cast<    \
  |  | 1109|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   673k|    static_cast<    \
  |  | 1109|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   673k|    return vscan_parse_format_string(format, handler);
 2793|   860k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   280k|{
 2363|   280k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 280k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   280k|    auto reader =
 2369|   280k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   280k|            ranges::subrange<const CharT*>{source.data(),
 2371|   280k|                                           source.data() + source.size()},
 2372|   280k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   280k|    static_cast<    \
  |  | 1109|   280k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   280k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   280k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   280k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   280k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 21.6k, False: 259k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  21.6k|    }                                                  \
  |  |  |  | 3957|   280k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   259k|    return ranges::distance(source.data(), it);
 2375|   280k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2881|  1.10M|{
 2882|  1.10M|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|  1.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.00M, False: 93.8k]
  |  |  ------------------
  ------------------
 2883|  1.00M|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|  1.00M|    }
 2889|  93.8k|    else {
 2890|  93.8k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.8k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  93.8k|    }
 2896|  1.10M|    return result;
 2897|  1.10M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   569k|{
 2782|   569k|    const auto argcount = args.size();
 2783|   569k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 112k, False: 457k]
  |  Branch (2783:60): [True: 112k, False: 0]
  ------------------
 2784|   112k|        auto arg = args.get(0);
 2785|   112k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   112k|    static_cast<    \
  |  | 1109|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|   112k|    }
 2787|       |
 2788|   457k|    auto handler = format_handler<true, CharT>{
 2789|   457k|        ranges::subrange<const CharT*>{source.data(),
 2790|   457k|                                       source.data() + source.size()},
 2791|   457k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   457k|    return vscan_parse_format_string(format, handler);
 2793|   569k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|  1.13M|{
 2350|  1.13M|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 914k, False: 224k]
  ------------------
 2351|   914k|        return false;
 2352|   914k|    }
 2353|   224k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 224k, False: 0]
  |  Branch (2353:39): [True: 224k, False: 0]
  ------------------
 2354|  1.13M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   168k|{
 2363|   168k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   168k|    auto reader =
 2369|   168k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   168k|            ranges::subrange<const CharT*>{source.data(),
 2371|   168k|                                           source.data() + source.size()},
 2372|   168k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   168k|    static_cast<    \
  |  | 1109|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   168k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 43.3k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  43.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  43.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  43.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  43.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  43.3k|    }                                                  \
  |  |  |  | 3957|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   124k|    return ranges::distance(source.data(), it);
 2375|   168k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2625|   457k|        : format_handler_base{argcount},
 2626|   457k|          parse_ctx{source_tag<Source&&>, format},
 2627|   457k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   457k|    {
 2629|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2576|   457k|        : contiguous_ctx(source, args, loc)
 2577|   457k|    {
 2578|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   457k|{
 2767|   457k|    const auto beg = handler.get_ctx().begin();
 2768|   457k|    detail::parse_format_string<false>(format, handler);
 2769|   457k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 144k, False: 312k]
  |  |  ------------------
  ------------------
 2770|   144k|        return unexpected(err.error());
 2771|   144k|    }
 2772|   312k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2750|  2.91M|    {
 2751|  2.91M|        return ctx.get();
 2752|  2.91M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2581|  2.91M|    {
 2582|  2.91M|        return contiguous_ctx;
 2583|  2.91M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2632|   770k|    {
 2633|   770k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 770k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   770k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2404|   457k|{
 2405|   457k|    auto arg = ctx.arg(id);
 2406|   457k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   457k|    return arg;
 2410|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2672|   457k|    {
 2673|   457k|        return parse_ctx.next_arg_id();
 2674|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2712|   457k|    {
 2713|   457k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   457k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   457k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 457k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   457k|        auto specs = detail::format_specs{};
 2726|   457k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   457k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   457k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   457k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   457k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 457k]
  |  Branch (2731:29): [True: 0, False: 457k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   457k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   457k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   457k|        on_visit_scan_arg(
 2743|   457k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   457k|                                           get_ctx().locale()},
 2745|   457k|            arg);
 2746|   457k|        return parse_ctx.begin();
 2747|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2422|   457k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   457k|    {
 2424|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2683|   457k|    {
 2684|   457k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 457k]
  |  Branch (2684:13): [True: 0, False: 457k]
  |  Branch (2684:29): [True: 0, False: 457k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   457k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   457k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 144k, False: 312k]
  |  |  ------------------
  ------------------
 2691|   144k|            on_error(r.error());
 2692|   144k|        }
 2693|   312k|        else {
 2694|   312k|            get_ctx().advance_to(*r);
 2695|   312k|        }
 2696|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   569k|{
 2802|   569k|    const auto argcount = args.size();
 2803|   569k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 111k, False: 457k]
  |  Branch (2803:60): [True: 111k, False: 0]
  ------------------
 2804|   111k|        auto arg = args.get(0);
 2805|   111k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   111k|    static_cast<    \
  |  | 1109|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|   111k|    }
 2807|       |
 2808|   457k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 457k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|   457k|    SCN_UNLIKELY_ATTR
 2816|   457k|    {
 2817|   457k|        auto handler = format_handler<false, CharT>{
 2818|   457k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|   457k|        return vscan_parse_format_string(format, handler);
 2820|   457k|    }
 2821|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|   167k|{
 2383|   167k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|   167k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   167k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 167k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|   167k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|   167k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   167k|    static_cast<    \
  |  | 1109|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|   167k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   167k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 43.3k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  43.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  43.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  43.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  43.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  43.3k|    }                                                  \
  |  |  |  | 3957|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|   124k|    return it.position();
 2400|   167k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2625|   457k|        : format_handler_base{argcount},
 2626|   457k|          parse_ctx{source_tag<Source&&>, format},
 2627|   457k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   457k|    {
 2629|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2552|   457k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|   457k|    {
 2554|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   457k|{
 2767|   457k|    const auto beg = handler.get_ctx().begin();
 2768|   457k|    detail::parse_format_string<false>(format, handler);
 2769|   457k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 144k, False: 312k]
  |  |  ------------------
  ------------------
 2770|   144k|        return unexpected(err.error());
 2771|   144k|    }
 2772|   312k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2750|  2.91M|    {
 2751|  2.91M|        return ctx.get();
 2752|  2.91M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2557|  2.91M|    {
 2558|  2.91M|        return ctx;
 2559|  2.91M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2632|   769k|    {
 2633|   769k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 769k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   769k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2404|   457k|{
 2405|   457k|    auto arg = ctx.arg(id);
 2406|   457k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   457k|    return arg;
 2410|   457k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2672|   457k|    {
 2673|   457k|        return parse_ctx.next_arg_id();
 2674|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2712|   457k|    {
 2713|   457k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   457k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   457k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 457k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   457k|        auto specs = detail::format_specs{};
 2726|   457k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   457k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   457k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   457k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   457k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 457k]
  |  Branch (2731:29): [True: 0, False: 457k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   457k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 457k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   457k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   457k|        on_visit_scan_arg(
 2743|   457k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   457k|                                           get_ctx().locale()},
 2745|   457k|            arg);
 2746|   457k|        return parse_ctx.begin();
 2747|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2422|   457k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   457k|    {
 2424|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|   457k|    {
 2684|   457k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 457k]
  |  Branch (2684:13): [True: 0, False: 457k]
  |  Branch (2684:29): [True: 0, False: 457k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   457k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   457k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 144k, False: 312k]
  |  |  ------------------
  ------------------
 2691|   144k|            on_error(r.error());
 2692|   144k|        }
 2693|   312k|        else {
 2694|   312k|            get_ctx().advance_to(*r);
 2695|   312k|        }
 2696|   457k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   625k|{
 2882|   625k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   625k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 437k, False: 187k]
  |  |  ------------------
  ------------------
 2883|   437k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 437k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|   437k|    }
 2889|   187k|    else {
 2890|   187k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 187k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|   187k|    }
 2896|   625k|    return result;
 2897|   625k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  93.5k|{
 2828|  93.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|   102k|{
 2828|   102k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|   102k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  56.0k|{
 2828|  56.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  56.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  55.9k|{
 2828|  55.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  55.9k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.40k|{
 1462|  2.40k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.40k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.40k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.40k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.40k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.40k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.40k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.40k|{
 1355|  2.40k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.40k|    auto it = src.begin();
 1358|   689k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 686k, False: 2.40k]
  ------------------
 1359|   686k|        auto res = get_next_code_point(
 1360|   686k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   686k|                                                                 src.end()));
 1362|   686k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.03k, False: 684k]
  |  |  ------------------
  ------------------
 1363|  2.03k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.03k|        }
 1365|   684k|        else {
 1366|   684k|            dest.push_back(res.value);
 1367|   684k|        }
 1368|   686k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   686k|    }
 1370|  2.40k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|  1.10M|{
 1279|  1.10M|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|  1.10M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|  1.10M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 37.0k, False: 1.06M]
  |  |  ------------------
  ------------------
 1283|  37.0k|        return {get_start_for_next_code_point(input),
 1284|  37.0k|                detail::invalid_code_point};
 1285|  37.0k|    }
 1286|  1.06M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.33k, False: 1.06M]
  |  |  ------------------
  ------------------
 1287|  4.33k|        return {input.end(), detail::invalid_code_point};
 1288|  4.33k|    }
 1289|       |
 1290|  1.06M|    return {input.begin() + len,
 1291|  1.06M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|  1.06M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  37.0k|{
 1265|  37.0k|    auto it = input.begin();
 1266|   231k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 221k, False: 10.4k]
  ------------------
 1267|   221k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 26.6k, False: 194k]
  ------------------
 1268|  26.6k|            break;
 1269|  26.6k|        }
 1270|   221k|    }
 1271|  37.0k|    return it;
 1272|  37.0k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.5M|    constexpr parse_error(code c) : m_code(c)
  808|  29.5M|    {
  809|  29.5M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  29.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.5M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.3M|    {
  823|  13.3M|        return a.m_code == b.m_code;
  824|  13.3M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.48M|    {
  827|  3.48M|        return !(a == b);
  828|  3.48M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  2.64M|    clocale_restorer(int cat) : m_category(cat)
 1826|  2.64M|    {
 1827|  2.64M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  2.64M|        std::strcpy(m_locbuf, loc);
 1829|  2.64M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  2.64M|    {
 1832|       |        // Restore locale to what it was before
 1833|  2.64M|        std::setlocale(m_category, m_locbuf);
 1834|  2.64M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  2.64M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  2.64M|    {
 1856|  2.64M|        std::setlocale(cat, "C");
 1857|  2.64M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  2.38M|    {
 3083|  2.38M|        return m_msg == nullptr;
 3084|  2.38M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3718|  2.34M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  26.0M|{
  458|  26.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  26.0M|        static_cast<unsigned char>(ch))];
  460|  26.0M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   303k|{
  469|   303k|    return static_cast<unsigned char>(ch) <= 127;
  470|   303k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  5.39M|{
  539|  5.39M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  5.39M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  11.0M|{
  784|  11.0M|    return e != eof_error::good;
  785|  11.0M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  46.8k|{
  798|  46.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  46.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  46.8k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  46.8k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   220k|{
  845|   220k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   220k|    return parse_error::eof;
  847|   220k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.48M|{
  854|  3.48M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.48M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.48M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 80.8k, False: 3.39M]
  ------------------
  859|  80.8k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  80.8k|    }
  861|       |
  862|  3.39M|    return detail::unexpected_scan_error(code, msg);
  863|  3.48M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.48M|{
  868|  3.48M|    return [code, msg](parse_error err) {
  869|  3.48M|        assert(err != parse_error::good);
  870|  3.48M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.48M|    };
  872|  3.48M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  2.45M|{
 2353|  2.45M|    unsigned char running_diff{0};
 2354|  9.24M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 6.78M, False: 2.45M]
  ------------------
 2355|  6.78M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  6.78M|    }
 2357|  2.45M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 76.7k, False: 2.38M]
  |  Branch (2357:33): [True: 20.4k, False: 2.36M]
  ------------------
 2358|  2.45M|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  18.6M|{
 3272|  18.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  18.6M|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  3.43M|{
 3276|  3.43M|#if WCHAR_MIN < 0
 3277|  3.43M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 3.41M, False: 15.6k]
  |  Branch (3277:20): [True: 2.18M, False: 1.22M]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  2.18M|        return char_to_int(static_cast<char>(ch));
 3282|  2.18M|    }
 3283|  1.24M|    return 255;
 3284|  3.43M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6097|  1.94M|{
 6098|  1.94M|    if (specs.width != 0) {
  ------------------
  |  Branch (6098:9): [True: 0, False: 1.94M]
  ------------------
 6099|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6099:13): [True: 0, False: 0]
  ------------------
 6100|      0|            return detail::unexpected_scan_error(
 6101|      0|                scan_error::length_too_short,
 6102|      0|                "Scanned value too narrow, width did not exceed what "
 6103|      0|                "was specified in the format string");
 6104|      0|        }
 6105|      0|    }
 6106|  1.94M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6106:9): [True: 0, False: 1.94M]
  ------------------
 6107|       |        // Ensured by take_width_view
 6108|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6109|      0|                   specs.precision);
 6110|      0|    }
 6111|  1.94M|    return {};
 6112|  1.94M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.55M|    {
  304|  3.55M|        ranges::advance(x, n);
  305|  3.55M|        return x;
  306|  3.55M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.55M|    {
  268|  3.55M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.55M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.55M|    {
  151|  3.55M|        i += n;
  152|  3.55M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.16M|    {
  108|  4.16M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.16M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.16M|    {
   87|  4.16M|        return s - i;
   88|  4.16M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.01M|    {
  304|  2.01M|        ranges::advance(x, n);
  305|  2.01M|        return x;
  306|  2.01M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.01M|    {
  268|  2.01M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.01M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.01M|    {
  151|  2.01M|        i += n;
  152|  2.01M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   580k|    {
  108|   580k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   580k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   580k|    {
   87|   580k|        return s - i;
   88|   580k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|  1.94M|    {
 3025|  1.94M|        return m_current;
 3026|  1.94M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|  1.22M|    {
 3025|  1.22M|        return m_current;
 3026|  1.22M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.10M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.10M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.10M|        auto beg = r.begin();
  991|  1.10M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.10M, False: 0]
  ------------------
  992|  1.10M|            return false;
  993|  1.10M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.10M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.88M|{
 1956|  2.88M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.88M|    else {
 1967|  2.88M|        auto it = range.begin();
 1968|  2.88M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.77M, False: 1.10M]
  ------------------
 1969|  1.77M|            return ranges::next(it, count);
 1970|  1.77M|        }
 1971|       |
 1972|  4.39M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.32M, False: 1.07M]
  ------------------
 1973|  3.32M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.4k, False: 3.28M]
  ------------------
 1974|  35.4k|                return unexpected(eof_error::eof);
 1975|  35.4k|            }
 1976|  3.32M|        }
 1977|       |
 1978|  1.07M|        return it;
 1979|  1.10M|    }
 1980|  2.88M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.88M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.88M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.88M|        else {
 1107|  2.88M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.88M, False: 0]
  ------------------
 1108|  2.88M|                return static_cast<size_t>(
 1109|  2.88M|                    r.begin().parent()->chars_available() -
 1110|  2.88M|                    r.begin().position());
 1111|  2.88M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.88M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.88M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  29.1M|    {
  763|  29.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  29.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.1M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.63M|        : m_fptr([](storage fn,
  743|  2.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.63M|              cvref<T> obj = *get<T>(fn);
  745|  2.63M|              if constexpr (std::is_void_v<R>) {
  746|  2.63M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.63M|              }
  748|  2.63M|              else {
  749|  2.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.63M|              }
  751|  2.63M|          }),
  752|  2.63M|          m_storage(std::addressof(f))
  753|  2.63M|    {
  754|  2.63M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.5M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.5M|              else {
  749|  14.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.5M|              }
  751|  14.5M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.5M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.5M|        else if constexpr (std::is_object_v<T>) {
  688|  14.5M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.5M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.63M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.63M|        {
  662|  2.63M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  9.36M|    {
  763|  9.36M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  9.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.36M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.21M|        : m_fptr([](storage fn,
  743|  2.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.21M|              cvref<T> obj = *get<T>(fn);
  745|  2.21M|              if constexpr (std::is_void_v<R>) {
  746|  2.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.21M|              }
  748|  2.21M|              else {
  749|  2.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.21M|              }
  751|  2.21M|          }),
  752|  2.21M|          m_storage(std::addressof(f))
  753|  2.21M|    {
  754|  2.21M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.90M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.90M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.90M|              else {
  749|  3.90M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.90M|              }
  751|  3.90M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.90M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.90M|        else if constexpr (std::is_object_v<T>) {
  688|  3.90M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.90M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.21M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.21M|        {
  662|  2.21M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|   793k|    {
 6126|   793k|        const bool need_skipped_width =
 6127|   793k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 793k]
  |  Branch (6127:33): [True: 0, False: 793k]
  ------------------
 6128|   793k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   793k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 793k]
  ------------------
 6132|   793k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 793k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   793k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 793k, False: 0]
  |  Branch (6136:56): [True: 793k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   793k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 793k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  1.57M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   793k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   793k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   793k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 14.8k, False: 778k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  14.8k|    }                                                  \
  |  |  |  | 3957|   793k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   778k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  1.57M|                            make_eof_scan_error));
 6147|       |
 6148|  1.57M|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 778k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   778k|            return result_type{it, 0};
 6156|  1.57M|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   793k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  2.10M|{
 2108|  2.10M|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  2.10M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.10M|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  2.10M|    else {
 2079|  2.10M|        auto first = range.begin();
 2080|  11.7M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 11.7M, False: 27.2k]
  ------------------
 2081|  11.7M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 2.07M, False: 9.67M]
  ------------------
 2082|  2.07M|                return first;
 2083|  2.07M|            }
 2084|  11.7M|        }
 2085|  27.2k|        return first;
 2086|  2.10M|    }
 2087|  2.10M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.85M|    {
  108|  1.85M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.85M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.85M|    {
   94|  1.85M|        iter_difference_t<I> counter{0};
   95|  18.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.0M, False: 1.85M]
  ------------------
   96|  17.0M|            ++i;
   97|  17.0M|            ++counter;
   98|  17.0M|        }
   99|  1.85M|        return counter;
  100|  1.85M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.48M|    return [code, msg](parse_error err) {
  869|  3.48M|        assert(err != parse_error::good);
  870|  3.48M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.48M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   405k|    {
 1879|   405k|        auto stdloc = loc.get<std::locale>();
 1880|   405k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   405k|        grouping = numpunct.grouping();
 1882|   405k|        thousands_sep =
 1883|   405k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 405k]
  ------------------
 1884|   405k|        decimal_point = numpunct.decimal_point();
 1885|   405k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   405k|{
 1816|   405k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 405k, False: 0]
  ------------------
 1817|   405k|        return std::use_facet<Facet>(stdloc);
 1818|   405k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   405k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.07M|{
 1945|  3.07M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 19.8k, False: 3.05M]
  |  |  ------------------
  ------------------
 1946|  19.8k|        return unexpected(e);
 1947|  19.8k|    }
 1948|       |
 1949|  3.05M|    return ranges::next(range.begin());
 1950|  3.07M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.48M|{
  951|  4.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  4.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 39.5k, False: 4.44M]
  |  |  ------------------
  ------------------
  952|  39.5k|        return eof_error::eof;
  953|  39.5k|    }
  954|  4.44M|    return eof_error::good;
  955|  4.48M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.24M|{
  945|  6.24M|    return is_range_eof(r.begin(), r.end());
  946|  6.24M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.24M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.24M|    {
  938|  6.24M|        return begin == end;
  939|  6.24M|    }
  940|  6.24M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.05M|    {
  296|  3.05M|        ++x;
  297|  3.05M|        return x;
  298|  3.05M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|  1.18M|{
 3290|  1.18M|    auto r = read_one_of_code_unit(range, "+-");
 3291|  1.18M|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 900k, False: 286k]
  ------------------
 3292|   900k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 900k, False: 279]
  ------------------
 3293|   900k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   900k|        }
 3295|    279|        return unexpected(eof_error::eof);
 3296|   900k|    }
 3297|       |
 3298|   286k|    auto& it = *r;
 3299|   286k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 120k, False: 165k]
  ------------------
 3300|   120k|        return std::pair{it, sign_type::minus_sign};
 3301|   120k|    }
 3302|   165k|    return std::pair{it, sign_type::plus_sign};
 3303|   286k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|  2.05M|{
 2405|  2.05M|    auto it = read_code_unit(range);
 2406|  2.05M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.4k, False: 2.04M]
  |  |  ------------------
  ------------------
 2407|  11.4k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  11.4k|    }
 2409|       |
 2410|  3.85M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 3.85M, False: 1.65M]
  ------------------
 2411|  3.85M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 392k, False: 3.46M]
  ------------------
 2412|   392k|            return *it;
 2413|   392k|        }
 2414|  3.85M|    }
 2415|       |
 2416|  1.65M|    return unexpected(parse_error::error);
 2417|  2.04M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  2.88M|{
 2364|  2.88M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  2.88M|    else {
 2377|  2.88M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  2.88M|            if (ch < 'A' || ch > 'Z') {
 2379|  2.88M|                return ch;
 2380|  2.88M|            }
 2381|  2.88M|            return static_cast<char_type>(ch +
 2382|  2.88M|                                          static_cast<char_type>('a' - 'A'));
 2383|  2.88M|        };
 2384|       |
 2385|  2.88M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  2.88M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.88M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.88M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 35.4k, False: 2.84M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  35.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  35.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  35.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  35.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  35.4k|    }                                                  \
  |  |  |  | 3957|  2.88M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  2.84M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  2.84M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  2.84M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.74M, False: 105k]
  |  |  ------------------
  ------------------
 2390|  2.84M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  2.84M|                    return ascii_tolower(a) ==
 2392|  2.84M|                           static_cast<detail::char_t<Range>>(b);
 2393|  2.84M|                }))) {
 2394|  2.74M|            return unexpected(parse_error::error);
 2395|  2.74M|        }
 2396|       |
 2397|   105k|        return it;
 2398|  2.84M|    }
 2399|  2.88M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  3.28M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  3.28M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 2.94M, False: 337k]
  |  Branch (2378:29): [True: 265k, False: 71.7k]
  ------------------
 2379|  3.21M|                return ch;
 2380|  3.21M|            }
 2381|  71.7k|            return static_cast<char_type>(ch +
 2382|  71.7k|                                          static_cast<char_type>('a' - 'A'));
 2383|  3.28M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|  1.02M|{
 2279|  1.02M|    auto it = read_code_unit(range);
 2280|  1.02M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.41k, False: 1.01M]
  |  |  ------------------
  ------------------
 2281|  8.41k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  8.41k|    }
 2283|       |
 2284|  1.01M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 821k, False: 192k]
  |  |  ------------------
  ------------------
 2285|  1.01M|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   821k|        return unexpected(parse_error::error);
 2287|   821k|    }
 2288|       |
 2289|   192k|    return *it;
 2290|  1.01M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|  2.09M|{
 2128|  2.09M|    auto it = read_while_code_unit(range, pred);
 2129|  2.09M|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 859k, False: 1.23M]
  ------------------
 2130|   859k|        return unexpected(parse_error::error);
 2131|   859k|    }
 2132|  1.23M|    return it;
 2133|  2.09M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   961k|    {
 1720|   961k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   961k|                           ranges::common_range<Range>) {
 1737|   961k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   961k|            auto end_seg = range.end().contiguous_segment();
 1739|   961k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 143k, False: 818k]
  |  |  ------------------
  ------------------
 1740|   961k|                             detail::to_address(end_seg.end()))) {
 1741|   143k|                auto& str = m_storage.emplace();
 1742|   143k|                str.reserve(range.end().position() - range.begin().position());
 1743|   143k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   143k|                m_view = string_view_type{str};
 1745|   143k|                return;
 1746|   143k|            }
 1747|       |
 1748|   818k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   818k|                                                            end_seg.data());
 1750|   818k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   961k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  7.24M|    {
 1681|  7.24M|        return m_view;
 1682|  7.24M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.03M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|   709k|    {
 6168|   709k|        const bool need_skipped_width =
 6169|   709k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 709k]
  |  Branch (6169:33): [True: 0, False: 709k]
  ------------------
 6170|   709k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   709k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 709k]
  ------------------
 6173|   709k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 709k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   709k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 709k, False: 0]
  ------------------
 6182|   709k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 709k]
  ------------------
 6183|   709k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   709k|        return result_type{rng.begin(), 0};
 6207|   709k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.40M|{
 1945|  1.40M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.88k, False: 1.40M]
  |  |  ------------------
  ------------------
 1946|  4.88k|        return unexpected(e);
 1947|  4.88k|    }
 1948|       |
 1949|  1.40M|    return ranges::next(range.begin());
 1950|  1.40M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.64M|{
  951|  2.64M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.8k, False: 2.62M]
  |  |  ------------------
  ------------------
  952|  20.8k|        return eof_error::eof;
  953|  20.8k|    }
  954|  2.62M|    return eof_error::good;
  955|  2.64M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.64M|{
  945|  2.64M|    return is_range_eof(r.begin(), r.end());
  946|  2.64M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.65M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.65M|    {
  938|  2.65M|        return begin == end;
  939|  2.65M|    }
  940|  2.65M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.41M|    {
  296|  1.41M|        ++x;
  297|  1.41M|        return x;
  298|  1.41M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   962k|{
 3290|   962k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   962k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 730k, False: 232k]
  ------------------
 3292|   730k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 730k, False: 90]
  ------------------
 3293|   730k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   730k|        }
 3295|     90|        return unexpected(eof_error::eof);
 3296|   730k|    }
 3297|       |
 3298|   232k|    auto& it = *r;
 3299|   232k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 107k, False: 124k]
  ------------------
 3300|   107k|        return std::pair{it, sign_type::minus_sign};
 3301|   107k|    }
 3302|   124k|    return std::pair{it, sign_type::plus_sign};
 3303|   232k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|  1.11M|{
 2405|  1.11M|    auto it = read_code_unit(range);
 2406|  1.11M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.04k, False: 1.11M]
  |  |  ------------------
  ------------------
 2407|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  2.04k|    }
 2409|       |
 2410|  2.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.08M, False: 855k]
  ------------------
 2411|  2.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 257k, False: 1.82M]
  ------------------
 2412|   257k|            return *it;
 2413|   257k|        }
 2414|  2.08M|    }
 2415|       |
 2416|   855k|    return unexpected(parse_error::error);
 2417|  1.11M|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  10.0k|{
 3376|  10.0k|    switch (base) {
 3377|      0|        case 2:
  ------------------
  |  Branch (3377:9): [True: 0, False: 10.0k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      0|                    false};
 3381|       |
 3382|      0|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 0, False: 10.0k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|      0|            bool zero_parsed = false;
 3385|      0|            auto it = apply_opt(
 3386|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|      0|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|      0|        case 16:
  ------------------
  |  Branch (3390:9): [True: 0, False: 10.0k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|      0|                    false};
 3394|       |
 3395|      0|        case 0:
  ------------------
  |  Branch (3395:9): [True: 0, False: 10.0k]
  ------------------
 3396|       |            // detect base
 3397|      0|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  10.0k|        default:
  ------------------
  |  Branch (3399:9): [True: 10.0k, False: 0]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  10.0k|            return {range.begin(), base, false};
 3402|  10.0k|    }
 3403|  10.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  2.49M|{
 2364|  2.49M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  2.49M|                  std::is_same_v<char_type, char>) {
 2368|  2.49M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 35.3k, False: 2.45M]
  ------------------
 2369|  35.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|  35.3k|        }
 2371|  2.45M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 2.36M, False: 97.2k]
  ------------------
 2372|  2.36M|            return unexpected(parse_error::error);
 2373|  2.36M|        }
 2374|  97.2k|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  2.49M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   291k|{
 2279|   291k|    auto it = read_code_unit(range);
 2280|   291k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.83k, False: 288k]
  |  |  ------------------
  ------------------
 2281|  2.83k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  2.83k|    }
 2283|       |
 2284|   288k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 233k, False: 55.7k]
  |  |  ------------------
  ------------------
 2285|   288k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   233k|        return unexpected(parse_error::error);
 2287|   233k|    }
 2288|       |
 2289|  55.7k|    return *it;
 2290|   288k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  10.0k|{
 3443|  10.0k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  10.0k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  10.0k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  10.0k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  10.0k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  10.0k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  10.0k|                  ranges::sized_range<Range>) {
 1785|  10.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  10.0k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  10.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  10.0k|    {
 1589|  10.0k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  5.17M|    {
 1602|  5.17M|        return sv;
 1603|  5.17M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   532k|{
 2108|   532k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   532k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   532k|{
 2075|   532k|    if constexpr (ranges::common_range<Range>) {
 2076|   532k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   532k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   949k|{
 3098|   949k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 949k, False: 0]
  ------------------
 3099|   949k|        auto it = read_while_classic_space(range);
 3100|   949k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   949k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   949k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.9k, False: 937k]
  |  |  ------------------
  ------------------
 3102|  11.9k|            return unexpected(e);
 3103|  11.9k|        }
 3104|       |
 3105|   937k|        return it;
 3106|   949k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   949k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   949k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   949k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   949k|        auto buf = make_contiguous_buffer(range);
 2253|   949k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   949k|        return ranges::next(range.begin(),
 2255|   949k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   949k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   949k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   949k|                  ranges::sized_range<Range>) {
 1785|   949k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   949k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   949k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   949k|    {
 1589|   949k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.91M|    {
  304|  2.91M|        ranges::advance(x, n);
  305|  2.91M|        return x;
  306|  2.91M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.87M|    {
  268|  3.87M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.87M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.87M|    {
  181|  18.5M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.7M, False: 3.87M]
  ------------------
  182|  14.7M|            ++i;
  183|  14.7M|        }
  184|  3.87M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   254k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   254k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   254k|            auto rd = make_reader<T, char_type>();
 6288|   254k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   254k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   254k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 254k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   254k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   254k|                return impl(rd, range, value);
 6293|   254k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   254k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  1.46M|    {
 3188|  1.46M|        reader_error_handler eh{};
 3189|  1.46M|        get_derived().check_specs_impl(specs, eh);
 3190|  1.46M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.46M]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|  1.46M|        return {};
 3195|  1.46M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|  1.46M|    {
 3200|  1.46M|        return static_cast<Derived&>(*this);
 3201|  1.46M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|  1.46M|    {
 4231|  1.46M|        detail::check_float_type_specs(specs, eh);
 4232|  1.46M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   254k|    {
 6213|   254k|        const bool need_skipped_width =
 6214|   254k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 254k]
  |  Branch (6214:33): [True: 0, False: 254k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   254k|        auto it = rng.begin();
 6218|   254k|        std::ptrdiff_t prefix_width = 0;
 6219|   254k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 254k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   254k|        else {
 6227|   254k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   254k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   254k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   254k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   254k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.48k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.48k|    }                                                  \
  |  |  |  | 3957|   254k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   249k|            std::tie(it, prefix_width) = prefix_result;
 6229|   249k|        }
 6230|   249k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   249k|        std::ptrdiff_t value_width = 0;
 6234|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 249k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   249k|        else {
 6250|   249k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 19.5k, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  19.5k|    }                                                  \
  |  | 3957|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   230k|                                             specs, value, loc));
 6252|       |
 6253|   230k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 230k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   230k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   230k|        std::ptrdiff_t postfix_width = 0;
 6262|   230k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 226k, False: 3.60k]
  ------------------
 6263|   226k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   226k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   226k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   226k|                                 value_width));
 6267|   226k|            std::tie(it, postfix_width) = postfix_result;
 6268|   226k|        }
 6269|       |
 6270|   230k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   230k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   230k|            specs, prefix_width, value_width, postfix_width));
 6272|   230k|        return it;
 6273|   230k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  3.35M|    {
 3183|  3.35M|        return true;
 3184|  3.35M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4302|  1.44M|    {
 4303|  1.44M|        unsigned options{};
 4304|  1.44M|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 405k, False: 1.03M]
  ------------------
 4305|   405k|            options |= float_reader_base::allow_thsep;
 4306|   405k|        }
 4307|       |
 4308|  1.44M|        SCN_GCC_COMPAT_PUSH
 4309|  1.44M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|  1.44M|        switch (specs.type) {
 4312|   216k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 216k, False: 1.22M]
  ------------------
 4313|   216k|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|  41.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 41.9k, False: 1.39M]
  ------------------
 4316|  41.9k|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|   438k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 438k, False: 1.00M]
  ------------------
 4319|   438k|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|   337k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 337k, False: 1.10M]
  ------------------
 4322|   337k|                return options | float_reader_base::allow_scientific |
 4323|   337k|                       float_reader_base::allow_fixed;
 4324|       |
 4325|   405k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 405k, False: 1.03M]
  ------------------
 4326|   405k|                return options | float_reader_base::allow_scientific |
 4327|   405k|                       float_reader_base::allow_fixed |
 4328|   405k|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 1.44M]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|  1.44M|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|  1.44M|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|  1.44M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3733|  1.44M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  2.01M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  4.03M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3764|   614k|    {
 3765|   614k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   614k|        const std::ptrdiff_t sign_len =
 3768|   614k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 152k, False: 461k]
  ------------------
 3769|       |
 3770|   614k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 16.9k, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  16.9k|    }                                                  \
  |  |  |  | 3957|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   597k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   614k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4121|  1.91M|    {
 4122|  1.91M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 1.91M, False: 0]
  ------------------
 4123|  1.91M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 1.91M, False: 0]
  ------------------
 4124|  1.91M|            return;
 4125|  1.91M|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  3.89M|    {
 1686|  3.89M|        return m_storage.has_value();
 1687|  3.89M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  2.13M|    {
 1691|  2.13M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  2.13M|        return *m_storage;
 1693|  2.13M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   249k|    {
 4256|   249k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   249k|#if !SCN_DISABLE_LOCALE
 4259|   249k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 69.8k, False: 180k]
  ------------------
 4260|  69.8k|            return read_impl<Range>(
 4261|  69.8k|                range, rd,
 4262|  69.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  69.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  69.8k|                },
 4265|  69.8k|                value, loc);
 4266|  69.8k|        }
 4267|   180k|#endif
 4268|       |
 4269|   180k|        return read_impl<Range>(
 4270|   180k|            range, rd,
 4271|   180k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   180k|                return r.read_source(SCN_FWD(args)...);
 4273|   180k|            },
 4274|   180k|            value);
 4275|   249k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   346k|    {
 4292|   346k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   346k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.1k, False: 323k]
  |  |  ------------------
  ------------------
 4294|  22.1k|            return unexpected(r.error());
 4295|  22.1k|        }
 4296|       |
 4297|   323k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.20k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.20k|    }                                                  \
  |  |  |  | 3957|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   320k|        return ranges::next(range.begin(), n);
 4299|   323k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.08M|    {
  763|  1.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  69.8k|        : m_fptr([](storage fn,
  743|  69.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.8k|              cvref<T> obj = *get<T>(fn);
  745|  69.8k|              if constexpr (std::is_void_v<R>) {
  746|  69.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.8k|              }
  748|  69.8k|              else {
  749|  69.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.8k|              }
  751|  69.8k|          }),
  752|  69.8k|          m_storage(std::addressof(f))
  753|  69.8k|    {
  754|  69.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  69.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  69.8k|              else {
  749|  69.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.8k|              }
  751|  69.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.8k|        else if constexpr (std::is_object_v<T>) {
  688|  69.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  69.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  69.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  69.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  69.8k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3752|   221k|    {
 3753|   221k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   221k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   221k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 221k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   221k|        return read_source_impl(range);
 3759|   221k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3778|  1.08M|    {
 3779|  1.08M|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|  1.08M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|  1.08M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|  1.08M|        auto it = sign_result.first;
 3782|  1.08M|        m_sign = sign_result.second;
 3783|       |
 3784|  1.08M|        auto digits_begin = it;
 3785|  1.08M|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|  1.08M|        else {
 3812|  1.08M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|  1.08M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.08M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 69.0k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  69.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  69.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  69.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  69.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  69.0k|    }                                                  \
  |  | 3957|  1.08M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|  1.01M|                it,
 3814|  1.01M|                do_read_source_impl(
 3815|  1.01M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|  1.01M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|  1.01M|        }
 3818|       |
 3819|  1.08M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 1.00M, False: 5.60k]
  |  Branch (3821:48): [True: 1.00M, False: 4.88k]
  ------------------
 3822|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 960k, False: 40.7k]
  ------------------
 3823|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 954k, False: 6.11k]
  ------------------
 3824|   954k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   954k|        }
 3826|       |
 3827|  1.01M|        handle_separators();
 3828|       |
 3829|  1.01M|        return it;
 3830|  1.08M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4064|  1.08M|    {
 4065|  1.08M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|  1.08M|        const bool allowed_nonhex =
 4067|  1.08M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|  1.08M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|  1.08M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 1.07M, False: 10.4k]
  |  Branch (4070:45): [True: 0, False: 1.07M]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|  1.08M|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 10.4k, False: 1.07M]
  ------------------
 4076|  10.4k|            return *r;
 4077|  10.4k|        }
 4078|       |
 4079|  1.07M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 1.02M, False: 46.8k]
  |  Branch (4079:45): [True: 1.51k, False: 1.02M]
  ------------------
 4080|  1.51k|            return unexpected(r.error());
 4081|  1.51k|        }
 4082|  1.06M|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 46.8k, False: 1.02M]
  ------------------
 4083|  46.8k|            return *r;
 4084|  46.8k|        }
 4085|       |
 4086|  1.02M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 722k, False: 299k]
  |  Branch (4086:28): [True: 227k, False: 494k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   227k|            auto it = range.begin();
 4090|       |
 4091|   227k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 12.5k, False: 214k]
  ------------------
 4092|  12.5k|                m_kind = float_kind::hex_with_prefix;
 4093|  12.5k|                it = *r;
 4094|  12.5k|            }
 4095|   214k|            else {
 4096|   214k|                m_kind = float_kind::hex_without_prefix;
 4097|   214k|            }
 4098|       |
 4099|   227k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   227k|        }
 4101|   794k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 299k, False: 494k]
  |  Branch (4101:29): [True: 299k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   299k|            m_kind = float_kind::generic;
 4105|   299k|            return read_regular_float(range);
 4106|   299k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   494k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 29.4k, False: 465k]
  |  |  ------------------
  ------------------
 4112|  29.4k|            m_kind = float_kind::hex_with_prefix;
 4113|  29.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4114|  29.4k|        }
 4115|       |
 4116|   465k|        m_kind = float_kind::generic;
 4117|   465k|        return read_regular(range);
 4118|   494k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3872|  1.08M|    {
 3873|  1.08M|        auto it = range.begin();
 3874|  1.08M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 1.07M, False: 10.4k]
  ------------------
 3875|  1.07M|            return unexpected(r.error());
 3876|  1.07M|        }
 3877|  10.4k|        else {
 3878|  10.4k|            it = *r;
 3879|  10.4k|        }
 3880|       |
 3881|  10.4k|        if (auto r = read_matching_string_classic_nocase(
 3882|  10.4k|                ranges::subrange{it, range.end()}, "inity");
 3883|  10.4k|            !r) {
  ------------------
  |  Branch (3883:13): [True: 5.60k, False: 4.88k]
  ------------------
 3884|  5.60k|            m_kind = float_kind::inf_short;
 3885|  5.60k|            return it;
 3886|  5.60k|        }
 3887|  4.88k|        else {
 3888|  4.88k|            m_kind = float_kind::inf_long;
 3889|  4.88k|            return *r;
 3890|  4.88k|        }
 3891|  10.4k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3895|  1.07M|    {
 3896|  1.07M|        auto it = range.begin();
 3897|  1.07M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 1.02M, False: 48.3k]
  ------------------
 3898|  1.02M|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  1.02M|                scan_error::invalid_scanned_value,
 3900|  1.02M|                "Invalid floating-point NaN value"));
 3901|  1.02M|        }
 3902|  48.3k|        else {
 3903|  48.3k|            it = *r;
 3904|  48.3k|        }
 3905|       |
 3906|  48.3k|        if (auto r =
 3907|  48.3k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|  48.3k|            !r) {
  ------------------
  |  Branch (3908:13): [True: 40.7k, False: 7.62k]
  ------------------
 3909|  40.7k|            m_kind = float_kind::nan_simple;
 3910|  40.7k|            return it;
 3911|  40.7k|        }
 3912|  7.62k|        else {
 3913|  7.62k|            it = *r;
 3914|  7.62k|        }
 3915|       |
 3916|  7.62k|        auto payload_beg_it = it;
 3917|  7.62k|        it = read_while_code_unit(
 3918|  7.62k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|  7.62k|                return is_ascii_char(ch) &&
 3920|  7.62k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|  7.62k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|  7.62k|            });
 3923|  7.62k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|  7.62k|        m_kind = float_kind::nan_with_payload;
 3926|  7.62k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 6.11k, False: 1.51k]
  ------------------
 3927|  7.62k|                                             ')')) {
 3928|  6.11k|            return *r;
 3929|  6.11k|        }
 3930|  1.51k|        return detail::unexpected_scan_error(
 3931|  1.51k|            scan_error::invalid_scanned_value,
 3932|  1.51k|            "Invalid floating-point NaN payload");
 3933|  7.62k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  7.62k|        : m_fptr([](storage fn,
  743|  7.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.62k|              cvref<T> obj = *get<T>(fn);
  745|  7.62k|              if constexpr (std::is_void_v<R>) {
  746|  7.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.62k|              }
  748|  7.62k|              else {
  749|  7.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.62k|              }
  751|  7.62k|          }),
  752|  7.62k|          m_storage(std::addressof(f))
  753|  7.62k|    {
  754|  7.62k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   156k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   156k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   156k|              else {
  749|   156k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   156k|              }
  751|   156k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   156k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   156k|        else if constexpr (std::is_object_v<T>) {
  688|   156k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   156k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3918|   156k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|   156k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3919:24): [True: 156k, False: 83]
  ------------------
 3920|   156k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3920:26): [True: 150k, False: 6.51k]
  |  Branch (3920:39): [True: 141k, False: 8.25k]
  |  Branch (3920:54): [True: 2.78k, False: 11.9k]
  |  Branch (3920:67): [True: 2.70k, False: 83]
  ------------------
 3921|   156k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3921:26): [True: 5.55k, False: 6.51k]
  |  Branch (3921:39): [True: 2.75k, False: 2.80k]
  |  Branch (3921:53): [True: 2.72k, False: 6.59k]
  ------------------
 3922|   156k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  7.62k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.62k|        {
  662|  7.62k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3865|   722k|    {
 3866|   722k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   722k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3966|   256k|    {
 3967|   256k|        auto it = range.begin();
 3968|       |
 3969|   256k|        std::ptrdiff_t digits_count = 0;
 3970|   256k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|   256k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.58k, False: 248k]
  |  |  ------------------
  ------------------
 3972|  8.58k|            return r.transform_error(map_parse_error_to_scan_error(
 3973|  8.58k|                scan_error::invalid_scanned_value,
 3974|  8.58k|                "Invalid hexadecimal floating-point value"));
 3975|  8.58k|        }
 3976|   248k|        else {
 3977|   248k|            digits_count += ranges::distance(it, *r);
 3978|   248k|            it = *r;
 3979|   248k|        }
 3980|       |
 3981|   248k|        m_integral_part_length = digits_count;
 3982|   248k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 38.1k, False: 210k]
  ------------------
 3983|   248k|                                             m_locale_options.decimal_point)) {
 3984|  38.1k|            it = *r;
 3985|  38.1k|        }
 3986|       |
 3987|   248k|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 34.3k, False: 213k]
  ------------------
 3988|   248k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|  34.3k|            digits_count += ranges::distance(it, *r);
 3990|  34.3k|            it = *r;
 3991|  34.3k|        }
 3992|       |
 3993|   248k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|   248k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|   248k|        return it;
 4002|   248k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3850|   505k|    {
 3851|   505k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 505k]
  |  |  |  Branch (1039:45): [True: 0, False: 505k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|   505k|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|   505k|        return read_while1_code_unit(
 3860|   505k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|   505k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   505k|        : m_fptr([](storage fn,
  743|   505k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   505k|              cvref<T> obj = *get<T>(fn);
  745|   505k|              if constexpr (std::is_void_v<R>) {
  746|   505k|                  obj(static_cast<decltype(args)>(args)...);
  747|   505k|              }
  748|   505k|              else {
  749|   505k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   505k|              }
  751|   505k|          }),
  752|   505k|          m_storage(std::addressof(f))
  753|   505k|    {
  754|   505k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.75M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.75M|              else {
  749|  2.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.75M|              }
  751|  2.75M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.75M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.75M|        else if constexpr (std::is_object_v<T>) {
  688|  2.75M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.75M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3860|  2.75M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   505k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   505k|        {
  662|   505k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3938|   869k|    {
 3939|   869k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 106k, False: 763k]
  ------------------
 3940|   106k|            auto beg_exp_it = range.begin();
 3941|   106k|            auto it = *r;
 3942|       |
 3943|   106k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 105k, False: 279]
  ------------------
 3944|   106k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|   105k|                it = r_sign->first;
 3946|   105k|            }
 3947|       |
 3948|   106k|            if (auto r_exp = read_while1_code_unit(
 3949|   106k|                    ranges::subrange{it, range.end()},
 3950|   106k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|   106k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.89k, False: 104k]
  |  |  ------------------
  ------------------
 3952|  1.89k|                it = beg_exp_it;
 3953|  1.89k|            }
 3954|   104k|            else {
 3955|   104k|                it = *r_exp;
 3956|   104k|            }
 3957|       |
 3958|   106k|            return it;
 3959|   106k|        }
 3960|   763k|        return range.begin();
 3961|   869k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   336k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   336k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   336k|              else {
  749|   336k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   336k|              }
  751|   336k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   336k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   336k|        else if constexpr (std::is_object_v<T>) {
  688|   336k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   336k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3950|   336k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4007|   765k|    {
 4008|   765k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   765k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 655k, False: 109k]
  |  Branch (4009:50): [True: 20.3k, False: 635k]
  ------------------
 4010|       |
 4011|   765k|        auto it = ranges::begin(range);
 4012|   765k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   765k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   765k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 46.7k, False: 718k]
  |  |  ------------------
  ------------------
 4016|  46.7k|            return r.transform_error(
 4017|  46.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  46.7k|                                              "Invalid floating-point value"));
 4019|  46.7k|        }
 4020|   718k|        else {
 4021|   718k|            digits_count += ranges::distance(it, *r);
 4022|   718k|            it = *r;
 4023|   718k|        }
 4024|       |
 4025|   718k|        m_integral_part_length = digits_count;
 4026|   718k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 140k, False: 577k]
  ------------------
 4027|   718k|                                             m_locale_options.decimal_point)) {
 4028|   140k|            it = *r;
 4029|   140k|        }
 4030|       |
 4031|   718k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 129k, False: 588k]
  ------------------
 4032|   718k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|   129k|            digits_count += ranges::distance(it, *r);
 4034|   129k|            it = *r;
 4035|   129k|        }
 4036|       |
 4037|   718k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 718k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   718k|        auto beg_exp_it = it;
 4044|   718k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 621k, False: 96.6k]
  ------------------
 4045|   621k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|   621k|        }
 4047|   718k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 19.5k, False: 698k]
  |  Branch (4047:29): [True: 12.2k, False: 7.34k]
  ------------------
 4048|  12.2k|            return detail::unexpected_scan_error(
 4049|  12.2k|                scan_error::invalid_scanned_value,
 4050|  12.2k|                "No exponent given to scientific float");
 4051|  12.2k|        }
 4052|       |
 4053|   706k|        m_kind =
 4054|   706k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 602k, False: 103k]
  ------------------
 4055|       |
 4056|   706k|        return it;
 4057|   718k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3835|  1.48M|    {
 3836|  1.48M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.48M]
  |  |  |  Branch (1039:45): [True: 0, False: 1.48M]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|  1.48M|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|  1.48M|        return read_while1_code_unit(
 3845|  1.48M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|  1.48M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.48M|        : m_fptr([](storage fn,
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|  1.48M|              if constexpr (std::is_void_v<R>) {
  746|  1.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.48M|              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
  752|  1.48M|          m_storage(std::addressof(f))
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.50M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.50M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.50M|              else {
  749|  8.50M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.50M|              }
  751|  8.50M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.50M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.50M|        else if constexpr (std::is_object_v<T>) {
  688|  8.50M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.50M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3845|  8.50M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.48M|        {
  662|  1.48M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   961k|    {
 1676|   961k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   961k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  69.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  69.8k|        {
  662|  69.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   180k|        : m_fptr([](storage fn,
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|   180k|              if constexpr (std::is_void_v<R>) {
  746|   180k|                  obj(static_cast<decltype(args)>(args)...);
  747|   180k|              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
  752|   180k|          m_storage(std::addressof(f))
  753|   180k|    {
  754|   180k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   180k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   180k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   180k|              else {
  749|   180k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   180k|              }
  751|   180k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   180k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   180k|        else if constexpr (std::is_object_v<T>) {
  688|   180k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   180k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   180k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   180k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   180k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3738|   858k|    {
 3739|   858k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   858k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 858k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   858k|        return read_source_impl(range);
 3745|   858k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   180k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   180k|        {
  662|   180k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   214k|    {
 4256|   214k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   214k|#if !SCN_DISABLE_LOCALE
 4259|   214k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 59.1k, False: 155k]
  ------------------
 4260|  59.1k|            return read_impl<Range>(
 4261|  59.1k|                range, rd,
 4262|  59.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  59.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  59.1k|                },
 4265|  59.1k|                value, loc);
 4266|  59.1k|        }
 4267|   155k|#endif
 4268|       |
 4269|   155k|        return read_impl<Range>(
 4270|   155k|            range, rd,
 4271|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   155k|                return r.read_source(SCN_FWD(args)...);
 4273|   155k|            },
 4274|   155k|            value);
 4275|   214k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   303k|    {
 4292|   303k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   303k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.6k, False: 290k]
  |  |  ------------------
  ------------------
 4294|  12.6k|            return unexpected(r.error());
 4295|  12.6k|        }
 4296|       |
 4297|   290k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 13.7k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  13.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  13.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  13.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  13.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  13.7k|    }                                                  \
  |  |  |  | 3957|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   276k|        return ranges::next(range.begin(), n);
 4299|   290k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   937k|    {
  763|   937k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   937k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  59.1k|        : m_fptr([](storage fn,
  743|  59.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.1k|              cvref<T> obj = *get<T>(fn);
  745|  59.1k|              if constexpr (std::is_void_v<R>) {
  746|  59.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  59.1k|              }
  748|  59.1k|              else {
  749|  59.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.1k|              }
  751|  59.1k|          }),
  752|  59.1k|          m_storage(std::addressof(f))
  753|  59.1k|    {
  754|  59.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  59.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  59.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  59.1k|              else {
  749|  59.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  59.1k|              }
  751|  59.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  59.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  59.1k|        else if constexpr (std::is_object_v<T>) {
  688|  59.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  59.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  59.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  59.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  59.1k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|   184k|    {
 3753|   184k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   184k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   184k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   184k|        return read_source_impl(range);
 3759|   184k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|   937k|    {
 3779|   937k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   937k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   937k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   937k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 937k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   937k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   937k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   937k|        auto it = sign_result.first;
 3782|   937k|        m_sign = sign_result.second;
 3783|       |
 3784|   937k|        auto digits_begin = it;
 3785|   937k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|   937k|                      ranges::sized_range<Range>) {
 3788|   937k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 937k]
  |  |  |  Branch (1039:45): [True: 0, False: 937k]
  |  |  |  Branch (1039:45): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
 3789|   937k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|   937k|            else {
 3798|   937k|                auto cb = [&](const auto& rr)
 3799|   937k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   937k|                    auto res = read_all(rr);
 3801|   937k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|   937k|                        return detail::unexpected_scan_error(
 3803|   937k|                            scan_error::invalid_scanned_value,
 3804|   937k|                            "Invalid float value");
 3805|   937k|                    }
 3806|   937k|                    return res;
 3807|   937k|                };
 3808|   937k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   937k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   937k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 38.9k, False: 898k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  38.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  38.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  38.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  38.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  38.9k|    }                                                  \
  |  | 3957|   937k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|   898k|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|   937k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   937k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   937k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   898k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 893k, False: 5.33k]
  |  Branch (3821:48): [True: 889k, False: 4.43k]
  ------------------
 3822|   898k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 849k, False: 39.6k]
  ------------------
 3823|   898k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 843k, False: 5.65k]
  ------------------
 3824|   843k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   843k|        }
 3826|       |
 3827|   898k|        handle_separators();
 3828|       |
 3829|   898k|        return it;
 3830|   937k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|   937k|    {
 3873|   937k|        auto it = range.begin();
 3874|   937k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 927k, False: 9.77k]
  ------------------
 3875|   927k|            return unexpected(r.error());
 3876|   927k|        }
 3877|  9.77k|        else {
 3878|  9.77k|            it = *r;
 3879|  9.77k|        }
 3880|       |
 3881|  9.77k|        if (auto r = read_matching_string_classic_nocase(
 3882|  9.77k|                ranges::subrange{it, range.end()}, "inity");
 3883|  9.77k|            !r) {
  ------------------
  |  Branch (3883:13): [True: 5.33k, False: 4.43k]
  ------------------
 3884|  5.33k|            m_kind = float_kind::inf_short;
 3885|  5.33k|            return it;
 3886|  5.33k|        }
 3887|  4.43k|        else {
 3888|  4.43k|            m_kind = float_kind::inf_long;
 3889|  4.43k|            return *r;
 3890|  4.43k|        }
 3891|  9.77k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|   927k|    {
 3896|   927k|        auto it = range.begin();
 3897|   927k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 881k, False: 46.7k]
  ------------------
 3898|   881k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   881k|                scan_error::invalid_scanned_value,
 3900|   881k|                "Invalid floating-point NaN value"));
 3901|   881k|        }
 3902|  46.7k|        else {
 3903|  46.7k|            it = *r;
 3904|  46.7k|        }
 3905|       |
 3906|  46.7k|        if (auto r =
 3907|  46.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|  46.7k|            !r) {
  ------------------
  |  Branch (3908:13): [True: 39.6k, False: 7.09k]
  ------------------
 3909|  39.6k|            m_kind = float_kind::nan_simple;
 3910|  39.6k|            return it;
 3911|  39.6k|        }
 3912|  7.09k|        else {
 3913|  7.09k|            it = *r;
 3914|  7.09k|        }
 3915|       |
 3916|  7.09k|        auto payload_beg_it = it;
 3917|  7.09k|        it = read_while_code_unit(
 3918|  7.09k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|  7.09k|                return is_ascii_char(ch) &&
 3920|  7.09k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|  7.09k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|  7.09k|            });
 3923|  7.09k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|  7.09k|        m_kind = float_kind::nan_with_payload;
 3926|  7.09k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 5.65k, False: 1.43k]
  ------------------
 3927|  7.09k|                                             ')')) {
 3928|  5.65k|            return *r;
 3929|  5.65k|        }
 3930|  1.43k|        return detail::unexpected_scan_error(
 3931|  1.43k|            scan_error::invalid_scanned_value,
 3932|  1.43k|            "Invalid floating-point NaN payload");
 3933|  7.09k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  7.09k|        : m_fptr([](storage fn,
  743|  7.09k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.09k|              cvref<T> obj = *get<T>(fn);
  745|  7.09k|              if constexpr (std::is_void_v<R>) {
  746|  7.09k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.09k|              }
  748|  7.09k|              else {
  749|  7.09k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.09k|              }
  751|  7.09k|          }),
  752|  7.09k|          m_storage(std::addressof(f))
  753|  7.09k|    {
  754|  7.09k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   146k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   146k|        else if constexpr (std::is_object_v<T>) {
  688|   146k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   146k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3918|   146k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|   146k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3919:24): [True: 146k, False: 83]
  ------------------
 3920|   146k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3920:26): [True: 140k, False: 5.99k]
  |  Branch (3920:39): [True: 132k, False: 8.12k]
  |  Branch (3920:54): [True: 2.73k, False: 11.3k]
  |  Branch (3920:67): [True: 2.64k, False: 83]
  ------------------
 3921|   146k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3921:26): [True: 5.47k, False: 5.99k]
  |  Branch (3921:39): [True: 2.67k, False: 2.80k]
  |  Branch (3921:53): [True: 2.72k, False: 6.07k]
  ------------------
 3922|   146k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  7.09k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.09k|        {
  662|  7.09k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|   618k|    {
 3866|   618k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   618k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   525k|{
 2128|   525k|    auto it = read_while_code_unit(range, pred);
 2129|   525k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 224k, False: 301k]
  ------------------
 2130|   224k|        return unexpected(parse_error::error);
 2131|   224k|    }
 2132|   301k|    return it;
 2133|   525k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3938|   151k|    {
 3939|   151k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 25.2k, False: 126k]
  ------------------
 3940|  25.2k|            auto beg_exp_it = range.begin();
 3941|  25.2k|            auto it = *r;
 3942|       |
 3943|  25.2k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 25.1k, False: 90]
  ------------------
 3944|  25.2k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  25.1k|                it = r_sign->first;
 3946|  25.1k|            }
 3947|       |
 3948|  25.2k|            if (auto r_exp = read_while1_code_unit(
 3949|  25.2k|                    ranges::subrange{it, range.end()},
 3950|  25.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  25.2k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 700, False: 24.5k]
  |  |  ------------------
  ------------------
 3952|    700|                it = beg_exp_it;
 3953|    700|            }
 3954|  24.5k|            else {
 3955|  24.5k|                it = *r_exp;
 3956|  24.5k|            }
 3957|       |
 3958|  25.2k|            return it;
 3959|  25.2k|        }
 3960|   126k|        return range.begin();
 3961|   151k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.2k|        : m_fptr([](storage fn,
  743|  25.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.2k|              cvref<T> obj = *get<T>(fn);
  745|  25.2k|              if constexpr (std::is_void_v<R>) {
  746|  25.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.2k|              }
  748|  25.2k|              else {
  749|  25.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.2k|              }
  751|  25.2k|          }),
  752|  25.2k|          m_storage(std::addressof(f))
  753|  25.2k|    {
  754|  25.2k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  72.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  72.8k|              else {
  749|  72.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.8k|              }
  751|  72.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  72.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  72.8k|        else if constexpr (std::is_object_v<T>) {
  688|  72.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  72.8k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3950|  72.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.2k|        {
  662|  25.2k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|   262k|    {
 4008|   262k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   262k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 163k, False: 99.2k]
  |  Branch (4009:50): [True: 19.0k, False: 144k]
  ------------------
 4010|       |
 4011|   262k|        auto it = ranges::begin(range);
 4012|   262k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   262k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   262k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24.7k, False: 237k]
  |  |  ------------------
  ------------------
 4016|  24.7k|            return r.transform_error(
 4017|  24.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  24.7k|                                              "Invalid floating-point value"));
 4019|  24.7k|        }
 4020|   237k|        else {
 4021|   237k|            digits_count += ranges::distance(it, *r);
 4022|   237k|            it = *r;
 4023|   237k|        }
 4024|       |
 4025|   237k|        m_integral_part_length = digits_count;
 4026|   237k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 43.0k, False: 194k]
  ------------------
 4027|   237k|                                             m_locale_options.decimal_point)) {
 4028|  43.0k|            it = *r;
 4029|  43.0k|        }
 4030|       |
 4031|   237k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 39.0k, False: 198k]
  ------------------
 4032|   237k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  39.0k|            digits_count += ranges::distance(it, *r);
 4034|  39.0k|            it = *r;
 4035|  39.0k|        }
 4036|       |
 4037|   237k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   237k|        auto beg_exp_it = it;
 4044|   237k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 151k, False: 86.4k]
  ------------------
 4045|   151k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|   151k|        }
 4047|   237k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 17.7k, False: 220k]
  |  Branch (4047:29): [True: 11.9k, False: 5.80k]
  ------------------
 4048|  11.9k|            return detail::unexpected_scan_error(
 4049|  11.9k|                scan_error::invalid_scanned_value,
 4050|  11.9k|                "No exponent given to scientific float");
 4051|  11.9k|        }
 4052|       |
 4053|   225k|        m_kind =
 4054|   225k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 201k, False: 24.5k]
  ------------------
 4055|       |
 4056|   225k|        return it;
 4057|   237k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|   500k|    {
 3836|   500k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 500k]
  |  |  |  Branch (1039:45): [True: 0, False: 500k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   500k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   500k|        return read_while1_code_unit(
 3845|   500k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   500k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   500k|        : m_fptr([](storage fn,
  743|   500k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   500k|              cvref<T> obj = *get<T>(fn);
  745|   500k|              if constexpr (std::is_void_v<R>) {
  746|   500k|                  obj(static_cast<decltype(args)>(args)...);
  747|   500k|              }
  748|   500k|              else {
  749|   500k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   500k|              }
  751|   500k|          }),
  752|   500k|          m_storage(std::addressof(f))
  753|   500k|    {
  754|   500k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.59M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.59M|              else {
  749|  2.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.59M|              }
  751|  2.59M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.59M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.59M|        else if constexpr (std::is_object_v<T>) {
  688|  2.59M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.59M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3845|  2.59M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   500k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   500k|        {
  662|   500k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|   937k|    {
 4065|   937k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   937k|        const bool allowed_nonhex =
 4067|   937k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   937k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   937k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 927k, False: 9.77k]
  |  Branch (4070:45): [True: 0, False: 927k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   937k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 9.77k, False: 927k]
  ------------------
 4076|  9.77k|            return *r;
 4077|  9.77k|        }
 4078|       |
 4079|   927k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 882k, False: 45.2k]
  |  Branch (4079:45): [True: 1.43k, False: 881k]
  ------------------
 4080|  1.43k|            return unexpected(r.error());
 4081|  1.43k|        }
 4082|   926k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 45.2k, False: 881k]
  ------------------
 4083|  45.2k|            return *r;
 4084|  45.2k|        }
 4085|       |
 4086|   881k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 618k, False: 262k]
  |  Branch (4086:28): [True: 186k, False: 432k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   186k|            auto it = range.begin();
 4090|       |
 4091|   186k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 10.3k, False: 176k]
  ------------------
 4092|  10.3k|                m_kind = float_kind::hex_with_prefix;
 4093|  10.3k|                it = *r;
 4094|  10.3k|            }
 4095|   176k|            else {
 4096|   176k|                m_kind = float_kind::hex_without_prefix;
 4097|   176k|            }
 4098|       |
 4099|   186k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   186k|        }
 4101|   694k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 262k, False: 432k]
  |  Branch (4101:29): [True: 262k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   262k|            m_kind = float_kind::generic;
 4105|   262k|            return read_regular_float(range);
 4106|   262k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   432k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.9k, False: 406k]
  |  |  ------------------
  ------------------
 4112|  25.9k|            m_kind = float_kind::hex_with_prefix;
 4113|  25.9k|            return read_hex(ranges::subrange{*r, range.end()});
 4114|  25.9k|        }
 4115|       |
 4116|   406k|        m_kind = float_kind::generic;
 4117|   406k|        return read_regular(range);
 4118|   432k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|   618k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   618k|                    auto res = read_all(rr);
 3801|   618k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 794, False: 617k]
  |  |  ------------------
  ------------------
 3802|    794|                        return detail::unexpected_scan_error(
 3803|    794|                            scan_error::invalid_scanned_value,
 3804|    794|                            "Invalid float value");
 3805|    794|                    }
 3806|   617k|                    return res;
 3807|   618k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   618k|{
 1938|   618k|    return ranges::next(range.begin(), range.end());
 1939|   618k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   618k|    {
  313|   618k|        ranges::advance(x, bound);
  314|   618k|        return x;
  315|   618k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   618k|    {
  275|   618k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   618k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   618k|    {
  190|   618k|        i = std::move(bound);
  191|   618k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   850k|    {
 1676|   850k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   850k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   850k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   850k|    {
 1720|   850k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   850k|                      ranges::sized_range<Range>) {
 1725|   850k|            m_storage.reset();
 1726|   850k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   850k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  59.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  59.1k|        {
  662|  59.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   155k|        : m_fptr([](storage fn,
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|   155k|              if constexpr (std::is_void_v<R>) {
  746|   155k|                  obj(static_cast<decltype(args)>(args)...);
  747|   155k|              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
  752|   155k|          m_storage(std::addressof(f))
  753|   155k|    {
  754|   155k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   155k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   155k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   155k|              else {
  749|   155k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   155k|              }
  751|   155k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   155k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   155k|        else if constexpr (std::is_object_v<T>) {
  688|   155k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   155k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   155k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   155k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   155k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|   753k|    {
 3739|   753k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 753k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   753k|        return read_source_impl(range);
 3745|   753k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   155k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   155k|        {
  662|   155k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   267k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   267k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   267k|            auto rd = make_reader<T, char_type>();
 6288|   267k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   267k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 267k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   267k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 267k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   267k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   267k|                return impl(rd, range, value);
 6293|   267k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   267k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   267k|    {
 6213|   267k|        const bool need_skipped_width =
 6214|   267k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 267k]
  |  Branch (6214:33): [True: 0, False: 267k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   267k|        auto it = rng.begin();
 6218|   267k|        std::ptrdiff_t prefix_width = 0;
 6219|   267k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 267k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   267k|        else {
 6227|   267k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.03k, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.03k|    }                                                  \
  |  |  |  | 3957|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   262k|            std::tie(it, prefix_width) = prefix_result;
 6229|   262k|        }
 6230|   262k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   262k|        std::ptrdiff_t value_width = 0;
 6234|   262k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 262k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   262k|        else {
 6250|   262k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   262k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   262k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 19.0k, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  19.0k|    }                                                  \
  |  | 3957|   262k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   243k|                                             specs, value, loc));
 6252|       |
 6253|   243k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 243k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   243k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   243k|        std::ptrdiff_t postfix_width = 0;
 6262|   243k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 239k, False: 4.02k]
  ------------------
 6263|   239k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   239k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   239k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   239k|                                 value_width));
 6267|   239k|            std::tie(it, postfix_width) = postfix_result;
 6268|   239k|        }
 6269|       |
 6270|   243k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   243k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   243k|            specs, prefix_width, value_width, postfix_width));
 6272|   243k|        return it;
 6273|   243k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|   643k|    {
 3765|   643k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   643k|        const std::ptrdiff_t sign_len =
 3768|   643k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 160k, False: 483k]
  ------------------
 3769|       |
 3770|   643k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   643k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   643k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   643k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 14.4k, False: 629k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  14.4k|    }                                                  \
  |  |  |  | 3957|   643k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   629k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   643k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   262k|    {
 4256|   262k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   262k|#if !SCN_DISABLE_LOCALE
 4259|   262k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 75.2k, False: 187k]
  ------------------
 4260|  75.2k|            return read_impl<Range>(
 4261|  75.2k|                range, rd,
 4262|  75.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  75.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  75.2k|                },
 4265|  75.2k|                value, loc);
 4266|  75.2k|        }
 4267|   187k|#endif
 4268|       |
 4269|   187k|        return read_impl<Range>(
 4270|   187k|            range, rd,
 4271|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   187k|                return r.read_source(SCN_FWD(args)...);
 4273|   187k|            },
 4274|   187k|            value);
 4275|   262k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   365k|    {
 4292|   365k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   365k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.0k, False: 341k]
  |  |  ------------------
  ------------------
 4294|  23.0k|            return unexpected(r.error());
 4295|  23.0k|        }
 4296|       |
 4297|   341k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   341k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   341k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   341k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.55k, False: 340k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.55k|    }                                                  \
  |  |  |  | 3957|   341k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   340k|        return ranges::next(range.begin(), n);
 4299|   341k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  75.2k|        : m_fptr([](storage fn,
  743|  75.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.2k|              cvref<T> obj = *get<T>(fn);
  745|  75.2k|              if constexpr (std::is_void_v<R>) {
  746|  75.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.2k|              }
  748|  75.2k|              else {
  749|  75.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.2k|              }
  751|  75.2k|          }),
  752|  75.2k|          m_storage(std::addressof(f))
  753|  75.2k|    {
  754|  75.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  75.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  75.2k|              else {
  749|  75.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.2k|              }
  751|  75.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  75.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.2k|        else if constexpr (std::is_object_v<T>) {
  688|  75.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  75.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  75.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  75.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  75.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  75.2k|        {
  662|  75.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   187k|        : m_fptr([](storage fn,
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|   187k|              if constexpr (std::is_void_v<R>) {
  746|   187k|                  obj(static_cast<decltype(args)>(args)...);
  747|   187k|              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
  752|   187k|          m_storage(std::addressof(f))
  753|   187k|    {
  754|   187k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   187k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   187k|        else if constexpr (std::is_object_v<T>) {
  688|   187k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   187k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   187k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   187k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   187k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   187k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   187k|        {
  662|   187k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   222k|    {
 4256|   222k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   222k|#if !SCN_DISABLE_LOCALE
 4259|   222k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 61.8k, False: 160k]
  ------------------
 4260|  61.8k|            return read_impl<Range>(
 4261|  61.8k|                range, rd,
 4262|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  61.8k|                },
 4265|  61.8k|                value, loc);
 4266|  61.8k|        }
 4267|   160k|#endif
 4268|       |
 4269|   160k|        return read_impl<Range>(
 4270|   160k|            range, rd,
 4271|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   160k|                return r.read_source(SCN_FWD(args)...);
 4273|   160k|            },
 4274|   160k|            value);
 4275|   222k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   314k|    {
 4292|   314k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   314k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.9k, False: 301k]
  |  |  ------------------
  ------------------
 4294|  12.9k|            return unexpected(r.error());
 4295|  12.9k|        }
 4296|       |
 4297|   301k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.9k, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.9k|    }                                                  \
  |  |  |  | 3957|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   288k|        return ranges::next(range.begin(), n);
 4299|   301k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  61.8k|        : m_fptr([](storage fn,
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|  61.8k|              if constexpr (std::is_void_v<R>) {
  746|  61.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  61.8k|              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
  752|  61.8k|          m_storage(std::addressof(f))
  753|  61.8k|    {
  754|  61.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  61.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.8k|              else {
  749|  61.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.8k|              }
  751|  61.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  61.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.8k|        else if constexpr (std::is_object_v<T>) {
  688|  61.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  61.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  61.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  61.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  61.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  61.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  61.8k|        {
  662|  61.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   160k|        : m_fptr([](storage fn,
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|   160k|              if constexpr (std::is_void_v<R>) {
  746|   160k|                  obj(static_cast<decltype(args)>(args)...);
  747|   160k|              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
  752|   160k|          m_storage(std::addressof(f))
  753|   160k|    {
  754|   160k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   160k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   160k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   160k|              else {
  749|   160k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   160k|              }
  751|   160k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   160k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   160k|        else if constexpr (std::is_object_v<T>) {
  688|   160k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   160k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   160k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   160k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   160k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   160k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   160k|        {
  662|   160k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   271k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   271k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   271k|            auto rd = make_reader<T, char_type>();
 6288|   271k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   271k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 271k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   271k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 271k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   271k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   271k|                return impl(rd, range, value);
 6293|   271k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   271k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   271k|    {
 6213|   271k|        const bool need_skipped_width =
 6214|   271k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 271k]
  |  Branch (6214:33): [True: 0, False: 271k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   271k|        auto it = rng.begin();
 6218|   271k|        std::ptrdiff_t prefix_width = 0;
 6219|   271k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 271k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   271k|        else {
 6227|   271k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   271k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   271k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   271k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.35k, False: 265k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.35k|    }                                                  \
  |  |  |  | 3957|   271k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   265k|            std::tie(it, prefix_width) = prefix_result;
 6229|   265k|        }
 6230|   265k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   265k|        std::ptrdiff_t value_width = 0;
 6234|   265k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 265k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   265k|        else {
 6250|   265k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   265k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   265k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 18.7k, False: 247k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  18.7k|    }                                                  \
  |  | 3957|   265k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   247k|                                             specs, value, loc));
 6252|       |
 6253|   247k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 247k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   247k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   247k|        std::ptrdiff_t postfix_width = 0;
 6262|   247k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 242k, False: 4.28k]
  ------------------
 6263|   242k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   242k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   242k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   242k|                                 value_width));
 6267|   242k|            std::tie(it, postfix_width) = postfix_result;
 6268|   242k|        }
 6269|       |
 6270|   247k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   247k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 247k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   247k|            specs, prefix_width, value_width, postfix_width));
 6272|   247k|        return it;
 6273|   247k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3764|   651k|    {
 3765|   651k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   651k|        const std::ptrdiff_t sign_len =
 3768|   651k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 165k, False: 486k]
  ------------------
 3769|       |
 3770|   651k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   651k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   651k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   651k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.7k, False: 639k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.7k|    }                                                  \
  |  |  |  | 3957|   651k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   639k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   651k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   265k|    {
 4256|   265k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   265k|#if !SCN_DISABLE_LOCALE
 4259|   265k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 76.6k, False: 189k]
  ------------------
 4260|  76.6k|            return read_impl<Range>(
 4261|  76.6k|                range, rd,
 4262|  76.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  76.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  76.6k|                },
 4265|  76.6k|                value, loc);
 4266|  76.6k|        }
 4267|   189k|#endif
 4268|       |
 4269|   189k|        return read_impl<Range>(
 4270|   189k|            range, rd,
 4271|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   189k|                return r.read_source(SCN_FWD(args)...);
 4273|   189k|            },
 4274|   189k|            value);
 4275|   265k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   369k|    {
 4292|   369k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   369k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.7k, False: 345k]
  |  |  ------------------
  ------------------
 4294|  23.7k|            return unexpected(r.error());
 4295|  23.7k|        }
 4296|       |
 4297|   345k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 435, False: 345k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    435|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    435|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    435|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    435|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    435|    }                                                  \
  |  |  |  | 3957|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   345k|        return ranges::next(range.begin(), n);
 4299|   345k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  76.6k|        : m_fptr([](storage fn,
  743|  76.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.6k|              cvref<T> obj = *get<T>(fn);
  745|  76.6k|              if constexpr (std::is_void_v<R>) {
  746|  76.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  76.6k|              }
  748|  76.6k|              else {
  749|  76.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.6k|              }
  751|  76.6k|          }),
  752|  76.6k|          m_storage(std::addressof(f))
  753|  76.6k|    {
  754|  76.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  76.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  76.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  76.6k|              else {
  749|  76.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  76.6k|              }
  751|  76.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  76.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  76.6k|        else if constexpr (std::is_object_v<T>) {
  688|  76.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  76.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  76.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  76.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  76.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  76.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  76.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  76.6k|        {
  662|  76.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   189k|        : m_fptr([](storage fn,
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
  752|   189k|          m_storage(std::addressof(f))
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   189k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  688|   189k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   189k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   189k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   189k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   189k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   224k|    {
 4256|   224k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   224k|#if !SCN_DISABLE_LOCALE
 4259|   224k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 63.1k, False: 161k]
  ------------------
 4260|  63.1k|            return read_impl<Range>(
 4261|  63.1k|                range, rd,
 4262|  63.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  63.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  63.1k|                },
 4265|  63.1k|                value, loc);
 4266|  63.1k|        }
 4267|   161k|#endif
 4268|       |
 4269|   161k|        return read_impl<Range>(
 4270|   161k|            range, rd,
 4271|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   161k|                return r.read_source(SCN_FWD(args)...);
 4273|   161k|            },
 4274|   161k|            value);
 4275|   224k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   319k|    {
 4292|   319k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   319k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.2k, False: 306k]
  |  |  ------------------
  ------------------
 4294|  13.2k|            return unexpected(r.error());
 4295|  13.2k|        }
 4296|       |
 4297|   306k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   306k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   306k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   306k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.2k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.2k|    }                                                  \
  |  |  |  | 3957|   306k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   293k|        return ranges::next(range.begin(), n);
 4299|   306k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  63.1k|        : m_fptr([](storage fn,
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|  63.1k|              if constexpr (std::is_void_v<R>) {
  746|  63.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.1k|              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
  752|  63.1k|          m_storage(std::addressof(f))
  753|  63.1k|    {
  754|  63.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  63.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  63.1k|              else {
  749|  63.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.1k|              }
  751|  63.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  63.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  63.1k|        else if constexpr (std::is_object_v<T>) {
  688|  63.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  63.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  63.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  63.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  63.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  63.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  63.1k|        {
  662|  63.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   161k|        : m_fptr([](storage fn,
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|   161k|              if constexpr (std::is_void_v<R>) {
  746|   161k|                  obj(static_cast<decltype(args)>(args)...);
  747|   161k|              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
  752|   161k|          m_storage(std::addressof(f))
  753|   161k|    {
  754|   161k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   161k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   161k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   161k|              else {
  749|   161k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   161k|              }
  751|   161k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   161k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   161k|        else if constexpr (std::is_object_v<T>) {
  688|   161k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   161k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   161k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   161k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   161k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   161k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   161k|        {
  662|   161k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.09M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.09M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.09M|        else {
 1055|  1.09M|            return r.begin().contiguous_segment();
 1056|  1.09M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.09M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   964k|{
 2193|   964k|    auto it = range.begin();
 2194|  1.78M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 1.76M, False: 15.4k]
  ------------------
 2195|  1.76M|        const auto val =
 2196|  1.76M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  1.76M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  1.76M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.75M, False: 13.0k]
  |  |  ------------------
  ------------------
 2198|  1.75M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  1.75M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  1.75M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 949k, False: 804k]
  ------------------
 2201|   949k|                return it;
 2202|   949k|            }
 2203|  1.75M|        }
 2204|   817k|        it = val.iterator;
 2205|   817k|    }
 2206|       |
 2207|  15.4k|    return it;
 2208|   964k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.76M|{
 1998|  1.76M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.76M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.76M|    auto it = range.begin();
 2002|  1.76M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.76M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.0k, False: 1.75M]
  |  |  ------------------
  ------------------
 2005|  13.0k|        ++it;
 2006|  13.0k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  13.0k|        return {it, {}};
 2008|  13.0k|    }
 2009|       |
 2010|  1.75M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.73M, False: 18.6k]
  ------------------
 2011|  1.73M|        ++it;
 2012|  1.73M|        return {it, string_type(1, *range.begin())};
 2013|  1.73M|    }
 2014|       |
 2015|  18.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.6k|    return {it, string_type{range.begin(), it}};
 2017|  1.75M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  13.0k|{
 1265|  13.0k|    auto it = input.begin();
 1266|  92.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 91.3k, False: 1.37k]
  ------------------
 1267|  91.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.7k, False: 79.6k]
  ------------------
 1268|  11.7k|            break;
 1269|  11.7k|        }
 1270|  91.3k|    }
 1271|  13.0k|    return it;
 1272|  13.0k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.6k|    {
  283|  18.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.6k|    {
  252|  18.6k|        constexpr iter_difference_t<I> zero{0};
  253|  18.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|  56.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 39.0k, False: 17.6k]
  |  Branch (255:30): [True: 38.0k, False: 1.03k]
  ------------------
  256|  38.0k|            ++i;
  257|  38.0k|            ++counter;
  258|  38.0k|        }
  259|       |
  260|  18.6k|        return counter;
  261|  18.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.76M|    {
 1989|  1.76M|        return !codepoint.empty();
 1990|  1.76M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   964k|{
 2214|   964k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   964k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  1.09M|{
 3098|  1.09M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 1.09M, False: 0]
  ------------------
 3099|  1.09M|        auto it = read_while_classic_space(range);
 3100|  1.09M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  1.09M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.4k, False: 1.08M]
  |  |  ------------------
  ------------------
 3102|  15.4k|            return unexpected(e);
 3103|  15.4k|        }
 3104|       |
 3105|  1.08M|        return it;
 3106|  1.09M|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  1.09M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  1.09M|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  1.09M|    else {
 2258|  1.09M|        auto it = range.begin();
 2259|       |
 2260|  1.09M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|  1.09M|            auto seg = get_contiguous_beginning(range);
 2262|  1.09M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|  1.09M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 131k, False: 964k]
  ------------------
 2264|   131k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|   131k|            }
 2266|   964k|            ranges::advance(it, seg.size());
 2267|   964k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.09M|            return detail::is_cp_space(cp);
 2271|  1.09M|        });
 2272|  1.09M|    }
 2273|  1.09M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   964k|        : m_fptr([](storage fn,
  743|   964k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   964k|              cvref<T> obj = *get<T>(fn);
  745|   964k|              if constexpr (std::is_void_v<R>) {
  746|   964k|                  obj(static_cast<decltype(args)>(args)...);
  747|   964k|              }
  748|   964k|              else {
  749|   964k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   964k|              }
  751|   964k|          }),
  752|   964k|          m_storage(std::addressof(f))
  753|   964k|    {
  754|   964k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.75M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.75M|              else {
  749|  1.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.75M|              }
  751|  1.75M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.75M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.75M|        else if constexpr (std::is_object_v<T>) {
  688|  1.75M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.75M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  1.75M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.75M|            return detail::is_cp_space(cp);
 2271|  1.75M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   964k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   964k|        {
  662|   964k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   625k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   625k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   625k|        auto beg = r.begin();
  991|   625k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 625k, False: 0]
  ------------------
  992|   625k|            return false;
  993|   625k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   625k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.64M|{
 1956|  1.64M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.64M|    else {
 1967|  1.64M|        auto it = range.begin();
 1968|  1.64M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 986k, False: 654k]
  ------------------
 1969|   986k|            return ranges::next(it, count);
 1970|   986k|        }
 1971|       |
 1972|  2.52M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.92M, False: 594k]
  ------------------
 1973|  1.92M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 59.8k, False: 1.86M]
  ------------------
 1974|  59.8k|                return unexpected(eof_error::eof);
 1975|  59.8k|            }
 1976|  1.92M|        }
 1977|       |
 1978|   594k|        return it;
 1979|   654k|    }
 1980|  1.64M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.64M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.64M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.64M|        else {
 1107|  1.64M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.64M, False: 0]
  ------------------
 1108|  1.64M|                return static_cast<size_t>(
 1109|  1.64M|                    r.begin().parent()->chars_available() -
 1110|  1.64M|                    r.begin().position());
 1111|  1.64M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.64M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.64M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.53M|    {
  763|  4.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  4.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.53M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.44M|        : m_fptr([](storage fn,
  743|  1.44M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.44M|              cvref<T> obj = *get<T>(fn);
  745|  1.44M|              if constexpr (std::is_void_v<R>) {
  746|  1.44M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.44M|              }
  748|  1.44M|              else {
  749|  1.44M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.44M|              }
  751|  1.44M|          }),
  752|  1.44M|          m_storage(std::addressof(f))
  753|  1.44M|    {
  754|  1.44M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.26M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.26M|              else {
  749|  2.26M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.26M|              }
  751|  2.26M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.26M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.26M|        else if constexpr (std::is_object_v<T>) {
  688|  2.26M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.26M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.44M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.44M|        {
  662|  1.44M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|   457k|    {
 6126|   457k|        const bool need_skipped_width =
 6127|   457k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 457k]
  |  Branch (6127:33): [True: 0, False: 457k]
  ------------------
 6128|   457k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   457k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 457k]
  ------------------
 6132|   457k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 457k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   457k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 457k, False: 0]
  |  Branch (6136:56): [True: 457k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   457k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 457k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   910k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   457k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   457k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   457k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.51k, False: 453k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.51k|    }                                                  \
  |  |  |  | 3957|   457k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   910k|                            make_eof_scan_error));
 6147|       |
 6148|   910k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 453k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   453k|            return result_type{it, 0};
 6156|   910k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   457k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  1.08M|{
 2108|  1.08M|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.08M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.08M|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.08M|    else {
 2079|  1.08M|        auto first = range.begin();
 2080|  1.70M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.69M, False: 4.43k]
  ------------------
 2081|  1.69M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.07M, False: 622k]
  ------------------
 2082|  1.07M|                return first;
 2083|  1.07M|            }
 2084|  1.69M|        }
 2085|  4.43k|        return first;
 2086|  1.08M|    }
 2087|  1.08M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   763k|    {
  108|   763k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   763k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   763k|    {
   94|   763k|        iter_difference_t<I> counter{0};
   95|  2.11M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.34M, False: 763k]
  ------------------
   96|  1.34M|            ++i;
   97|  1.34M|            ++counter;
   98|  1.34M|        }
   99|   763k|        return counter;
  100|   763k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   222k|    {
 1879|   222k|        auto stdloc = loc.get<std::locale>();
 1880|   222k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   222k|        grouping = numpunct.grouping();
 1882|   222k|        thousands_sep =
 1883|   222k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 222k]
  ------------------
 1884|   222k|        decimal_point = numpunct.decimal_point();
 1885|   222k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   222k|{
 1816|   222k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 222k, False: 0]
  ------------------
 1817|   222k|        return std::use_facet<Facet>(stdloc);
 1818|   222k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   222k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.46M|{
 1945|  1.46M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.87k, False: 1.46M]
  |  |  ------------------
  ------------------
 1946|  2.87k|        return unexpected(e);
 1947|  2.87k|    }
 1948|       |
 1949|  1.46M|    return ranges::next(range.begin());
 1950|  1.46M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.25M|{
  951|  2.25M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.61k, False: 2.25M]
  |  |  ------------------
  ------------------
  952|  7.61k|        return eof_error::eof;
  953|  7.61k|    }
  954|  2.25M|    return eof_error::good;
  955|  2.25M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.33M|{
  945|  3.33M|    return is_range_eof(r.begin(), r.end());
  946|  3.33M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.33M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.33M|    {
  938|  3.33M|        return begin == end;
  939|  3.33M|    }
  940|  3.33M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.46M|    {
  296|  1.46M|        ++x;
  297|  1.46M|        return x;
  298|  1.46M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   636k|{
 3290|   636k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   636k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 629k, False: 6.70k]
  ------------------
 3292|   629k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 629k, False: 72]
  ------------------
 3293|   629k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   629k|        }
 3295|     72|        return unexpected(eof_error::eof);
 3296|   629k|    }
 3297|       |
 3298|  6.70k|    auto& it = *r;
 3299|  6.70k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 4.86k, False: 1.84k]
  ------------------
 3300|  4.86k|        return std::pair{it, sign_type::minus_sign};
 3301|  4.86k|    }
 3302|  1.84k|    return std::pair{it, sign_type::plus_sign};
 3303|  6.70k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|  1.02M|{
 2405|  1.02M|    auto it = read_code_unit(range);
 2406|  1.02M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.63k, False: 1.02M]
  |  |  ------------------
  ------------------
 2407|  1.63k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.63k|    }
 2409|       |
 2410|  2.03M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.03M, False: 997k]
  ------------------
 2411|  2.03M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 23.1k, False: 2.01M]
  ------------------
 2412|  23.1k|            return *it;
 2413|  23.1k|        }
 2414|  2.03M|    }
 2415|       |
 2416|   997k|    return unexpected(parse_error::error);
 2417|  1.02M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.64M|{
 2364|  1.64M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.64M|    else {
 2377|  1.64M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.64M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.64M|                return ch;
 2380|  1.64M|            }
 2381|  1.64M|            return static_cast<char_type>(ch +
 2382|  1.64M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.64M|        };
 2384|       |
 2385|  1.64M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.64M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.64M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.64M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 59.8k, False: 1.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  59.8k|    }                                                  \
  |  |  |  | 3957|  1.64M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.58M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.58M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.58M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.57M, False: 926]
  |  |  ------------------
  ------------------
 2390|  1.58M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.58M|                    return ascii_tolower(a) ==
 2392|  1.58M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.58M|                }))) {
 2394|  1.57M|            return unexpected(parse_error::error);
 2395|  1.57M|        }
 2396|       |
 2397|    926|        return it;
 2398|  1.58M|    }
 2399|  1.64M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.84M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.84M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.45M, False: 386k]
  |  Branch (2378:29): [True: 371k, False: 14.8k]
  ------------------
 2379|  1.83M|                return ch;
 2380|  1.83M|            }
 2381|  14.8k|            return static_cast<char_type>(ch +
 2382|  14.8k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.84M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   444k|{
 2279|   444k|    auto it = read_code_unit(range);
 2280|   444k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.24k, False: 443k]
  |  |  ------------------
  ------------------
 2281|  1.24k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  1.24k|    }
 2283|       |
 2284|   443k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   443k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 435k, False: 7.38k]
  |  |  ------------------
  ------------------
 2285|   443k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   435k|        return unexpected(parse_error::error);
 2287|   435k|    }
 2288|       |
 2289|  7.38k|    return *it;
 2290|   443k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|  1.08M|{
 2128|  1.08M|    auto it = read_while_code_unit(range, pred);
 2129|  1.08M|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 615k, False: 465k]
  ------------------
 2130|   615k|        return unexpected(parse_error::error);
 2131|   615k|    }
 2132|   465k|    return it;
 2133|  1.08M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   440k|    {
 1720|   440k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   440k|                           ranges::common_range<Range>) {
 1737|   440k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   440k|            auto end_seg = range.end().contiguous_segment();
 1739|   440k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.6k, False: 419k]
  |  |  ------------------
  ------------------
 1740|   440k|                             detail::to_address(end_seg.end()))) {
 1741|  20.6k|                auto& str = m_storage.emplace();
 1742|  20.6k|                str.reserve(range.end().position() - range.begin().position());
 1743|  20.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  20.6k|                m_view = string_view_type{str};
 1745|  20.6k|                return;
 1746|  20.6k|            }
 1747|       |
 1748|   419k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   419k|                                                            end_seg.data());
 1750|   419k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   440k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.86M|    {
 1681|  3.86M|        return m_view;
 1682|  3.86M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.48M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|   310k|    {
 6168|   310k|        const bool need_skipped_width =
 6169|   310k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 310k]
  |  Branch (6169:33): [True: 0, False: 310k]
  ------------------
 6170|   310k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   310k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 310k]
  ------------------
 6173|   310k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 310k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   310k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 310k, False: 0]
  ------------------
 6182|   310k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 310k]
  ------------------
 6183|   310k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   310k|        return result_type{rng.begin(), 0};
 6207|   310k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.64M|{
 1956|  1.64M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.64M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.64M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.64M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 60.0k, False: 1.58M]
  ------------------
 1961|  60.0k|            return unexpected(eof_error::eof);
 1962|  60.0k|        }
 1963|       |
 1964|  1.58M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.64M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  2.63M|{
 1998|  2.63M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.63M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.63M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.63M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.63M|    auto it = range.begin();
 2002|  2.63M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.63M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.63M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.63M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.63M, False: 0]
  ------------------
 2011|  2.63M|        ++it;
 2012|  2.63M|        return {it, string_type(1, *range.begin())};
 2013|  2.63M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.63M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  4.28M|{
  945|  4.28M|    return is_range_eof(r.begin(), r.end());
  946|  4.28M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  4.28M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  4.28M|    {
  938|  4.28M|        return begin == end;
  939|  4.28M|    }
  940|  4.28M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   400k|    {
  190|   400k|        i = std::move(bound);
  191|   400k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  2.63M|    {
 1989|  2.63M|        return !codepoint.empty();
 1990|  2.63M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.64M|{
  951|  1.64M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.46k, False: 1.63M]
  |  |  ------------------
  ------------------
  952|  5.46k|        return eof_error::eof;
  953|  5.46k|    }
  954|  1.63M|    return eof_error::good;
  955|  1.64M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   847k|{
 1945|   847k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   847k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 720, False: 847k]
  |  |  ------------------
  ------------------
 1946|    720|        return unexpected(e);
 1947|    720|    }
 1948|       |
 1949|   847k|    return ranges::next(range.begin());
 1950|   847k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   847k|    {
  296|   847k|        ++x;
  297|   847k|        return x;
  298|   847k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   626k|{
 3290|   626k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   626k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 622k, False: 4.50k]
  ------------------
 3292|   622k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 622k, False: 24]
  ------------------
 3293|   622k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   622k|        }
 3295|     24|        return unexpected(eof_error::eof);
 3296|   622k|    }
 3297|       |
 3298|  4.50k|    auto& it = *r;
 3299|  4.50k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 2.87k, False: 1.62k]
  ------------------
 3300|  2.87k|        return std::pair{it, sign_type::minus_sign};
 3301|  2.87k|    }
 3302|  1.62k|    return std::pair{it, sign_type::plus_sign};
 3303|  4.50k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   707k|{
 2405|   707k|    auto it = read_code_unit(range);
 2406|   707k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 376, False: 707k]
  |  |  ------------------
  ------------------
 2407|    376|        return unexpected(make_eof_parse_error(it.error()));
 2408|    376|    }
 2409|       |
 2410|  1.41M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.41M, False: 697k]
  ------------------
 2411|  1.41M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 10.4k, False: 1.40M]
  ------------------
 2412|  10.4k|            return *it;
 2413|  10.4k|        }
 2414|  1.41M|    }
 2415|       |
 2416|   697k|    return unexpected(parse_error::error);
 2417|   707k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.64M|{
 2364|  1.64M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.64M|    else {
 2377|  1.64M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.64M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.64M|                return ch;
 2380|  1.64M|            }
 2381|  1.64M|            return static_cast<char_type>(ch +
 2382|  1.64M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.64M|        };
 2384|       |
 2385|  1.64M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.64M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.64M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.64M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 60.0k, False: 1.58M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  60.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  60.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  60.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  60.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  60.0k|    }                                                  \
  |  |  |  | 3957|  1.64M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.58M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.58M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.58M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.58M, False: 926]
  |  |  ------------------
  ------------------
 2390|  1.58M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.58M|                    return ascii_tolower(a) ==
 2392|  1.58M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.58M|                }))) {
 2394|  1.58M|            return unexpected(parse_error::error);
 2395|  1.58M|        }
 2396|       |
 2397|    926|        return it;
 2398|  1.58M|    }
 2399|  1.64M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.84M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.84M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.45M, False: 387k]
  |  Branch (2378:29): [True: 372k, False: 14.9k]
  ------------------
 2379|  1.83M|                return ch;
 2380|  1.83M|            }
 2381|  14.9k|            return static_cast<char_type>(ch +
 2382|  14.9k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.84M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   139k|{
 2279|   139k|    auto it = read_code_unit(range);
 2280|   139k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 344, False: 139k]
  |  |  ------------------
  ------------------
 2281|    344|        return unexpected(make_eof_parse_error(it.error()));
 2282|    344|    }
 2283|       |
 2284|   139k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 136k, False: 2.80k]
  |  |  ------------------
  ------------------
 2285|   139k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   136k|        return unexpected(parse_error::error);
 2287|   136k|    }
 2288|       |
 2289|  2.80k|    return *it;
 2290|   139k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   366k|{
 2108|   366k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   366k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   366k|{
 2075|   366k|    if constexpr (ranges::common_range<Range>) {
 2076|   366k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   366k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   624k|{
 3098|   624k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 624k, False: 0]
  ------------------
 3099|   624k|        auto it = read_while_classic_space(range);
 3100|   624k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   624k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.07k, False: 620k]
  |  |  ------------------
  ------------------
 3102|  4.07k|            return unexpected(e);
 3103|  4.07k|        }
 3104|       |
 3105|   620k|        return it;
 3106|   624k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   624k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   624k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   624k|    else {
 2258|   624k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   624k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   624k|            return detail::is_cp_space(cp);
 2271|   624k|        });
 2272|   624k|    }
 2273|   624k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|   624k|{
 2214|   624k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   624k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  1.48M|{
 2193|  1.48M|    auto it = range.begin();
 2194|  3.20M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.63M, False: 570k]
  ------------------
 2195|  2.63M|        const auto val =
 2196|  2.63M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.63M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.63M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.63M, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.63M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.63M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.63M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 915k, False: 1.72M]
  ------------------
 2201|   915k|                return it;
 2202|   915k|            }
 2203|  2.63M|        }
 2204|  1.72M|        it = val.iterator;
 2205|  1.72M|    }
 2206|       |
 2207|   570k|    return it;
 2208|  1.48M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   624k|        : m_fptr([](storage fn,
  743|   624k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   624k|              cvref<T> obj = *get<T>(fn);
  745|   624k|              if constexpr (std::is_void_v<R>) {
  746|   624k|                  obj(static_cast<decltype(args)>(args)...);
  747|   624k|              }
  748|   624k|              else {
  749|   624k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   624k|              }
  751|   624k|          }),
  752|   624k|          m_storage(std::addressof(f))
  753|   624k|    {
  754|   624k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.07M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|  1.07M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.07M|            return detail::is_cp_space(cp);
 2271|  1.07M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   624k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   624k|        {
  662|   624k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.42M|    {
  304|  1.42M|        ranges::advance(x, n);
  305|  1.42M|        return x;
  306|  1.42M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.42M|    {
  268|  1.42M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.42M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.42M|    {
  181|  4.60M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.18M, False: 1.42M]
  ------------------
  182|  3.18M|            ++i;
  183|  3.18M|        }
  184|  1.42M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   142k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   142k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   142k|            auto rd = make_reader<T, char_type>();
 6288|   142k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   142k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   142k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 142k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   142k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   142k|                return impl(rd, range, value);
 6293|   142k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   142k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   914k|    {
 3188|   914k|        reader_error_handler eh{};
 3189|   914k|        get_derived().check_specs_impl(specs, eh);
 3190|   914k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   914k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   914k|        return {};
 3195|   914k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|   914k|    {
 3200|   914k|        return static_cast<Derived&>(*this);
 3201|   914k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|   914k|    {
 4231|   914k|        detail::check_float_type_specs(specs, eh);
 4232|   914k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   142k|    {
 6213|   142k|        const bool need_skipped_width =
 6214|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 142k]
  |  Branch (6214:33): [True: 0, False: 142k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   142k|        auto it = rng.begin();
 6218|   142k|        std::ptrdiff_t prefix_width = 0;
 6219|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 142k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   142k|        else {
 6227|   142k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.08k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.08k|    }                                                  \
  |  |  |  | 3957|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   141k|            std::tie(it, prefix_width) = prefix_result;
 6229|   141k|        }
 6230|   141k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   141k|        std::ptrdiff_t value_width = 0;
 6234|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 141k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   141k|        else {
 6250|   141k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 47.0k, False: 94.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  47.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  47.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  47.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  47.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  47.0k|    }                                                  \
  |  | 3957|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  94.5k|                                             specs, value, loc));
 6252|       |
 6253|  94.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 94.5k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  94.5k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  94.5k|        std::ptrdiff_t postfix_width = 0;
 6262|  94.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 93.9k, False: 538]
  ------------------
 6263|  93.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  93.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  93.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  93.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 93.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  93.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  93.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  93.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  93.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  93.9k|                                 value_width));
 6267|  93.9k|            std::tie(it, postfix_width) = postfix_result;
 6268|  93.9k|        }
 6269|       |
 6270|  94.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  94.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  94.5k|            specs, prefix_width, value_width, postfix_width));
 6272|  94.5k|        return it;
 6273|  94.5k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.87M|    {
 3183|  1.87M|        return true;
 3184|  1.87M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4302|   907k|    {
 4303|   907k|        unsigned options{};
 4304|   907k|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 222k, False: 684k]
  ------------------
 4305|   222k|            options |= float_reader_base::allow_thsep;
 4306|   222k|        }
 4307|       |
 4308|   907k|        SCN_GCC_COMPAT_PUSH
 4309|   907k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|   907k|        switch (specs.type) {
 4312|   173k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 173k, False: 733k]
  ------------------
 4313|   173k|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|  60.2k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 60.2k, False: 847k]
  ------------------
 4316|  60.2k|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|   244k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 244k, False: 662k]
  ------------------
 4319|   244k|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|   206k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 206k, False: 701k]
  ------------------
 4322|   206k|                return options | float_reader_base::allow_scientific |
 4323|   206k|                       float_reader_base::allow_fixed;
 4324|       |
 4325|   222k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 222k, False: 684k]
  ------------------
 4326|   222k|                return options | float_reader_base::allow_scientific |
 4327|   222k|                       float_reader_base::allow_fixed |
 4328|   222k|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 907k]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|   907k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|   907k|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|   907k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3733|   907k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.24M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.48M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3764|   293k|    {
 3765|   293k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   293k|        const std::ptrdiff_t sign_len =
 3768|   293k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 2.04k, False: 291k]
  ------------------
 3769|       |
 3770|   293k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   293k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   293k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   293k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 35.2k, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  35.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  35.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  35.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  35.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  35.2k|    }                                                  \
  |  |  |  | 3957|   293k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   257k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   293k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4121|   976k|    {
 4122|   976k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 976k, False: 0]
  ------------------
 4123|   976k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 976k, False: 0]
  ------------------
 4124|   976k|            return;
 4125|   976k|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.95M|    {
 1686|  1.95M|        return m_storage.has_value();
 1687|  1.95M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.06M|    {
 1691|  1.06M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.06M|        return *m_storage;
 1693|  1.06M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   141k|    {
 4256|   141k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   141k|#if !SCN_DISABLE_LOCALE
 4259|   141k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 32.2k, False: 109k]
  ------------------
 4260|  32.2k|            return read_impl<Range>(
 4261|  32.2k|                range, rd,
 4262|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  32.2k|                },
 4265|  32.2k|                value, loc);
 4266|  32.2k|        }
 4267|   109k|#endif
 4268|       |
 4269|   109k|        return read_impl<Range>(
 4270|   109k|            range, rd,
 4271|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   109k|                return r.read_source(SCN_FWD(args)...);
 4273|   109k|            },
 4274|   109k|            value);
 4275|   141k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   190k|    {
 4292|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 59.1k, False: 130k]
  |  |  ------------------
  ------------------
 4294|  59.1k|            return unexpected(r.error());
 4295|  59.1k|        }
 4296|       |
 4297|   130k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.95k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.95k|    }                                                  \
  |  |  |  | 3957|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   128k|        return ranges::next(range.begin(), n);
 4299|   130k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   620k|    {
  763|   620k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   620k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  32.2k|        : m_fptr([](storage fn,
  743|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.2k|              cvref<T> obj = *get<T>(fn);
  745|  32.2k|              if constexpr (std::is_void_v<R>) {
  746|  32.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.2k|              }
  748|  32.2k|              else {
  749|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.2k|              }
  751|  32.2k|          }),
  752|  32.2k|          m_storage(std::addressof(f))
  753|  32.2k|    {
  754|  32.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.2k|              else {
  749|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.2k|              }
  751|  32.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.2k|        else if constexpr (std::is_object_v<T>) {
  688|  32.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  32.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  32.2k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3752|   111k|    {
 3753|   111k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   111k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   111k|        return read_source_impl(range);
 3759|   111k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3778|   620k|    {
 3779|   620k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   620k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 620k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   620k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   620k|        auto it = sign_result.first;
 3782|   620k|        m_sign = sign_result.second;
 3783|       |
 3784|   620k|        auto digits_begin = it;
 3785|   620k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|   620k|        else {
 3812|   620k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 179k, False: 440k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|   179k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|   179k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   179k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   179k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|   179k|    }                                                  \
  |  | 3957|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|   440k|                it,
 3814|   440k|                do_read_source_impl(
 3815|   440k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|   440k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|   440k|        }
 3818|       |
 3819|   620k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   440k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 440k, False: 0]
  |  Branch (3821:48): [True: 440k, False: 0]
  ------------------
 3822|   440k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 440k, False: 0]
  ------------------
 3823|   440k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 440k, False: 0]
  ------------------
 3824|   440k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   440k|        }
 3826|       |
 3827|   440k|        handle_separators();
 3828|       |
 3829|   440k|        return it;
 3830|   620k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4064|   620k|    {
 4065|   620k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   620k|        const bool allowed_nonhex =
 4067|   620k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   620k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   620k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 620k, False: 0]
  |  Branch (4070:45): [True: 0, False: 620k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   620k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 620k]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|   620k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 620k, False: 0]
  |  Branch (4079:45): [True: 0, False: 620k]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|   620k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 620k]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|   620k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 400k, False: 220k]
  |  Branch (4086:28): [True: 122k, False: 277k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   122k|            auto it = range.begin();
 4090|       |
 4091|   122k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 276, False: 121k]
  ------------------
 4092|    276|                m_kind = float_kind::hex_with_prefix;
 4093|    276|                it = *r;
 4094|    276|            }
 4095|   121k|            else {
 4096|   121k|                m_kind = float_kind::hex_without_prefix;
 4097|   121k|            }
 4098|       |
 4099|   122k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   122k|        }
 4101|   498k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 220k, False: 277k]
  |  Branch (4101:29): [True: 220k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   220k|            m_kind = float_kind::generic;
 4105|   220k|            return read_regular_float(range);
 4106|   220k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   277k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 650, False: 277k]
  |  |  ------------------
  ------------------
 4112|    650|            m_kind = float_kind::hex_with_prefix;
 4113|    650|            return read_hex(ranges::subrange{*r, range.end()});
 4114|    650|        }
 4115|       |
 4116|   277k|        m_kind = float_kind::generic;
 4117|   277k|        return read_regular(range);
 4118|   277k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3872|   620k|    {
 3873|   620k|        auto it = range.begin();
 3874|   620k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 620k, False: 0]
  ------------------
 3875|   620k|            return unexpected(r.error());
 3876|   620k|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3895|   620k|    {
 3896|   620k|        auto it = range.begin();
 3897|   620k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 620k, False: 0]
  ------------------
 3898|   620k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   620k|                scan_error::invalid_scanned_value,
 3900|   620k|                "Invalid floating-point NaN value"));
 3901|   620k|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3865|   400k|    {
 3866|   400k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   400k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3966|   122k|    {
 3967|   122k|        auto it = range.begin();
 3968|       |
 3969|   122k|        std::ptrdiff_t digits_count = 0;
 3970|   122k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|   122k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 27.8k, False: 94.9k]
  |  |  ------------------
  ------------------
 3972|  27.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3973|  27.8k|                scan_error::invalid_scanned_value,
 3974|  27.8k|                "Invalid hexadecimal floating-point value"));
 3975|  27.8k|        }
 3976|  94.9k|        else {
 3977|  94.9k|            digits_count += ranges::distance(it, *r);
 3978|  94.9k|            it = *r;
 3979|  94.9k|        }
 3980|       |
 3981|  94.9k|        m_integral_part_length = digits_count;
 3982|  94.9k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 1.33k, False: 93.6k]
  ------------------
 3983|  94.9k|                                             m_locale_options.decimal_point)) {
 3984|  1.33k|            it = *r;
 3985|  1.33k|        }
 3986|       |
 3987|  94.9k|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 1.14k, False: 93.8k]
  ------------------
 3988|  94.9k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|  1.14k|            digits_count += ranges::distance(it, *r);
 3990|  1.14k|            it = *r;
 3991|  1.14k|        }
 3992|       |
 3993|  94.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.9k]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|  94.9k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|  94.9k|        return it;
 4002|  94.9k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3850|   217k|    {
 3851|   217k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 217k]
  |  |  |  Branch (1039:45): [True: 0, False: 217k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|   217k|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|   217k|        return read_while1_code_unit(
 3860|   217k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|   217k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   217k|        : m_fptr([](storage fn,
  743|   217k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   217k|              cvref<T> obj = *get<T>(fn);
  745|   217k|              if constexpr (std::is_void_v<R>) {
  746|   217k|                  obj(static_cast<decltype(args)>(args)...);
  747|   217k|              }
  748|   217k|              else {
  749|   217k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   217k|              }
  751|   217k|          }),
  752|   217k|          m_storage(std::addressof(f))
  753|   217k|    {
  754|   217k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   349k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   349k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   349k|              else {
  749|   349k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   349k|              }
  751|   349k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   349k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   349k|        else if constexpr (std::is_object_v<T>) {
  688|   349k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   349k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3860|   349k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   217k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   217k|        {
  662|   217k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3938|   385k|    {
 3939|   385k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 16.4k, False: 369k]
  ------------------
 3940|  16.4k|            auto beg_exp_it = range.begin();
 3941|  16.4k|            auto it = *r;
 3942|       |
 3943|  16.4k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 16.3k, False: 72]
  ------------------
 3944|  16.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  16.3k|                it = r_sign->first;
 3946|  16.3k|            }
 3947|       |
 3948|  16.4k|            if (auto r_exp = read_while1_code_unit(
 3949|  16.4k|                    ranges::subrange{it, range.end()},
 3950|  16.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  16.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.29k, False: 15.1k]
  |  |  ------------------
  ------------------
 3952|  1.29k|                it = beg_exp_it;
 3953|  1.29k|            }
 3954|  15.1k|            else {
 3955|  15.1k|                it = *r_exp;
 3956|  15.1k|            }
 3957|       |
 3958|  16.4k|            return it;
 3959|  16.4k|        }
 3960|   369k|        return range.begin();
 3961|   385k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  16.4k|        : m_fptr([](storage fn,
  743|  16.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.4k|              cvref<T> obj = *get<T>(fn);
  745|  16.4k|              if constexpr (std::is_void_v<R>) {
  746|  16.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  16.4k|              }
  748|  16.4k|              else {
  749|  16.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.4k|              }
  751|  16.4k|          }),
  752|  16.4k|          m_storage(std::addressof(f))
  753|  16.4k|    {
  754|  16.4k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  50.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  50.7k|              else {
  749|  50.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.7k|              }
  751|  50.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  50.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  50.7k|        else if constexpr (std::is_object_v<T>) {
  688|  50.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  50.7k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3950|  50.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  16.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  16.4k|        {
  662|  16.4k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4007|   497k|    {
 4008|   497k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   497k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 410k, False: 86.9k]
  |  Branch (4009:50): [True: 30.1k, False: 380k]
  ------------------
 4010|       |
 4011|   497k|        auto it = ranges::begin(range);
 4012|   497k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   497k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   497k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 148k, False: 349k]
  |  |  ------------------
  ------------------
 4016|   148k|            return r.transform_error(
 4017|   148k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|   148k|                                              "Invalid floating-point value"));
 4019|   148k|        }
 4020|   349k|        else {
 4021|   349k|            digits_count += ranges::distance(it, *r);
 4022|   349k|            it = *r;
 4023|   349k|        }
 4024|       |
 4025|   349k|        m_integral_part_length = digits_count;
 4026|   349k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 6.04k, False: 343k]
  ------------------
 4027|   349k|                                             m_locale_options.decimal_point)) {
 4028|  6.04k|            it = *r;
 4029|  6.04k|        }
 4030|       |
 4031|   349k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 5.18k, False: 344k]
  ------------------
 4032|   349k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  5.18k|            digits_count += ranges::distance(it, *r);
 4034|  5.18k|            it = *r;
 4035|  5.18k|        }
 4036|       |
 4037|   349k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 349k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   349k|        auto beg_exp_it = it;
 4044|   349k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 290k, False: 58.5k]
  ------------------
 4045|   290k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|   290k|        }
 4047|   349k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 5.53k, False: 343k]
  |  Branch (4047:29): [True: 3.88k, False: 1.64k]
  ------------------
 4048|  3.88k|            return detail::unexpected_scan_error(
 4049|  3.88k|                scan_error::invalid_scanned_value,
 4050|  3.88k|                "No exponent given to scientific float");
 4051|  3.88k|        }
 4052|       |
 4053|   345k|        m_kind =
 4054|   345k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 330k, False: 14.9k]
  ------------------
 4055|       |
 4056|   345k|        return it;
 4057|   349k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3835|   846k|    {
 3836|   846k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 846k]
  |  |  |  Branch (1039:45): [True: 0, False: 846k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   846k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   846k|        return read_while1_code_unit(
 3845|   846k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   846k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   846k|        : m_fptr([](storage fn,
  743|   846k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   846k|              cvref<T> obj = *get<T>(fn);
  745|   846k|              if constexpr (std::is_void_v<R>) {
  746|   846k|                  obj(static_cast<decltype(args)>(args)...);
  747|   846k|              }
  748|   846k|              else {
  749|   846k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   846k|              }
  751|   846k|          }),
  752|   846k|          m_storage(std::addressof(f))
  753|   846k|    {
  754|   846k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.29M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.29M|        else if constexpr (std::is_object_v<T>) {
  688|  1.29M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.29M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3845|  1.29M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   846k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   846k|        {
  662|   846k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   440k|    {
 1676|   440k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   440k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  32.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.2k|        {
  662|  32.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   109k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3738|   509k|    {
 3739|   509k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   509k|        return read_source_impl(range);
 3745|   509k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   141k|    {
 4256|   141k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   141k|#if !SCN_DISABLE_LOCALE
 4259|   141k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 32.3k, False: 109k]
  ------------------
 4260|  32.3k|            return read_impl<Range>(
 4261|  32.3k|                range, rd,
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  32.3k|                },
 4265|  32.3k|                value, loc);
 4266|  32.3k|        }
 4267|   109k|#endif
 4268|       |
 4269|   109k|        return read_impl<Range>(
 4270|   109k|            range, rd,
 4271|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   109k|                return r.read_source(SCN_FWD(args)...);
 4273|   109k|            },
 4274|   109k|            value);
 4275|   141k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   190k|    {
 4292|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 27.8k, False: 162k]
  |  |  ------------------
  ------------------
 4294|  27.8k|            return unexpected(r.error());
 4295|  27.8k|        }
 4296|       |
 4297|   162k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 33.2k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  33.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  33.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  33.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  33.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  33.2k|    }                                                  \
  |  |  |  | 3957|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   129k|        return ranges::next(range.begin(), n);
 4299|   162k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   620k|    {
  763|   620k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   620k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  32.3k|        : m_fptr([](storage fn,
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|  32.3k|              if constexpr (std::is_void_v<R>) {
  746|  32.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.3k|              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
  752|  32.3k|          m_storage(std::addressof(f))
  753|  32.3k|    {
  754|  32.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.3k|        else if constexpr (std::is_object_v<T>) {
  688|  32.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  32.3k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|   111k|    {
 3753|   111k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   111k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   111k|        return read_source_impl(range);
 3759|   111k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|   620k|    {
 3779|   620k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   620k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 620k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   620k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   620k|        auto it = sign_result.first;
 3782|   620k|        m_sign = sign_result.second;
 3783|       |
 3784|   620k|        auto digits_begin = it;
 3785|   620k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|   620k|                      ranges::sized_range<Range>) {
 3788|   620k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 620k]
  |  |  |  Branch (1039:45): [True: 0, False: 620k]
  |  |  |  Branch (1039:45): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 3789|   620k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|   620k|            else {
 3798|   620k|                auto cb = [&](const auto& rr)
 3799|   620k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   620k|                    auto res = read_all(rr);
 3801|   620k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|   620k|                        return detail::unexpected_scan_error(
 3803|   620k|                            scan_error::invalid_scanned_value,
 3804|   620k|                            "Invalid float value");
 3805|   620k|                    }
 3806|   620k|                    return res;
 3807|   620k|                };
 3808|   620k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   620k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   620k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 84.3k, False: 536k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  84.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  84.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  84.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  84.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  84.3k|    }                                                  \
  |  | 3957|   620k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|   536k|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|   620k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   536k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 536k, False: 0]
  |  Branch (3821:48): [True: 536k, False: 0]
  ------------------
 3822|   536k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 536k, False: 0]
  ------------------
 3823|   536k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 536k, False: 0]
  ------------------
 3824|   536k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   536k|        }
 3826|       |
 3827|   536k|        handle_separators();
 3828|       |
 3829|   536k|        return it;
 3830|   620k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|   620k|    {
 3873|   620k|        auto it = range.begin();
 3874|   620k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 620k, False: 0]
  ------------------
 3875|   620k|            return unexpected(r.error());
 3876|   620k|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|   620k|    {
 3896|   620k|        auto it = range.begin();
 3897|   620k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 620k, False: 0]
  ------------------
 3898|   620k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   620k|                scan_error::invalid_scanned_value,
 3900|   620k|                "Invalid floating-point NaN value"));
 3901|   620k|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|   400k|    {
 3866|   400k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   400k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   366k|{
 2128|   366k|    auto it = read_while_code_unit(range, pred);
 2129|   366k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 218k, False: 147k]
  ------------------
 2130|   218k|        return unexpected(parse_error::error);
 2131|   218k|    }
 2132|   147k|    return it;
 2133|   366k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3938|  81.3k|    {
 3939|  81.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 5.92k, False: 75.4k]
  ------------------
 3940|  5.92k|            auto beg_exp_it = range.begin();
 3941|  5.92k|            auto it = *r;
 3942|       |
 3943|  5.92k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 5.90k, False: 24]
  ------------------
 3944|  5.92k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  5.90k|                it = r_sign->first;
 3946|  5.90k|            }
 3947|       |
 3948|  5.92k|            if (auto r_exp = read_while1_code_unit(
 3949|  5.92k|                    ranges::subrange{it, range.end()},
 3950|  5.92k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  5.92k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 488, False: 5.43k]
  |  |  ------------------
  ------------------
 3952|    488|                it = beg_exp_it;
 3953|    488|            }
 3954|  5.43k|            else {
 3955|  5.43k|                it = *r_exp;
 3956|  5.43k|            }
 3957|       |
 3958|  5.92k|            return it;
 3959|  5.92k|        }
 3960|  75.4k|        return range.begin();
 3961|  81.3k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.92k|        : m_fptr([](storage fn,
  743|  5.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.92k|              cvref<T> obj = *get<T>(fn);
  745|  5.92k|              if constexpr (std::is_void_v<R>) {
  746|  5.92k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.92k|              }
  748|  5.92k|              else {
  749|  5.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.92k|              }
  751|  5.92k|          }),
  752|  5.92k|          m_storage(std::addressof(f))
  753|  5.92k|    {
  754|  5.92k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  17.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.8k|              else {
  749|  17.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.8k|              }
  751|  17.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  17.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.8k|        else if constexpr (std::is_object_v<T>) {
  688|  17.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.8k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3950|  17.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.92k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.92k|        {
  662|  5.92k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|   220k|    {
 4008|   220k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   220k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 133k, False: 86.9k]
  |  Branch (4009:50): [True: 30.1k, False: 103k]
  ------------------
 4010|       |
 4011|   220k|        auto it = ranges::begin(range);
 4012|   220k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   220k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   220k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 80.2k, False: 139k]
  |  |  ------------------
  ------------------
 4016|  80.2k|            return r.transform_error(
 4017|  80.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  80.2k|                                              "Invalid floating-point value"));
 4019|  80.2k|        }
 4020|   139k|        else {
 4021|   139k|            digits_count += ranges::distance(it, *r);
 4022|   139k|            it = *r;
 4023|   139k|        }
 4024|       |
 4025|   139k|        m_integral_part_length = digits_count;
 4026|   139k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 2.80k, False: 137k]
  ------------------
 4027|   139k|                                             m_locale_options.decimal_point)) {
 4028|  2.80k|            it = *r;
 4029|  2.80k|        }
 4030|       |
 4031|   139k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 2.39k, False: 137k]
  ------------------
 4032|   139k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  2.39k|            digits_count += ranges::distance(it, *r);
 4034|  2.39k|            it = *r;
 4035|  2.39k|        }
 4036|       |
 4037|   139k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   139k|        auto beg_exp_it = it;
 4044|   139k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 81.3k, False: 58.5k]
  ------------------
 4045|  81.3k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|  81.3k|        }
 4047|   139k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 5.53k, False: 134k]
  |  Branch (4047:29): [True: 3.88k, False: 1.64k]
  ------------------
 4048|  3.88k|            return detail::unexpected_scan_error(
 4049|  3.88k|                scan_error::invalid_scanned_value,
 4050|  3.88k|                "No exponent given to scientific float");
 4051|  3.88k|        }
 4052|       |
 4053|   136k|        m_kind =
 4054|   136k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 130k, False: 5.43k]
  ------------------
 4055|       |
 4056|   136k|        return it;
 4057|   139k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|   360k|    {
 3836|   360k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 360k]
  |  |  |  Branch (1039:45): [True: 0, False: 360k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   360k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   360k|        return read_while1_code_unit(
 3845|   360k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   360k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   360k|        : m_fptr([](storage fn,
  743|   360k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   360k|              cvref<T> obj = *get<T>(fn);
  745|   360k|              if constexpr (std::is_void_v<R>) {
  746|   360k|                  obj(static_cast<decltype(args)>(args)...);
  747|   360k|              }
  748|   360k|              else {
  749|   360k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   360k|              }
  751|   360k|          }),
  752|   360k|          m_storage(std::addressof(f))
  753|   360k|    {
  754|   360k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   547k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   547k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   547k|              else {
  749|   547k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   547k|              }
  751|   547k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   547k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   547k|        else if constexpr (std::is_object_v<T>) {
  688|   547k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   547k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3845|   547k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   360k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   360k|        {
  662|   360k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|   620k|    {
 4065|   620k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   620k|        const bool allowed_nonhex =
 4067|   620k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   620k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   620k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 620k, False: 0]
  |  Branch (4070:45): [True: 0, False: 620k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   620k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 620k]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|   620k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 620k, False: 0]
  |  Branch (4079:45): [True: 0, False: 620k]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|   620k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 620k]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|   620k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 400k, False: 220k]
  |  Branch (4086:28): [True: 122k, False: 278k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   122k|            auto it = range.begin();
 4090|       |
 4091|   122k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 276, False: 122k]
  ------------------
 4092|    276|                m_kind = float_kind::hex_with_prefix;
 4093|    276|                it = *r;
 4094|    276|            }
 4095|   122k|            else {
 4096|   122k|                m_kind = float_kind::hex_without_prefix;
 4097|   122k|            }
 4098|       |
 4099|   122k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   122k|        }
 4101|   498k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 220k, False: 278k]
  |  Branch (4101:29): [True: 220k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   220k|            m_kind = float_kind::generic;
 4105|   220k|            return read_regular_float(range);
 4106|   220k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   278k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 650, False: 277k]
  |  |  ------------------
  ------------------
 4112|    650|            m_kind = float_kind::hex_with_prefix;
 4113|    650|            return read_hex(ranges::subrange{*r, range.end()});
 4114|    650|        }
 4115|       |
 4116|   277k|        m_kind = float_kind::generic;
 4117|   277k|        return read_regular(range);
 4118|   278k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|   400k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   400k|                    auto res = read_all(rr);
 3801|   400k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   400k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 171, False: 400k]
  |  |  ------------------
  ------------------
 3802|    171|                        return detail::unexpected_scan_error(
 3803|    171|                            scan_error::invalid_scanned_value,
 3804|    171|                            "Invalid float value");
 3805|    171|                    }
 3806|   400k|                    return res;
 3807|   400k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   400k|{
 1938|   400k|    return ranges::next(range.begin(), range.end());
 1939|   400k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   400k|    {
  313|   400k|        ranges::advance(x, bound);
  314|   400k|        return x;
  315|   400k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   400k|    {
  275|   400k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   400k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   536k|    {
 1676|   536k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   536k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   536k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   536k|    {
 1720|   536k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   536k|                      ranges::sized_range<Range>) {
 1725|   536k|            m_storage.reset();
 1726|   536k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   536k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  32.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.3k|        {
  662|  32.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   109k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|   509k|    {
 3739|   509k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   509k|        return read_source_impl(range);
 3745|   509k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   155k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   155k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   155k|            auto rd = make_reader<T, char_type>();
 6288|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   155k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 155k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   155k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   155k|                return impl(rd, range, value);
 6293|   155k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   155k|    {
 6213|   155k|        const bool need_skipped_width =
 6214|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 155k]
  |  Branch (6214:33): [True: 0, False: 155k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   155k|        auto it = rng.begin();
 6218|   155k|        std::ptrdiff_t prefix_width = 0;
 6219|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 155k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   155k|        else {
 6227|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.17k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.17k|    }                                                  \
  |  |  |  | 3957|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   154k|            std::tie(it, prefix_width) = prefix_result;
 6229|   154k|        }
 6230|   154k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   154k|        std::ptrdiff_t value_width = 0;
 6234|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 154k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   154k|        else {
 6250|   154k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 46.9k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  46.9k|    }                                                  \
  |  | 3957|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   107k|                                             specs, value, loc));
 6252|       |
 6253|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 107k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   107k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   107k|        std::ptrdiff_t postfix_width = 0;
 6262|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 107k, False: 594]
  ------------------
 6263|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   107k|                                 value_width));
 6267|   107k|            std::tie(it, postfix_width) = postfix_result;
 6268|   107k|        }
 6269|       |
 6270|   107k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   107k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   107k|            specs, prefix_width, value_width, postfix_width));
 6272|   107k|        return it;
 6273|   107k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|   337k|    {
 3765|   337k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   337k|        const std::ptrdiff_t sign_len =
 3768|   337k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 2.10k, False: 335k]
  ------------------
 3769|       |
 3770|   337k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   337k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   337k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   337k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 33.8k, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  33.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  33.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  33.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  33.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  33.8k|    }                                                  \
  |  |  |  | 3957|   337k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   304k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   337k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   154k|    {
 4256|   154k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   154k|#if !SCN_DISABLE_LOCALE
 4259|   154k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 38.8k, False: 115k]
  ------------------
 4260|  38.8k|            return read_impl<Range>(
 4261|  38.8k|                range, rd,
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  38.8k|                },
 4265|  38.8k|                value, loc);
 4266|  38.8k|        }
 4267|   115k|#endif
 4268|       |
 4269|   115k|        return read_impl<Range>(
 4270|   115k|            range, rd,
 4271|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   115k|                return r.read_source(SCN_FWD(args)...);
 4273|   115k|            },
 4274|   115k|            value);
 4275|   154k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   212k|    {
 4292|   212k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   212k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60.0k, False: 152k]
  |  |  ------------------
  ------------------
 4294|  60.0k|            return unexpected(r.error());
 4295|  60.0k|        }
 4296|       |
 4297|   152k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 989, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    989|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    989|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    989|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    989|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    989|    }                                                  \
  |  |  |  | 3957|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   151k|        return ranges::next(range.begin(), n);
 4299|   152k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.8k|        : m_fptr([](storage fn,
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|  38.8k|              if constexpr (std::is_void_v<R>) {
  746|  38.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.8k|              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
  752|  38.8k|          m_storage(std::addressof(f))
  753|  38.8k|    {
  754|  38.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.8k|        else if constexpr (std::is_object_v<T>) {
  688|  38.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  38.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.8k|        {
  662|  38.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   115k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   115k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   154k|    {
 4256|   154k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   154k|#if !SCN_DISABLE_LOCALE
 4259|   154k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 38.8k, False: 115k]
  ------------------
 4260|  38.8k|            return read_impl<Range>(
 4261|  38.8k|                range, rd,
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  38.8k|                },
 4265|  38.8k|                value, loc);
 4266|  38.8k|        }
 4267|   115k|#endif
 4268|       |
 4269|   115k|        return read_impl<Range>(
 4270|   115k|            range, rd,
 4271|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   115k|                return r.read_source(SCN_FWD(args)...);
 4273|   115k|            },
 4274|   115k|            value);
 4275|   154k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   213k|    {
 4292|   213k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   213k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.1k, False: 184k]
  |  |  ------------------
  ------------------
 4294|  28.1k|            return unexpected(r.error());
 4295|  28.1k|        }
 4296|       |
 4297|   184k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32.8k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  32.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  32.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  32.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  32.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  32.8k|    }                                                  \
  |  |  |  | 3957|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   152k|        return ranges::next(range.begin(), n);
 4299|   184k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.8k|        : m_fptr([](storage fn,
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|  38.8k|              if constexpr (std::is_void_v<R>) {
  746|  38.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.8k|              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
  752|  38.8k|          m_storage(std::addressof(f))
  753|  38.8k|    {
  754|  38.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.8k|        else if constexpr (std::is_object_v<T>) {
  688|  38.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  38.8k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.8k|        {
  662|  38.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   115k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   115k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   158k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   158k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   158k|            auto rd = make_reader<T, char_type>();
 6288|   158k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   158k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 158k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   158k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 158k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   158k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   158k|                return impl(rd, range, value);
 6293|   158k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   158k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   158k|    {
 6213|   158k|        const bool need_skipped_width =
 6214|   158k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 158k]
  |  Branch (6214:33): [True: 0, False: 158k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   158k|        auto it = rng.begin();
 6218|   158k|        std::ptrdiff_t prefix_width = 0;
 6219|   158k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 158k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   158k|        else {
 6227|   158k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.25k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.25k|    }                                                  \
  |  |  |  | 3957|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   157k|            std::tie(it, prefix_width) = prefix_result;
 6229|   157k|        }
 6230|   157k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   157k|        std::ptrdiff_t value_width = 0;
 6234|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 157k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   157k|        else {
 6250|   157k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 46.8k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  46.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  46.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  46.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  46.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  46.8k|    }                                                  \
  |  | 3957|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   110k|                                             specs, value, loc));
 6252|       |
 6253|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 110k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   110k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   110k|        std::ptrdiff_t postfix_width = 0;
 6262|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 109k, False: 642]
  ------------------
 6263|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   109k|                                 value_width));
 6267|   109k|            std::tie(it, postfix_width) = postfix_result;
 6268|   109k|        }
 6269|       |
 6270|   110k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   110k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   110k|            specs, prefix_width, value_width, postfix_width));
 6272|   110k|        return it;
 6273|   110k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3764|   345k|    {
 3765|   345k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   345k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   345k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   345k|        const std::ptrdiff_t sign_len =
 3768|   345k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 2.13k, False: 343k]
  ------------------
 3769|       |
 3770|   345k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32.6k, False: 313k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  32.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  32.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  32.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  32.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  32.6k|    }                                                  \
  |  |  |  | 3957|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   313k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   313k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   345k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   157k|    {
 4256|   157k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   157k|#if !SCN_DISABLE_LOCALE
 4259|   157k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 40.0k, False: 117k]
  ------------------
 4260|  40.0k|            return read_impl<Range>(
 4261|  40.0k|                range, rd,
 4262|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  40.0k|                },
 4265|  40.0k|                value, loc);
 4266|  40.0k|        }
 4267|   117k|#endif
 4268|       |
 4269|   117k|        return read_impl<Range>(
 4270|   117k|            range, rd,
 4271|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   117k|                return r.read_source(SCN_FWD(args)...);
 4273|   117k|            },
 4274|   117k|            value);
 4275|   157k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   217k|    {
 4292|   217k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   217k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60.7k, False: 156k]
  |  |  ------------------
  ------------------
 4294|  60.7k|            return unexpected(r.error());
 4295|  60.7k|        }
 4296|       |
 4297|   156k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 147, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    147|    }                                                  \
  |  |  |  | 3957|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   156k|        return ranges::next(range.begin(), n);
 4299|   156k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.0k|        : m_fptr([](storage fn,
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|  40.0k|              if constexpr (std::is_void_v<R>) {
  746|  40.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.0k|              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
  752|  40.0k|          m_storage(std::addressof(f))
  753|  40.0k|    {
  754|  40.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.0k|        else if constexpr (std::is_object_v<T>) {
  688|  40.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  40.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.0k|        {
  662|  40.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   117k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   157k|    {
 4256|   157k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   157k|#if !SCN_DISABLE_LOCALE
 4259|   157k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 40.0k, False: 117k]
  ------------------
 4260|  40.0k|            return read_impl<Range>(
 4261|  40.0k|                range, rd,
 4262|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  40.0k|                },
 4265|  40.0k|                value, loc);
 4266|  40.0k|        }
 4267|   117k|#endif
 4268|       |
 4269|   117k|        return read_impl<Range>(
 4270|   117k|            range, rd,
 4271|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   117k|                return r.read_source(SCN_FWD(args)...);
 4273|   117k|            },
 4274|   117k|            value);
 4275|   157k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   217k|    {
 4292|   217k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   217k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28.3k, False: 189k]
  |  |  ------------------
  ------------------
 4294|  28.3k|            return unexpected(r.error());
 4295|  28.3k|        }
 4296|       |
 4297|   189k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   189k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   189k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   189k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32.5k, False: 156k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  32.5k|    }                                                  \
  |  |  |  | 3957|   189k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   156k|        return ranges::next(range.begin(), n);
 4299|   189k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  40.0k|        : m_fptr([](storage fn,
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|  40.0k|              if constexpr (std::is_void_v<R>) {
  746|  40.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.0k|              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
  752|  40.0k|          m_storage(std::addressof(f))
  753|  40.0k|    {
  754|  40.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  40.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.0k|              else {
  749|  40.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.0k|              }
  751|  40.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.0k|        else if constexpr (std::is_object_v<T>) {
  688|  40.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  40.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  40.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  40.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.0k|        {
  662|  40.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   117k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   624k|{
 2193|   624k|    auto it = range.begin();
 2194|  1.07M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 1.07M, False: 4.07k]
  ------------------
 2195|  1.07M|        const auto val =
 2196|  1.07M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  1.07M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.07M, False: 0]
  |  |  ------------------
  ------------------
 2198|  1.07M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  1.07M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  1.07M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 620k, False: 453k]
  ------------------
 2201|   620k|                return it;
 2202|   620k|            }
 2203|  1.07M|        }
 2204|   453k|        it = val.iterator;
 2205|   453k|    }
 2206|       |
 2207|  4.07k|    return it;
 2208|   624k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.07M|{
 1998|  1.07M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.07M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.07M|    auto it = range.begin();
 2002|  1.07M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.07M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.07M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.07M, False: 0]
  ------------------
 2011|  1.07M|        ++it;
 2012|  1.07M|        return {it, string_type(1, *range.begin())};
 2013|  1.07M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.07M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.07M|    {
 1989|  1.07M|        return !codepoint.empty();
 1990|  1.07M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   624k|{
 2214|   624k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   624k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   624k|{
 3098|   624k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 624k, False: 0]
  ------------------
 3099|   624k|        auto it = read_while_classic_space(range);
 3100|   624k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   624k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.07k, False: 620k]
  |  |  ------------------
  ------------------
 3102|  4.07k|            return unexpected(e);
 3103|  4.07k|        }
 3104|       |
 3105|   620k|        return it;
 3106|   624k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   624k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   624k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   624k|    else {
 2258|   624k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   624k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   624k|            return detail::is_cp_space(cp);
 2271|   624k|        });
 2272|   624k|    }
 2273|   624k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   624k|        : m_fptr([](storage fn,
  743|   624k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   624k|              cvref<T> obj = *get<T>(fn);
  745|   624k|              if constexpr (std::is_void_v<R>) {
  746|   624k|                  obj(static_cast<decltype(args)>(args)...);
  747|   624k|              }
  748|   624k|              else {
  749|   624k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   624k|              }
  751|   624k|          }),
  752|   624k|          m_storage(std::addressof(f))
  753|   624k|    {
  754|   624k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.07M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.07M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.07M|              else {
  749|  1.07M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.07M|              }
  751|  1.07M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.07M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.07M|        else if constexpr (std::is_object_v<T>) {
  688|  1.07M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.07M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  1.07M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.07M|            return detail::is_cp_space(cp);
 2271|  1.07M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   624k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   624k|        {
  662|   624k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3610|  11.7k|    {
 3611|  11.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|  11.7k|        return read_default_with_base(range, value, 10);
 3613|  11.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3574|  11.7k|    {
 3575|  11.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|  10.0k|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|  10.0k|        if constexpr (!std::is_signed_v<T>) {
 3579|  10.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3579:17): [True: 0, False: 10.0k]
  ------------------
 3580|      0|                return detail::unexpected_scan_error(
 3581|      0|                    scan_error::invalid_scanned_value,
 3582|      0|                    "Unexpected '-' sign when parsing an "
 3583|      0|                    "unsigned value");
 3584|      0|            }
 3585|  10.0k|        }
 3586|       |
 3587|  10.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 10.0k]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  20.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  10.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  10.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  20.1k|                parse_integer_digits_without_thsep(
 3594|  20.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  20.1k|                    prefix_result.parsed_base));
 3596|       |
 3597|  20.1k|        auto buf = make_contiguous_buffer(
 3598|  20.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  20.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  10.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.03k, False: 9.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.03k|    }                                                  \
  |  |  |  | 3957|  10.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|  9.04k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|  9.04k|                                    prefix_result.parsed_base));
 3602|       |
 3603|  9.04k|        return ranges::next(prefix_result.iterator,
 3604|  9.04k|                            ranges::distance(buf.view().begin(), result_it));
 3605|  20.1k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3408|  11.7k|{
 3409|  11.7k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  11.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  11.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  10.0k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  10.0k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  10.0k|        parse_integer_base_prefix(
 3414|  10.0k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  10.0k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 10.0k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  10.0k|    else {
 3426|  10.0k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 10.0k]
  ------------------
 3427|  10.0k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 96, False: 9.97k]
  ------------------
 3428|     96|            digits_begin_it = base_prefix_begin_it;
 3429|     96|        }
 3430|  10.0k|    }
 3431|       |
 3432|  10.0k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 10.0k, False: 0]
  ------------------
 3433|  10.0k|        sign = sign_type::plus_sign;
 3434|  10.0k|    }
 3435|  10.0k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  10.0k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  11.7k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3289|  11.7k|{
 3290|  11.7k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  11.7k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 11.7k, False: 0]
  ------------------
 3292|  11.7k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 10.0k, False: 1.69k]
  ------------------
 3293|  10.0k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  10.0k|        }
 3295|  1.69k|        return unexpected(eof_error::eof);
 3296|  11.7k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2404|  11.7k|{
 2405|  11.7k|    auto it = read_code_unit(range);
 2406|  11.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.0k]
  |  |  ------------------
  ------------------
 2407|  1.69k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.69k|    }
 2409|       |
 2410|  20.1k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 20.1k, False: 10.0k]
  ------------------
 2411|  20.1k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 20.1k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  20.1k|    }
 2415|       |
 2416|  10.0k|    return unexpected(parse_error::error);
 2417|  10.0k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  11.7k|{
 1945|  11.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.0k]
  |  |  ------------------
  ------------------
 1946|  1.69k|        return unexpected(e);
 1947|  1.69k|    }
 1948|       |
 1949|  10.0k|    return ranges::next(range.begin());
 1950|  11.7k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  11.7k|{
  951|  11.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 10.0k]
  |  |  ------------------
  ------------------
  952|  1.69k|        return eof_error::eof;
  953|  1.69k|    }
  954|  10.0k|    return eof_error::good;
  955|  11.7k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  11.7k|{
  945|  11.7k|    return is_range_eof(r.begin(), r.end());
  946|  11.7k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|  1.62M|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|  1.62M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|  1.62M|        auto buf = make_contiguous_buffer(range);
 2224|  1.62M|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|  1.62M|        return ranges::next(range.begin(),
 2226|  1.62M|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|  1.62M|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  1.62M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.62M|                  ranges::sized_range<Range>) {
 1785|  1.62M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.62M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  1.62M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.62M|    {
 1589|  1.62M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|  1.62M|    {
 1676|  1.62M|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  1.62M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|  1.62M|    {
 1720|  1.62M|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|  1.62M|                                          std::basic_string<CharT>>) {
 1730|  1.62M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|  1.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|  1.62M|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  1.62M|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4164|   597k|    {
 4165|   597k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 67.6k, False: 530k]
  ------------------
 4166|  67.6k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  67.6k|        }
 4168|   530k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   597k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   860k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   860k|    else {
 2229|   860k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   860k|        return read_until_code_point(
 2241|   860k|            ranges::subrange{it, range.end()},
 2242|   860k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   860k|    }
 2244|   860k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   860k|        : m_fptr([](storage fn,
  743|   860k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   860k|              cvref<T> obj = *get<T>(fn);
  745|   860k|              if constexpr (std::is_void_v<R>) {
  746|   860k|                  obj(static_cast<decltype(args)>(args)...);
  747|   860k|              }
  748|   860k|              else {
  749|   860k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   860k|              }
  751|   860k|          }),
  752|   860k|          m_storage(std::addressof(f))
  753|   860k|    {
  754|   860k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.56M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.56M|              else {
  749|  1.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.56M|              }
  751|  1.56M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.56M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.56M|        else if constexpr (std::is_object_v<T>) {
  688|  1.56M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.56M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  1.56M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   860k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   860k|        {
  662|   860k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   860k|    {
 1676|   860k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   860k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   860k|    {
 1720|   860k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   860k|                                          std::basic_string<CharT>>) {
 1730|   860k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   860k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   860k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   860k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4164|   257k|    {
 4165|   257k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 1.02k, False: 256k]
  ------------------
 4166|  1.02k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  1.02k|        }
 4168|   256k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   257k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4164|   629k|    {
 4165|   629k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 71.4k, False: 557k]
  ------------------
 4166|  71.4k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  71.4k|        }
 4168|   557k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   629k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4164|   304k|    {
 4165|   304k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 1.07k, False: 302k]
  ------------------
 4166|  1.07k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  1.07k|        }
 4168|   302k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   304k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4164|   639k|    {
 4165|   639k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 74.4k, False: 564k]
  ------------------
 4166|  74.4k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  74.4k|        }
 4168|   564k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   639k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4164|   313k|    {
 4165|   313k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 1.17k, False: 311k]
  ------------------
 4166|  1.17k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  1.17k|        }
 4168|   311k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   313k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   280k|{
 5884|   280k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.97k, False: 276k]
  |  |  ------------------
  ------------------
 5885|  3.97k|        return unexpected(e);
 5886|  3.97k|    }
 5887|       |
 5888|   276k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 276k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   276k|    return skip_classic_whitespace(range);
 5893|   276k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5961|  90.0k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  90.0k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  90.0k|            auto rd = make_reader<T, char_type>();
 5967|  90.0k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  90.0k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  90.0k|    {
 5954|  90.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.32k, False: 88.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.32k|    }                                                  \
  |  |  |  | 3957|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  88.6k|                        .transform_error(make_eof_scan_error));
 5956|  88.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  90.0k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  88.6k|    {
 4238|  88.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  88.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  88.6k|        float_reader<CharT> rd{};
 4241|  88.6k|        return read_impl<Range>(
 4242|  88.6k|            range, rd,
 4243|  88.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  88.6k|                return r.read_source(SCN_FWD(args)...);
 4245|  88.6k|            },
 4246|  88.6k|            value);
 4247|  88.6k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3731|   578k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3717|   912k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  88.6k|        : m_fptr([](storage fn,
  743|  88.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.6k|              cvref<T> obj = *get<T>(fn);
  745|  88.6k|              if constexpr (std::is_void_v<R>) {
  746|  88.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.6k|              }
  748|  88.6k|              else {
  749|  88.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.6k|              }
  751|  88.6k|          }),
  752|  88.6k|          m_storage(std::addressof(f))
  753|  88.6k|    {
  754|  88.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  88.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.6k|              else {
  749|  88.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.6k|              }
  751|  88.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  88.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.6k|        else if constexpr (std::is_object_v<T>) {
  688|  88.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  88.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  88.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  88.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  88.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.6k|        {
  662|  88.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|  94.2k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  94.2k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  94.2k|            auto rd = make_reader<T, char_type>();
 5967|  94.2k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  94.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  94.2k|    {
 5954|  94.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  94.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  94.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  94.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.50k, False: 92.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.50k|    }                                                  \
  |  |  |  | 3957|  94.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  92.7k|                        .transform_error(make_eof_scan_error));
 5956|  92.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  94.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  92.7k|    {
 4238|  92.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  92.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  92.7k|        float_reader<CharT> rd{};
 4241|  92.7k|        return read_impl<Range>(
 4242|  92.7k|            range, rd,
 4243|  92.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  92.7k|                return r.read_source(SCN_FWD(args)...);
 4245|  92.7k|            },
 4246|  92.7k|            value);
 4247|  92.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  92.7k|        : m_fptr([](storage fn,
  743|  92.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.7k|              cvref<T> obj = *get<T>(fn);
  745|  92.7k|              if constexpr (std::is_void_v<R>) {
  746|  92.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.7k|              }
  748|  92.7k|              else {
  749|  92.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.7k|              }
  751|  92.7k|          }),
  752|  92.7k|          m_storage(std::addressof(f))
  753|  92.7k|    {
  754|  92.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  92.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  92.7k|              else {
  749|  92.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.7k|              }
  751|  92.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  92.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  92.7k|        else if constexpr (std::is_object_v<T>) {
  688|  92.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  92.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  92.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  92.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  92.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.7k|        {
  662|  92.7k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5961|  96.3k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  96.3k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  96.3k|            auto rd = make_reader<T, char_type>();
 5967|  96.3k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  96.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  96.3k|    {
 5954|  96.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.63k, False: 94.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.63k|    }                                                  \
  |  |  |  | 3957|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  94.7k|                        .transform_error(make_eof_scan_error));
 5956|  94.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  96.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  94.7k|    {
 4238|  94.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  94.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  94.7k|        float_reader<CharT> rd{};
 4241|  94.7k|        return read_impl<Range>(
 4242|  94.7k|            range, rd,
 4243|  94.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  94.7k|                return r.read_source(SCN_FWD(args)...);
 4245|  94.7k|            },
 4246|  94.7k|            value);
 4247|  94.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  94.7k|        : m_fptr([](storage fn,
  743|  94.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.7k|              cvref<T> obj = *get<T>(fn);
  745|  94.7k|              if constexpr (std::is_void_v<R>) {
  746|  94.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.7k|              }
  748|  94.7k|              else {
  749|  94.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.7k|              }
  751|  94.7k|          }),
  752|  94.7k|          m_storage(std::addressof(f))
  753|  94.7k|    {
  754|  94.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  94.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.7k|              else {
  749|  94.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.7k|              }
  751|  94.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.7k|        else if constexpr (std::is_object_v<T>) {
  688|  94.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  94.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  94.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  94.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.7k|        {
  662|  94.7k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|   306k|{
 5884|   306k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.23k, False: 302k]
  |  |  ------------------
  ------------------
 5885|  4.23k|        return unexpected(e);
 5886|  4.23k|    }
 5887|       |
 5888|   302k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 302k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   302k|    return skip_classic_whitespace(range);
 5893|   302k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|  97.6k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  97.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  97.6k|            auto rd = make_reader<T, char_type>();
 5971|  97.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 97.6k, False: 0]
  ------------------
 5972|  97.6k|                return impl(rd, range, value);
 5973|  97.6k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  97.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  97.6k|    {
 5954|  97.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  97.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  97.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  97.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  97.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.43k, False: 96.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.43k|    }                                                  \
  |  |  |  | 3957|  97.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  96.1k|                        .transform_error(make_eof_scan_error));
 5956|  96.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  97.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  96.1k|    {
 4238|  96.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  96.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  96.1k|        float_reader<CharT> rd{};
 4241|  96.1k|        return read_impl<Range>(
 4242|  96.1k|            range, rd,
 4243|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  96.1k|                return r.read_source(SCN_FWD(args)...);
 4245|  96.1k|            },
 4246|  96.1k|            value);
 4247|  96.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  96.1k|        : m_fptr([](storage fn,
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|  96.1k|              if constexpr (std::is_void_v<R>) {
  746|  96.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.1k|              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
  752|  96.1k|          m_storage(std::addressof(f))
  753|  96.1k|    {
  754|  96.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  96.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  96.1k|              else {
  749|  96.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.1k|              }
  751|  96.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  96.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  96.1k|        else if constexpr (std::is_object_v<T>) {
  688|  96.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  96.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  96.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  96.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  96.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  96.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  96.1k|        {
  662|  96.1k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|   103k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|   103k|            auto rd = make_reader<T, char_type>();
 5971|   103k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 103k, False: 0]
  ------------------
 5972|   103k|                return impl(rd, range, value);
 5973|   103k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|   103k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|   103k|    {
 5954|   103k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.62k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.62k|    }                                                  \
  |  |  |  | 3957|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|   102k|                        .transform_error(make_eof_scan_error));
 5956|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|   103k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|   102k|    {
 4238|   102k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|   102k|        float_reader<CharT> rd{};
 4241|   102k|        return read_impl<Range>(
 4242|   102k|            range, rd,
 4243|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|   102k|                return r.read_source(SCN_FWD(args)...);
 4245|   102k|            },
 4246|   102k|            value);
 4247|   102k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|   102k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|   105k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|   105k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|   105k|            auto rd = make_reader<T, char_type>();
 5971|   105k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 105k, False: 0]
  ------------------
 5972|   105k|                return impl(rd, range, value);
 5973|   105k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|   105k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|   105k|    {
 5954|   105k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.74k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.74k|    }                                                  \
  |  |  |  | 3957|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|   103k|                        .transform_error(make_eof_scan_error));
 5956|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|   105k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|   103k|    {
 4238|   103k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|   103k|        float_reader<CharT> rd{};
 4241|   103k|        return read_impl<Range>(
 4242|   103k|            range, rd,
 4243|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|   103k|                return r.read_source(SCN_FWD(args)...);
 4245|   103k|            },
 4246|   103k|            value);
 4247|   103k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|   103k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|   673k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   673k|    static_cast<    \
  |  | 1109|   673k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   673k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   673k|          m_current(m_range.begin())
 3020|   673k|    {
 3021|   673k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|  1.27M|    {
 3030|  1.27M|        return m_range.end();
 3031|  1.27M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|   600k|    {
 3045|   600k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   600k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   600k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   600k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   600k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 600k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   600k|        }
 3051|   600k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   600k|    static_cast<    \
  |  | 1109|   600k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   600k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   673k|    {
 3035|   673k|        return ranges::subrange{begin(), end()};
 3036|   673k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|   673k|    {
 6126|   673k|        const bool need_skipped_width =
 6127|   673k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 673k]
  |  Branch (6127:33): [True: 0, False: 673k]
  ------------------
 6128|   673k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   673k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 673k]
  ------------------
 6132|   673k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 673k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   673k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 673k, False: 0]
  |  Branch (6136:56): [True: 673k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   673k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 673k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|  1.33M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   673k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   673k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   673k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.5k, False: 661k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.5k|    }                                                  \
  |  |  |  | 3957|   673k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   661k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|  1.33M|                            make_eof_scan_error));
 6147|       |
 6148|  1.33M|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 661k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   661k|            return result_type{it, 0};
 6156|  1.33M|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   673k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|   590k|    {
 6168|   590k|        const bool need_skipped_width =
 6169|   590k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 590k]
  |  Branch (6169:33): [True: 0, False: 590k]
  ------------------
 6170|   590k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   590k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 590k]
  ------------------
 6173|   590k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 590k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   590k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 590k, False: 0]
  ------------------
 6182|   590k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 590k]
  ------------------
 6183|   590k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   590k|        return result_type{rng.begin(), 0};
 6207|   590k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6277|   218k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   218k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   218k|            auto rd = make_reader<T, char_type>();
 6283|   218k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   218k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 218k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   218k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   218k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   218k|    {
 6213|   218k|        const bool need_skipped_width =
 6214|   218k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 218k]
  |  Branch (6214:33): [True: 0, False: 218k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   218k|        auto it = rng.begin();
 6218|   218k|        std::ptrdiff_t prefix_width = 0;
 6219|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 218k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   218k|        else {
 6227|   218k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.51k, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.51k|    }                                                  \
  |  |  |  | 3957|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   214k|            std::tie(it, prefix_width) = prefix_result;
 6229|   214k|        }
 6230|   214k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   214k|        std::ptrdiff_t value_width = 0;
 6234|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 214k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   214k|        else {
 6250|   214k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 20.5k, False: 194k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  20.5k|    }                                                  \
  |  | 3957|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   194k|                                             specs, value, loc));
 6252|       |
 6253|   194k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 194k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   194k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   194k|        std::ptrdiff_t postfix_width = 0;
 6262|   194k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 191k, False: 3.09k]
  ------------------
 6263|   191k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 191k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   191k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   191k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   191k|                                 value_width));
 6267|   191k|            std::tie(it, postfix_width) = postfix_result;
 6268|   191k|        }
 6269|       |
 6270|   194k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   194k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 194k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   194k|            specs, prefix_width, value_width, postfix_width));
 6272|   194k|        return it;
 6273|   194k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|   225k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   225k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   225k|            auto rd = make_reader<T, char_type>();
 6283|   225k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   225k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   225k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   225k|    {
 6213|   225k|        const bool need_skipped_width =
 6214|   225k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 225k]
  |  Branch (6214:33): [True: 0, False: 225k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   225k|        auto it = rng.begin();
 6218|   225k|        std::ptrdiff_t prefix_width = 0;
 6219|   225k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 225k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   225k|        else {
 6227|   225k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.86k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.86k|    }                                                  \
  |  |  |  | 3957|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   222k|            std::tie(it, prefix_width) = prefix_result;
 6229|   222k|        }
 6230|   222k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   222k|        std::ptrdiff_t value_width = 0;
 6234|   222k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 222k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   222k|        else {
 6250|   222k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 20.2k, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  20.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  20.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  20.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  20.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  20.2k|    }                                                  \
  |  | 3957|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   201k|                                             specs, value, loc));
 6252|       |
 6253|   201k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 201k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   201k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   201k|        std::ptrdiff_t postfix_width = 0;
 6262|   201k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 198k, False: 3.41k]
  ------------------
 6263|   198k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   198k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   198k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   198k|                                 value_width));
 6267|   198k|            std::tie(it, postfix_width) = postfix_result;
 6268|   198k|        }
 6269|       |
 6270|   201k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   201k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   201k|            specs, prefix_width, value_width, postfix_width));
 6272|   201k|        return it;
 6273|   201k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6277|   228k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   228k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   228k|            auto rd = make_reader<T, char_type>();
 6283|   228k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   228k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 228k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   228k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   228k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   228k|    {
 6213|   228k|        const bool need_skipped_width =
 6214|   228k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 228k]
  |  Branch (6214:33): [True: 0, False: 228k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   228k|        auto it = rng.begin();
 6218|   228k|        std::ptrdiff_t prefix_width = 0;
 6219|   228k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 228k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   228k|        else {
 6227|   228k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4.12k, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  4.12k|    }                                                  \
  |  |  |  | 3957|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   224k|            std::tie(it, prefix_width) = prefix_result;
 6229|   224k|        }
 6230|   224k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   224k|        std::ptrdiff_t value_width = 0;
 6234|   224k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 224k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   224k|        else {
 6250|   224k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 19.9k, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  19.9k|    }                                                  \
  |  | 3957|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   204k|                                             specs, value, loc));
 6252|       |
 6253|   204k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 204k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   204k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   204k|        std::ptrdiff_t postfix_width = 0;
 6262|   204k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 201k, False: 3.62k]
  ------------------
 6263|   201k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 201k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   201k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   201k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   201k|                                 value_width));
 6267|   201k|            std::tie(it, postfix_width) = postfix_result;
 6268|   201k|        }
 6269|       |
 6270|   204k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   204k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 204k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   204k|            specs, prefix_width, value_width, postfix_width));
 6272|   204k|        return it;
 6273|   204k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   168k|{
 5884|   168k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 663, False: 167k]
  |  |  ------------------
  ------------------
 5885|    663|        return unexpected(e);
 5886|    663|    }
 5887|       |
 5888|   167k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 167k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   167k|    return skip_classic_whitespace(range);
 5893|   167k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5961|  48.8k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  48.8k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  48.8k|            auto rd = make_reader<T, char_type>();
 5967|  48.8k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  48.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  48.8k|    {
 5954|  48.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 357, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    357|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    357|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    357|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    357|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    357|    }                                                  \
  |  |  |  | 3957|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  48.4k|                        .transform_error(make_eof_scan_error));
 5956|  48.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  48.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  48.4k|    {
 4238|  48.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  48.4k|        float_reader<CharT> rd{};
 4241|  48.4k|        return read_impl<Range>(
 4242|  48.4k|            range, rd,
 4243|  48.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.4k|                return r.read_source(SCN_FWD(args)...);
 4245|  48.4k|            },
 4246|  48.4k|            value);
 4247|  48.4k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3731|   333k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  48.4k|        : m_fptr([](storage fn,
  743|  48.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.4k|              cvref<T> obj = *get<T>(fn);
  745|  48.4k|              if constexpr (std::is_void_v<R>) {
  746|  48.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.4k|              }
  748|  48.4k|              else {
  749|  48.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.4k|              }
  751|  48.4k|          }),
  752|  48.4k|          m_storage(std::addressof(f))
  753|  48.4k|    {
  754|  48.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  48.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.4k|              else {
  749|  48.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.4k|              }
  751|  48.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.4k|        else if constexpr (std::is_object_v<T>) {
  688|  48.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  48.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  48.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  48.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.4k|        {
  662|  48.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|  58.7k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  58.7k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  58.7k|            auto rd = make_reader<T, char_type>();
 5967|  58.7k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  58.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  58.7k|    {
 5954|  58.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  58.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  58.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  58.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 414, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    414|    }                                                  \
  |  |  |  | 3957|  58.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  58.3k|                        .transform_error(make_eof_scan_error));
 5956|  58.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  58.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  58.3k|    {
 4238|  58.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  58.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  58.3k|        float_reader<CharT> rd{};
 4241|  58.3k|        return read_impl<Range>(
 4242|  58.3k|            range, rd,
 4243|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  58.3k|                return r.read_source(SCN_FWD(args)...);
 4245|  58.3k|            },
 4246|  58.3k|            value);
 4247|  58.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  58.3k|        : m_fptr([](storage fn,
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
  752|  58.3k|          m_storage(std::addressof(f))
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  58.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  58.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5961|  60.5k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  60.5k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  60.5k|            auto rd = make_reader<T, char_type>();
 5967|  60.5k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  60.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  60.5k|    {
 5954|  60.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 459, False: 60.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    459|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    459|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    459|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    459|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    459|    }                                                  \
  |  |  |  | 3957|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  60.1k|                        .transform_error(make_eof_scan_error));
 5956|  60.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  60.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  60.1k|    {
 4238|  60.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  60.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  60.1k|        float_reader<CharT> rd{};
 4241|  60.1k|        return read_impl<Range>(
 4242|  60.1k|            range, rd,
 4243|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  60.1k|                return r.read_source(SCN_FWD(args)...);
 4245|  60.1k|            },
 4246|  60.1k|            value);
 4247|  60.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  60.1k|        : m_fptr([](storage fn,
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|  60.1k|              if constexpr (std::is_void_v<R>) {
  746|  60.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.1k|              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
  752|  60.1k|          m_storage(std::addressof(f))
  753|  60.1k|    {
  754|  60.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  60.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.1k|              else {
  749|  60.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.1k|              }
  751|  60.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.1k|        else if constexpr (std::is_object_v<T>) {
  688|  60.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  60.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  60.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  60.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  60.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.1k|        {
  662|  60.1k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   457k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   457k|    static_cast<    \
  |  | 1109|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   457k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   457k|          m_current(m_range.begin())
 3020|   457k|    {
 3021|   457k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   770k|    {
 3030|   770k|        return m_range.end();
 3031|   770k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   312k|    {
 3045|   312k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   312k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   312k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   312k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   312k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 312k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   312k|        }
 3051|   312k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   312k|    static_cast<    \
  |  | 1109|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   312k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   457k|    {
 3035|   457k|        return ranges::subrange{begin(), end()};
 3036|   457k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|   457k|    {
 6126|   457k|        const bool need_skipped_width =
 6127|   457k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 457k]
  |  Branch (6127:33): [True: 0, False: 457k]
  ------------------
 6128|   457k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   457k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 457k]
  ------------------
 6132|   457k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 457k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   457k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 457k, False: 0]
  |  Branch (6136:56): [True: 457k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   457k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 457k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   911k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   457k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   457k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   457k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 3.51k, False: 453k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  3.51k|    }                                                  \
  |  |  |  | 3957|   457k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   911k|                            make_eof_scan_error));
 6147|       |
 6148|   911k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 453k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   453k|            return result_type{it, 0};
 6156|   911k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   457k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|   311k|    {
 6168|   311k|        const bool need_skipped_width =
 6169|   311k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 311k]
  |  Branch (6169:33): [True: 0, False: 311k]
  ------------------
 6170|   311k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   311k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 311k]
  ------------------
 6173|   311k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 311k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   311k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 311k, False: 0]
  ------------------
 6182|   311k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 311k]
  ------------------
 6183|   311k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   311k|        return result_type{rng.begin(), 0};
 6207|   311k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6277|   142k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   142k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   142k|            auto rd = make_reader<T, char_type>();
 6283|   142k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   142k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   142k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   142k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   142k|    {
 6213|   142k|        const bool need_skipped_width =
 6214|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 142k]
  |  Branch (6214:33): [True: 0, False: 142k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   142k|        auto it = rng.begin();
 6218|   142k|        std::ptrdiff_t prefix_width = 0;
 6219|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 142k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   142k|        else {
 6227|   142k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.08k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.08k|    }                                                  \
  |  |  |  | 3957|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   141k|            std::tie(it, prefix_width) = prefix_result;
 6229|   141k|        }
 6230|   141k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   141k|        std::ptrdiff_t value_width = 0;
 6234|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 141k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   141k|        else {
 6250|   141k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 47.0k, False: 94.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  47.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  47.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  47.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  47.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  47.0k|    }                                                  \
  |  | 3957|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  94.6k|                                             specs, value, loc));
 6252|       |
 6253|  94.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 94.6k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  94.6k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  94.6k|        std::ptrdiff_t postfix_width = 0;
 6262|  94.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 94.0k, False: 538]
  ------------------
 6263|  94.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  94.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  94.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  94.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  94.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  94.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  94.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  94.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  94.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  94.0k|                                 value_width));
 6267|  94.0k|            std::tie(it, postfix_width) = postfix_result;
 6268|  94.0k|        }
 6269|       |
 6270|  94.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  94.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  94.6k|            specs, prefix_width, value_width, postfix_width));
 6272|  94.6k|        return it;
 6273|  94.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|   155k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   155k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   155k|            auto rd = make_reader<T, char_type>();
 6283|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   155k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   155k|    {
 6213|   155k|        const bool need_skipped_width =
 6214|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 155k]
  |  Branch (6214:33): [True: 0, False: 155k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   155k|        auto it = rng.begin();
 6218|   155k|        std::ptrdiff_t prefix_width = 0;
 6219|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 155k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   155k|        else {
 6227|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.17k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.17k|    }                                                  \
  |  |  |  | 3957|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   154k|            std::tie(it, prefix_width) = prefix_result;
 6229|   154k|        }
 6230|   154k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   154k|        std::ptrdiff_t value_width = 0;
 6234|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 154k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   154k|        else {
 6250|   154k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 46.9k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  46.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  46.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  46.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  46.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  46.9k|    }                                                  \
  |  | 3957|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   107k|                                             specs, value, loc));
 6252|       |
 6253|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 107k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   107k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   107k|        std::ptrdiff_t postfix_width = 0;
 6262|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 107k, False: 594]
  ------------------
 6263|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   107k|                                 value_width));
 6267|   107k|            std::tie(it, postfix_width) = postfix_result;
 6268|   107k|        }
 6269|       |
 6270|   107k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   107k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   107k|            specs, prefix_width, value_width, postfix_width));
 6272|   107k|        return it;
 6273|   107k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6277|   158k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   158k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   158k|            auto rd = make_reader<T, char_type>();
 6283|   158k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   158k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 158k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   158k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   158k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   158k|    {
 6213|   158k|        const bool need_skipped_width =
 6214|   158k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 158k]
  |  Branch (6214:33): [True: 0, False: 158k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   158k|        auto it = rng.begin();
 6218|   158k|        std::ptrdiff_t prefix_width = 0;
 6219|   158k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 158k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   158k|        else {
 6227|   158k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.25k, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.25k|    }                                                  \
  |  |  |  | 3957|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   157k|            std::tie(it, prefix_width) = prefix_result;
 6229|   157k|        }
 6230|   157k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   157k|        std::ptrdiff_t value_width = 0;
 6234|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 157k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   157k|        else {
 6250|   157k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 46.8k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  46.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  46.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  46.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  46.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  46.8k|    }                                                  \
  |  | 3957|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   110k|                                             specs, value, loc));
 6252|       |
 6253|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 110k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   110k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   110k|        std::ptrdiff_t postfix_width = 0;
 6262|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 109k, False: 642]
  ------------------
 6263|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   109k|                                 value_width));
 6267|   109k|            std::tie(it, postfix_width) = postfix_result;
 6268|   109k|        }
 6269|       |
 6270|   110k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   110k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   110k|            specs, prefix_width, value_width, postfix_width));
 6272|   110k|        return it;
 6273|   110k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|   167k|{
 5884|   167k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 663, False: 167k]
  |  |  ------------------
  ------------------
 5885|    663|        return unexpected(e);
 5886|    663|    }
 5887|       |
 5888|   167k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 167k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   167k|    return skip_classic_whitespace(range);
 5893|   167k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  48.7k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  48.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  48.7k|            auto rd = make_reader<T, char_type>();
 5971|  48.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 48.7k, False: 0]
  ------------------
 5972|  48.7k|                return impl(rd, range, value);
 5973|  48.7k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  48.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  48.7k|    {
 5954|  48.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 357, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    357|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    357|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    357|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    357|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    357|    }                                                  \
  |  |  |  | 3957|  48.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  48.4k|                        .transform_error(make_eof_scan_error));
 5956|  48.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  48.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  48.4k|    {
 4238|  48.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  48.4k|        float_reader<CharT> rd{};
 4241|  48.4k|        return read_impl<Range>(
 4242|  48.4k|            range, rd,
 4243|  48.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.4k|                return r.read_source(SCN_FWD(args)...);
 4245|  48.4k|            },
 4246|  48.4k|            value);
 4247|  48.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  48.4k|        : m_fptr([](storage fn,
  743|  48.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.4k|              cvref<T> obj = *get<T>(fn);
  745|  48.4k|              if constexpr (std::is_void_v<R>) {
  746|  48.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.4k|              }
  748|  48.4k|              else {
  749|  48.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.4k|              }
  751|  48.4k|          }),
  752|  48.4k|          m_storage(std::addressof(f))
  753|  48.4k|    {
  754|  48.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  48.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.4k|              else {
  749|  48.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.4k|              }
  751|  48.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.4k|        else if constexpr (std::is_object_v<T>) {
  688|  48.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  48.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  48.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  48.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.4k|        {
  662|  48.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  58.6k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  58.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  58.6k|            auto rd = make_reader<T, char_type>();
 5971|  58.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 58.6k, False: 0]
  ------------------
 5972|  58.6k|                return impl(rd, range, value);
 5973|  58.6k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  58.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  58.6k|    {
 5954|  58.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  58.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  58.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  58.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 414, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    414|    }                                                  \
  |  |  |  | 3957|  58.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  58.2k|                        .transform_error(make_eof_scan_error));
 5956|  58.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  58.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  58.2k|    {
 4238|  58.2k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  58.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  58.2k|        float_reader<CharT> rd{};
 4241|  58.2k|        return read_impl<Range>(
 4242|  58.2k|            range, rd,
 4243|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  58.2k|                return r.read_source(SCN_FWD(args)...);
 4245|  58.2k|            },
 4246|  58.2k|            value);
 4247|  58.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  58.2k|        : m_fptr([](storage fn,
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|  58.2k|              if constexpr (std::is_void_v<R>) {
  746|  58.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.2k|              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
  752|  58.2k|          m_storage(std::addressof(f))
  753|  58.2k|    {
  754|  58.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.2k|        else if constexpr (std::is_object_v<T>) {
  688|  58.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  58.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  58.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  58.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.2k|        {
  662|  58.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  60.5k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  60.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  60.5k|            auto rd = make_reader<T, char_type>();
 5971|  60.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 60.5k, False: 0]
  ------------------
 5972|  60.5k|                return impl(rd, range, value);
 5973|  60.5k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  60.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  60.5k|    {
 5954|  60.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  60.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  60.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  60.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  60.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 459, False: 60.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    459|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    459|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    459|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    459|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    459|    }                                                  \
  |  |  |  | 3957|  60.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  60.0k|                        .transform_error(make_eof_scan_error));
 5956|  60.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  60.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  60.0k|    {
 4238|  60.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  60.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  60.0k|        float_reader<CharT> rd{};
 4241|  60.0k|        return read_impl<Range>(
 4242|  60.0k|            range, rd,
 4243|  60.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  60.0k|                return r.read_source(SCN_FWD(args)...);
 4245|  60.0k|            },
 4246|  60.0k|            value);
 4247|  60.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  60.0k|        : m_fptr([](storage fn,
  743|  60.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.0k|              cvref<T> obj = *get<T>(fn);
  745|  60.0k|              if constexpr (std::is_void_v<R>) {
  746|  60.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.0k|              }
  748|  60.0k|              else {
  749|  60.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.0k|              }
  751|  60.0k|          }),
  752|  60.0k|          m_storage(std::addressof(f))
  753|  60.0k|    {
  754|  60.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  60.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.0k|              else {
  749|  60.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.0k|              }
  751|  60.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.0k|        else if constexpr (std::is_object_v<T>) {
  688|  60.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  60.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  60.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  60.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  60.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  60.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.0k|        {
  662|  60.0k|        }

LLVMFuzzerTestOneInput:
   54|  2.40k|{
   55|  2.40k|    scn::fuzz::run(data, size);
   56|  2.40k|    return 0;
   57|  2.40k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.40k|{
   33|  2.40k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.40k]
  |  Branch (33:35): [True: 0, False: 2.40k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.40k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.40k|    const auto& f =
   40|  2.40k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.40k|    do_basic_run(sv, f);
   42|       |
   43|  2.40k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.40k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.40k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.40k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.40k, False: 0]
  ------------------
   47|  2.40k|        do_basic_run(wsv_transcode, wf);
   48|  2.40k|    }
   49|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.40k|{
   25|  2.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.40k|{
   25|  2.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.81k|{
   25|  4.81k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.81k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.81k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.81k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.81k|{
   25|  4.81k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.81k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.81k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.81k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.40k|{
   53|  2.40k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  2.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.40k|    string_buffer.resize(size);
   57|  2.40k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.40k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.40k|    const auto wsv_reinterpret_size =
   62|  2.40k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.34k]
  ------------------
   63|  2.40k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.40k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.40k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.40k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.40k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.40k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.40k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.40k|{
  123|  2.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.40k|    buf.resize(sizeof...(Args));
  126|  2.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.40k|    return buf;
  128|  2.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.40k|{
  109|  2.40k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.40k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.40k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.40k|{
  186|  2.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.40k|                                   format_strings);
  189|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   139k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   139k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   139k|            auto result = scn::scan<T>(
  140|   139k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   139k|                scn::runtime_format(f));
  142|   139k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 124k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   124k|            it = result->begin();
  146|   124k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   139k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   139k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   139k|            auto result = scn::scan<T>(
  155|   139k|                global_locale,
  156|   139k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   139k|                scn::runtime_format(f));
  158|   139k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 124k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   124k|            it = result->begin();
  162|   124k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  30.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  30.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  30.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  30.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  30.0k|            auto result = scn::scan_value<T>(
  171|  30.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  30.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 27.5k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  27.5k|            it = result->begin();
  176|  27.5k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   144k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   144k|            auto result = scn::scan<T>(
  140|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   144k|                scn::runtime_format(f));
  142|   144k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 129k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   129k|            it = result->begin();
  146|   129k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   144k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   144k|            auto result = scn::scan<T>(
  155|   144k|                global_locale,
  156|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   144k|                scn::runtime_format(f));
  158|   144k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 129k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   129k|            it = result->begin();
  162|   129k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  31.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  31.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.4k|            auto result = scn::scan_value<T>(
  171|  31.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 29.0k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  29.0k|            it = result->begin();
  176|  29.0k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   146k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   146k|            auto result = scn::scan<T>(
  140|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   146k|                scn::runtime_format(f));
  142|   146k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 132k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   132k|            it = result->begin();
  146|   132k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   146k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   146k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   146k|            auto result = scn::scan<T>(
  155|   146k|                global_locale,
  156|   146k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   146k|                scn::runtime_format(f));
  158|   146k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 132k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   132k|            it = result->begin();
  162|   132k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  32.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.1k|            auto result = scn::scan_value<T>(
  171|  32.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 29.7k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  29.7k|            it = result->begin();
  176|  29.7k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   159k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   159k|            auto result = scn::scan<T>(
  140|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   159k|                scn::runtime_format(f));
  142|   159k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 145k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   145k|            it = result->begin();
  146|   145k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   159k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   159k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   159k|            auto result = scn::scan<T>(
  155|   159k|                global_locale,
  156|   159k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   159k|                scn::runtime_format(f));
  158|   159k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 145k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   145k|            it = result->begin();
  162|   145k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  32.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  32.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.5k|            auto result = scn::scan_value<T>(
  171|  32.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 30.1k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  30.1k|            it = result->begin();
  176|  30.1k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   168k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   168k|            auto result = scn::scan<T>(
  140|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   168k|                scn::runtime_format(f));
  142|   168k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 154k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   154k|            it = result->begin();
  146|   154k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   168k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   168k|            auto result = scn::scan<T>(
  155|   168k|                global_locale,
  156|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   168k|                scn::runtime_format(f));
  158|   168k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 154k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   154k|            it = result->begin();
  162|   154k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  34.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.6k|            auto result = scn::scan_value<T>(
  171|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 32.2k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  32.2k|            it = result->begin();
  176|  32.2k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.40k|{
  134|       |    // Regular scan
  135|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.4k, False: 2.40k]
  ------------------
  136|  14.4k|        auto it = scn::ranges::begin(source);
  137|   170k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   170k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   170k|            auto result = scn::scan<T>(
  140|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   170k|                scn::runtime_format(f));
  142|   170k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.4k, False: 156k]
  ------------------
  143|  14.4k|                break;
  144|  14.4k|            }
  145|   156k|            it = result->begin();
  146|   156k|        }
  147|  14.4k|    }
  148|       |
  149|       |    // scan localized
  150|  14.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.4k, False: 2.40k]
  ------------------
  151|  14.4k|        auto it = scn::ranges::begin(source);
  152|   170k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   170k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   170k|            auto result = scn::scan<T>(
  155|   170k|                global_locale,
  156|   170k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   170k|                scn::runtime_format(f));
  158|   170k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.4k, False: 156k]
  ------------------
  159|  14.4k|                break;
  160|  14.4k|            }
  161|   156k|            it = result->begin();
  162|   156k|        }
  163|  14.4k|    }
  164|       |
  165|       |    // scan_value
  166|  2.40k|    {
  167|  2.40k|        auto it = scn::ranges::begin(source);
  168|  35.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  35.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  35.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  35.1k|            auto result = scn::scan_value<T>(
  171|  35.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  35.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.40k, False: 32.7k]
  ------------------
  173|  2.40k|                break;
  174|  2.40k|            }
  175|  32.7k|            it = result->begin();
  176|  32.7k|        }
  177|  2.40k|    }
  178|  2.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.40k|{
   91|  2.40k|    using char_type = ranges::range_value_t<Source>;
   92|  2.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.40k|    deque.clear();
   94|  2.40k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.40k|              std::back_inserter(deque));
   96|  2.40k|    return deque;
   97|  2.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.40k|{
   80|  2.40k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.40k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.40k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.40k|{
  123|  2.40k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.40k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.40k|    buf.resize(sizeof...(Args));
  126|  2.40k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.40k|    return buf;
  128|  2.40k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.40k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.40k|    else {
  113|  2.40k|        return wformat_string_view_buffer;
  114|  2.40k|    }
  115|  2.40k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.81k|{
  186|  4.81k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.81k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.81k|                                   format_strings);
  189|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  87.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  87.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  87.6k|            auto result = scn::scan<T>(
  140|  87.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  87.6k|                scn::runtime_format(f));
  142|  87.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 58.7k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  58.7k|            it = result->begin();
  146|  58.7k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  87.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  87.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  87.6k|            auto result = scn::scan<T>(
  155|  87.6k|                global_locale,
  156|  87.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.6k|                scn::runtime_format(f));
  158|  87.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 58.7k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  58.7k|            it = result->begin();
  162|  58.7k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 11.4k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  11.4k|            it = result->begin();
  176|  11.4k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  97.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.5k|            auto result = scn::scan<T>(
  140|  97.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.5k|                scn::runtime_format(f));
  142|  97.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 68.6k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  68.6k|            it = result->begin();
  146|  68.6k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  97.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.5k|            auto result = scn::scan<T>(
  155|  97.5k|                global_locale,
  156|  97.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.5k|                scn::runtime_format(f));
  158|  97.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 68.6k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  68.6k|            it = result->begin();
  162|  68.6k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 14.7k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  14.7k|            it = result->begin();
  176|  14.7k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  99.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  99.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  99.4k|            auto result = scn::scan<T>(
  140|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  99.4k|                scn::runtime_format(f));
  142|  99.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 70.6k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  70.6k|            it = result->begin();
  146|  70.6k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  99.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  99.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  99.4k|            auto result = scn::scan<T>(
  155|  99.4k|                global_locale,
  156|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  99.4k|                scn::runtime_format(f));
  158|  99.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 70.6k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  70.6k|            it = result->begin();
  162|  70.6k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  20.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.1k|            auto result = scn::scan_value<T>(
  171|  20.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 15.3k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  15.3k|            it = result->begin();
  176|  15.3k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  87.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  87.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  87.5k|            auto result = scn::scan<T>(
  140|  87.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  87.5k|                scn::runtime_format(f));
  142|  87.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 58.7k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  58.7k|            it = result->begin();
  146|  58.7k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  87.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  87.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  87.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  87.5k|            auto result = scn::scan<T>(
  155|  87.5k|                global_locale,
  156|  87.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.5k|                scn::runtime_format(f));
  158|  87.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 58.7k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  58.7k|            it = result->begin();
  162|  58.7k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 11.4k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  11.4k|            it = result->begin();
  176|  11.4k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  97.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.4k|            auto result = scn::scan<T>(
  140|  97.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.4k|                scn::runtime_format(f));
  142|  97.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 68.6k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  68.6k|            it = result->begin();
  146|  68.6k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  97.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.4k|            auto result = scn::scan<T>(
  155|  97.4k|                global_locale,
  156|  97.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.4k|                scn::runtime_format(f));
  158|  97.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 68.6k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  68.6k|            it = result->begin();
  162|  68.6k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 14.7k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  14.7k|            it = result->begin();
  176|  14.7k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.81k|{
  134|       |    // Regular scan
  135|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.8k, False: 4.81k]
  ------------------
  136|  28.8k|        auto it = scn::ranges::begin(source);
  137|  99.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  99.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  99.4k|            auto result = scn::scan<T>(
  140|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  99.4k|                scn::runtime_format(f));
  142|  99.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.8k, False: 70.5k]
  ------------------
  143|  28.8k|                break;
  144|  28.8k|            }
  145|  70.5k|            it = result->begin();
  146|  70.5k|        }
  147|  28.8k|    }
  148|       |
  149|       |    // scan localized
  150|  28.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.8k, False: 4.81k]
  ------------------
  151|  28.8k|        auto it = scn::ranges::begin(source);
  152|  99.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  99.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  99.4k|            auto result = scn::scan<T>(
  155|  99.4k|                global_locale,
  156|  99.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  99.4k|                scn::runtime_format(f));
  158|  99.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.8k, False: 70.5k]
  ------------------
  159|  28.8k|                break;
  160|  28.8k|            }
  161|  70.5k|            it = result->begin();
  162|  70.5k|        }
  163|  28.8k|    }
  164|       |
  165|       |    // scan_value
  166|  4.81k|    {
  167|  4.81k|        auto it = scn::ranges::begin(source);
  168|  20.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  20.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  20.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.1k|            auto result = scn::scan_value<T>(
  171|  20.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.81k, False: 15.3k]
  ------------------
  173|  4.81k|                break;
  174|  4.81k|            }
  175|  15.3k|            it = result->begin();
  176|  15.3k|        }
  177|  4.81k|    }
  178|  4.81k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.81k|{
   91|  4.81k|    using char_type = ranges::range_value_t<Source>;
   92|  4.81k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.81k|    deque.clear();
   94|  4.81k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.81k|              std::back_inserter(deque));
   96|  4.81k|    return deque;
   97|  4.81k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.81k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.81k|    else {
   84|  4.81k|        return wnoncontiguous_buffer;
   85|  4.81k|    }
   86|  4.81k|}

